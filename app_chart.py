from flask import Flask, jsonify, request, render_template, redirect, url_for, flash
from flask_sqlalchemy import SQLAlchemy
from experta import KnowledgeEngine, Rule, Fact
import yfinance as yf

app = Flask(__name__)

@app.route('/')
def index():
    # Menampilkan halaman utama
    return render_template('index.html')

@app.route('/about')
def about():
    # Menampilkan halaman utama
    return render_template('about.html')

@app.route('/contact', methods=['GET', 'POST'])
def contact():
    if request.method == 'POST':
        name = request.form['name']
        email = request.form['email']
        message_content = request.form['message']

        # Buat objek pesan baru dan simpan ke tabel contact_messages
        new_message = ContactMessage(name=name, email=email, message=message_content)
        db.session.add(new_message)
        db.session.commit()

        # Tampilkan pesan terima kasih
        flash('Terima kasih atas pesan Anda! Kami akan menghubungi Anda dalam waktu 24 jam.', 'success')
        return redirect(url_for('contact'))  # Kembali ke halaman kontak

    return render_template('contact.html')

@app.route('/services')
def services():
    # Menampilkan halaman utama
    return render_template('services.html')

@app.route('/grafik')
def grafik():
    # Menampilkan halaman utama
    return render_template('grafik.html')

@app.route('/seputar_saham')
def seputar_saham():
    # Menampilkan halaman utama
    return render_template('seputar_saham.html')

from flask import render_template
import yfinance as yf

@app.route('/fundamental')
def fundamental():
    stock_symbols = ['BBCA.JK', 'ASII.JK', 'UNVR.JK', 'TLKM.JK', 'BBNI.JK', 'HMSP.JK', 'INDF.JK', 'MNCTV.JK', 'BBRI.JK', 'PGAS.JK']
    
    stock_data = {}

    for symbol in stock_symbols:
        stock = yf.Ticker(symbol)
        try:
            data = stock.get_info()  # Gunakan get_info() daripada .info langsung
            stock_data[symbol] = {
                'PBV': data.get('priceToBook'),
                'PER': data.get('trailingPE'),
                'ROE': data.get('returnOnEquity'),
                'Net Income': data.get('netIncomeToCommon'),
                'DER': data.get('debtToEquity'),
                'ROA': data.get('returnOnAssets'),
            }
        except Exception as e:
            stock_data[symbol] = {
                'PBV': 'Error',
                'PER': 'Error',
                'ROE': 'Error',
                'Net Income': 'Error',
                'DER': 'Error',
                'ROA': 'Error',
                'Error Message': str(e)
            }

    return render_template('fundamental.html', stock_data=stock_data)


@app.route('/ihsg-data', methods=['GET'])
def ihsg_data():
    # Mengambil parameter rentang waktu dan interval dari query string
    period = request.args.get('range', '1d')  # Default '1d' jika tidak ada parameter
    interval = request.args.get('interval', '1m')  # Default '1m' jika tidak ada parameter

    # Mengambil data IHSG dengan yfinance
    ihsg = yf.Ticker("^JKSE")
    hist = ihsg.history(period=period, interval=interval)

   # Menghitung persentase perubahan
    if not hist.empty:
        initial_price = hist['Close'].iloc[0]  # Harga penutupan pertama dengan iloc
        final_price = hist['Close'].iloc[-1]  # Harga penutupan terakhir dengan iloc
        percentage_change = ((final_price - initial_price) / initial_price) * 100  # Persentase perubahan
    else:
        percentage_change = None  # Jika tidak ada data

    data = {
        "time": hist.index.strftime('%Y-%m-%d %H:%M:%S').tolist(),
        "close": hist['Close'].tolist(),
        "percentage_change": percentage_change  # Tambahkan persentase perubahan ke data
    }

    return jsonify(data)

# Konfigurasi koneksi ke database MySQL
app.config['SQLALCHEMY_DATABASE_URI'] = 'mysql+pymysql://root:@localhost/stock_recommendation'
app.secret_key = 'yudaganteng'  # Ganti dengan kunci rahasia yang unik dan aman
app.config['SQLALCHEMY_TRACK_MODIFICATIONS'] = False

# Inisialisasi SQLAlchemy
db = SQLAlchemy(app)

class ContactMessage(db.Model):
    __tablename__ = 'contact_messages'
    id = db.Column(db.Integer, primary_key=True)
    name = db.Column(db.String(100), nullable=False)
    email = db.Column(db.String(100), nullable=False)
    message = db.Column(db.Text, nullable=False)
    created_at = db.Column(db.DateTime, default=db.func.current_timestamp())

# Model database untuk menyimpan data rekomendasi saham
class StockRecommendation(db.Model):
    __tablename__ = 'recommendations'
    id = db.Column(db.Integer, primary_key=True)
    pbv = db.Column(db.Float, nullable=False)
    per = db.Column(db.Float, nullable=True)  # Mengizinkan NULL
    roe = db.Column(db.Float, nullable=True)  # Mengizinkan NULL
    net_income = db.Column(db.Float, nullable=True)  # Kolom baru, NULL
    der = db.Column(db.Float, nullable=True)         # Kolom baru, NULL
    roa = db.Column(db.Float, nullable=True)         # Kolom baru, NULL
    recommendation = db.Column(db.String(50), nullable=False)
    likes = db.Column(db.Integer, default=0)  # Kolom untuk menyimpan jumlah like

# Model database untuk menyimpan data analisis teknikal
class TechnicalAnalysis(db.Model):
    __tablename__ = 'technical_analysis'
    id = db.Column(db.Integer, primary_key=True)
    moving_average = db.Column(db.Float, nullable=True)
    rsi = db.Column(db.Float, nullable=True)
    resistance = db.Column(db.String, nullable=True)
    support = db.Column(db.String, nullable=True)
    supply_demand = db.Column(db.String, nullable=True)
    net_foreign_inflow = db.Column(db.String, nullable=True)
    recommendation = db.Column(db.String(100), nullable=False)  # Kolom rekomendasi
    likes = db.Column(db.Integer, default=0)  # Kolom untuk menyimpan jumlah like

# Model database untuk menyimpan data analisis IPO
class IPOAnalysis(db.Model):
    __tablename__ = 'ipo_analysis'
    id = db.Column(db.Integer, primary_key=True)
    underwriter = db.Column(db.String(100), nullable=False)
    net_income = db.Column(db.Float, nullable=True)
    per = db.Column(db.Float, nullable=True)
    der = db.Column(db.Float, nullable=True)
    roa = db.Column(db.Float, nullable=True)
    roe = db.Column(db.Float, nullable=True)
    warrant = db.Column(db.String(100), nullable=False)
    recommendation = db.Column(db.String(100), nullable=False)  # Kolom rekomendasi
    likes = db.Column(db.Integer, default=0)  # Kolom untuk menyimpan jumlah like

@app.route('/like/<int:id>', methods=['POST'])
def like_recommendation(id):
    recommendation = StockRecommendation.query.get(id)  # Mengambil rekomendasi berdasarkan ID
    if recommendation:
        recommendation.likes += 1  # Menambah jumlah likes
        db.session.commit()  # Menyimpan perubahan ke database
    return redirect(url_for('history'))  # Mengarahkan kembali ke halaman riwayat

class StockRecommendationEngine(KnowledgeEngine):

    # Aturan untuk hanya PER
    @Rule(Fact(pb_valued='low'),Fact(per_valued='low'))
    def rule_fundamental_1(self):
        self.declare(Fact(recommendation='PBV rendah PER rendah, pertimbangkan untuk membeli.'))

    @Rule(Fact(pb_valued='low'),Fact(per_valued='high'))
    def rule_fundamental_2(self):
        self.declare(Fact(recommendation='PBV rendah PER tinggi, mohon tambahkan parameter.'))

    @Rule(Fact(pb_valued='high'),Fact(per_valued='low'))
    def rule_fundamental_3(self):
        self.declare(Fact(recommendation='PBV tinggi PER rendah, mohon masukkan parameter net income agar sistem dapat membaca kondisi perusahaan.'))

    @Rule(Fact(pb_valued='high'),Fact(per_valued='high'))
    def rule_fundamental_4(self):
        self.declare(Fact(recommendation='PBV tinggi PER tinggi, valuasi perusahaan terlalu mahal.'))

    @Rule(Fact(pb_valued='low'),Fact(roe_valued='low'))
    def rule_fundamental_5(self):
        self.declare(Fact(recommendation='PBV rendah ROE rendah, valuasi perusahaan tergolong murah, namun perusahaan memiliki profitabilitas dari segi equitas yang rendah.'))

    @Rule(Fact(pb_valued='low'),Fact(roe_valued='high'))
    def rule_fundamental_6(self):
        self.declare(Fact(recommendation='PBV rendah ROE tinggi, valuasi perusahaan tergolong murah, dan perusahaan memiliki profitabilitas dari segi equitas yang baik.'))

    @Rule(Fact(pb_valued='high'),Fact(roe_valued='low'))
    def rule_fundamental_7(self):
        self.declare(Fact(recommendation='PBV tinggi ROE rendah, Perusahaan memiliki valuasi yang terbilang mahal dan juga memiliki profitabilitas dari segi equitas yang rendah'))

    @Rule(Fact(pb_valued='high'),Fact(roe_valued='high'))
    def rule_fundamental_8(self):
        self.declare(Fact(recommendation='PBV tinggi ROE tinggi, walaupun valuasi perusahaan tergolong tinggi, namun perusahaan memiliki profitabilitas dari segi equitas yang baik.'))

    @Rule(Fact(pb_valued='low'),Fact(net_income_valued='loss'))
    def rule_fundamental_9(self):
        self.declare(Fact(recommendation='Pertimbangkan untuk berhati hati dalam investasi karena perusahaan dalam kondisi rugi dan pbv juga menunjukkan pergerakan yang linier'))

    @Rule(Fact(pb_valued='low'),Fact(net_income_valued='profit'))
    def rule_fundamental_10(self):
        self.declare(Fact(recommendation='Pertimbangkan untuk membeli karena perusahaan dalam kondisi undervalue didukung oleh perusahaan yang berhasil mencetak keuntungan bersih'))

    @Rule(Fact(pb_valued='high'),Fact(net_income_valued='loss'))
    def rule_fundamental_11(self):
        self.declare(Fact(recommendation='Tidak disarankan untuk membeli karena valuasi mahal dan perusahaan dalam kondisi rugi'))

    @Rule(Fact(pb_valued='high'),Fact(net_income_valued='profit'))
    def rule_fundamental_12(self):
        self.declare(Fact(recommendation='Mohon tambahkan parameter tambahan agar dapat dianalisa lebih lanjut, walaupun perusahaan berhasil mencetak keuntungan bersih namun valuasi mahal'))

    @Rule(Fact(pb_valued='low'),Fact(der_valued='low'))
    def rule_fundamental_13(self):
        self.declare(Fact(recommendation='Kondisi perusahaan sangat undervalue karena pb ratio rendah dan hutang yang rendah'))

    @Rule(Fact(pb_valued='low'),Fact(der_valued='high'))
    def rule_fundamental_14(self):
        self.declare(Fact(recommendation='Perusahaan dalam kondisi yang berbahaya karena hutang yang banyak dan pb ratio rendah bergerak linier mengikuti hutang'))

    @Rule(Fact(pb_valued='high'),Fact(der_valued='low'))
    def rule_fundamental_15(self):
        self.declare(Fact(recommendation='Tambahkan parameter lagi agar sistem dapat menganalisa secara akurat'))

    @Rule(Fact(pb_valued='high'),Fact(der_valued='high'))
    def rule_fundamental_16(self):
        self.declare(Fact(recommendation='Kondisi perusahaan berbahaya karena valuasi yang mahal dan hutang yang banyak'))

    @Rule(Fact(pb_valued='low'),Fact(roa_valued='low'))
    def rule_fundamental_17(self):
        self.declare(Fact(recommendation='Tidak disarankan untuk membeli karena profitabilitas perusahaan yang rendah dan pb ratio bergerak linier'))

    @Rule(Fact(pb_valued='low'),Fact(roa_valued='high'))
    def rule_fundamental_18(self):
        self.declare(Fact(recommendation='Disarankan untuk membeli karena perusahaan undervalue dan memiliki profitabilitas terhadap asset yang tinggi'))

    @Rule(Fact(pb_valued='high'),Fact(roa_valued='low'))
    def rule_fundamental_19(self):
        self.declare(Fact(recommendation='Tidak disarankan membeli karena valuasi mahal dan profitabilitas rendah'))

    @Rule(Fact(pb_valued='high'),Fact(roa_valued='high'))
    def rule_fundamental_20(self):
        self.declare(Fact(recommendation='Tambahkan parameter lagi agar sistem dapat memberikan rekomendasi secara akurat'))

    @Rule(Fact(per_valued='low'),Fact(roe_valued='low'))
    def rule_fundamental_21(self):
        self.declare(Fact(recommendation='Kondisi perusahaan dari segi profitabilitas dan harga sangat rendah'))

    @Rule(Fact(per_valued='low'),Fact(roe_valued='high'))
    def rule_fundamental_22(self):
        self.declare(Fact(recommendation='Rekomendasi pembelian karena harga relatif murah dan profitabilitas tinggi'))

    @Rule(Fact(per_valued='high'),Fact(roe_valued='low'))
    def rule_fundamental_23(self):
        self.declare(Fact(recommendation='Harga terlalu mahal dan kondisi profitabilitas buruk'))

    @Rule(Fact(per_valued='high'),Fact(roe_valued='high'))
    def rule_fundamental_24(self):
        self.declare(Fact(recommendation='Tambahkan parameter agar sistem dapat menganalisa secara akurat'))

    @Rule(Fact(per_valued='low'),Fact(net_income_valued='low'))
    def rule_fundamental_25(self):
        self.declare(Fact(recommendation='Kondisi perusahaan rugi dan harga cenderung mengalami tren penurunan'))

    @Rule(Fact(per_valued='low'),Fact(net_income_valued='high'))
    def rule_fundamental_26(self):
        self.declare(Fact(recommendation='Harga cenderung murah dan perusahaan berhasil menghasilkan laba bersih positif'))

    @Rule(Fact(per_valued='high'),Fact(net_income_valued='low'))
    def rule_fundamental_27(self):
        self.declare(Fact(recommendation='Harga mahal dan perusahaan dalam kondisi rugi'))

    @Rule(Fact(per_valued='high'),Fact(net_income_valued='high'))
    def rule_fundamental_28(self):
        self.declare(Fact(recommendation='Harga tergolong mahal namun perusahaan berhasil membuat laba bersih positif'))

    @Rule(Fact(per_valued='low'),Fact(der_valued='low'))
    def rule_fundamental_29(self):
        self.declare(Fact(recommendation='Perusahaan tidak beresiko untuk bangkrut dan harga cenderung murah'))            

    @Rule(Fact(per_valued='low'),Fact(der_valued='high'))
    def rule_fundamental_30(self):
        self.declare(Fact(recommendation='Perusahaan memiliki hutang yang terlalu banyak namun harga sahamnya murah'))

    @Rule(Fact(per_valued='high'),Fact(der_valued='low'))
    def rule_fundamental_31(self):
        self.declare(Fact(recommendation='Tambahkan parameter agar sistem dapat menganalisa dengan akurat'))

    @Rule(Fact(per_valued='high'),Fact(der_valued='high'))
    def rule_fundamental_32(self):
        self.declare(Fact(recommendation='Tidak disarankan untuk membeli karena harga yang mahal dan hutang yang tinggi'))

    @Rule(Fact(per_valued='low'),Fact(roa_valued='low'))
    def rule_fundamental_33(self):
        self.declare(Fact(recommendation='Tidak disarankan untuk membeli karena harga sedang mengalami penurunan mengikuti dengan profitabilitas asset'))

    @Rule(Fact(per_valued='low'),Fact(roa_valued='high'))
    def rule_fundamental_34(self):
        self.declare(Fact(recommendation='Disarankan untuk membeli karena harga yang murah dan perusahaan sedang profit'))

    @Rule(Fact(per_valued='high'),Fact(roa_valued='low'))
    def rule_fundamental_35(self):
        self.declare(Fact(recommendation='Tidak disarankan membeli karena harga mahal dan perusahaan tidak terlalu profitable'))

    @Rule(Fact(per_valued='high'),Fact(roa_valued='high'))
    def rule_fundamental_36(self):
        self.declare(Fact(recommendation='Tambahkan parameter untuk analisa lebih lanjut'))            

    @Rule(Fact(pb_valued='high'), Fact(per_valued='high'), Fact(roe_valued='high'))
    def buy_stock_rule_1(self):
        self.declare(Fact(recommendation='Harga secara valuasi tergolong mahal'))


    @Rule(Fact(pb_valued='high'), Fact(per_valued='high'), Fact(roe_valued='low'))
    def buy_stock_rule_2(self):
        self.declare(Fact(recommendation='Harga secara valuasi tergolong mahal dan tidak profitable'))


    @Rule(Fact(pb_valued='high'), Fact(per_valued='low'), Fact(roe_valued='high'))
    def buy_stock_rule_3(self):
        self.declare(Fact(recommendation='Harga normal secara valuasi dan perusahaan profitable'))


    @Rule(Fact(pb_valued='high'), Fact(per_valued='low'), Fact(roe_valued='low'))
    def buy_stock_rule_4(self):
        self.declare(Fact(recommendation='Harga normal secara valuasi dan perusahaan tidak profitable'))


    @Rule(Fact(pb_valued='low'), Fact(per_valued='high'), Fact(roe_valued='high'))
    def buy_stock_rule_5(self):
        self.declare(Fact(recommendation='Harga normal secara valuasi dan perusahaan profitable'))


    @Rule(Fact(pb_valued='low'), Fact(per_valued='high'), Fact(roe_valued='low'))
    def buy_stock_rule_6(self):
        self.declare(Fact(recommendation='Harga normal secara valuasi dan tidak perusahaan profitable'))


    @Rule(Fact(pb_valued='low'), Fact(per_valued='low'), Fact(roe_valued='high'))
    def buy_stock_rule_7(self):
        self.declare(Fact(recommendation='Harga sangat undervalue dan perusahaan profitable'))


    @Rule(Fact(pb_valued='low'), Fact(per_valued='low'), Fact(roe_valued='low'))
    def buy_stock_rule_8(self):
        self.declare(Fact(recommendation='Harga cenderung  sangat murah namun perusahaan tidak profit'))


    @Rule(Fact(pb_valued='high'), Fact(per_valued='high'), Fact(net_income_valued='profit'))
    def buy_stock_rule_9(self):
        self.declare(Fact(recommendation='Harga cenderung  sangat mahal namun perusahaan profitable'))


    @Rule(Fact(pb_valued='high'), Fact(per_valued='high'), Fact(net_income_valued='loss'))
    def buy_stock_rule_10(self):
        self.declare(Fact(recommendation='Harga cenderung  sangat mahal namun perusahaan dalam posisi rugi'))


    @Rule(Fact(pb_valued='high'), Fact(per_valued='low'), Fact(net_income_valued='profit'))
    def buy_stock_rule_11(self):
        self.declare(Fact(recommendation='Harga cenderung  normal dan perusahaan berhasil mencetak laba bersih'))


    @Rule(Fact(pb_valued='high'), Fact(per_valued='low'), Fact(net_income_valued='loss'))
    def buy_stock_rule_12(self):
        self.declare(Fact(recommendation='Harga cenderung  normal namun perusahaan dalam kondisi rugi'))


    @Rule(Fact(pb_valued='low'), Fact(per_valued='high'), Fact(net_income_valued='profit'))
    def buy_stock_rule_13(self):
        self.declare(Fact(recommendation='Harga cenderung  normal namun perusahaan dalam kondisi profit'))


    @Rule(Fact(pb_valued='low'), Fact(per_valued='high'), Fact(net_income_valued='loss'))
    def buy_stock_rule_14(self):
        self.declare(Fact(recommendation='Harga cenderung  normal namun perusahaan dalam kondisi rugi'))


    @Rule(Fact(pb_valued='low'), Fact(per_valued='low'), Fact(net_income_valued='profit'))
    def buy_stock_rule_15(self):
        self.declare(Fact(recommendation='Harga cenderung  sangat murah dan perusahaan dalam kondisi profit'))


    @Rule(Fact(pb_valued='low'), Fact(per_valued='low'), Fact(net_income_valued='loss'))
    def buy_stock_rule_16(self):
        self.declare(Fact(recommendation='Harga cenderung  sangat murah dan perusahaan dalam kondisi rugi'))


    @Rule(Fact(pb_valued='high'), Fact(per_valued='high'), Fact(der_valued='high'))
    def buy_stock_rule_17(self):
        self.declare(Fact(recommendation='Harga cenderung  sangat mahal dan perusahaan dalam kondisi banyak hutang'))


    @Rule(Fact(pb_valued='high'), Fact(per_valued='high'), Fact(der_valued='low'))
    def buy_stock_rule_18(self):
        self.declare(Fact(recommendation='Harga cenderung  sangat mahal'))


    @Rule(Fact(pb_valued='high'), Fact(per_valued='low'), Fact(der_valued='high'))
    def buy_stock_rule_19(self):
        self.declare(Fact(recommendation='Harga cenderung  normal namun perusahaan memiliki banyak hutang '))


    @Rule(Fact(pb_valued='high'), Fact(per_valued='low'), Fact(der_valued='low'))
    def buy_stock_rule_20(self):
        self.declare(Fact(recommendation='Harga cenderung  normal'))


    @Rule(Fact(pb_valued='low'), Fact(per_valued='high'), Fact(der_valued='high'))
    def buy_stock_rule_21(self):
        self.declare(Fact(recommendation='Harga cenderung  normal namun perusahaan memiliki banyak hutang'))


    @Rule(Fact(pb_valued='low'), Fact(per_valued='high'), Fact(der_valued='low'))
    def buy_stock_rule_22(self):
        self.declare(Fact(recommendation='Harga cenderung  normal'))


    @Rule(Fact(pb_valued='low'), Fact(per_valued='low'), Fact(der_valued='high'))
    def buy_stock_rule_23(self):
        self.declare(Fact(recommendation='Harga cenderung  sangat rendah namun perusahaan memiliki banyak hutang'))


    @Rule(Fact(pb_valued='low'), Fact(per_valued='low'), Fact(der_valued='low'))
    def buy_stock_rule_24(self):
        self.declare(Fact(recommendation='Harga cenderung  sangat rendah dan perusahaan dalam kondisi sehat'))


    @Rule(Fact(pb_valued='high'), Fact(per_valued='high'), Fact(roa_valued='high'))
    def buy_stock_rule_25(self):
        self.declare(Fact(recommendation='Harga cenderung  sangat mahal'))


    @Rule(Fact(pb_valued='high'), Fact(per_valued='high'), Fact(roa_valued='low'))
    def buy_stock_rule_26(self):
        self.declare(Fact(recommendation='Harga cenderung  sangat mahal'))


    @Rule(Fact(pb_valued='high'), Fact(per_valued='low'), Fact(roa_valued='high'))
    def buy_stock_rule_27(self):
        self.declare(Fact(recommendation='Harga cenderung  normal dan perusahaan profitable'))


    @Rule(Fact(pb_valued='high'), Fact(per_valued='low'), Fact(roa_valued='low'))
    def buy_stock_rule_28(self):
        self.declare(Fact(recommendation='Harga cenderung  normal dan perusahaan tidak profitable'))


    @Rule(Fact(pb_valued='low'), Fact(per_valued='high'), Fact(roa_valued='high'))
    def buy_stock_rule_29(self):
        self.declare(Fact(recommendation='Harga cenderung  normal dan perusahaan profitable'))


    @Rule(Fact(pb_valued='low'), Fact(per_valued='high'), Fact(roa_valued='low'))
    def buy_stock_rule_30(self):
        self.declare(Fact(recommendation='Harga cenderung  normal dan perusahaan tidak profitable'))


    @Rule(Fact(pb_valued='low'), Fact(per_valued='low'), Fact(roa_valued='high'))
    def buy_stock_rule_31(self):
        self.declare(Fact(recommendation='Harga cenderung  sangat murah dan perusahaan profitable'))


    @Rule(Fact(pb_valued='low'), Fact(per_valued='low'), Fact(roa_valued='low'))
    def buy_stock_rule_32(self):
        self.declare(Fact(recommendation='Harga cenderung  sangat murah dan perusahaan tidak profitable'))


    @Rule(Fact(pb_valued='high'), Fact(roe_valued='high'), Fact(net_income_valued='profit'))
    def buy_stock_rule_33(self):
        self.declare(Fact(recommendation='Harga cenderung  sangat mahal namun perusahaan berhasil mencatat laba bersih positif'))


    @Rule(Fact(pb_valued='high'), Fact(roe_valued='high'), Fact(net_income_valued='loss'))
    def buy_stock_rule_34(self):
        self.declare(Fact(recommendation='Harga cenderung  sangat mahal dan perusahaan dalam kondisi rugi'))


    @Rule(Fact(pb_valued='high'), Fact(roe_valued='low'), Fact(net_income_valued='profit'))
    def buy_stock_rule_35(self):
        self.declare(Fact(recommendation='Harga cenderung  normal dan perusahaan berhasil mencetak laba bersih positif'))


    @Rule(Fact(pb_valued='high'), Fact(roe_valued='low'), Fact(net_income_valued='loss'))
    def buy_stock_rule_36(self):
        self.declare(Fact(recommendation='Harga cenderung  normal namun perusahaan dalam kondisi rugi'))


    @Rule(Fact(pb_valued='low'), Fact(roe_valued='high'), Fact(net_income_valued='profit'))
    def buy_stock_rule_37(self):
        self.declare(Fact(recommendation='Harga cenderung  normal namun perusahaan dalam kondisi profit'))


    @Rule(Fact(pb_valued='low'), Fact(roe_valued='high'), Fact(net_income_valued='loss'))
    def buy_stock_rule_38(self):
        self.declare(Fact(recommendation='Harga cenderung  normal namun perusahaan dalam kondisi rugi'))


    @Rule(Fact(pb_valued='low'), Fact(roe_valued='low'), Fact(net_income_valued='profit'))
    def buy_stock_rule_39(self):
        self.declare(Fact(recommendation='Harga cenderung  sangat murah dan perusahaan profitable'))


    @Rule(Fact(pb_valued='low'), Fact(roe_valued='low'), Fact(net_income_valued='loss'))
    def buy_stock_rule_40(self):
        self.declare(Fact(recommendation='Harga cenderung  sangat murah namun perusahaan dalam kondisi rugi'))


    @Rule(Fact(pb_valued='high'), Fact(roe_valued='high'), Fact(der_valued='high'))
    def buy_stock_rule_41(self):
        self.declare(Fact(recommendation='Tidak terdapat saran beli dan jual, cari parameter lain'))


    @Rule(Fact(pb_valued='high'), Fact(roe_valued='high'), Fact(der_valued='low'))
    def buy_stock_rule_42(self):
        self.declare(Fact(recommendation='Direkomendasikan untuk membeli karena valuasi tergolong bagus'))


    @Rule(Fact(pb_valued='high'), Fact(roe_valued='low'), Fact(der_valued='high'))
    def buy_stock_rule_43(self):
        self.declare(Fact(recommendation='Sangat tidak direkomendasikan untuk membeli'))


    @Rule(Fact(pb_valued='high'), Fact(roe_valued='low'), Fact(der_valued='low'))
    def buy_stock_rule_44(self):
        self.declare(Fact(recommendation='Tidak direkomendasikan untuk membeli'))


    @Rule(Fact(pb_valued='low'), Fact(roe_valued='high'), Fact(der_valued='high'))
    def buy_stock_rule_45(self):
        self.declare(Fact(recommendation='Direkomendasikan untuk membeli karena harga cenderung'))


    @Rule(Fact(pb_valued='low'), Fact(roe_valued='high'), Fact(der_valued='low'))
    def buy_stock_rule_46(self):
        self.declare(Fact(recommendation='Sangat direkomendasikan untuk membeli karena kondisi perusahaan sangat bagus dari segi fundamental'))


    @Rule(Fact(pb_valued='low'), Fact(roe_valued='low'), Fact(der_valued='high'))
    def buy_stock_rule_47(self):
        self.declare(Fact(recommendation='Sangat tidak direkomendasikan untuk membeli'))


    @Rule(Fact(pb_valued='low'), Fact(roe_valued='low'), Fact(der_valued='low'))
    def buy_stock_rule_48(self):
        self.declare(Fact(recommendation='Direkomendasikan untuk membeli karena fundamental yang tergolong bagus'))


    @Rule(Fact(pb_valued='high'), Fact(roe_valued='high'), Fact(roa_valued='high'))
    def buy_stock_rule_49(self):
        self.declare(Fact(recommendation='Tidak direkomendasikan untuk membeli'))


    @Rule(Fact(pb_valued='high'), Fact(roe_valued='high'), Fact(roa_valued='low'))
    def buy_stock_rule_50(self):
        self.declare(Fact(recommendation='Direkomendasikan untuk membeli karena fundamental yang tergolong bagus'))


    @Rule(Fact(pb_valued='high'), Fact(roe_valued='low'), Fact(roa_valued='high'))
    def buy_stock_rule_51(self):
        self.declare(Fact(recommendation='Direkomendasikan untuk membeli karena fundamental yang tergolong bagus'))


    @Rule(Fact(pb_valued='high'), Fact(roe_valued='low'), Fact(roa_valued='low'))
    def buy_stock_rule_52(self):
        self.declare(Fact(recommendation='Tidak direkomendasikan untuk membeli karena fundamental yang tergolong bagus'))


    @Rule(Fact(pb_valued='low'), Fact(roe_valued='high'), Fact(roa_valued='high'))
    def buy_stock_rule_53(self):
        self.declare(Fact(recommendation='Direkomendasikan untuk membeli karena fundamental yang tergolong bagus'))


    @Rule(Fact(pb_valued='low'), Fact(roe_valued='high'), Fact(roa_valued='low'))
    def buy_stock_rule_54(self):
        self.declare(Fact(recommendation='Direkomendasikan untuk membeli karena fundamental yang tergolong bagus'))


    @Rule(Fact(pb_valued='low'), Fact(roe_valued='low'), Fact(roa_valued='high'))
    def buy_stock_rule_55(self):
        self.declare(Fact(recommendation='Tidak direkomendasikan untuk membeli karena fundamental yang tergolong bagus'))


    @Rule(Fact(pb_valued='low'), Fact(roe_valued='low'), Fact(roa_valued='low'))
    def buy_stock_rule_56(self):
        self.declare(Fact(recommendation='Sangat tidak direkomendasikan untuk membeli karena fundamental yang tergolong bagus'))


    @Rule(Fact(pb_valued='high'), Fact(net_income_valued='profit'), Fact(der_valued='high'))
    def buy_stock_rule_57(self):
        self.declare(Fact(recommendation='Sangat tidak direkomendasikan untuk membeli karena fundamental yang tergolong bagus'))


    @Rule(Fact(pb_valued='high'), Fact(net_income_valued='profit'), Fact(der_valued='low'))
    def buy_stock_rule_58(self):
        self.declare(Fact(recommendation='Direkomendasikan untuk membeli karena fundamental yang tergolong bagus'))


    @Rule(Fact(pb_valued='high'), Fact(net_income_valued='loss'), Fact(der_valued='high'))
    def buy_stock_rule_59(self):
        self.declare(Fact(recommendation='Tidak direkomendasikan untuk membeli karena fundamental yang tergolong bagus'))


    @Rule(Fact(pb_valued='high'), Fact(net_income_valued='loss'), Fact(der_valued='low'))
    def buy_stock_rule_60(self):
        self.declare(Fact(recommendation='Tidak direkomendasikan untuk membeli karena fundamental yang tergolong bagus'))


    @Rule(Fact(pb_valued='low'), Fact(net_income_valued='profit'), Fact(der_valued='high'))
    def buy_stock_rule_61(self):
        self.declare(Fact(recommendation='Direkomendasikan untuk membeli karena fundamental yang tergolong bagus'))


    @Rule(Fact(pb_valued='low'), Fact(net_income_valued='profit'), Fact(der_valued='low'))
    def buy_stock_rule_62(self):
        self.declare(Fact(recommendation='Direkomendasikan untuk membeli karena fundamental yang tergolong bagus'))


    @Rule(Fact(pb_valued='low'), Fact(net_income_valued='loss'), Fact(der_valued='high'))
    def buy_stock_rule_63(self):
        self.declare(Fact(recommendation='Tidak direkomendasikan untuk membeli karena fundamental yang tergolong bagus'))


    @Rule(Fact(pb_valued='low'), Fact(net_income_valued='loss'), Fact(der_valued='low'))
    def buy_stock_rule_64(self):
        self.declare(Fact(recommendation='Direkomendasikan untuk membeli karena fundamental yang tergolong bagus'))


    @Rule(Fact(pb_valued='high'), Fact(net_income_valued='profit'), Fact(roa_valued='high'))
    def buy_stock_rule_65(self):
        self.declare(Fact(recommendation='Tidak direkomendasikan untuk membeli karena fundamental yang tergolong bagus'))


    @Rule(Fact(pb_valued='high'), Fact(net_income_valued='profit'), Fact(roa_valued='low'))
    def buy_stock_rule_66(self):
        self.declare(Fact(recommendation='Direkomendasikan untuk membeli karena fundamental yang tergolong bagus'))


    @Rule(Fact(pb_valued='high'), Fact(net_income_valued='loss'), Fact(roa_valued='high'))
    def buy_stock_rule_67(self):
        self.declare(Fact(recommendation='Sangat tidak direkomendasikan untuk membeli karena fundamental yang tergolong bagus'))


    @Rule(Fact(pb_valued='high'), Fact(net_income_valued='loss'), Fact(roa_valued='low'))
    def buy_stock_rule_68(self):
        self.declare(Fact(recommendation='Tidak direkomendasikan untuk membeli karena fundamental yang tergolong tidak bagus'))


    @Rule(Fact(pb_valued='low'), Fact(net_income_valued='profit'), Fact(roa_valued='high'))
    def buy_stock_rule_69(self):
        self.declare(Fact(recommendation='Direkomendasikan untuk membeli karena fundamental yang tergolong bagus'))


    @Rule(Fact(pb_valued='low'), Fact(net_income_valued='profit'), Fact(roa_valued='low'))
    def buy_stock_rule_70(self):
        self.declare(Fact(recommendation='Direkomendasikan untuk membeli karena fundamental yang tergolong bagus'))


    @Rule(Fact(pb_valued='low'), Fact(net_income_valued='loss'), Fact(roa_valued='high'))
    def buy_stock_rule_71(self):
        self.declare(Fact(recommendation='Direkomendasikan untuk membeli karena fundamental yang tergolong bagus'))


    @Rule(Fact(pb_valued='low'), Fact(net_income_valued='loss'), Fact(roa_valued='low'))
    def buy_stock_rule_72(self):
        self.declare(Fact(recommendation='Tidak direkomendasikan untuk membeli karena fundamental yang tergolong tidak bagus'))


    @Rule(Fact(pb_valued='high'), Fact(der_valued='high'), Fact(roa_valued='high'))
    def buy_stock_rule_73(self):
        self.declare(Fact(recommendation='Tidak direkomendasikan untuk membeli karena fundamental yang tergolong tidak bagus'))


    @Rule(Fact(pb_valued='high'), Fact(der_valued='high'), Fact(roa_valued='low'))
    def buy_stock_rule_74(self):
        self.declare(Fact(recommendation='Tidak direkomendasikan untuk membeli karena fundamental yang tergolong tidak bagus'))


    @Rule(Fact(pb_valued='high'), Fact(der_valued='low'), Fact(roa_valued='high'))
    def buy_stock_rule_75(self):
        self.declare(Fact(recommendation='Direkomendasikan untuk membeli karena fundamental yang tergolong bagus'))


    @Rule(Fact(pb_valued='high'), Fact(der_valued='low'), Fact(roa_valued='low'))
    def buy_stock_rule_76(self):
        self.declare(Fact(recommendation='Tidak Direkomendasikan untuk membeli karena fundamental yang tergolong tidak bagus'))


    @Rule(Fact(pb_valued='low'), Fact(der_valued='high'), Fact(roa_valued='high'))
    def buy_stock_rule_77(self):
        self.declare(Fact(recommendation='Direkomendasikan untuk membeli karena fundamental yang tergolong bagus'))


    @Rule(Fact(pb_valued='low'), Fact(der_valued='high'), Fact(roa_valued='low'))
    def buy_stock_rule_78(self):
        self.declare(Fact(recommendation='Tidak direkomendasikan untuk membeli karena fundamental yang tergolong tidakbagus'))


    @Rule(Fact(pb_valued='low'), Fact(der_valued='low'), Fact(roa_valued='high'))
    def buy_stock_rule_79(self):
        self.declare(Fact(recommendation='Direkomendasikan untuk membeli karena fundamental yang tergolong bagus'))


    @Rule(Fact(pb_valued='low'), Fact(der_valued='low'), Fact(roa_valued='low'))
    def buy_stock_rule_80(self):
        self.declare(Fact(recommendation='Direkomendasikan untuk membeli karena fundamental yang tergolong bagus'))


    @Rule(Fact(per_valued='high'), Fact(roe_valued='high'), Fact(net_income_valued='profit'))
    def buy_stock_rule_81(self):
        self.declare(Fact(recommendation='Direkomendasikan untuk membeli karena fundamental yang tergolong bagus'))


    @Rule(Fact(per_valued='high'), Fact(roe_valued='high'), Fact(net_income_valued='loss'))
    def buy_stock_rule_82(self):
        self.declare(Fact(recommendation='Tidak direkomendasikan untuk membeli karena fundamental yang tergolong tidak bagus'))


    @Rule(Fact(per_valued='high'), Fact(roe_valued='low'), Fact(net_income_valued='profit'))
    def buy_stock_rule_83(self):
        self.declare(Fact(recommendation='Tidak direkomendasikan untuk membeli karena fundamental yang tergolong tidak bagus'))


    @Rule(Fact(per_valued='high'), Fact(roe_valued='low'), Fact(net_income_valued='loss'))
    def buy_stock_rule_84(self):
        self.declare(Fact(recommendation='Perusahaan secara fundamental tergolong tidak dalam kondisi baik'))


    @Rule(Fact(per_valued='low'), Fact(roe_valued='high'), Fact(net_income_valued='profit'))
    def buy_stock_rule_85(self):
        self.declare(Fact(recommendation='Perusahaan secara fundamental tergolong dalam kondisi baik'))


    @Rule(Fact(per_valued='low'), Fact(roe_valued='high'), Fact(net_income_valued='loss'))
    def buy_stock_rule_86(self):
        self.declare(Fact(recommendation='Perusahaan secara fundamental tergolong tidak dalam kondisi baik'))


    @Rule(Fact(per_valued='low'), Fact(roe_valued='low'), Fact(net_income_valued='profit'))
    def buy_stock_rule_87(self):
        self.declare(Fact(recommendation='Perusahaan secara fundamental tergolong dalam kondisi baik'))


    @Rule(Fact(per_valued='low'), Fact(roe_valued='low'), Fact(net_income_valued='loss'))
    def buy_stock_rule_88(self):
        self.declare(Fact(recommendation='Perusahaan secara fundamental tergolong tidak dalam kondisi baik'))


    @Rule(Fact(per_valued='high'), Fact(roe_valued='high'), Fact(der_valued='high'))
    def buy_stock_rule_89(self):
        self.declare(Fact(recommendation='Perusahaan secara fundamental tergolong tidak dalam kondisi baik'))


    @Rule(Fact(per_valued='high'), Fact(roe_valued='high'), Fact(der_valued='low'))
    def buy_stock_rule_90(self):
        self.declare(Fact(recommendation='Perusahaan secara fundamental tergolong tidak dalam kondisi baik'))


    @Rule(Fact(per_valued='high'), Fact(roe_valued='low'), Fact(der_valued='high'))
    def buy_stock_rule_91(self):
        self.declare(Fact(recommendation='Perusahaan secara fundamental tergolong tidak dalam kondisi baik'))


    @Rule(Fact(per_valued='high'), Fact(roe_valued='low'), Fact(der_valued='low'))
    def buy_stock_rule_92(self):
        self.declare(Fact(recommendation='Perusahaan secara fundamental tergolong dalam kondisi baik'))


    @Rule(Fact(per_valued='low'), Fact(roe_valued='high'), Fact(der_valued='high'))
    def buy_stock_rule_93(self):
        self.declare(Fact(recommendation='Perusahaan secara fundamental tergolong dalam kondisi baik'))


    @Rule(Fact(per_valued='low'), Fact(roe_valued='high'), Fact(der_valued='low'))
    def buy_stock_rule_94(self):
        self.declare(Fact(recommendation='Perusahaan secara fundamental tergolong dalam kondisi baik'))


    @Rule(Fact(per_valued='low'), Fact(roe_valued='low'), Fact(der_valued='high'))
    def buy_stock_rule_95(self):
        self.declare(Fact(recommendation='Harga cenderung  Perusahaan secara fundamental tergolong tidak dalam kondisi baik'))


    @Rule(Fact(per_valued='low'), Fact(roe_valued='low'), Fact(der_valued='low'))
    def buy_stock_rule_96(self):
        self.declare(Fact(recommendation='Harga cenderung  Perusahaan secara fundamental tergolong tidak kondisi baik'))


    @Rule(Fact(per_valued='high'), Fact(roe_valued='high'), Fact(roa_valued='high'))
    def buy_stock_rule_97(self):
        self.declare(Fact(recommendation='Perusahaan secara fundamental dalam kondisi profitable dari segi pendapatan ke asset dan ekuitas'))


    @Rule(Fact(per_valued='high'), Fact(roe_valued='high'), Fact(roa_valued='low'))
    def buy_stock_rule_98(self):
        self.declare(Fact(recommendation='Perusahaan secara fundamental dalam kondisi tidak profitable dari segi pendapatan ke asset dan ekuitas'))


    @Rule(Fact(per_valued='high'), Fact(roe_valued='low'), Fact(roa_valued='high'))
    def buy_stock_rule_99(self):
        self.declare(Fact(recommendation='Perusahaan secara fundamental dalam kondisi tidak profitable dari segi pendapatan ke asset dan ekuitas'))


    @Rule(Fact(per_valued='high'), Fact(roe_valued='low'), Fact(roa_valued='low'))
    def buy_stock_rule_100(self):
        self.declare(Fact(recommendation='Perusahaan secara fundamental dalam kondisi tidak profitable dari segi pendapatan ke asset dan ekuitas'))


    @Rule(Fact(per_valued='low'), Fact(roe_valued='high'), Fact(roa_valued='high'))
    def buy_stock_rule_101(self):
        self.declare(Fact(recommendation='Perusahaan secara fundamental dalam kondisi profitable dari segi pendapatan ke asset dan ekuitas'))


    @Rule(Fact(per_valued='low'), Fact(roe_valued='high'), Fact(roa_valued='low'))
    def buy_stock_rule_102(self):
        self.declare(Fact(recommendation='Perusahaan secara fundamental dalam kondisi profitable dari segi pendapatan ke asset dan ekuitas'))


    @Rule(Fact(per_valued='low'), Fact(roe_valued='low'), Fact(roa_valued='high'))
    def buy_stock_rule_103(self):
        self.declare(Fact(recommendation='Perusahaan secara fundamental dalam kondisi profitable dari segi pendapatan ke asset dan ekuitas'))


    @Rule(Fact(per_valued='low'), Fact(roe_valued='low'), Fact(roa_valued='low'))
    def buy_stock_rule_104(self):
        self.declare(Fact(recommendation='Perusahaan secara fundamental dalam kondisi sangat tidak profitable dari segi pendapatan ke asset dan ekuitas'))


    @Rule(Fact(per_valued='high'), Fact(net_income_valued='profit'), Fact(der_valued='high'))
    def buy_stock_rule_105(self):
        self.declare(Fact(recommendation='Perusahaan secara fundamental dalam kondisi profitable dari segi pendapatan namun hutang tinggi'))


    @Rule(Fact(per_valued='high'), Fact(net_income_valued='profit'), Fact(der_valued='low'))
    def buy_stock_rule_106(self):
        self.declare(Fact(recommendation='Perusahaan secara fundamental dalam kondisi profitable dari segi pendapatan'))


    @Rule(Fact(per_valued='high'), Fact(net_income_valued='loss'), Fact(der_valued='high'))
    def buy_stock_rule_107(self):
        self.declare(Fact(recommendation='Perusahaan secara fundamental dalam kondisi tidak profitable dari segi pendapatan dan hutang tinggi'))


    @Rule(Fact(per_valued='high'), Fact(net_income_valued='loss'), Fact(der_valued='low'))
    def buy_stock_rule_108(self):
        self.declare(Fact(recommendation='Perusahaan secara fundamental dalam kondisi tidak profitable dari segi pendapatan'))


    @Rule(Fact(per_valued='low'), Fact(net_income_valued='profit'), Fact(der_valued='high'))
    def buy_stock_rule_109(self):
        self.declare(Fact(recommendation='Perusahaan secara fundamental dalam kondisi profitable dari segi pendapatan dan hutang tinggi'))


    @Rule(Fact(per_valued='low'), Fact(net_income_valued='profit'), Fact(der_valued='low'))
    def buy_stock_rule_110(self):
        self.declare(Fact(recommendation='Perusahaan secara fundamental dalam kondisi profitable dari segi pendapatan'))


    @Rule(Fact(per_valued='low'), Fact(net_income_valued='loss'), Fact(der_valued='high'))
    def buy_stock_rule_111(self):
        self.declare(Fact(recommendation='Perusahaan secara fundamental dalam kondisi tidak profitable dari segi pendapatan dan hutang tinggi'))


    @Rule(Fact(per_valued='low'), Fact(net_income_valued='loss'), Fact(der_valued='low'))
    def buy_stock_rule_112(self):
        self.declare(Fact(recommendation='Perusahaan secara fundamental dalam kondisi tidak profitable dari segi pendapatan'))


    @Rule(Fact(per_valued='high'), Fact(net_income_valued='profit'), Fact(roa_valued='high'))
    def buy_stock_rule_113(self):
        self.declare(Fact(recommendation='Perusahaan secara fundamental sangat profitable'))


    @Rule(Fact(per_valued='high'), Fact(net_income_valued='profit'), Fact(roa_valued='low'))
    def buy_stock_rule_114(self):
        self.declare(Fact(recommendation='Perusahaan dari segi harga sangatlah mahal'))


    @Rule(Fact(per_valued='high'), Fact(net_income_valued='loss'), Fact(roa_valued='high'))
    def buy_stock_rule_115(self):
        self.declare(Fact(recommendation='Tidak direkomendasikan untuk membeli karena valuasi mahal'))


    @Rule(Fact(per_valued='high'), Fact(net_income_valued='loss'), Fact(roa_valued='low'))
    def buy_stock_rule_116(self):
        self.declare(Fact(recommendation='Tidak direkomendasikan untuk membeli karena valuasi mahal'))


    @Rule(Fact(per_valued='low'), Fact(net_income_valued='profit'), Fact(roa_valued='high'))
    def buy_stock_rule_117(self):
        self.declare(Fact(recommendation='Direkomendasikan untuk membeli karena valuasi murah'))


    @Rule(Fact(per_valued='low'), Fact(net_income_valued='profit'), Fact(roa_valued='low'))
    def buy_stock_rule_118(self):
        self.declare(Fact(recommendation='Direkomendasikan untuk membeli karena valuasi murah'))


    @Rule(Fact(per_valued='low'), Fact(net_income_valued='loss'), Fact(roa_valued='high'))
    def buy_stock_rule_119(self):
        self.declare(Fact(recommendation='Kondisi perusahaan di posisi rugi'))


    @Rule(Fact(per_valued='low'), Fact(net_income_valued='loss'), Fact(roa_valued='low'))
    def buy_stock_rule_120(self):
        self.declare(Fact(recommendation='Kondisi perusahaan di posisi rugi'))


    @Rule(Fact(per_valued='high'), Fact(der_valued='high'), Fact(roa_valued='high'))
    def buy_stock_rule_121(self):
        self.declare(Fact(recommendation='Kondisi perusahaan di posisi untung'))


    @Rule(Fact(per_valued='high'), Fact(der_valued='high'), Fact(roa_valued='low'))
    def buy_stock_rule_122(self):
        self.declare(Fact(recommendation='Kondisi perusahaan di posisi banyak hutang namun tidak profit'))


    @Rule(Fact(per_valued='high'), Fact(der_valued='low'), Fact(roa_valued='high'))
    def buy_stock_rule_123(self):
        self.declare(Fact(recommendation='Kondisi perusahaan di posisi untung'))


    @Rule(Fact(per_valued='high'), Fact(der_valued='low'), Fact(roa_valued='low'))
    def buy_stock_rule_124(self):
        self.declare(Fact(recommendation='Kondisi perusahaan di posisi tidak rugi tidak untung'))


    @Rule(Fact(per_valued='low'), Fact(der_valued='high'), Fact(roa_valued='high'))
    def buy_stock_rule_125(self):
        self.declare(Fact(recommendation='Kondisi perusahaan di posisi rugi'))


    @Rule(Fact(per_valued='low'), Fact(der_valued='high'), Fact(roa_valued='low'))
    def buy_stock_rule_126(self):
        self.declare(Fact(recommendation='Kondisi perusahaan di posisi rugi besar dan sangat tidak direkomendasikan untuk membeli'))


    @Rule(Fact(per_valued='low'), Fact(der_valued='low'), Fact(roa_valued='high'))
    def buy_stock_rule_127(self):
        self.declare(Fact(recommendation='Kondisi perusahaan di posisi stabil'))


    @Rule(Fact(per_valued='low'), Fact(der_valued='low'), Fact(roa_valued='low'))
    def buy_stock_rule_128(self):
        self.declare(Fact(recommendation='Kondisi perusahaan di posisi rugi'))


    @Rule(Fact(roe_valued='high'), Fact(net_income_valued='profit'), Fact(der_valued='high'))
    def buy_stock_rule_129(self):
        self.declare(Fact(recommendation='Kondisi perusahaan profit namun secara fundamental terlalu banyak hutang'))


    @Rule(Fact(roe_valued='high'), Fact(net_income_valued='profit'), Fact(der_valued='low'))
    def buy_stock_rule_130(self):
        self.declare(Fact(recommendation='Perusahaan sangat profit'))


    @Rule(Fact(roe_valued='high'), Fact(net_income_valued='loss'), Fact(der_valued='high'))
    def buy_stock_rule_131(self):
        self.declare(Fact(recommendation='Rekomendasi untuk tidak beli karena hutang sangat banyak namun keuangan tidak profit'))


    @Rule(Fact(roe_valued='high'), Fact(net_income_valued='loss'), Fact(der_valued='low'))
    def buy_stock_rule_132(self):
        self.declare(Fact(recommendation='Tidak direkomendasikan untuk membeli'))


    @Rule(Fact(roe_valued='low'), Fact(net_income_valued='profit'), Fact(der_valued='high'))
    def buy_stock_rule_133(self):
        self.declare(Fact(recommendation='Tidak direkomendasikan untuk membeli'))


    @Rule(Fact(roe_valued='low'), Fact(net_income_valued='profit'), Fact(der_valued='low'))
    def buy_stock_rule_134(self):
        self.declare(Fact(recommendation='Direkomendasikan untuk membeli'))


    @Rule(Fact(roe_valued='low'), Fact(net_income_valued='loss'), Fact(der_valued='high'))
    def buy_stock_rule_135(self):
        self.declare(Fact(recommendation='Tidak direkomendasikan untuk membeli'))


    @Rule(Fact(roe_valued='low'), Fact(net_income_valued='loss'), Fact(der_valued='low'))
    def buy_stock_rule_136(self):
        self.declare(Fact(recommendation='Tidak direkomendasikan untuk membeli'))


    @Rule(Fact(roe_valued='high'), Fact(net_income_valued='profit'), Fact(roa_valued='high'))
    def buy_stock_rule_137(self):
        self.declare(Fact(recommendation='Direkomendasikan untuk membeli'))


    @Rule(Fact(roe_valued='high'), Fact(net_income_valued='profit'), Fact(roa_valued='low'))
    def buy_stock_rule_138(self):
        self.declare(Fact(recommendation='Direkomendasikan untuk membeli'))


    @Rule(Fact(roe_valued='high'), Fact(net_income_valued='loss'), Fact(roa_valued='high'))
    def buy_stock_rule_139(self):
        self.declare(Fact(recommendation='Direkomendasikan untuk membeli'))


    @Rule(Fact(roe_valued='high'), Fact(net_income_valued='loss'), Fact(roa_valued='low'))
    def buy_stock_rule_140(self):
        self.declare(Fact(recommendation='Tidak direkomendasikan untuk membeli'))


    @Rule(Fact(roe_valued='low'), Fact(net_income_valued='profit'), Fact(roa_valued='high'))
    def buy_stock_rule_141(self):
        self.declare(Fact(recommendation='Direkomendasikan untuk membeli'))


    @Rule(Fact(roe_valued='low'), Fact(net_income_valued='profit'), Fact(roa_valued='low'))
    def buy_stock_rule_142(self):
        self.declare(Fact(recommendation='Tidak direkomendasikan untuk membeli'))


    @Rule(Fact(roe_valued='low'), Fact(net_income_valued='loss'), Fact(roa_valued='high'))
    def buy_stock_rule_143(self):
        self.declare(Fact(recommendation='Tidak direkomendasikan untuk membeli'))


    @Rule(Fact(roe_valued='low'), Fact(net_income_valued='loss'), Fact(roa_valued='low'))
    def buy_stock_rule_144(self):
        self.declare(Fact(recommendation='Sangat tidak direkomendasikan untuk membeli'))


    @Rule(Fact(roe_valued='high'), Fact(der_valued='high'), Fact(roa_valued='high'))
    def buy_stock_rule_145(self):
        self.declare(Fact(recommendation='Sangat Direkomendasikan untuk membeli'))


    @Rule(Fact(roe_valued='high'), Fact(der_valued='high'), Fact(roa_valued='low'))
    def buy_stock_rule_146(self):
        self.declare(Fact(recommendation='Tidak irekomendasikan untuk membeli'))


    @Rule(Fact(roe_valued='high'), Fact(der_valued='low'), Fact(roa_valued='high'))
    def buy_stock_rule_147(self):
        self.declare(Fact(recommendation='Sangat Direkomendasikan untuk membeli'))


    @Rule(Fact(roe_valued='high'), Fact(der_valued='low'), Fact(roa_valued='low'))
    def buy_stock_rule_148(self):
        self.declare(Fact(recommendation='Direkomendasikan untuk membeli'))


    @Rule(Fact(roe_valued='low'), Fact(der_valued='high'), Fact(roa_valued='high'))
    def buy_stock_rule_149(self):
        self.declare(Fact(recommendation='Tidak direkomendasikan untuk membeli'))


    @Rule(Fact(roe_valued='low'), Fact(der_valued='high'), Fact(roa_valued='low'))
    def buy_stock_rule_150(self):
        self.declare(Fact(recommendation='Sangat tidak Direkomendasikan untuk membeli'))


    @Rule(Fact(roe_valued='low'), Fact(der_valued='low'), Fact(roa_valued='high'))
    def buy_stock_rule_151(self):
        self.declare(Fact(recommendation='Direkomendasikan untuk membeli'))


    @Rule(Fact(roe_valued='low'), Fact(der_valued='low'), Fact(roa_valued='low'))
    def buy_stock_rule_152(self):
        self.declare(Fact(recommendation='Tidak direkomendasikan untuk membeli'))


    @Rule(Fact(net_income_valued='profit'), Fact(der_valued='high'), Fact(roa_valued='high'))
    def buy_stock_rule_153(self):
        self.declare(Fact(recommendation='Direkomendasikan untuk membeli'))


    @Rule(Fact(net_income_valued='profit'), Fact(der_valued='high'), Fact(roa_valued='low'))
    def buy_stock_rule_154(self):
        self.declare(Fact(recommendation='Tidak direkomendasikan untuk membeli'))


    @Rule(Fact(net_income_valued='profit'), Fact(der_valued='low'), Fact(roa_valued='high'))
    def buy_stock_rule_155(self):
        self.declare(Fact(recommendation='Sangat Direkomendasikan untuk membeli'))


    @Rule(Fact(net_income_valued='profit'), Fact(der_valued='low'), Fact(roa_valued='low'))
    def buy_stock_rule_156(self):
        self.declare(Fact(recommendation='Direkomendasikan untuk membeli'))


    @Rule(Fact(net_income_valued='loss'), Fact(der_valued='high'), Fact(roa_valued='high'))
    def buy_stock_rule_157(self):
        self.declare(Fact(recommendation='Sangat tidak Direkomendasikan untuk membeli'))


    @Rule(Fact(net_income_valued='loss'), Fact(der_valued='high'), Fact(roa_valued='low'))
    def buy_stock_rule_158(self):
        self.declare(Fact(recommendation='Sangat tidak Direkomendasikan untuk membeli'))


    @Rule(Fact(net_income_valued='loss'), Fact(der_valued='low'), Fact(roa_valued='high'))
    def buy_stock_rule_159(self):
        self.declare(Fact(recommendation='Tidak direkomendasikan untuk membeli'))


    @Rule(Fact(net_income_valued='loss'), Fact(der_valued='low'), Fact(roa_valued='low'))
    def buy_stock_rule_160(self):
        self.declare(Fact(recommendation='Tidak direkomendasikan untuk membeli'))

    @Rule(Fact(pb_valued='high'), Fact(per_valued='high'), Fact(roe_valued='high'), Fact(net_income_valued='profit'), Fact(der_valued='high'), Fact(roa_valued='high'))
    def fundamental_6_parameter_rule_1(self):
        self.declare(Fact(recommendation='PBV menunjukkan valuasi yang tinggi. PER berada di tingkat yang tinggi. ROE menunjukkan keuntungan yang tinggi. Laba bersih menunjukkan keuntungan. DER menunjukkan tingkat hutang yang tinggi. ROA menunjukkan efisiensi tinggi.'))


    @Rule(Fact(pb_valued='high'), Fact(per_valued='high'), Fact(roe_valued='high'), Fact(net_income_valued='profit'), Fact(der_valued='high'), Fact(roa_valued='low'))
    def fundamental_6_parameter_rule_2(self):
        self.declare(Fact(recommendation='PBV menunjukkan valuasi yang tinggi. PER berada di tingkat yang tinggi. ROE menunjukkan keuntungan yang tinggi. Laba bersih menunjukkan keuntungan. DER menunjukkan tingkat hutang yang tinggi. ROA menunjukkan efisiensi rendah.'))


    @Rule(Fact(pb_valued='high'), Fact(per_valued='high'), Fact(roe_valued='high'), Fact(net_income_valued='profit'), Fact(der_valued='low'), Fact(roa_valued='high'))
    def fundamental_6_parameter_rule_3(self):
        self.declare(Fact(recommendation='PBV menunjukkan valuasi yang tinggi. PER berada di tingkat yang tinggi. ROE menunjukkan keuntungan yang tinggi. Laba bersih menunjukkan keuntungan. DER menunjukkan tingkat hutang yang rendah. ROA menunjukkan efisiensi tinggi.'))


    @Rule(Fact(pb_valued='high'), Fact(per_valued='high'), Fact(roe_valued='high'), Fact(net_income_valued='profit'), Fact(der_valued='low'), Fact(roa_valued='low'))
    def fundamental_6_parameter_rule_4(self):
        self.declare(Fact(recommendation='PBV menunjukkan valuasi yang tinggi. PER berada di tingkat yang tinggi. ROE menunjukkan keuntungan yang tinggi. Laba bersih menunjukkan keuntungan. DER menunjukkan tingkat hutang yang rendah. ROA menunjukkan efisiensi rendah.'))


    @Rule(Fact(pb_valued='high'), Fact(per_valued='high'), Fact(roe_valued='high'), Fact(net_income_valued='loss'), Fact(der_valued='high'), Fact(roa_valued='high'))
    def fundamental_6_parameter_rule_5(self):
        self.declare(Fact(recommendation='PBV menunjukkan valuasi yang tinggi. PER berada di tingkat yang tinggi. ROE menunjukkan keuntungan yang tinggi. Laba bersih menunjukkan kerugian. DER menunjukkan tingkat hutang yang tinggi. ROA menunjukkan efisiensi tinggi.'))


    @Rule(Fact(pb_valued='high'), Fact(per_valued='high'), Fact(roe_valued='high'), Fact(net_income_valued='loss'), Fact(der_valued='high'), Fact(roa_valued='low'))
    def fundamental_6_parameter_rule_6(self):
        self.declare(Fact(recommendation='PBV menunjukkan valuasi yang tinggi. PER berada di tingkat yang tinggi. ROE menunjukkan keuntungan yang tinggi. Laba bersih menunjukkan kerugian. DER menunjukkan tingkat hutang yang tinggi. ROA menunjukkan efisiensi rendah.'))


    @Rule(Fact(pb_valued='high'), Fact(per_valued='high'), Fact(roe_valued='high'), Fact(net_income_valued='loss'), Fact(der_valued='low'), Fact(roa_valued='high'))
    def fundamental_6_parameter_rule_7(self):
        self.declare(Fact(recommendation='PBV menunjukkan valuasi yang tinggi. PER berada di tingkat yang tinggi. ROE menunjukkan keuntungan yang tinggi. Laba bersih menunjukkan kerugian. DER menunjukkan tingkat hutang yang rendah. ROA menunjukkan efisiensi tinggi.'))


    @Rule(Fact(pb_valued='high'), Fact(per_valued='high'), Fact(roe_valued='high'), Fact(net_income_valued='loss'), Fact(der_valued='low'), Fact(roa_valued='low'))
    def fundamental_6_parameter_rule_8(self):
        self.declare(Fact(recommendation='PBV menunjukkan valuasi yang tinggi. PER berada di tingkat yang tinggi. ROE menunjukkan keuntungan yang tinggi. Laba bersih menunjukkan kerugian. DER menunjukkan tingkat hutang yang rendah. ROA menunjukkan efisiensi rendah.'))


    @Rule(Fact(pb_valued='high'), Fact(per_valued='high'), Fact(roe_valued='low'), Fact(net_income_valued='profit'), Fact(der_valued='high'), Fact(roa_valued='high'))
    def fundamental_6_parameter_rule_9(self):
        self.declare(Fact(recommendation='PBV menunjukkan valuasi yang tinggi. PER berada di tingkat yang tinggi. ROE menunjukkan keuntungan yang rendah. Laba bersih menunjukkan keuntungan. DER menunjukkan tingkat hutang yang tinggi. ROA menunjukkan efisiensi tinggi.'))


    @Rule(Fact(pb_valued='high'), Fact(per_valued='high'), Fact(roe_valued='low'), Fact(net_income_valued='profit'), Fact(der_valued='high'), Fact(roa_valued='low'))
    def fundamental_6_parameter_rule_10(self):
        self.declare(Fact(recommendation='PBV menunjukkan valuasi yang tinggi. PER berada di tingkat yang tinggi. ROE menunjukkan keuntungan yang rendah. Laba bersih menunjukkan keuntungan. DER menunjukkan tingkat hutang yang tinggi. ROA menunjukkan efisiensi rendah.'))


    @Rule(Fact(pb_valued='high'), Fact(per_valued='high'), Fact(roe_valued='low'), Fact(net_income_valued='profit'), Fact(der_valued='low'), Fact(roa_valued='high'))
    def fundamental_6_parameter_rule_11(self):
        self.declare(Fact(recommendation='PBV menunjukkan valuasi yang tinggi. PER berada di tingkat yang tinggi. ROE menunjukkan keuntungan yang rendah. Laba bersih menunjukkan keuntungan. DER menunjukkan tingkat hutang yang rendah. ROA menunjukkan efisiensi tinggi.'))


    @Rule(Fact(pb_valued='high'), Fact(per_valued='high'), Fact(roe_valued='low'), Fact(net_income_valued='profit'), Fact(der_valued='low'), Fact(roa_valued='low'))
    def fundamental_6_parameter_rule_12(self):
        self.declare(Fact(recommendation='PBV menunjukkan valuasi yang tinggi. PER berada di tingkat yang tinggi. ROE menunjukkan keuntungan yang rendah. Laba bersih menunjukkan keuntungan. DER menunjukkan tingkat hutang yang rendah. ROA menunjukkan efisiensi rendah.'))


    @Rule(Fact(pb_valued='high'), Fact(per_valued='high'), Fact(roe_valued='low'), Fact(net_income_valued='loss'), Fact(der_valued='high'), Fact(roa_valued='high'))
    def fundamental_6_parameter_rule_13(self):
        self.declare(Fact(recommendation='PBV menunjukkan valuasi yang tinggi. PER berada di tingkat yang tinggi. ROE menunjukkan keuntungan yang rendah. Laba bersih menunjukkan kerugian. DER menunjukkan tingkat hutang yang tinggi. ROA menunjukkan efisiensi tinggi.'))


    @Rule(Fact(pb_valued='high'), Fact(per_valued='high'), Fact(roe_valued='low'), Fact(net_income_valued='loss'), Fact(der_valued='high'), Fact(roa_valued='low'))
    def fundamental_6_parameter_rule_14(self):
        self.declare(Fact(recommendation='PBV menunjukkan valuasi yang tinggi. PER berada di tingkat yang tinggi. ROE menunjukkan keuntungan yang rendah. Laba bersih menunjukkan kerugian. DER menunjukkan tingkat hutang yang tinggi. ROA menunjukkan efisiensi rendah.'))


    @Rule(Fact(pb_valued='high'), Fact(per_valued='high'), Fact(roe_valued='low'), Fact(net_income_valued='loss'), Fact(der_valued='low'), Fact(roa_valued='high'))
    def fundamental_6_parameter_rule_15(self):
        self.declare(Fact(recommendation='PBV menunjukkan valuasi yang tinggi. PER berada di tingkat yang tinggi. ROE menunjukkan keuntungan yang rendah. Laba bersih menunjukkan kerugian. DER menunjukkan tingkat hutang yang rendah. ROA menunjukkan efisiensi tinggi.'))


    @Rule(Fact(pb_valued='high'), Fact(per_valued='high'), Fact(roe_valued='low'), Fact(net_income_valued='loss'), Fact(der_valued='low'), Fact(roa_valued='low'))
    def fundamental_6_parameter_rule_16(self):
        self.declare(Fact(recommendation='PBV menunjukkan valuasi yang tinggi. PER berada di tingkat yang tinggi. ROE menunjukkan keuntungan yang rendah. Laba bersih menunjukkan kerugian. DER menunjukkan tingkat hutang yang rendah. ROA menunjukkan efisiensi rendah.'))


    @Rule(Fact(pb_valued='high'), Fact(per_valued='low'), Fact(roe_valued='high'), Fact(net_income_valued='profit'), Fact(der_valued='high'), Fact(roa_valued='high'))
    def fundamental_6_parameter_rule_17(self):
        self.declare(Fact(recommendation='PBV menunjukkan valuasi yang tinggi. PER berada di tingkat yang rendah. ROE menunjukkan keuntungan yang tinggi. Laba bersih menunjukkan keuntungan. DER menunjukkan tingkat hutang yang tinggi. ROA menunjukkan efisiensi tinggi.'))


    @Rule(Fact(pb_valued='high'), Fact(per_valued='low'), Fact(roe_valued='high'), Fact(net_income_valued='profit'), Fact(der_valued='high'), Fact(roa_valued='low'))
    def fundamental_6_parameter_rule_18(self):
        self.declare(Fact(recommendation='PBV menunjukkan valuasi yang tinggi. PER berada di tingkat yang rendah. ROE menunjukkan keuntungan yang tinggi. Laba bersih menunjukkan keuntungan. DER menunjukkan tingkat hutang yang tinggi. ROA menunjukkan efisiensi rendah.'))


    @Rule(Fact(pb_valued='high'), Fact(per_valued='low'), Fact(roe_valued='high'), Fact(net_income_valued='profit'), Fact(der_valued='low'), Fact(roa_valued='high'))
    def fundamental_6_parameter_rule_19(self):
        self.declare(Fact(recommendation='PBV menunjukkan valuasi yang tinggi. PER berada di tingkat yang rendah. ROE menunjukkan keuntungan yang tinggi. Laba bersih menunjukkan keuntungan. DER menunjukkan tingkat hutang yang rendah. ROA menunjukkan efisiensi tinggi.'))


    @Rule(Fact(pb_valued='high'), Fact(per_valued='low'), Fact(roe_valued='high'), Fact(net_income_valued='profit'), Fact(der_valued='low'), Fact(roa_valued='low'))
    def fundamental_6_parameter_rule_20(self):
        self.declare(Fact(recommendation='PBV menunjukkan valuasi yang tinggi. PER berada di tingkat yang rendah. ROE menunjukkan keuntungan yang tinggi. Laba bersih menunjukkan keuntungan. DER menunjukkan tingkat hutang yang rendah. ROA menunjukkan efisiensi rendah.'))


    @Rule(Fact(pb_valued='high'), Fact(per_valued='low'), Fact(roe_valued='high'), Fact(net_income_valued='loss'), Fact(der_valued='high'), Fact(roa_valued='high'))
    def fundamental_6_parameter_rule_21(self):
        self.declare(Fact(recommendation='PBV menunjukkan valuasi yang tinggi. PER berada di tingkat yang rendah. ROE menunjukkan keuntungan yang tinggi. Laba bersih menunjukkan kerugian. DER menunjukkan tingkat hutang yang tinggi. ROA menunjukkan efisiensi tinggi.'))


    @Rule(Fact(pb_valued='high'), Fact(per_valued='low'), Fact(roe_valued='high'), Fact(net_income_valued='loss'), Fact(der_valued='high'), Fact(roa_valued='low'))
    def fundamental_6_parameter_rule_22(self):
        self.declare(Fact(recommendation='PBV menunjukkan valuasi yang tinggi. PER berada di tingkat yang rendah. ROE menunjukkan keuntungan yang tinggi. Laba bersih menunjukkan kerugian. DER menunjukkan tingkat hutang yang tinggi. ROA menunjukkan efisiensi rendah.'))


    @Rule(Fact(pb_valued='high'), Fact(per_valued='low'), Fact(roe_valued='high'), Fact(net_income_valued='loss'), Fact(der_valued='low'), Fact(roa_valued='high'))
    def fundamental_6_parameter_rule_23(self):
        self.declare(Fact(recommendation='PBV menunjukkan valuasi yang tinggi. PER berada di tingkat yang rendah. ROE menunjukkan keuntungan yang tinggi. Laba bersih menunjukkan kerugian. DER menunjukkan tingkat hutang yang rendah. ROA menunjukkan efisiensi tinggi.'))


    @Rule(Fact(pb_valued='high'), Fact(per_valued='low'), Fact(roe_valued='high'), Fact(net_income_valued='loss'), Fact(der_valued='low'), Fact(roa_valued='low'))
    def fundamental_6_parameter_rule_24(self):
        self.declare(Fact(recommendation='PBV menunjukkan valuasi yang tinggi. PER berada di tingkat yang rendah. ROE menunjukkan keuntungan yang tinggi. Laba bersih menunjukkan kerugian. DER menunjukkan tingkat hutang yang rendah. ROA menunjukkan efisiensi rendah.'))


    @Rule(Fact(pb_valued='high'), Fact(per_valued='low'), Fact(roe_valued='low'), Fact(net_income_valued='profit'), Fact(der_valued='high'), Fact(roa_valued='high'))
    def fundamental_6_parameter_rule_25(self):
        self.declare(Fact(recommendation='PBV menunjukkan valuasi yang tinggi. PER berada di tingkat yang rendah. ROE menunjukkan keuntungan yang rendah. Laba bersih menunjukkan keuntungan. DER menunjukkan tingkat hutang yang tinggi. ROA menunjukkan efisiensi tinggi.'))


    @Rule(Fact(pb_valued='high'), Fact(per_valued='low'), Fact(roe_valued='low'), Fact(net_income_valued='profit'), Fact(der_valued='high'), Fact(roa_valued='low'))
    def fundamental_6_parameter_rule_26(self):
        self.declare(Fact(recommendation='PBV menunjukkan valuasi yang tinggi. PER berada di tingkat yang rendah. ROE menunjukkan keuntungan yang rendah. Laba bersih menunjukkan keuntungan. DER menunjukkan tingkat hutang yang tinggi. ROA menunjukkan efisiensi rendah.'))


    @Rule(Fact(pb_valued='high'), Fact(per_valued='low'), Fact(roe_valued='low'), Fact(net_income_valued='profit'), Fact(der_valued='low'), Fact(roa_valued='high'))
    def fundamental_6_parameter_rule_27(self):
        self.declare(Fact(recommendation='PBV menunjukkan valuasi yang tinggi. PER berada di tingkat yang rendah. ROE menunjukkan keuntungan yang rendah. Laba bersih menunjukkan keuntungan. DER menunjukkan tingkat hutang yang rendah. ROA menunjukkan efisiensi tinggi.'))


    @Rule(Fact(pb_valued='high'), Fact(per_valued='low'), Fact(roe_valued='low'), Fact(net_income_valued='profit'), Fact(der_valued='low'), Fact(roa_valued='low'))
    def fundamental_6_parameter_rule_28(self):
        self.declare(Fact(recommendation='PBV menunjukkan valuasi yang tinggi. PER berada di tingkat yang rendah. ROE menunjukkan keuntungan yang rendah. Laba bersih menunjukkan keuntungan. DER menunjukkan tingkat hutang yang rendah. ROA menunjukkan efisiensi rendah.'))


    @Rule(Fact(pb_valued='high'), Fact(per_valued='low'), Fact(roe_valued='low'), Fact(net_income_valued='loss'), Fact(der_valued='high'), Fact(roa_valued='high'))
    def fundamental_6_parameter_rule_29(self):
        self.declare(Fact(recommendation='PBV menunjukkan valuasi yang tinggi. PER berada di tingkat yang rendah. ROE menunjukkan keuntungan yang rendah. Laba bersih menunjukkan kerugian. DER menunjukkan tingkat hutang yang tinggi. ROA menunjukkan efisiensi tinggi.'))


    @Rule(Fact(pb_valued='high'), Fact(per_valued='low'), Fact(roe_valued='low'), Fact(net_income_valued='loss'), Fact(der_valued='high'), Fact(roa_valued='low'))
    def fundamental_6_parameter_rule_30(self):
        self.declare(Fact(recommendation='PBV menunjukkan valuasi yang tinggi. PER berada di tingkat yang rendah. ROE menunjukkan keuntungan yang rendah. Laba bersih menunjukkan kerugian. DER menunjukkan tingkat hutang yang tinggi. ROA menunjukkan efisiensi rendah.'))


    @Rule(Fact(pb_valued='high'), Fact(per_valued='low'), Fact(roe_valued='low'), Fact(net_income_valued='loss'), Fact(der_valued='low'), Fact(roa_valued='high'))
    def fundamental_6_parameter_rule_31(self):
        self.declare(Fact(recommendation='PBV menunjukkan valuasi yang tinggi. PER berada di tingkat yang rendah. ROE menunjukkan keuntungan yang rendah. Laba bersih menunjukkan kerugian. DER menunjukkan tingkat hutang yang rendah. ROA menunjukkan efisiensi tinggi.'))


    @Rule(Fact(pb_valued='high'), Fact(per_valued='low'), Fact(roe_valued='low'), Fact(net_income_valued='loss'), Fact(der_valued='low'), Fact(roa_valued='low'))
    def fundamental_6_parameter_rule_32(self):
        self.declare(Fact(recommendation='PBV menunjukkan valuasi yang tinggi. PER berada di tingkat yang rendah. ROE menunjukkan keuntungan yang rendah. Laba bersih menunjukkan kerugian. DER menunjukkan tingkat hutang yang rendah. ROA menunjukkan efisiensi rendah.'))


    @Rule(Fact(pb_valued='low'), Fact(per_valued='high'), Fact(roe_valued='high'), Fact(net_income_valued='profit'), Fact(der_valued='high'), Fact(roa_valued='high'))
    def fundamental_6_parameter_rule_33(self):
        self.declare(Fact(recommendation='PBV menunjukkan valuasi yang rendah. PER berada di tingkat yang tinggi. ROE menunjukkan keuntungan yang tinggi. Laba bersih menunjukkan keuntungan. DER menunjukkan tingkat hutang yang tinggi. ROA menunjukkan efisiensi tinggi.'))


    @Rule(Fact(pb_valued='low'), Fact(per_valued='high'), Fact(roe_valued='high'), Fact(net_income_valued='profit'), Fact(der_valued='high'), Fact(roa_valued='low'))
    def fundamental_6_parameter_rule_34(self):
        self.declare(Fact(recommendation='PBV menunjukkan valuasi yang rendah. PER berada di tingkat yang tinggi. ROE menunjukkan keuntungan yang tinggi. Laba bersih menunjukkan keuntungan. DER menunjukkan tingkat hutang yang tinggi. ROA menunjukkan efisiensi rendah.'))


    @Rule(Fact(pb_valued='low'), Fact(per_valued='high'), Fact(roe_valued='high'), Fact(net_income_valued='profit'), Fact(der_valued='low'), Fact(roa_valued='high'))
    def fundamental_6_parameter_rule_35(self):
        self.declare(Fact(recommendation='PBV menunjukkan valuasi yang rendah. PER berada di tingkat yang tinggi. ROE menunjukkan keuntungan yang tinggi. Laba bersih menunjukkan keuntungan. DER menunjukkan tingkat hutang yang rendah. ROA menunjukkan efisiensi tinggi.'))


    @Rule(Fact(pb_valued='low'), Fact(per_valued='high'), Fact(roe_valued='high'), Fact(net_income_valued='profit'), Fact(der_valued='low'), Fact(roa_valued='low'))
    def fundamental_6_parameter_rule_36(self):
        self.declare(Fact(recommendation='PBV menunjukkan valuasi yang rendah. PER berada di tingkat yang tinggi. ROE menunjukkan keuntungan yang tinggi. Laba bersih menunjukkan keuntungan. DER menunjukkan tingkat hutang yang rendah. ROA menunjukkan efisiensi rendah.'))


    @Rule(Fact(pb_valued='low'), Fact(per_valued='high'), Fact(roe_valued='high'), Fact(net_income_valued='loss'), Fact(der_valued='high'), Fact(roa_valued='high'))
    def fundamental_6_parameter_rule_37(self):
        self.declare(Fact(recommendation='PBV menunjukkan valuasi yang rendah. PER berada di tingkat yang tinggi. ROE menunjukkan keuntungan yang tinggi. Laba bersih menunjukkan kerugian. DER menunjukkan tingkat hutang yang tinggi. ROA menunjukkan efisiensi tinggi.'))


    @Rule(Fact(pb_valued='low'), Fact(per_valued='high'), Fact(roe_valued='high'), Fact(net_income_valued='loss'), Fact(der_valued='high'), Fact(roa_valued='low'))
    def fundamental_6_parameter_rule_38(self):
        self.declare(Fact(recommendation='PBV menunjukkan valuasi yang rendah. PER berada di tingkat yang tinggi. ROE menunjukkan keuntungan yang tinggi. Laba bersih menunjukkan kerugian. DER menunjukkan tingkat hutang yang tinggi. ROA menunjukkan efisiensi rendah.'))


    @Rule(Fact(pb_valued='low'), Fact(per_valued='high'), Fact(roe_valued='high'), Fact(net_income_valued='loss'), Fact(der_valued='low'), Fact(roa_valued='high'))
    def fundamental_6_parameter_rule_39(self):
        self.declare(Fact(recommendation='PBV menunjukkan valuasi yang rendah. PER berada di tingkat yang tinggi. ROE menunjukkan keuntungan yang tinggi. Laba bersih menunjukkan kerugian. DER menunjukkan tingkat hutang yang rendah. ROA menunjukkan efisiensi tinggi.'))


    @Rule(Fact(pb_valued='low'), Fact(per_valued='high'), Fact(roe_valued='high'), Fact(net_income_valued='loss'), Fact(der_valued='low'), Fact(roa_valued='low'))
    def fundamental_6_parameter_rule_40(self):
        self.declare(Fact(recommendation='PBV menunjukkan valuasi yang rendah. PER berada di tingkat yang tinggi. ROE menunjukkan keuntungan yang tinggi. Laba bersih menunjukkan kerugian. DER menunjukkan tingkat hutang yang rendah. ROA menunjukkan efisiensi rendah.'))


    @Rule(Fact(pb_valued='low'), Fact(per_valued='high'), Fact(roe_valued='low'), Fact(net_income_valued='profit'), Fact(der_valued='high'), Fact(roa_valued='high'))
    def fundamental_6_parameter_rule_41(self):
        self.declare(Fact(recommendation='PBV menunjukkan valuasi yang rendah. PER berada di tingkat yang tinggi. ROE menunjukkan keuntungan yang rendah. Laba bersih menunjukkan keuntungan. DER menunjukkan tingkat hutang yang tinggi. ROA menunjukkan efisiensi tinggi.'))


    @Rule(Fact(pb_valued='low'), Fact(per_valued='high'), Fact(roe_valued='low'), Fact(net_income_valued='profit'), Fact(der_valued='high'), Fact(roa_valued='low'))
    def fundamental_6_parameter_rule_42(self):
        self.declare(Fact(recommendation='PBV menunjukkan valuasi yang rendah. PER berada di tingkat yang tinggi. ROE menunjukkan keuntungan yang rendah. Laba bersih menunjukkan keuntungan. DER menunjukkan tingkat hutang yang tinggi. ROA menunjukkan efisiensi rendah.'))


    @Rule(Fact(pb_valued='low'), Fact(per_valued='high'), Fact(roe_valued='low'), Fact(net_income_valued='profit'), Fact(der_valued='low'), Fact(roa_valued='high'))
    def fundamental_6_parameter_rule_43(self):
        self.declare(Fact(recommendation='PBV menunjukkan valuasi yang rendah. PER berada di tingkat yang tinggi. ROE menunjukkan keuntungan yang rendah. Laba bersih menunjukkan keuntungan. DER menunjukkan tingkat hutang yang rendah. ROA menunjukkan efisiensi tinggi.'))


    @Rule(Fact(pb_valued='low'), Fact(per_valued='high'), Fact(roe_valued='low'), Fact(net_income_valued='profit'), Fact(der_valued='low'), Fact(roa_valued='low'))
    def fundamental_6_parameter_rule_44(self):
        self.declare(Fact(recommendation='PBV menunjukkan valuasi yang rendah. PER berada di tingkat yang tinggi. ROE menunjukkan keuntungan yang rendah. Laba bersih menunjukkan keuntungan. DER menunjukkan tingkat hutang yang rendah. ROA menunjukkan efisiensi rendah.'))


    @Rule(Fact(pb_valued='low'), Fact(per_valued='high'), Fact(roe_valued='low'), Fact(net_income_valued='loss'), Fact(der_valued='high'), Fact(roa_valued='high'))
    def fundamental_6_parameter_rule_45(self):
        self.declare(Fact(recommendation='PBV menunjukkan valuasi yang rendah. PER berada di tingkat yang tinggi. ROE menunjukkan keuntungan yang rendah. Laba bersih menunjukkan kerugian. DER menunjukkan tingkat hutang yang tinggi. ROA menunjukkan efisiensi tinggi.'))


    @Rule(Fact(pb_valued='low'), Fact(per_valued='high'), Fact(roe_valued='low'), Fact(net_income_valued='loss'), Fact(der_valued='high'), Fact(roa_valued='low'))
    def fundamental_6_parameter_rule_46(self):
        self.declare(Fact(recommendation='PBV menunjukkan valuasi yang rendah. PER berada di tingkat yang tinggi. ROE menunjukkan keuntungan yang rendah. Laba bersih menunjukkan kerugian. DER menunjukkan tingkat hutang yang tinggi. ROA menunjukkan efisiensi rendah.'))


    @Rule(Fact(pb_valued='low'), Fact(per_valued='high'), Fact(roe_valued='low'), Fact(net_income_valued='loss'), Fact(der_valued='low'), Fact(roa_valued='high'))
    def fundamental_6_parameter_rule_47(self):
        self.declare(Fact(recommendation='PBV menunjukkan valuasi yang rendah. PER berada di tingkat yang tinggi. ROE menunjukkan keuntungan yang rendah. Laba bersih menunjukkan kerugian. DER menunjukkan tingkat hutang yang rendah. ROA menunjukkan efisiensi tinggi.'))


    @Rule(Fact(pb_valued='low'), Fact(per_valued='high'), Fact(roe_valued='low'), Fact(net_income_valued='loss'), Fact(der_valued='low'), Fact(roa_valued='low'))
    def fundamental_6_parameter_rule_48(self):
        self.declare(Fact(recommendation='PBV menunjukkan valuasi yang rendah. PER berada di tingkat yang tinggi. ROE menunjukkan keuntungan yang rendah. Laba bersih menunjukkan kerugian. DER menunjukkan tingkat hutang yang rendah. ROA menunjukkan efisiensi rendah.'))


    @Rule(Fact(pb_valued='low'), Fact(per_valued='low'), Fact(roe_valued='high'), Fact(net_income_valued='profit'), Fact(der_valued='high'), Fact(roa_valued='high'))
    def fundamental_6_parameter_rule_49(self):
        self.declare(Fact(recommendation='PBV menunjukkan valuasi yang rendah. PER berada di tingkat yang rendah. ROE menunjukkan keuntungan yang tinggi. Laba bersih menunjukkan keuntungan. DER menunjukkan tingkat hutang yang tinggi. ROA menunjukkan efisiensi tinggi.'))


    @Rule(Fact(pb_valued='low'), Fact(per_valued='low'), Fact(roe_valued='high'), Fact(net_income_valued='profit'), Fact(der_valued='high'), Fact(roa_valued='low'))
    def fundamental_6_parameter_rule_50(self):
        self.declare(Fact(recommendation='PBV menunjukkan valuasi yang rendah. PER berada di tingkat yang rendah. ROE menunjukkan keuntungan yang tinggi. Laba bersih menunjukkan keuntungan. DER menunjukkan tingkat hutang yang tinggi. ROA menunjukkan efisiensi rendah.'))


    @Rule(Fact(pb_valued='low'), Fact(per_valued='low'), Fact(roe_valued='high'), Fact(net_income_valued='profit'), Fact(der_valued='low'), Fact(roa_valued='high'))
    def fundamental_6_parameter_rule_51(self):
        self.declare(Fact(recommendation='PBV menunjukkan valuasi yang rendah. PER berada di tingkat yang rendah. ROE menunjukkan keuntungan yang tinggi. Laba bersih menunjukkan keuntungan. DER menunjukkan tingkat hutang yang rendah. ROA menunjukkan efisiensi tinggi.'))


    @Rule(Fact(pb_valued='low'), Fact(per_valued='low'), Fact(roe_valued='high'), Fact(net_income_valued='profit'), Fact(der_valued='low'), Fact(roa_valued='low'))
    def fundamental_6_parameter_rule_52(self):
        self.declare(Fact(recommendation='PBV menunjukkan valuasi yang rendah. PER berada di tingkat yang rendah. ROE menunjukkan keuntungan yang tinggi. Laba bersih menunjukkan keuntungan. DER menunjukkan tingkat hutang yang rendah. ROA menunjukkan efisiensi rendah.'))


    @Rule(Fact(pb_valued='low'), Fact(per_valued='low'), Fact(roe_valued='high'), Fact(net_income_valued='loss'), Fact(der_valued='high'), Fact(roa_valued='high'))
    def fundamental_6_parameter_rule_53(self):
        self.declare(Fact(recommendation='PBV menunjukkan valuasi yang rendah. PER berada di tingkat yang rendah. ROE menunjukkan keuntungan yang tinggi. Laba bersih menunjukkan kerugian. DER menunjukkan tingkat hutang yang tinggi. ROA menunjukkan efisiensi tinggi.'))


    @Rule(Fact(pb_valued='low'), Fact(per_valued='low'), Fact(roe_valued='high'), Fact(net_income_valued='loss'), Fact(der_valued='high'), Fact(roa_valued='low'))
    def fundamental_6_parameter_rule_54(self):
        self.declare(Fact(recommendation='PBV menunjukkan valuasi yang rendah. PER berada di tingkat yang rendah. ROE menunjukkan keuntungan yang tinggi. Laba bersih menunjukkan kerugian. DER menunjukkan tingkat hutang yang tinggi. ROA menunjukkan efisiensi rendah.'))


    @Rule(Fact(pb_valued='low'), Fact(per_valued='low'), Fact(roe_valued='high'), Fact(net_income_valued='loss'), Fact(der_valued='low'), Fact(roa_valued='high'))
    def fundamental_6_parameter_rule_55(self):
        self.declare(Fact(recommendation='PBV menunjukkan valuasi yang rendah. PER berada di tingkat yang rendah. ROE menunjukkan keuntungan yang tinggi. Laba bersih menunjukkan kerugian. DER menunjukkan tingkat hutang yang rendah. ROA menunjukkan efisiensi tinggi.'))


    @Rule(Fact(pb_valued='low'), Fact(per_valued='low'), Fact(roe_valued='high'), Fact(net_income_valued='loss'), Fact(der_valued='low'), Fact(roa_valued='low'))
    def fundamental_6_parameter_rule_56(self):
        self.declare(Fact(recommendation='PBV menunjukkan valuasi yang rendah. PER berada di tingkat yang rendah. ROE menunjukkan keuntungan yang tinggi. Laba bersih menunjukkan kerugian. DER menunjukkan tingkat hutang yang rendah. ROA menunjukkan efisiensi rendah.'))


    @Rule(Fact(pb_valued='low'), Fact(per_valued='low'), Fact(roe_valued='low'), Fact(net_income_valued='profit'), Fact(der_valued='high'), Fact(roa_valued='high'))
    def fundamental_6_parameter_rule_57(self):
        self.declare(Fact(recommendation='PBV menunjukkan valuasi yang rendah. PER berada di tingkat yang rendah. ROE menunjukkan keuntungan yang rendah. Laba bersih menunjukkan keuntungan. DER menunjukkan tingkat hutang yang tinggi. ROA menunjukkan efisiensi tinggi.'))


    @Rule(Fact(pb_valued='low'), Fact(per_valued='low'), Fact(roe_valued='low'), Fact(net_income_valued='profit'), Fact(der_valued='high'), Fact(roa_valued='low'))
    def fundamental_6_parameter_rule_58(self):
        self.declare(Fact(recommendation='PBV menunjukkan valuasi yang rendah. PER berada di tingkat yang rendah. ROE menunjukkan keuntungan yang rendah. Laba bersih menunjukkan keuntungan. DER menunjukkan tingkat hutang yang tinggi. ROA menunjukkan efisiensi rendah.'))


    @Rule(Fact(pb_valued='low'), Fact(per_valued='low'), Fact(roe_valued='low'), Fact(net_income_valued='profit'), Fact(der_valued='low'), Fact(roa_valued='high'))
    def fundamental_6_parameter_rule_59(self):
        self.declare(Fact(recommendation='PBV menunjukkan valuasi yang rendah. PER berada di tingkat yang rendah. ROE menunjukkan keuntungan yang rendah. Laba bersih menunjukkan keuntungan. DER menunjukkan tingkat hutang yang rendah. ROA menunjukkan efisiensi tinggi.'))


    @Rule(Fact(pb_valued='low'), Fact(per_valued='low'), Fact(roe_valued='low'), Fact(net_income_valued='profit'), Fact(der_valued='low'), Fact(roa_valued='low'))
    def fundamental_6_parameter_rule_60(self):
        self.declare(Fact(recommendation='PBV menunjukkan valuasi yang rendah. PER berada di tingkat yang rendah. ROE menunjukkan keuntungan yang rendah. Laba bersih menunjukkan keuntungan. DER menunjukkan tingkat hutang yang rendah. ROA menunjukkan efisiensi rendah.'))


    @Rule(Fact(pb_valued='low'), Fact(per_valued='low'), Fact(roe_valued='low'), Fact(net_income_valued='loss'), Fact(der_valued='high'), Fact(roa_valued='high'))
    def fundamental_6_parameter_rule_61(self):
        self.declare(Fact(recommendation='PBV menunjukkan valuasi yang rendah. PER berada di tingkat yang rendah. ROE menunjukkan keuntungan yang rendah. Laba bersih menunjukkan kerugian. DER menunjukkan tingkat hutang yang tinggi. ROA menunjukkan efisiensi tinggi.'))


    @Rule(Fact(pb_valued='low'), Fact(per_valued='low'), Fact(roe_valued='low'), Fact(net_income_valued='loss'), Fact(der_valued='high'), Fact(roa_valued='low'))
    def fundamental_6_parameter_rule_62(self):
        self.declare(Fact(recommendation='PBV menunjukkan valuasi yang rendah. PER berada di tingkat yang rendah. ROE menunjukkan keuntungan yang rendah. Laba bersih menunjukkan kerugian. DER menunjukkan tingkat hutang yang tinggi. ROA menunjukkan efisiensi rendah.'))


    @Rule(Fact(pb_valued='low'), Fact(per_valued='low'), Fact(roe_valued='low'), Fact(net_income_valued='loss'), Fact(der_valued='low'), Fact(roa_valued='high'))
    def fundamental_6_parameter_rule_63(self):
        self.declare(Fact(recommendation='PBV menunjukkan valuasi yang rendah. PER berada di tingkat yang rendah. ROE menunjukkan keuntungan yang rendah. Laba bersih menunjukkan kerugian. DER menunjukkan tingkat hutang yang rendah. ROA menunjukkan efisiensi tinggi.'))


    @Rule(Fact(pb_valued='low'), Fact(per_valued='low'), Fact(roe_valued='low'), Fact(net_income_valued='loss'), Fact(der_valued='low'), Fact(roa_valued='low'))
    def fundamental_6_parameter_rule_64(self):
        self.declare(Fact(recommendation='PBV menunjukkan valuasi yang rendah. PER berada di tingkat yang rendah. ROE menunjukkan keuntungan yang rendah. Laba bersih menunjukkan kerugian. DER menunjukkan tingkat hutang yang rendah. ROA menunjukkan efisiensi rendah.'))






    @Rule(Fact(pb_valued='low'))
    def buy_stock_pbv_only(self):
        self.declare(Fact(recommendation='Beli karena nilai PBV dibawah 1x, yang artinya harga saham sekarang lebih rendah dibanding Nilai Buku atau Modal Awal perusahaan.'))

    @Rule(Fact(pb_valued='high'))
    def dont_buy_high_pbv(self):
        self.declare(Fact(recommendation='Tidak Direkomendasikan untuk Beli karena nilai PBV diatas 1x, yang artinya harga saham sekarang lebih tinggi dibanding Nilai Buku atau Modal Awal perusahaan.'))

    # Aturan untuk hanya PER
    @Rule(Fact(per_valued='low'))
    def low_per_recommendation(self):
        self.declare(Fact(recommendation='PER rendah, pertimbangkan untuk membeli.'))

    @Rule(Fact(per_valued='high'))
    def high_per_recommendation(self):
        self.declare(Fact(recommendation='PER tinggi, harga saham mungkin terlalu mahal.'))

    # Aturan untuk hanya ROE
    @Rule(Fact(roe_valued='high'))
    def high_roe_recommendation(self):
        self.declare(Fact(recommendation='ROE tinggi, perusahaan menguntungkan.'))

    @Rule(Fact(roe_valued='low'))
    def low_roe_recommendation(self):
        self.declare(Fact(recommendation='ROE rendah, pertimbangkan risiko.'))

    # Aturan untuk hanya laba bersih
    @Rule(Fact(net_income_valued='profit'))
    def profit_recommendation(self):
        self.declare(Fact(recommendation='Cenderung beli karena perusahaan dalam kondisi menguntungkan. Tetap analisa lebih lanjut karena anda hanya memasukkan 1 parameter'))

    @Rule(Fact(net_income_valued='loss'))
    def loss_recommendation(self):
        self.declare(Fact(recommendation='Perusahaan dalam kondisi rugi. Pertimbangkan risiko.'))

    # Aturan untuk hanya DER
    @Rule(Fact(der_valued='low'))
    def low_der_recommendation(self):
        self.declare(Fact(recommendation='DER rendah, perusahaan memiliki utang yang sehat.'))

    @Rule(Fact(der_valued='high'))
    def high_der_recommendation(self):
        self.declare(Fact(recommendation='DER tinggi, perusahaan mungkin berisiko tinggi karena utang.'))

    # Aturan untuk hanya ROA
    @Rule(Fact(roa_valued='high'))
    def high_roa_recommendation(self):
        self.declare(Fact(recommendation='ROA tinggi, menunjukkan efisiensi manajemen aset.'))

    @Rule(Fact(roa_valued='low'))
    def low_roa_recommendation(self):
        self.declare(Fact(recommendation='ROA rendah, perusahaan mungkin tidak efisien dalam menggunakan aset.'))

    # Aturan jika semua indikator adalah None
    @Rule(Fact(pb_valued='none'), Fact(per_valued='none'), Fact(roe_valued='none'),
          Fact(net_income_valued='none'), Fact(der_valued='none'), Fact(roa_valued='none'))
    def all_values_none(self):
        self.declare(Fact(recommendation='Silakan masukkan semua indikator untuk mendapatkan rekomendasi.'))

    # Kombinasi yang sangat baik
    @Rule(Fact(pb_valued='low'), Fact(per_valued='low'), Fact(roe_valued='high'),
          Fact(net_income_valued='profit'), Fact(der_valued='low'), Fact(roa_valued='high'))
    def buy_stock(self):
        self.declare(Fact(recommendation='Buy - Semua indikator menunjukkan kondisi baik.'))

    # Kombinasi yang sangat buruk
    @Rule(Fact(pb_valued='high'), Fact(per_valued='high'), Fact(roe_valued='low'),
          Fact(net_income_valued='loss'), Fact(der_valued='high'), Fact(roa_valued='low'))
    def do_not_buy_stock(self):
        self.declare(Fact(recommendation='Do not buy - Semua indikator menunjukkan kondisi buruk.'))

    # Kombinasi PER dan ROE yang baik tetapi PBV tinggi
    @Rule(Fact(pb_valued='high'), Fact(per_valued='low'), Fact(roe_valued='high'),
          Fact(net_income_valued='profit'), Fact(der_valued='low'), Fact(roa_valued='high'))
    def strong_buy_stock(self):
        self.declare(Fact(recommendation='Strong Buy - Meskipun PBV tinggi, kondisi lainnya baik.'))

    # Kombinasi PER tinggi dengan ROE rendah
    @Rule(Fact(per_valued='high'), Fact(roe_valued='low'))
    def high_per_low_roe(self):
        self.declare(Fact(recommendation='PER tinggi dan ROE rendah - Pertimbangkan risiko.'))

    # Aturan untuk kombinasi PBV rendah dan DER tinggi
    @Rule(Fact(pb_valued='low'), Fact(der_valued='high'))
    def low_pb_high_der(self):
        self.declare(Fact(recommendation='PBV rendah tetapi DER tinggi. Pertimbangkan risiko utang.'))

    # Aturan untuk laba bersih positif dengan PER tinggi
    @Rule(Fact(net_income_valued='profit'), Fact(per_valued='high'))
    def profit_with_high_per(self):
        self.declare(Fact(recommendation='Laba bersih positif, tetapi PER tinggi. Harga saham mungkin terlalu mahal.'))

    # Aturan untuk situasi campuran di mana ada satu indikator baik dan lainnya buruk
    @Rule(Fact(pb_valued='high'), Fact(roe_valued='low'))
    def mixed_indicators(self):
        self.declare(Fact(recommendation='Indikator campuran: PBV tinggi dan ROE rendah. Pertimbangkan analisis lebih lanjut.'))

    # Kombinasi PBV rendah dengan ROE rendah
    @Rule(Fact(pb_valued='low'), Fact(roe_valued='low'))
    def low_pb_low_roe(self):
        self.declare(Fact(recommendation='PBV rendah dan ROE rendah - Pertimbangkan risiko.'))

    # Kombinasi DER rendah dengan laba bersih rugi
    @Rule(Fact(der_valued='low'), Fact(net_income_valued='loss'))
    def low_der_loss_income(self):
        self.declare(Fact(recommendation='DER rendah tetapi perusahaan rugi - Pertimbangkan risiko lebih lanjut.'))

    # Kombinasi ROA tinggi dengan laba bersih rugi
    @Rule(Fact(roa_valued='high'), Fact(net_income_valued='loss'))
    def high_roa_loss_income(self):
        self.declare(Fact(recommendation='ROA tinggi tetapi laba bersih rugi - Perusahaan mungkin efisien, tetapi ada masalah di laba.'))

    # Kombinasi PBV tinggi dan laba bersih positif
    @Rule(Fact(pb_valued='high'), Fact(net_income_valued='profit'))
    def high_pb_profit(self):
        self.declare(Fact(recommendation='PBV tinggi dan laba bersih positif - Pertimbangkan untuk menganalisis lebih lanjut.'))

    # Kombinasi PER tinggi dengan DER rendah
    @Rule(Fact(per_valued='high'), Fact(der_valued='low'))
    def high_per_low_der(self):
        self.declare(Fact(recommendation='PER tinggi tetapi DER rendah - Mungkin ada peluang untuk investasi.'))

    # Kombinasi DER tinggi dan ROA tinggi
    @Rule(Fact(der_valued='high'), Fact(roa_valued='high'))
    def high_der_high_roa(self):
        self.declare(Fact(recommendation='DER tinggi tetapi ROA tinggi - Pertimbangkan untuk menganalisis utang.'))

    # Aturan untuk DER tinggi dan ROA rendah
    @Rule(Fact(der_valued='high'), Fact(roa_valued='low'))
    def der_high_roa_low(self):
        self.declare(Fact(recommendation='DER tinggi dan ROA rendah. Pertimbangkan risiko tinggi dalam investasi.'))

    # Kombinasi laba bersih negatif tetapi PBV rendah
    @Rule(Fact(net_income_valued='loss'), Fact(pb_valued='low'))
    def loss_with_low_pb(self):
        self.declare(Fact(recommendation='Meskipun PBV rendah, laba bersih negatif. Pertimbangkan risiko sebelum berinvestasi.'))

    # Kombinasi laba bersih positif tetapi ROE rendah
    @Rule(Fact(net_income_valued='profit'), Fact(roe_valued='low'))
    def profit_with_low_roe(self):
        self.declare(Fact(recommendation='Laba bersih positif tetapi ROE rendah. Pertimbangkan analisis lebih lanjut.'))

    # Kombinasi PBV tinggi dan ROE tinggi
    @Rule(Fact(pb_valued='high'), Fact(roe_valued='high'))
    def high_pb_high_roe(self):
        self.declare(Fact(recommendation='PBV tinggi dan ROE tinggi. Pertimbangkan untuk menganalisis lebih lanjut.'))



    # Rule untuk Analisis Teknikal
    # Rule untuk Analisis Teknikal
    # Rule untuk Analisis Teknikal
    # Rule untuk Analisis Teknikal
    # Rule untuk Analisis Teknikal
    # Rule untuk Analisis Teknikal
    # Rule untuk Analisis Teknikal
    # Rule untuk Analisis Teknikal

    @Rule(Fact(moving_average_valued='high'), Fact(rsi_valued='high'), Fact(supply_demand_valued='high'))
    def stock_technical_rule_1(self):
        self.declare(Fact(recommendation='Moving Average menunjukkan tren naik. RSI berada dalam kondisi overbought. Supply dan demand menunjukkan tekanan beli tinggi.'))


    @Rule(Fact(moving_average_valued='high'), Fact(rsi_valued='high'), Fact(supply_demand_valued='low'))
    def stock_technical_rule_2(self):
        self.declare(Fact(recommendation='Moving Average menunjukkan tren naik. RSI berada dalam kondisi overbought. Supply dan demand menunjukkan tekanan jual tinggi.'))


    @Rule(Fact(moving_average_valued='high'), Fact(rsi_valued='low'), Fact(supply_demand_valued='high'))
    def stock_technical_rule_3(self):
        self.declare(Fact(recommendation='Moving Average menunjukkan tren naik. RSI berada dalam kondisi oversold. Supply dan demand menunjukkan tekanan beli tinggi.'))


    @Rule(Fact(moving_average_valued='high'), Fact(rsi_valued='low'), Fact(supply_demand_valued='low'))
    def stock_technical_rule_4(self):
        self.declare(Fact(recommendation='Moving Average menunjukkan tren naik. RSI berada dalam kondisi oversold. Supply dan demand menunjukkan tekanan jual tinggi.'))


    @Rule(Fact(moving_average_valued='low'), Fact(rsi_valued='high'), Fact(supply_demand_valued='high'))
    def stock_technical_rule_5(self):
        self.declare(Fact(recommendation='Moving Average menunjukkan tren turun. RSI berada dalam kondisi overbought. Supply dan demand menunjukkan tekanan beli tinggi.'))


    @Rule(Fact(moving_average_valued='low'), Fact(rsi_valued='high'), Fact(supply_demand_valued='low'))
    def stock_technical_rule_6(self):
        self.declare(Fact(recommendation='Moving Average menunjukkan tren turun. RSI berada dalam kondisi overbought. Supply dan demand menunjukkan tekanan jual tinggi.'))


    @Rule(Fact(moving_average_valued='low'), Fact(rsi_valued='low'), Fact(supply_demand_valued='high'))
    def stock_technical_rule_7(self):
        self.declare(Fact(recommendation='Moving Average menunjukkan tren turun. RSI berada dalam kondisi oversold. Supply dan demand menunjukkan tekanan beli tinggi.'))


    @Rule(Fact(moving_average_valued='low'), Fact(rsi_valued='low'), Fact(supply_demand_valued='low'))
    def stock_technical_rule_8(self):
        self.declare(Fact(recommendation='Moving Average menunjukkan tren turun. RSI berada dalam kondisi oversold. Supply dan demand menunjukkan tekanan jual tinggi.'))


    @Rule(Fact(moving_average_valued='high'), Fact(rsi_valued='high'), Fact(net_foreign_inflow='high'))
    def stock_technical_rule_9(self):
        self.declare(Fact(recommendation='Moving Average menunjukkan tren naik. RSI berada dalam kondisi overbought. Aliran dana asing menunjukkan tren masuk tinggi.'))


    @Rule(Fact(moving_average_valued='high'), Fact(rsi_valued='high'), Fact(net_foreign_inflow='low'))
    def stock_technical_rule_10(self):
        self.declare(Fact(recommendation='Moving Average menunjukkan tren naik. RSI berada dalam kondisi overbought. Aliran dana asing menunjukkan tren keluar tinggi.'))


    @Rule(Fact(moving_average_valued='high'), Fact(rsi_valued='low'), Fact(net_foreign_inflow='high'))
    def stock_technical_rule_11(self):
        self.declare(Fact(recommendation='Moving Average menunjukkan tren naik. RSI berada dalam kondisi oversold. Aliran dana asing menunjukkan tren masuk tinggi.'))


    @Rule(Fact(moving_average_valued='high'), Fact(rsi_valued='low'), Fact(net_foreign_inflow='low'))
    def stock_technical_rule_12(self):
        self.declare(Fact(recommendation='Moving Average menunjukkan tren naik. RSI berada dalam kondisi oversold. Aliran dana asing menunjukkan tren keluar tinggi.'))


    @Rule(Fact(moving_average_valued='low'), Fact(rsi_valued='high'), Fact(net_foreign_inflow='high'))
    def stock_technical_rule_13(self):
        self.declare(Fact(recommendation='Moving Average menunjukkan tren turun. RSI berada dalam kondisi overbought. Aliran dana asing menunjukkan tren masuk tinggi.'))


    @Rule(Fact(moving_average_valued='low'), Fact(rsi_valued='high'), Fact(net_foreign_inflow='low'))
    def stock_technical_rule_14(self):
        self.declare(Fact(recommendation='Moving Average menunjukkan tren turun. RSI berada dalam kondisi overbought. Aliran dana asing menunjukkan tren keluar tinggi.'))


    @Rule(Fact(moving_average_valued='low'), Fact(rsi_valued='low'), Fact(net_foreign_inflow='high'))
    def stock_technical_rule_15(self):
        self.declare(Fact(recommendation='Moving Average menunjukkan tren turun. RSI berada dalam kondisi oversold. Aliran dana asing menunjukkan tren masuk tinggi.'))


    @Rule(Fact(moving_average_valued='low'), Fact(rsi_valued='low'), Fact(net_foreign_inflow='low'))
    def stock_technical_rule_16(self):
        self.declare(Fact(recommendation='Moving Average menunjukkan tren turun. RSI berada dalam kondisi oversold. Aliran dana asing menunjukkan tren keluar tinggi.'))


    @Rule(Fact(moving_average_valued='high'), Fact(rsi_valued='high'), Fact(resistance='break'))
    def stock_technical_rule_17(self):
        self.declare(Fact(recommendation='Moving Average menunjukkan tren naik. RSI berada dalam kondisi overbought. Resistensi telah ditembus, menunjukkan kekuatan bullish.'))


    @Rule(Fact(moving_average_valued='high'), Fact(rsi_valued='high'), Fact(resistance='unbreak'))
    def stock_technical_rule_18(self):
        self.declare(Fact(recommendation='Moving Average menunjukkan tren naik. RSI berada dalam kondisi overbought. Resistensi belum ditembus, menunjukkan kekuatan bearish.'))


    @Rule(Fact(moving_average_valued='high'), Fact(rsi_valued='low'), Fact(resistance='break'))
    def stock_technical_rule_19(self):
        self.declare(Fact(recommendation='Moving Average menunjukkan tren naik. RSI berada dalam kondisi oversold. Resistensi telah ditembus, menunjukkan kekuatan bullish.'))


    @Rule(Fact(moving_average_valued='high'), Fact(rsi_valued='low'), Fact(resistance='unbreak'))
    def stock_technical_rule_20(self):
        self.declare(Fact(recommendation='Moving Average menunjukkan tren naik. RSI berada dalam kondisi oversold. Resistensi belum ditembus, menunjukkan kekuatan bearish.'))


    @Rule(Fact(moving_average_valued='low'), Fact(rsi_valued='high'), Fact(resistance='break'))
    def stock_technical_rule_21(self):
        self.declare(Fact(recommendation='Moving Average menunjukkan tren turun. RSI berada dalam kondisi overbought. Resistensi telah ditembus, menunjukkan kekuatan bullish.'))


    @Rule(Fact(moving_average_valued='low'), Fact(rsi_valued='high'), Fact(resistance='unbreak'))
    def stock_technical_rule_22(self):
        self.declare(Fact(recommendation='Moving Average menunjukkan tren turun. RSI berada dalam kondisi overbought. Resistensi belum ditembus, menunjukkan kekuatan bearish.'))


    @Rule(Fact(moving_average_valued='low'), Fact(rsi_valued='low'), Fact(resistance='break'))
    def stock_technical_rule_23(self):
        self.declare(Fact(recommendation='Moving Average menunjukkan tren turun. RSI berada dalam kondisi oversold. Resistensi telah ditembus, menunjukkan kekuatan bullish.'))


    @Rule(Fact(moving_average_valued='low'), Fact(rsi_valued='low'), Fact(resistance='unbreak'))
    def stock_technical_rule_24(self):
        self.declare(Fact(recommendation='Moving Average menunjukkan tren turun. RSI berada dalam kondisi oversold. Resistensi belum ditembus, menunjukkan kekuatan bearish.'))


    @Rule(Fact(moving_average_valued='high'), Fact(rsi_valued='high'), Fact(support='break'))
    def stock_technical_rule_25(self):
        self.declare(Fact(recommendation='Moving Average menunjukkan tren naik. RSI berada dalam kondisi overbought. Support telah ditembus, menunjukkan kelemahan bearish.'))


    @Rule(Fact(moving_average_valued='high'), Fact(rsi_valued='high'), Fact(support='unbreak'))
    def stock_technical_rule_26(self):
        self.declare(Fact(recommendation='Moving Average menunjukkan tren naik. RSI berada dalam kondisi overbought. Support belum ditembus, menunjukkan kekuatan bullish.'))


    @Rule(Fact(moving_average_valued='high'), Fact(rsi_valued='low'), Fact(support='break'))
    def stock_technical_rule_27(self):
        self.declare(Fact(recommendation='Moving Average menunjukkan tren naik. RSI berada dalam kondisi oversold. Support telah ditembus, menunjukkan kelemahan bearish.'))


    @Rule(Fact(moving_average_valued='high'), Fact(rsi_valued='low'), Fact(support='unbreak'))
    def stock_technical_rule_28(self):
        self.declare(Fact(recommendation='Moving Average menunjukkan tren naik. RSI berada dalam kondisi oversold. Support belum ditembus, menunjukkan kekuatan bullish.'))


    @Rule(Fact(moving_average_valued='low'), Fact(rsi_valued='high'), Fact(support='break'))
    def stock_technical_rule_29(self):
        self.declare(Fact(recommendation='Moving Average menunjukkan tren turun. RSI berada dalam kondisi overbought. Support telah ditembus, menunjukkan kelemahan bearish.'))


    @Rule(Fact(moving_average_valued='low'), Fact(rsi_valued='high'), Fact(support='unbreak'))
    def stock_technical_rule_30(self):
        self.declare(Fact(recommendation='Moving Average menunjukkan tren turun. RSI berada dalam kondisi overbought. Support belum ditembus, menunjukkan kekuatan bullish.'))


    @Rule(Fact(moving_average_valued='low'), Fact(rsi_valued='low'), Fact(support='break'))
    def stock_technical_rule_31(self):
        self.declare(Fact(recommendation='Moving Average menunjukkan tren turun. RSI berada dalam kondisi oversold. Support telah ditembus, menunjukkan kelemahan bearish.'))


    @Rule(Fact(moving_average_valued='low'), Fact(rsi_valued='low'), Fact(support='unbreak'))
    def stock_technical_rule_32(self):
        self.declare(Fact(recommendation='Moving Average menunjukkan tren turun. RSI berada dalam kondisi oversold. Support belum ditembus, menunjukkan kekuatan bullish.'))


    @Rule(Fact(moving_average_valued='high'), Fact(supply_demand_valued='high'), Fact(net_foreign_inflow='high'))
    def stock_technical_rule_33(self):
        self.declare(Fact(recommendation='Moving Average menunjukkan tren naik. Supply dan demand menunjukkan tekanan beli tinggi. Aliran dana asing menunjukkan tren masuk tinggi.'))


    @Rule(Fact(moving_average_valued='high'), Fact(supply_demand_valued='high'), Fact(net_foreign_inflow='low'))
    def stock_technical_rule_34(self):
        self.declare(Fact(recommendation='Moving Average menunjukkan tren naik. Supply dan demand menunjukkan tekanan beli tinggi. Aliran dana asing menunjukkan tren keluar tinggi.'))


    @Rule(Fact(moving_average_valued='high'), Fact(supply_demand_valued='low'), Fact(net_foreign_inflow='high'))
    def stock_technical_rule_35(self):
        self.declare(Fact(recommendation='Moving Average menunjukkan tren naik. Supply dan demand menunjukkan tekanan jual tinggi. Aliran dana asing menunjukkan tren masuk tinggi.'))


    @Rule(Fact(moving_average_valued='high'), Fact(supply_demand_valued='low'), Fact(net_foreign_inflow='low'))
    def stock_technical_rule_36(self):
        self.declare(Fact(recommendation='Moving Average menunjukkan tren naik. Supply dan demand menunjukkan tekanan jual tinggi. Aliran dana asing menunjukkan tren keluar tinggi.'))


    @Rule(Fact(moving_average_valued='low'), Fact(supply_demand_valued='high'), Fact(net_foreign_inflow='high'))
    def stock_technical_rule_37(self):
        self.declare(Fact(recommendation='Moving Average menunjukkan tren turun. Supply dan demand menunjukkan tekanan beli tinggi. Aliran dana asing menunjukkan tren masuk tinggi.'))


    @Rule(Fact(moving_average_valued='low'), Fact(supply_demand_valued='high'), Fact(net_foreign_inflow='low'))
    def stock_technical_rule_38(self):
        self.declare(Fact(recommendation='Moving Average menunjukkan tren turun. Supply dan demand menunjukkan tekanan beli tinggi. Aliran dana asing menunjukkan tren keluar tinggi.'))


    @Rule(Fact(moving_average_valued='low'), Fact(supply_demand_valued='low'), Fact(net_foreign_inflow='high'))
    def stock_technical_rule_39(self):
        self.declare(Fact(recommendation='Moving Average menunjukkan tren turun. Supply dan demand menunjukkan tekanan jual tinggi. Aliran dana asing menunjukkan tren masuk tinggi.'))


    @Rule(Fact(moving_average_valued='low'), Fact(supply_demand_valued='low'), Fact(net_foreign_inflow='low'))
    def stock_technical_rule_40(self):
        self.declare(Fact(recommendation='Moving Average menunjukkan tren turun. Supply dan demand menunjukkan tekanan jual tinggi. Aliran dana asing menunjukkan tren keluar tinggi.'))


    @Rule(Fact(moving_average_valued='high'), Fact(supply_demand_valued='high'), Fact(resistance='break'))
    def stock_technical_rule_41(self):
        self.declare(Fact(recommendation='Moving Average menunjukkan tren naik. Supply dan demand menunjukkan tekanan beli tinggi. Resistensi telah ditembus, menunjukkan kekuatan bullish.'))


    @Rule(Fact(moving_average_valued='high'), Fact(supply_demand_valued='high'), Fact(resistance='unbreak'))
    def stock_technical_rule_42(self):
        self.declare(Fact(recommendation='Moving Average menunjukkan tren naik. Supply dan demand menunjukkan tekanan beli tinggi. Resistensi belum ditembus, menunjukkan kekuatan bearish.'))


    @Rule(Fact(moving_average_valued='high'), Fact(supply_demand_valued='low'), Fact(resistance='break'))
    def stock_technical_rule_43(self):
        self.declare(Fact(recommendation='Moving Average menunjukkan tren naik. Supply dan demand menunjukkan tekanan jual tinggi. Resistensi telah ditembus, menunjukkan kekuatan bullish.'))


    @Rule(Fact(moving_average_valued='high'), Fact(supply_demand_valued='low'), Fact(resistance='unbreak'))
    def stock_technical_rule_44(self):
        self.declare(Fact(recommendation='Moving Average menunjukkan tren naik. Supply dan demand menunjukkan tekanan jual tinggi. Resistensi belum ditembus, menunjukkan kekuatan bearish.'))


    @Rule(Fact(moving_average_valued='low'), Fact(supply_demand_valued='high'), Fact(resistance='break'))
    def stock_technical_rule_45(self):
        self.declare(Fact(recommendation='Moving Average menunjukkan tren turun. Supply dan demand menunjukkan tekanan beli tinggi. Resistensi telah ditembus, menunjukkan kekuatan bullish.'))


    @Rule(Fact(moving_average_valued='low'), Fact(supply_demand_valued='high'), Fact(resistance='unbreak'))
    def stock_technical_rule_46(self):
        self.declare(Fact(recommendation='Moving Average menunjukkan tren turun. Supply dan demand menunjukkan tekanan beli tinggi. Resistensi belum ditembus, menunjukkan kekuatan bearish.'))


    @Rule(Fact(moving_average_valued='low'), Fact(supply_demand_valued='low'), Fact(resistance='break'))
    def stock_technical_rule_47(self):
        self.declare(Fact(recommendation='Moving Average menunjukkan tren turun. Supply dan demand menunjukkan tekanan jual tinggi. Resistensi telah ditembus, menunjukkan kekuatan bullish.'))


    @Rule(Fact(moving_average_valued='low'), Fact(supply_demand_valued='low'), Fact(resistance='unbreak'))
    def stock_technical_rule_48(self):
        self.declare(Fact(recommendation='Moving Average menunjukkan tren turun. Supply dan demand menunjukkan tekanan jual tinggi. Resistensi belum ditembus, menunjukkan kekuatan bearish.'))


    @Rule(Fact(moving_average_valued='high'), Fact(supply_demand_valued='high'), Fact(support='break'))
    def stock_technical_rule_49(self):
        self.declare(Fact(recommendation='Moving Average menunjukkan tren naik. Supply dan demand menunjukkan tekanan beli tinggi. Support telah ditembus, menunjukkan kelemahan bearish.'))


    @Rule(Fact(moving_average_valued='high'), Fact(supply_demand_valued='high'), Fact(support='unbreak'))
    def stock_technical_rule_50(self):
        self.declare(Fact(recommendation='Moving Average menunjukkan tren naik. Supply dan demand menunjukkan tekanan beli tinggi. Support belum ditembus, menunjukkan kekuatan bullish.'))


    @Rule(Fact(moving_average_valued='high'), Fact(supply_demand_valued='low'), Fact(support='break'))
    def stock_technical_rule_51(self):
        self.declare(Fact(recommendation='Moving Average menunjukkan tren naik. Supply dan demand menunjukkan tekanan jual tinggi. Support telah ditembus, menunjukkan kelemahan bearish.'))


    @Rule(Fact(moving_average_valued='high'), Fact(supply_demand_valued='low'), Fact(support='unbreak'))
    def stock_technical_rule_52(self):
        self.declare(Fact(recommendation='Moving Average menunjukkan tren naik. Supply dan demand menunjukkan tekanan jual tinggi. Support belum ditembus, menunjukkan kekuatan bullish.'))


    @Rule(Fact(moving_average_valued='low'), Fact(supply_demand_valued='high'), Fact(support='break'))
    def stock_technical_rule_53(self):
        self.declare(Fact(recommendation='Moving Average menunjukkan tren turun. Supply dan demand menunjukkan tekanan beli tinggi. Support telah ditembus, menunjukkan kelemahan bearish.'))


    @Rule(Fact(moving_average_valued='low'), Fact(supply_demand_valued='high'), Fact(support='unbreak'))
    def stock_technical_rule_54(self):
        self.declare(Fact(recommendation='Moving Average menunjukkan tren turun. Supply dan demand menunjukkan tekanan beli tinggi. Support belum ditembus, menunjukkan kekuatan bullish.'))


    @Rule(Fact(moving_average_valued='low'), Fact(supply_demand_valued='low'), Fact(support='break'))
    def stock_technical_rule_55(self):
        self.declare(Fact(recommendation='Moving Average menunjukkan tren turun. Supply dan demand menunjukkan tekanan jual tinggi. Support telah ditembus, menunjukkan kelemahan bearish.'))


    @Rule(Fact(moving_average_valued='low'), Fact(supply_demand_valued='low'), Fact(support='unbreak'))
    def stock_technical_rule_56(self):
        self.declare(Fact(recommendation='Moving Average menunjukkan tren turun. Supply dan demand menunjukkan tekanan jual tinggi. Support belum ditembus, menunjukkan kekuatan bullish.'))


    @Rule(Fact(moving_average_valued='high'), Fact(net_foreign_inflow='high'), Fact(resistance='break'))
    def stock_technical_rule_57(self):
        self.declare(Fact(recommendation='Moving Average menunjukkan tren naik. Aliran dana asing menunjukkan tren masuk tinggi. Resistensi telah ditembus, menunjukkan kekuatan bullish.'))


    @Rule(Fact(moving_average_valued='high'), Fact(net_foreign_inflow='high'), Fact(resistance='unbreak'))
    def stock_technical_rule_58(self):
        self.declare(Fact(recommendation='Moving Average menunjukkan tren naik. Aliran dana asing menunjukkan tren masuk tinggi. Resistensi belum ditembus, menunjukkan kekuatan bearish.'))


    @Rule(Fact(moving_average_valued='high'), Fact(net_foreign_inflow='low'), Fact(resistance='break'))
    def stock_technical_rule_59(self):
        self.declare(Fact(recommendation='Moving Average menunjukkan tren naik. Aliran dana asing menunjukkan tren keluar tinggi. Resistensi telah ditembus, menunjukkan kekuatan bullish.'))


    @Rule(Fact(moving_average_valued='high'), Fact(net_foreign_inflow='low'), Fact(resistance='unbreak'))
    def stock_technical_rule_60(self):
        self.declare(Fact(recommendation='Moving Average menunjukkan tren naik. Aliran dana asing menunjukkan tren keluar tinggi. Resistensi belum ditembus, menunjukkan kekuatan bearish.'))


    @Rule(Fact(moving_average_valued='low'), Fact(net_foreign_inflow='high'), Fact(resistance='break'))
    def stock_technical_rule_61(self):
        self.declare(Fact(recommendation='Moving Average menunjukkan tren turun. Aliran dana asing menunjukkan tren masuk tinggi. Resistensi telah ditembus, menunjukkan kekuatan bullish.'))


    @Rule(Fact(moving_average_valued='low'), Fact(net_foreign_inflow='high'), Fact(resistance='unbreak'))
    def stock_technical_rule_62(self):
        self.declare(Fact(recommendation='Moving Average menunjukkan tren turun. Aliran dana asing menunjukkan tren masuk tinggi. Resistensi belum ditembus, menunjukkan kekuatan bearish.'))


    @Rule(Fact(moving_average_valued='low'), Fact(net_foreign_inflow='low'), Fact(resistance='break'))
    def stock_technical_rule_63(self):
        self.declare(Fact(recommendation='Moving Average menunjukkan tren turun. Aliran dana asing menunjukkan tren keluar tinggi. Resistensi telah ditembus, menunjukkan kekuatan bullish.'))


    @Rule(Fact(moving_average_valued='low'), Fact(net_foreign_inflow='low'), Fact(resistance='unbreak'))
    def stock_technical_rule_64(self):
        self.declare(Fact(recommendation='Moving Average menunjukkan tren turun. Aliran dana asing menunjukkan tren keluar tinggi. Resistensi belum ditembus, menunjukkan kekuatan bearish.'))


    @Rule(Fact(moving_average_valued='high'), Fact(net_foreign_inflow='high'), Fact(support='break'))
    def stock_technical_rule_65(self):
        self.declare(Fact(recommendation='Moving Average menunjukkan tren naik. Aliran dana asing menunjukkan tren masuk tinggi. Support telah ditembus, menunjukkan kelemahan bearish.'))


    @Rule(Fact(moving_average_valued='high'), Fact(net_foreign_inflow='high'), Fact(support='unbreak'))
    def stock_technical_rule_66(self):
        self.declare(Fact(recommendation='Moving Average menunjukkan tren naik. Aliran dana asing menunjukkan tren masuk tinggi. Support belum ditembus, menunjukkan kekuatan bullish.'))


    @Rule(Fact(moving_average_valued='high'), Fact(net_foreign_inflow='low'), Fact(support='break'))
    def stock_technical_rule_67(self):
        self.declare(Fact(recommendation='Moving Average menunjukkan tren naik. Aliran dana asing menunjukkan tren keluar tinggi. Support telah ditembus, menunjukkan kelemahan bearish.'))


    @Rule(Fact(moving_average_valued='high'), Fact(net_foreign_inflow='low'), Fact(support='unbreak'))
    def stock_technical_rule_68(self):
        self.declare(Fact(recommendation='Moving Average menunjukkan tren naik. Aliran dana asing menunjukkan tren keluar tinggi. Support belum ditembus, menunjukkan kekuatan bullish.'))


    @Rule(Fact(moving_average_valued='low'), Fact(net_foreign_inflow='high'), Fact(support='break'))
    def stock_technical_rule_69(self):
        self.declare(Fact(recommendation='Moving Average menunjukkan tren turun. Aliran dana asing menunjukkan tren masuk tinggi. Support telah ditembus, menunjukkan kelemahan bearish.'))


    @Rule(Fact(moving_average_valued='low'), Fact(net_foreign_inflow='high'), Fact(support='unbreak'))
    def stock_technical_rule_70(self):
        self.declare(Fact(recommendation='Moving Average menunjukkan tren turun. Aliran dana asing menunjukkan tren masuk tinggi. Support belum ditembus, menunjukkan kekuatan bullish.'))


    @Rule(Fact(moving_average_valued='low'), Fact(net_foreign_inflow='low'), Fact(support='break'))
    def stock_technical_rule_71(self):
        self.declare(Fact(recommendation='Moving Average menunjukkan tren turun. Aliran dana asing menunjukkan tren keluar tinggi. Support telah ditembus, menunjukkan kelemahan bearish.'))


    @Rule(Fact(moving_average_valued='low'), Fact(net_foreign_inflow='low'), Fact(support='unbreak'))
    def stock_technical_rule_72(self):
        self.declare(Fact(recommendation='Moving Average menunjukkan tren turun. Aliran dana asing menunjukkan tren keluar tinggi. Support belum ditembus, menunjukkan kekuatan bullish.'))


    @Rule(Fact(moving_average_valued='high'), Fact(resistance='break'), Fact(support='break'))
    def stock_technical_rule_73(self):
        self.declare(Fact(recommendation='Moving Average menunjukkan tren naik. Resistensi telah ditembus, menunjukkan kekuatan bullish. Support telah ditembus, menunjukkan kelemahan bearish.'))


    @Rule(Fact(moving_average_valued='high'), Fact(resistance='break'), Fact(support='unbreak'))
    def stock_technical_rule_74(self):
        self.declare(Fact(recommendation='Moving Average menunjukkan tren naik. Resistensi telah ditembus, menunjukkan kekuatan bullish. Support belum ditembus, menunjukkan kekuatan bullish.'))


    @Rule(Fact(moving_average_valued='high'), Fact(resistance='unbreak'), Fact(support='break'))
    def stock_technical_rule_75(self):
        self.declare(Fact(recommendation='Moving Average menunjukkan tren naik. Resistensi belum ditembus, menunjukkan kekuatan bearish. Support telah ditembus, menunjukkan kelemahan bearish.'))


    @Rule(Fact(moving_average_valued='high'), Fact(resistance='unbreak'), Fact(support='unbreak'))
    def stock_technical_rule_76(self):
        self.declare(Fact(recommendation='Moving Average menunjukkan tren naik. Resistensi belum ditembus, menunjukkan kekuatan bearish. Support belum ditembus, menunjukkan kekuatan bullish.'))


    @Rule(Fact(moving_average_valued='low'), Fact(resistance='break'), Fact(support='break'))
    def stock_technical_rule_77(self):
        self.declare(Fact(recommendation='Moving Average menunjukkan tren turun. Resistensi telah ditembus, menunjukkan kekuatan bullish. Support telah ditembus, menunjukkan kelemahan bearish.'))


    @Rule(Fact(moving_average_valued='low'), Fact(resistance='break'), Fact(support='unbreak'))
    def stock_technical_rule_78(self):
        self.declare(Fact(recommendation='Moving Average menunjukkan tren turun. Resistensi telah ditembus, menunjukkan kekuatan bullish. Support belum ditembus, menunjukkan kekuatan bullish.'))


    @Rule(Fact(moving_average_valued='low'), Fact(resistance='unbreak'), Fact(support='break'))
    def stock_technical_rule_79(self):
        self.declare(Fact(recommendation='Moving Average menunjukkan tren turun. Resistensi belum ditembus, menunjukkan kekuatan bearish. Support telah ditembus, menunjukkan kelemahan bearish.'))


    @Rule(Fact(moving_average_valued='low'), Fact(resistance='unbreak'), Fact(support='unbreak'))
    def stock_technical_rule_80(self):
        self.declare(Fact(recommendation='Moving Average menunjukkan tren turun. Resistensi belum ditembus, menunjukkan kekuatan bearish. Support belum ditembus, menunjukkan kekuatan bullish.'))


    @Rule(Fact(rsi_valued='high'), Fact(supply_demand_valued='high'), Fact(net_foreign_inflow='high'))
    def stock_technical_rule_81(self):
        self.declare(Fact(recommendation='RSI berada dalam kondisi overbought. Supply dan demand menunjukkan tekanan beli tinggi. Aliran dana asing menunjukkan tren masuk tinggi.'))


    @Rule(Fact(rsi_valued='high'), Fact(supply_demand_valued='high'), Fact(net_foreign_inflow='low'))
    def stock_technical_rule_82(self):
        self.declare(Fact(recommendation='RSI berada dalam kondisi overbought. Supply dan demand menunjukkan tekanan beli tinggi. Aliran dana asing menunjukkan tren keluar tinggi.'))


    @Rule(Fact(rsi_valued='high'), Fact(supply_demand_valued='low'), Fact(net_foreign_inflow='high'))
    def stock_technical_rule_83(self):
        self.declare(Fact(recommendation='RSI berada dalam kondisi overbought. Supply dan demand menunjukkan tekanan jual tinggi. Aliran dana asing menunjukkan tren masuk tinggi.'))


    @Rule(Fact(rsi_valued='high'), Fact(supply_demand_valued='low'), Fact(net_foreign_inflow='low'))
    def stock_technical_rule_84(self):
        self.declare(Fact(recommendation='RSI berada dalam kondisi overbought. Supply dan demand menunjukkan tekanan jual tinggi. Aliran dana asing menunjukkan tren keluar tinggi.'))


    @Rule(Fact(rsi_valued='low'), Fact(supply_demand_valued='high'), Fact(net_foreign_inflow='high'))
    def stock_technical_rule_85(self):
        self.declare(Fact(recommendation='RSI berada dalam kondisi oversold. Supply dan demand menunjukkan tekanan beli tinggi. Aliran dana asing menunjukkan tren masuk tinggi.'))


    @Rule(Fact(rsi_valued='low'), Fact(supply_demand_valued='high'), Fact(net_foreign_inflow='low'))
    def stock_technical_rule_86(self):
        self.declare(Fact(recommendation='RSI berada dalam kondisi oversold. Supply dan demand menunjukkan tekanan beli tinggi. Aliran dana asing menunjukkan tren keluar tinggi.'))


    @Rule(Fact(rsi_valued='low'), Fact(supply_demand_valued='low'), Fact(net_foreign_inflow='high'))
    def stock_technical_rule_87(self):
        self.declare(Fact(recommendation='RSI berada dalam kondisi oversold. Supply dan demand menunjukkan tekanan jual tinggi. Aliran dana asing menunjukkan tren masuk tinggi.'))


    @Rule(Fact(rsi_valued='low'), Fact(supply_demand_valued='low'), Fact(net_foreign_inflow='low'))
    def stock_technical_rule_88(self):
        self.declare(Fact(recommendation='RSI berada dalam kondisi oversold. Supply dan demand menunjukkan tekanan jual tinggi. Aliran dana asing menunjukkan tren keluar tinggi.'))


    @Rule(Fact(rsi_valued='high'), Fact(supply_demand_valued='high'), Fact(resistance='break'))
    def stock_technical_rule_89(self):
        self.declare(Fact(recommendation='RSI berada dalam kondisi overbought. Supply dan demand menunjukkan tekanan beli tinggi. Resistensi telah ditembus, menunjukkan kekuatan bullish.'))


    @Rule(Fact(rsi_valued='high'), Fact(supply_demand_valued='high'), Fact(resistance='unbreak'))
    def stock_technical_rule_90(self):
        self.declare(Fact(recommendation='RSI berada dalam kondisi overbought. Supply dan demand menunjukkan tekanan beli tinggi. Resistensi belum ditembus, menunjukkan kekuatan bearish.'))


    @Rule(Fact(rsi_valued='high'), Fact(supply_demand_valued='low'), Fact(resistance='break'))
    def stock_technical_rule_91(self):
        self.declare(Fact(recommendation='RSI berada dalam kondisi overbought. Supply dan demand menunjukkan tekanan jual tinggi. Resistensi telah ditembus, menunjukkan kekuatan bullish.'))


    @Rule(Fact(rsi_valued='high'), Fact(supply_demand_valued='low'), Fact(resistance='unbreak'))
    def stock_technical_rule_92(self):
        self.declare(Fact(recommendation='RSI berada dalam kondisi overbought. Supply dan demand menunjukkan tekanan jual tinggi. Resistensi belum ditembus, menunjukkan kekuatan bearish.'))


    @Rule(Fact(rsi_valued='low'), Fact(supply_demand_valued='high'), Fact(resistance='break'))
    def stock_technical_rule_93(self):
        self.declare(Fact(recommendation='RSI berada dalam kondisi oversold. Supply dan demand menunjukkan tekanan beli tinggi. Resistensi telah ditembus, menunjukkan kekuatan bullish.'))


    @Rule(Fact(rsi_valued='low'), Fact(supply_demand_valued='high'), Fact(resistance='unbreak'))
    def stock_technical_rule_94(self):
        self.declare(Fact(recommendation='RSI berada dalam kondisi oversold. Supply dan demand menunjukkan tekanan beli tinggi. Resistensi belum ditembus, menunjukkan kekuatan bearish.'))


    @Rule(Fact(rsi_valued='low'), Fact(supply_demand_valued='low'), Fact(resistance='break'))
    def stock_technical_rule_95(self):
        self.declare(Fact(recommendation='RSI berada dalam kondisi oversold. Supply dan demand menunjukkan tekanan jual tinggi. Resistensi telah ditembus, menunjukkan kekuatan bullish.'))


    @Rule(Fact(rsi_valued='low'), Fact(supply_demand_valued='low'), Fact(resistance='unbreak'))
    def stock_technical_rule_96(self):
        self.declare(Fact(recommendation='RSI berada dalam kondisi oversold. Supply dan demand menunjukkan tekanan jual tinggi. Resistensi belum ditembus, menunjukkan kekuatan bearish.'))


    @Rule(Fact(rsi_valued='high'), Fact(supply_demand_valued='high'), Fact(support='break'))
    def stock_technical_rule_97(self):
        self.declare(Fact(recommendation='RSI berada dalam kondisi overbought. Supply dan demand menunjukkan tekanan beli tinggi. Support telah ditembus, menunjukkan kelemahan bearish.'))


    @Rule(Fact(rsi_valued='high'), Fact(supply_demand_valued='high'), Fact(support='unbreak'))
    def stock_technical_rule_98(self):
        self.declare(Fact(recommendation='RSI berada dalam kondisi overbought. Supply dan demand menunjukkan tekanan beli tinggi. Support belum ditembus, menunjukkan kekuatan bullish.'))


    @Rule(Fact(rsi_valued='high'), Fact(supply_demand_valued='low'), Fact(support='break'))
    def stock_technical_rule_99(self):
        self.declare(Fact(recommendation='RSI berada dalam kondisi overbought. Supply dan demand menunjukkan tekanan jual tinggi. Support telah ditembus, menunjukkan kelemahan bearish.'))


    @Rule(Fact(rsi_valued='high'), Fact(supply_demand_valued='low'), Fact(support='unbreak'))
    def stock_technical_rule_100(self):
        self.declare(Fact(recommendation='RSI berada dalam kondisi overbought. Supply dan demand menunjukkan tekanan jual tinggi. Support belum ditembus, menunjukkan kekuatan bullish.'))


    @Rule(Fact(rsi_valued='low'), Fact(supply_demand_valued='high'), Fact(support='break'))
    def stock_technical_rule_101(self):
        self.declare(Fact(recommendation='RSI berada dalam kondisi oversold. Supply dan demand menunjukkan tekanan beli tinggi. Support telah ditembus, menunjukkan kelemahan bearish.'))


    @Rule(Fact(rsi_valued='low'), Fact(supply_demand_valued='high'), Fact(support='unbreak'))
    def stock_technical_rule_102(self):
        self.declare(Fact(recommendation='RSI berada dalam kondisi oversold. Supply dan demand menunjukkan tekanan beli tinggi. Support belum ditembus, menunjukkan kekuatan bullish.'))


    @Rule(Fact(rsi_valued='low'), Fact(supply_demand_valued='low'), Fact(support='break'))
    def stock_technical_rule_103(self):
        self.declare(Fact(recommendation='RSI berada dalam kondisi oversold. Supply dan demand menunjukkan tekanan jual tinggi. Support telah ditembus, menunjukkan kelemahan bearish.'))


    @Rule(Fact(rsi_valued='low'), Fact(supply_demand_valued='low'), Fact(support='unbreak'))
    def stock_technical_rule_104(self):
        self.declare(Fact(recommendation='RSI berada dalam kondisi oversold. Supply dan demand menunjukkan tekanan jual tinggi. Support belum ditembus, menunjukkan kekuatan bullish.'))


    @Rule(Fact(rsi_valued='high'), Fact(net_foreign_inflow='high'), Fact(resistance='break'))
    def stock_technical_rule_105(self):
        self.declare(Fact(recommendation='RSI berada dalam kondisi overbought. Aliran dana asing menunjukkan tren masuk tinggi. Resistensi telah ditembus, menunjukkan kekuatan bullish.'))


    @Rule(Fact(rsi_valued='high'), Fact(net_foreign_inflow='high'), Fact(resistance='unbreak'))
    def stock_technical_rule_106(self):
        self.declare(Fact(recommendation='RSI berada dalam kondisi overbought. Aliran dana asing menunjukkan tren masuk tinggi. Resistensi belum ditembus, menunjukkan kekuatan bearish.'))


    @Rule(Fact(rsi_valued='high'), Fact(net_foreign_inflow='low'), Fact(resistance='break'))
    def stock_technical_rule_107(self):
        self.declare(Fact(recommendation='RSI berada dalam kondisi overbought. Aliran dana asing menunjukkan tren keluar tinggi. Resistensi telah ditembus, menunjukkan kekuatan bullish.'))


    @Rule(Fact(rsi_valued='high'), Fact(net_foreign_inflow='low'), Fact(resistance='unbreak'))
    def stock_technical_rule_108(self):
        self.declare(Fact(recommendation='RSI berada dalam kondisi overbought. Aliran dana asing menunjukkan tren keluar tinggi. Resistensi belum ditembus, menunjukkan kekuatan bearish.'))


    @Rule(Fact(rsi_valued='low'), Fact(net_foreign_inflow='high'), Fact(resistance='break'))
    def stock_technical_rule_109(self):
        self.declare(Fact(recommendation='RSI berada dalam kondisi oversold. Aliran dana asing menunjukkan tren masuk tinggi. Resistensi telah ditembus, menunjukkan kekuatan bullish.'))


    @Rule(Fact(rsi_valued='low'), Fact(net_foreign_inflow='high'), Fact(resistance='unbreak'))
    def stock_technical_rule_110(self):
        self.declare(Fact(recommendation='RSI berada dalam kondisi oversold. Aliran dana asing menunjukkan tren masuk tinggi. Resistensi belum ditembus, menunjukkan kekuatan bearish.'))


    @Rule(Fact(rsi_valued='low'), Fact(net_foreign_inflow='low'), Fact(resistance='break'))
    def stock_technical_rule_111(self):
        self.declare(Fact(recommendation='RSI berada dalam kondisi oversold. Aliran dana asing menunjukkan tren keluar tinggi. Resistensi telah ditembus, menunjukkan kekuatan bullish.'))


    @Rule(Fact(rsi_valued='low'), Fact(net_foreign_inflow='low'), Fact(resistance='unbreak'))
    def stock_technical_rule_112(self):
        self.declare(Fact(recommendation='RSI berada dalam kondisi oversold. Aliran dana asing menunjukkan tren keluar tinggi. Resistensi belum ditembus, menunjukkan kekuatan bearish.'))


    @Rule(Fact(rsi_valued='high'), Fact(net_foreign_inflow='high'), Fact(support='break'))
    def stock_technical_rule_113(self):
        self.declare(Fact(recommendation='RSI berada dalam kondisi overbought. Aliran dana asing menunjukkan tren masuk tinggi. Support telah ditembus, menunjukkan kelemahan bearish.'))


    @Rule(Fact(rsi_valued='high'), Fact(net_foreign_inflow='high'), Fact(support='unbreak'))
    def stock_technical_rule_114(self):
        self.declare(Fact(recommendation='RSI berada dalam kondisi overbought. Aliran dana asing menunjukkan tren masuk tinggi. Support belum ditembus, menunjukkan kekuatan bullish.'))


    @Rule(Fact(rsi_valued='high'), Fact(net_foreign_inflow='low'), Fact(support='break'))
    def stock_technical_rule_115(self):
        self.declare(Fact(recommendation='RSI berada dalam kondisi overbought. Aliran dana asing menunjukkan tren keluar tinggi. Support telah ditembus, menunjukkan kelemahan bearish.'))


    @Rule(Fact(rsi_valued='high'), Fact(net_foreign_inflow='low'), Fact(support='unbreak'))
    def stock_technical_rule_116(self):
        self.declare(Fact(recommendation='RSI berada dalam kondisi overbought. Aliran dana asing menunjukkan tren keluar tinggi. Support belum ditembus, menunjukkan kekuatan bullish.'))


    @Rule(Fact(rsi_valued='low'), Fact(net_foreign_inflow='high'), Fact(support='break'))
    def stock_technical_rule_117(self):
        self.declare(Fact(recommendation='RSI berada dalam kondisi oversold. Aliran dana asing menunjukkan tren masuk tinggi. Support telah ditembus, menunjukkan kelemahan bearish.'))


    @Rule(Fact(rsi_valued='low'), Fact(net_foreign_inflow='high'), Fact(support='unbreak'))
    def stock_technical_rule_118(self):
        self.declare(Fact(recommendation='RSI berada dalam kondisi oversold. Aliran dana asing menunjukkan tren masuk tinggi. Support belum ditembus, menunjukkan kekuatan bullish.'))


    @Rule(Fact(rsi_valued='low'), Fact(net_foreign_inflow='low'), Fact(support='break'))
    def stock_technical_rule_119(self):
        self.declare(Fact(recommendation='RSI berada dalam kondisi oversold. Aliran dana asing menunjukkan tren keluar tinggi. Support telah ditembus, menunjukkan kelemahan bearish.'))


    @Rule(Fact(rsi_valued='low'), Fact(net_foreign_inflow='low'), Fact(support='unbreak'))
    def stock_technical_rule_120(self):
        self.declare(Fact(recommendation='RSI berada dalam kondisi oversold. Aliran dana asing menunjukkan tren keluar tinggi. Support belum ditembus, menunjukkan kekuatan bullish.'))


    @Rule(Fact(rsi_valued='high'), Fact(resistance='break'), Fact(support='break'))
    def stock_technical_rule_121(self):
        self.declare(Fact(recommendation='RSI berada dalam kondisi overbought. Resistensi telah ditembus, menunjukkan kekuatan bullish. Support telah ditembus, menunjukkan kelemahan bearish.'))


    @Rule(Fact(rsi_valued='high'), Fact(resistance='break'), Fact(support='unbreak'))
    def stock_technical_rule_122(self):
        self.declare(Fact(recommendation='RSI berada dalam kondisi overbought. Resistensi telah ditembus, menunjukkan kekuatan bullish. Support belum ditembus, menunjukkan kekuatan bullish.'))


    @Rule(Fact(rsi_valued='high'), Fact(resistance='unbreak'), Fact(support='break'))
    def stock_technical_rule_123(self):
        self.declare(Fact(recommendation='RSI berada dalam kondisi overbought. Resistensi belum ditembus, menunjukkan kekuatan bearish. Support telah ditembus, menunjukkan kelemahan bearish.'))


    @Rule(Fact(rsi_valued='high'), Fact(resistance='unbreak'), Fact(support='unbreak'))
    def stock_technical_rule_124(self):
        self.declare(Fact(recommendation='RSI berada dalam kondisi overbought. Resistensi belum ditembus, menunjukkan kekuatan bearish. Support belum ditembus, menunjukkan kekuatan bullish.'))


    @Rule(Fact(rsi_valued='low'), Fact(resistance='break'), Fact(support='break'))
    def stock_technical_rule_125(self):
        self.declare(Fact(recommendation='RSI berada dalam kondisi oversold. Resistensi telah ditembus, menunjukkan kekuatan bullish. Support telah ditembus, menunjukkan kelemahan bearish.'))


    @Rule(Fact(rsi_valued='low'), Fact(resistance='break'), Fact(support='unbreak'))
    def stock_technical_rule_126(self):
        self.declare(Fact(recommendation='RSI berada dalam kondisi oversold. Resistensi telah ditembus, menunjukkan kekuatan bullish. Support belum ditembus, menunjukkan kekuatan bullish.'))


    @Rule(Fact(rsi_valued='low'), Fact(resistance='unbreak'), Fact(support='break'))
    def stock_technical_rule_127(self):
        self.declare(Fact(recommendation='RSI berada dalam kondisi oversold. Resistensi belum ditembus, menunjukkan kekuatan bearish. Support telah ditembus, menunjukkan kelemahan bearish.'))


    @Rule(Fact(rsi_valued='low'), Fact(resistance='unbreak'), Fact(support='unbreak'))
    def stock_technical_rule_128(self):
        self.declare(Fact(recommendation='RSI berada dalam kondisi oversold. Resistensi belum ditembus, menunjukkan kekuatan bearish. Support belum ditembus, menunjukkan kekuatan bullish.'))


    @Rule(Fact(supply_demand_valued='high'), Fact(net_foreign_inflow='high'), Fact(resistance='break'))
    def stock_technical_rule_129(self):
        self.declare(Fact(recommendation='Supply dan demand menunjukkan tekanan beli tinggi. Aliran dana asing menunjukkan tren masuk tinggi. Resistensi telah ditembus, menunjukkan kekuatan bullish.'))


    @Rule(Fact(supply_demand_valued='high'), Fact(net_foreign_inflow='high'), Fact(resistance='unbreak'))
    def stock_technical_rule_130(self):
        self.declare(Fact(recommendation='Supply dan demand menunjukkan tekanan beli tinggi. Aliran dana asing menunjukkan tren masuk tinggi. Resistensi belum ditembus, menunjukkan kekuatan bearish.'))


    @Rule(Fact(supply_demand_valued='high'), Fact(net_foreign_inflow='low'), Fact(resistance='break'))
    def stock_technical_rule_131(self):
        self.declare(Fact(recommendation='Supply dan demand menunjukkan tekanan beli tinggi. Aliran dana asing menunjukkan tren keluar tinggi. Resistensi telah ditembus, menunjukkan kekuatan bullish.'))


    @Rule(Fact(supply_demand_valued='high'), Fact(net_foreign_inflow='low'), Fact(resistance='unbreak'))
    def stock_technical_rule_132(self):
        self.declare(Fact(recommendation='Supply dan demand menunjukkan tekanan beli tinggi. Aliran dana asing menunjukkan tren keluar tinggi. Resistensi belum ditembus, menunjukkan kekuatan bearish.'))


    @Rule(Fact(supply_demand_valued='low'), Fact(net_foreign_inflow='high'), Fact(resistance='break'))
    def stock_technical_rule_133(self):
        self.declare(Fact(recommendation='Supply dan demand menunjukkan tekanan jual tinggi. Aliran dana asing menunjukkan tren masuk tinggi. Resistensi telah ditembus, menunjukkan kekuatan bullish.'))


    @Rule(Fact(supply_demand_valued='low'), Fact(net_foreign_inflow='high'), Fact(resistance='unbreak'))
    def stock_technical_rule_134(self):
        self.declare(Fact(recommendation='Supply dan demand menunjukkan tekanan jual tinggi. Aliran dana asing menunjukkan tren masuk tinggi. Resistensi belum ditembus, menunjukkan kekuatan bearish.'))


    @Rule(Fact(supply_demand_valued='low'), Fact(net_foreign_inflow='low'), Fact(resistance='break'))
    def stock_technical_rule_135(self):
        self.declare(Fact(recommendation='Supply dan demand menunjukkan tekanan jual tinggi. Aliran dana asing menunjukkan tren keluar tinggi. Resistensi telah ditembus, menunjukkan kekuatan bullish.'))


    @Rule(Fact(supply_demand_valued='low'), Fact(net_foreign_inflow='low'), Fact(resistance='unbreak'))
    def stock_technical_rule_136(self):
        self.declare(Fact(recommendation='Supply dan demand menunjukkan tekanan jual tinggi. Aliran dana asing menunjukkan tren keluar tinggi. Resistensi belum ditembus, menunjukkan kekuatan bearish.'))


    @Rule(Fact(supply_demand_valued='high'), Fact(net_foreign_inflow='high'), Fact(support='break'))
    def stock_technical_rule_137(self):
        self.declare(Fact(recommendation='Supply dan demand menunjukkan tekanan beli tinggi. Aliran dana asing menunjukkan tren masuk tinggi. Support telah ditembus, menunjukkan kelemahan bearish.'))


    @Rule(Fact(supply_demand_valued='high'), Fact(net_foreign_inflow='high'), Fact(support='unbreak'))
    def stock_technical_rule_138(self):
        self.declare(Fact(recommendation='Supply dan demand menunjukkan tekanan beli tinggi. Aliran dana asing menunjukkan tren masuk tinggi. Support belum ditembus, menunjukkan kekuatan bullish.'))


    @Rule(Fact(supply_demand_valued='high'), Fact(net_foreign_inflow='low'), Fact(support='break'))
    def stock_technical_rule_139(self):
        self.declare(Fact(recommendation='Supply dan demand menunjukkan tekanan beli tinggi. Aliran dana asing menunjukkan tren keluar tinggi. Support telah ditembus, menunjukkan kelemahan bearish.'))


    @Rule(Fact(supply_demand_valued='high'), Fact(net_foreign_inflow='low'), Fact(support='unbreak'))
    def stock_technical_rule_140(self):
        self.declare(Fact(recommendation='Supply dan demand menunjukkan tekanan beli tinggi. Aliran dana asing menunjukkan tren keluar tinggi. Support belum ditembus, menunjukkan kekuatan bullish.'))


    @Rule(Fact(supply_demand_valued='low'), Fact(net_foreign_inflow='high'), Fact(support='break'))
    def stock_technical_rule_141(self):
        self.declare(Fact(recommendation='Supply dan demand menunjukkan tekanan jual tinggi. Aliran dana asing menunjukkan tren masuk tinggi. Support telah ditembus, menunjukkan kelemahan bearish.'))


    @Rule(Fact(supply_demand_valued='low'), Fact(net_foreign_inflow='high'), Fact(support='unbreak'))
    def stock_technical_rule_142(self):
        self.declare(Fact(recommendation='Supply dan demand menunjukkan tekanan jual tinggi. Aliran dana asing menunjukkan tren masuk tinggi. Support belum ditembus, menunjukkan kekuatan bullish.'))


    @Rule(Fact(supply_demand_valued='low'), Fact(net_foreign_inflow='low'), Fact(support='break'))
    def stock_technical_rule_143(self):
        self.declare(Fact(recommendation='Supply dan demand menunjukkan tekanan jual tinggi. Aliran dana asing menunjukkan tren keluar tinggi. Support telah ditembus, menunjukkan kelemahan bearish.'))


    @Rule(Fact(supply_demand_valued='low'), Fact(net_foreign_inflow='low'), Fact(support='unbreak'))
    def stock_technical_rule_144(self):
        self.declare(Fact(recommendation='Supply dan demand menunjukkan tekanan jual tinggi. Aliran dana asing menunjukkan tren keluar tinggi. Support belum ditembus, menunjukkan kekuatan bullish.'))


    @Rule(Fact(supply_demand_valued='high'), Fact(resistance='break'), Fact(support='break'))
    def stock_technical_rule_145(self):
        self.declare(Fact(recommendation='Supply dan demand menunjukkan tekanan beli tinggi. Resistensi telah ditembus, menunjukkan kekuatan bullish. Support telah ditembus, menunjukkan kelemahan bearish.'))


    @Rule(Fact(supply_demand_valued='high'), Fact(resistance='break'), Fact(support='unbreak'))
    def stock_technical_rule_146(self):
        self.declare(Fact(recommendation='Supply dan demand menunjukkan tekanan beli tinggi. Resistensi telah ditembus, menunjukkan kekuatan bullish. Support belum ditembus, menunjukkan kekuatan bullish.'))


    @Rule(Fact(supply_demand_valued='high'), Fact(resistance='unbreak'), Fact(support='break'))
    def stock_technical_rule_147(self):
        self.declare(Fact(recommendation='Supply dan demand menunjukkan tekanan beli tinggi. Resistensi belum ditembus, menunjukkan kekuatan bearish. Support telah ditembus, menunjukkan kelemahan bearish.'))


    @Rule(Fact(supply_demand_valued='high'), Fact(resistance='unbreak'), Fact(support='unbreak'))
    def stock_technical_rule_148(self):
        self.declare(Fact(recommendation='Supply dan demand menunjukkan tekanan beli tinggi. Resistensi belum ditembus, menunjukkan kekuatan bearish. Support belum ditembus, menunjukkan kekuatan bullish.'))


    @Rule(Fact(supply_demand_valued='low'), Fact(resistance='break'), Fact(support='break'))
    def stock_technical_rule_149(self):
        self.declare(Fact(recommendation='Supply dan demand menunjukkan tekanan jual tinggi. Resistensi telah ditembus, menunjukkan kekuatan bullish. Support telah ditembus, menunjukkan kelemahan bearish.'))


    @Rule(Fact(supply_demand_valued='low'), Fact(resistance='break'), Fact(support='unbreak'))
    def stock_technical_rule_150(self):
        self.declare(Fact(recommendation='Supply dan demand menunjukkan tekanan jual tinggi. Resistensi telah ditembus, menunjukkan kekuatan bullish. Support belum ditembus, menunjukkan kekuatan bullish.'))


    @Rule(Fact(supply_demand_valued='low'), Fact(resistance='unbreak'), Fact(support='break'))
    def stock_technical_rule_151(self):
        self.declare(Fact(recommendation='Supply dan demand menunjukkan tekanan jual tinggi. Resistensi belum ditembus, menunjukkan kekuatan bearish. Support telah ditembus, menunjukkan kelemahan bearish.'))


    @Rule(Fact(supply_demand_valued='low'), Fact(resistance='unbreak'), Fact(support='unbreak'))
    def stock_technical_rule_152(self):
        self.declare(Fact(recommendation='Supply dan demand menunjukkan tekanan jual tinggi. Resistensi belum ditembus, menunjukkan kekuatan bearish. Support belum ditembus, menunjukkan kekuatan bullish.'))


    @Rule(Fact(net_foreign_inflow='high'), Fact(resistance='break'), Fact(support='break'))
    def stock_technical_rule_153(self):
        self.declare(Fact(recommendation='Aliran dana asing menunjukkan tren masuk tinggi. Resistensi telah ditembus, menunjukkan kekuatan bullish. Support telah ditembus, menunjukkan kelemahan bearish.'))


    @Rule(Fact(net_foreign_inflow='high'), Fact(resistance='break'), Fact(support='unbreak'))
    def stock_technical_rule_154(self):
        self.declare(Fact(recommendation='Aliran dana asing menunjukkan tren masuk tinggi. Resistensi telah ditembus, menunjukkan kekuatan bullish. Support belum ditembus, menunjukkan kekuatan bullish.'))


    @Rule(Fact(net_foreign_inflow='high'), Fact(resistance='unbreak'), Fact(support='break'))
    def stock_technical_rule_155(self):
        self.declare(Fact(recommendation='Aliran dana asing menunjukkan tren masuk tinggi. Resistensi belum ditembus, menunjukkan kekuatan bearish. Support telah ditembus, menunjukkan kelemahan bearish.'))


    @Rule(Fact(net_foreign_inflow='high'), Fact(resistance='unbreak'), Fact(support='unbreak'))
    def stock_technical_rule_156(self):
        self.declare(Fact(recommendation='Aliran dana asing menunjukkan tren masuk tinggi. Resistensi belum ditembus, menunjukkan kekuatan bearish. Support belum ditembus, menunjukkan kekuatan bullish.'))


    @Rule(Fact(net_foreign_inflow='low'), Fact(resistance='break'), Fact(support='break'))
    def stock_technical_rule_157(self):
        self.declare(Fact(recommendation='Aliran dana asing menunjukkan tren keluar tinggi. Resistensi telah ditembus, menunjukkan kekuatan bullish. Support telah ditembus, menunjukkan kelemahan bearish.'))


    @Rule(Fact(net_foreign_inflow='low'), Fact(resistance='break'), Fact(support='unbreak'))
    def stock_technical_rule_158(self):
        self.declare(Fact(recommendation='Aliran dana asing menunjukkan tren keluar tinggi. Resistensi telah ditembus, menunjukkan kekuatan bullish. Support belum ditembus, menunjukkan kekuatan bullish.'))


    @Rule(Fact(net_foreign_inflow='low'), Fact(resistance='unbreak'), Fact(support='break'))
    def stock_technical_rule_159(self):
        self.declare(Fact(recommendation='Aliran dana asing menunjukkan tren keluar tinggi. Resistensi belum ditembus, menunjukkan kekuatan bearish. Support telah ditembus, menunjukkan kelemahan bearish.'))


    @Rule(Fact(net_foreign_inflow='low'), Fact(resistance='unbreak'), Fact(support='unbreak'))
    def stock_technical_rule_160(self):
        self.declare(Fact(recommendation='Aliran dana asing menunjukkan tren keluar tinggi. Resistensi belum ditembus, menunjukkan kekuatan bearish. Support belum ditembus, menunjukkan kekuatan bullish.'))




    @Rule(Fact(moving_average_valued='low'), Fact(resistance='break'), Fact(rsi_valued='low'), Fact(supply_demand_valued='low'))
    def technical1_buy(self):
        self.declare(Fact(recommendation='Buy karena undervalue dan harga telah menembus permintaan terbanyak'))

    @Rule(Fact(moving_average_valued='low'))
    def technical_wait_ma(self):
        self.declare(Fact(recommendation='Tunggu sampai moving average harian menyentuh level 50'))

    @Rule(Fact(moving_average_valued='high'))
    def technical_buy_ma(self):
        self.declare(Fact(recommendation='Beli karena moving average harian menyentuh level 50 dan berpotensi menyentuh level 200'))

    @Rule(Fact(support='break'))
    def support_sell(self):
        self.declare(Fact(recommendation='Jual karena permintaan penjualan terlalu besar, sehingga menembus batas support harga'))

    @Rule(Fact(support='unbreak'))
    def support_buy(self):
        self.declare(Fact(recommendation='beli karena permintaan pembelian terlalu besar, sehingga harga tertahan di harga permintaan'))

    @Rule(Fact(resistance='break'))
    def resist_buy(self):
        self.declare(Fact(recommendation='Beli karena resistance telah berhasil terbongkar oleh permintaan'))

    @Rule(Fact(resistance='unbreak'))
    def resist_wait(self):
        self.declare(Fact(recommendation='Tunggu kondisi, karena resistance belum terbongkar oleh permintaan'))

    @Rule(Fact(rsi_valued='low'))
    def technical_buy_rsi(self):
        self.declare(Fact(recommendation='Buy (Beli karena pembelian dalam skala besar telah terjadi)'))

    @Rule(Fact(rsi_valued='high'))
    def technical_sell_rsi(self):
        self.declare(Fact(recommendation='Sell (Jual karena penjualan dalam skala besar telah terjadi)'))

    @Rule(Fact(supply_demand_valued='low'))
    def technical_sell_supply(self):
        self.declare(Fact(recommendation='Sell (Supply karena terlalu banyak barang yang beredar di market, dan permintaan terlalu sedikit)'))

    @Rule(Fact(supply_demand_valued='high'))
    def technical_buy_supply(self):
        self.declare(Fact(recommendation='Buy (Supply karena terlalu sedikit barang yang beredar di market, dan permintaan terlalu banyak)'))

    @Rule(Fact(net_foreign_inflow_valued='low'))
    def foreign_sell(self):
        self.declare(Fact(recommendation='Sell karena arus masuk asing negatif'))

    @Rule(Fact(net_foreign_inflow_valued='high'))
    def foreign_buy(self):
        self.declare(Fact(recommendation='Buy karena arus masuk asing negatif'))

    @Rule(Fact(moving_average_valued='low'), Fact(rsi_valued='low'))
    def technical_buy1(self):
        self.declare(Fact(recommendation='Buy karena harga undervalued dan RSI rendah, cocok untuk pembelian'))

    @Rule(Fact(moving_average_valued='low'), Fact(rsi_valued='high'))
    def technical_buy2(self):
        self.declare(Fact(recommendation='Buy tetapi pertimbangkan RSI yang tinggi'))

    @Rule(Fact(moving_average_valued='high'), Fact(rsi_valued='low'))
    def technical_buy3(self):
        self.declare(Fact(recommendation='Tunggu konfirmasi tambahan, karena hanya RSI yang mendukung pembelian'))

    @Rule(Fact(moving_average_valued='high'), Fact(rsi_valued='high'))
    def technical_buy4(self):
        self.declare(Fact(recommendation='Tidak disarankan untuk membeli saat ini'))

    @Rule(Fact(moving_average_valued='low'), Fact(resistance='break'))
    def technical_buy5(self):
        self.declare(Fact(recommendation='Buy karena harga undervalued dan telah break resistance, momentum baik'))

    @Rule(Fact(moving_average_valued='low'), Fact(resistance='unbreak'))
    def technical_buy6(self):
        self.declare(Fact(recommendation='Buy dengan hati-hati karena harga undervalued tetapi belum break resistance'))

    @Rule(Fact(moving_average_valued='high'), Fact(resistance='break'))
    def technical_buy7(self):
        self.declare(Fact(recommendation='Tunggu penurunan harga karena meskipun break resistance, harga relatif mahal'))

    @Rule(Fact(moving_average_valued='high'), Fact(resistance='unbreak'))
    def technical_buy8(self):
        self.declare(Fact(recommendation='Tidak disarankan untuk membeli saat ini karena harga overvalued dan belum break resistance'))
         
    @Rule(Fact(moving_average_valued='low'), Fact(support='break'))
    def technical_buy9(self):
        self.declare(Fact(recommendation='Waspadai penurunan lebih lanjut karena harga undervalued namun telah break support'))

    @Rule(Fact(moving_average_valued='low'), Fact(support='unbreak'))
    def technical_buy10(self):
        self.declare(Fact(recommendation='Buy karena harga undervalued dan masih bertahan di atas support'))

    @Rule(Fact(moving_average_valued='high'), Fact(support='break'))
    def technical_buy11(self):
        self.declare(Fact(recommendation='Hindari pembelian karena harga overvalued dan telah break support'))

    @Rule(Fact(moving_average_valued='high'), Fact(support='unbreak'))
    def technical_buy12(self):
        self.declare(Fact(recommendation='Pertimbangkan untuk tidak membeli karena harga masih overvalued meskipun berada di atas support'))

    @Rule(Fact(moving_average_valued='low'), Fact(supply_demand_valued='low'))
    def technical_buy13(self):
        self.declare(Fact(recommendation='Buy karena harga undervalued dan permintaan rendah, potensi kenaikan permintaan'))

    @Rule(Fact(moving_average_valued='low'), Fact(supply_demand_valued='high'))
    def technical_buy14(self):
        self.declare(Fact(recommendation='Buy segera karena harga undervalued dengan permintaan tinggi'))

    @Rule(Fact(moving_average_valued='high'), Fact(supply_demand_valued='low'))
    def technical_buy15(self):
        self.declare(Fact(recommendation='Tunggu untuk membeli, harga overvalued dan permintaan rendah'))

    @Rule(Fact(moving_average_valued='high'), Fact(supply_demand_valued='high'))
    def technical_buy16(self):
        self.declare(Fact(recommendation='Pertimbangkan menjual atau hindari pembelian karena harga tinggi meski permintaan tinggi'))

    @Rule(Fact(moving_average_valued='low'), Fact(net_foreign_inflow_valued='low'))
    def technical_buy17(self):
        self.declare(Fact(recommendation='Buy dengan hati-hati, harga undervalued tetapi aliran asing rendah'))

    @Rule(Fact(moving_average_valued='low'), Fact(net_foreign_inflow_valued='high'))
    def technical_buy18(self):
        self.declare(Fact(recommendation='Buy segera, harga undervalued dan aliran asing tinggi'))

    @Rule(Fact(moving_average_valued='high'), Fact(net_foreign_inflow_valued='low'))
    def technical_buy19(self):
        self.declare(Fact(recommendation='Tunggu pembelian, harga overvalued dan aliran asing rendah'))

    @Rule(Fact(moving_average_valued='high'), Fact(net_foreign_inflow_valued='high'))
    def technical_buy20(self):
        self.declare(Fact(recommendation='Hindari membeli sekarang, harga overvalued meski aliran asing tinggi'))

    @Rule(Fact(rsi_valued='low'), Fact(resistance='unbreak'))
    def technical_buy21(self):
        self.declare(Fact(recommendation='Buy karena RSI rendah dan resistance belum terlewati, potensi naik'))

    @Rule(Fact(rsi_valued='low'), Fact(resistance='break'))
    def technical_buy22(self):
        self.declare(Fact(recommendation='Buy segera karena RSI rendah dan harga telah break resistance'))

    @Rule(Fact(rsi_valued='high'), Fact(resistance='unbreak'))
    def technical_buy23(self):
        self.declare(Fact(recommendation='Tunggu, RSI tinggi dan resistance belum terlewati'))

    @Rule(Fact(rsi_valued='high'), Fact(resistance='break'))
    def technical_buy24(self):
        self.declare(Fact(recommendation='Pertimbangkan untuk tidak membeli, RSI tinggi meski harga telah break resistance'))

    @Rule(Fact(rsi_valued='low'), Fact(support='break'))
    def technical_buy25(self):
        self.declare(Fact(recommendation='Waspadai, RSI rendah namun harga telah break support'))

    @Rule(Fact(rsi_valued='low'), Fact(support='unbreak'))
    def technical_buy26(self):
        self.declare(Fact(recommendation='Buy karena RSI rendah dan harga bertahan di atas support'))

    @Rule(Fact(rsi_valued='high'), Fact(support='break'))
    def technical_buy27(self):
        self.declare(Fact(recommendation='Tunggu pembelian, RSI tinggi dan harga telah break support'))

    @Rule(Fact(rsi_valued='high'), Fact(support='unbreak'))
    def technical_buy28(self):
        self.declare(Fact(recommendation='Tidak disarankan untuk membeli, RSI tinggi meski harga bertahan di atas support'))

    @Rule(Fact(rsi_valued='low'), Fact(supply_demand_valued='low'))
    def technical_buy29(self):
        self.declare(Fact(recommendation='Buy, RSI rendah dan permintaan rendah, potensi kenaikan'))

    @Rule(Fact(rsi_valued='low'), Fact(supply_demand_valued='high'))
    def technical_buy30(self):
        self.declare(Fact(recommendation='Buy segera, RSI rendah dan permintaan tinggi mendukung pembelian'))

    @Rule(Fact(rsi_valued='high'), Fact(supply_demand_valued='low'))
    def technical_buy31(self):
        self.declare(Fact(recommendation='Tunggu untuk membeli, RSI tinggi dan permintaan rendah'))

    @Rule(Fact(rsi_valued='high'), Fact(supply_demand_valued='high'))
    def technical_buy32(self):
        self.declare(Fact(recommendation='Hindari pembelian, RSI tinggi meskipun permintaan tinggi'))

    @Rule(Fact(rsi_valued='low'), Fact(net_foreign_inflow_valued='low'))
    def technical_buy33(self):
        self.declare(Fact(recommendation='Buy dengan pertimbangan, RSI rendah namun aliran asing rendah'))

    @Rule(Fact(rsi_valued='low'), Fact(net_foreign_inflow_valued='high'))
    def technical_buy34(self):
        self.declare(Fact(recommendation='Buy segera, RSI rendah dengan aliran asing tinggi mendukung'))

    @Rule(Fact(rsi_valued='high'), Fact(net_foreign_inflow_valued='low'))
    def technical_buy35(self):
        self.declare(Fact(recommendation='Tunggu, RSI tinggi dan aliran asing rendah'))

    @Rule(Fact(rsi_valued='high'), Fact(net_foreign_inflow_valued='high'))
    def technical_buy36(self):
        self.declare(Fact(recommendation='Pertimbangkan untuk tidak membeli, RSI tinggi meski aliran asing tinggi'))

    @Rule(Fact(resistance='break'), Fact(support='break'))
    def technical_buy37(self):
        self.declare(Fact(recommendation='Analisa Resistance dan break tidak dapat dimasukkan secara bersamaan dalam dua parameter saja, masukkan parameter lain'))

    @Rule(Fact(resistance='break'), Fact(support='unbreak'))
    def technical_buy38(self):
        self.declare(Fact(recommendation='Analisa Resistance dan break tidak dapat dimasukkan secara bersamaan dalam dua parameter saja, masukkan parameter lain'))

    @Rule(Fact(resistance='unbreak'), Fact(support='break'))
    def technical_buy39(self):
        self.declare(Fact(recommendation='Analisa Resistance dan break tidak dapat dimasukkan secara bersamaan dalam dua parameter saja, masukkan parameter lain'))

    @Rule(Fact(resistance='unbreak'), Fact(support='unbreak'))
    def technical_buy40(self):
        self.declare(Fact(recommendation='Analisa Resistance dan break tidak dapat dimasukkan secara bersamaan dalam dua parameter saja, masukkan parameter lain'))

    @Rule(Fact(resistance='unbreak'), Fact(supply_demand_valued='high'))
    def technical_buy41(self):
        self.declare(Fact(recommendation='Buy karena permintaan tinggi meskipun resistance belum terlewati'))

    @Rule(Fact(resistance='unbreak'), Fact(supply_demand_valued='low'))
    def technical_buy42(self):
        self.declare(Fact(recommendation='Tunggu, permintaan rendah dan resistance belum terlewati'))

    @Rule(Fact(resistance='break'), Fact(supply_demand_valued='high'))
    def technical_buy43(self):
        self.declare(Fact(recommendation='Buy segera, resistance break dan permintaan tinggi mendukung'))

    @Rule(Fact(resistance='break'), Fact(supply_demand_valued='low'))
    def technical_buy44(self):
        self.declare(Fact(recommendation='Waspadai, resistance break namun permintaan rendah'))

    @Rule(Fact(resistance='break'), Fact(net_foreign_inflow_valued='low'))
    def technical_buy45(self):
        self.declare(Fact(recommendation='Waspadai, resistance break namun aliran asing rendah'))

    @Rule(Fact(resistance='break'), Fact(net_foreign_inflow_valued='high'))
    def technical_buy46(self):
        self.declare(Fact(recommendation='Buy segera, resistance break dan aliran asing tinggi mendukung'))

    @Rule(Fact(resistance='unbreak'), Fact(net_foreign_inflow_valued='low'))
    def technical_buy47(self):
        self.declare(Fact(recommendation='Tunggu, resistance belum terlewati dan aliran asing rendah'))

    @Rule(Fact(resistance='unbreak'), Fact(net_foreign_inflow_valued='high'))
    def technical_buy48(self):
        self.declare(Fact(recommendation='Buy karena aliran asing tinggi meskipun resistance belum terlewati'))

    @Rule(Fact(support='break'), Fact(supply_demand_valued='low'))
    def technical_buy49(self):
        self.declare(Fact(recommendation='Waspadai, support break dan permintaan rendah'))

    @Rule(Fact(support='break'), Fact(supply_demand_valued='high'))
    def technical_buy50(self):
        self.declare(Fact(recommendation='Buy segera, support break dengan permintaan tinggi mendukung'))

    @Rule(Fact(support='unbreak'), Fact(supply_demand_valued='low'))
    def technical_buy51(self):
        self.declare(Fact(recommendation='Tunggu, support tidak terlewati dan permintaan rendah'))

    @Rule(Fact(support='unbreak'), Fact(supply_demand_valued='high'))
    def technical_buy52(self):
        self.declare(Fact(recommendation='Buy, support tidak terlewati dan permintaan tinggi'))

    @Rule(Fact(support='break'), Fact(net_foreign_inflow_valued='low'))
    def technical_buy53(self):
        self.declare(Fact(recommendation='Waspadai, support break dengan aliran asing rendah'))

    @Rule(Fact(support='break'), Fact(net_foreign_inflow_valued='high'))
    def technical_buy54(self):
        self.declare(Fact(recommendation='Buy segera, support break dan aliran asing tinggi mendukung'))

    @Rule(Fact(support='unbreak'), Fact(net_foreign_inflow_valued='low'))
    def technical_buy55(self):
        self.declare(Fact(recommendation='Tunggu, support tidak terlewati dan aliran asing rendah'))

    @Rule(Fact(support='unbreak'), Fact(net_foreign_inflow_valued='high'))
    def technical_buy56(self):
        self.declare(Fact(recommendation='Buy karena aliran asing tinggi meskipun support belum terlewati'))

    @Rule(Fact(supply_demand_valued='high'), Fact(net_foreign_inflow_valued='high'))
    def technical_buy57(self):
        self.declare(Fact(recommendation='Buy kuat, permintaan dan aliran asing tinggi mendukung'))

    @Rule(Fact(supply_demand_valued='high'), Fact(net_foreign_inflow_valued='low'))
    def technical_buy58(self):
        self.declare(Fact(recommendation='Waspadai, permintaan tinggi namun aliran asing rendah'))

    @Rule(Fact(supply_demand_valued='low'), Fact(net_foreign_inflow_valued='high'))
    def technical_buy59(self):
        self.declare(Fact(recommendation='Buy dengan hati-hati, aliran asing tinggi tapi permintaan rendah'))

    @Rule(Fact(supply_demand_valued='low'), Fact(net_foreign_inflow_valued='low'))
    def technical_buy60(self):
        self.declare(Fact(recommendation='Hindari, baik permintaan maupun aliran asing rendah'))

















    @Rule(Fact(moving_average_valued='low'), Fact(rsi_valued='low'), Fact(net_foreign_inflow_valued='high'))
    def strong_technical_buy(self):
        self.declare(Fact(recommendation='Strong Buy: Harga undervalued, RSI rendah, dan arus masuk asing positif'))

    @Rule(Fact(moving_average_valued='low'), Fact(resistance='break'), Fact(supply_demand_valued='low'), Fact(net_foreign_inflow_valued='high'))
    def strong_technical1_buy(self):
        self.declare(Fact(recommendation='Strong Buy: Harga undervalued, resistance tembus, dan arus masuk asing positif'))

    @Rule(Fact(rsi_valued='high'), Fact(supply_demand_valued='low'))
    def overbought_sell(self):
        self.declare(Fact(recommendation='Sell: Kondisi overbought dengan pasokan berlebih di pasar'))

    @Rule(Fact(support='break'), Fact(net_foreign_inflow_valued='low'))
    def support_break_sell(self):
        self.declare(Fact(recommendation='Sell: Support tembus dan arus masuk asing negatif, menunjukkan tekanan jual yang kuat'))

    @Rule(Fact(moving_average_valued='high'), Fact(rsi_valued='high'))
    def potential_sell(self):
        self.declare(Fact(recommendation='Sell: Kedua indikator menunjukkan kondisi overvalued'))

    @Rule(Fact(moving_average_valued='low'), Fact(rsi_valued='high'), Fact(supply_demand_valued='low'))
    def mixed_signals_sell(self):
        self.declare(Fact(recommendation='Sell: Meskipun harga undervalued, RSI tinggi dan pasokan berlebih menunjukkan risiko jual'))

    @Rule(Fact(net_foreign_inflow_valued='high'), Fact(supply_demand_valued='low'), Fact(resistance='break'))
    def foreign_inflow_resistance_buy(self):
        self.declare(Fact(recommendation='Buy: Arus masuk asing positif mendukung pelanggaran resistance meskipun ada pasokan berlebih'))

    @Rule(Fact(net_foreign_inflow_valued='low'), Fact(moving_average_valued='high'), Fact(rsi_valued='high'))
    def foreign_inflow_sell(self):
        self.declare(Fact(recommendation='Sell: Arus masuk asing negatif dengan harga tinggi dan RSI tinggi'))

    # Kombinasi Beli Kuat dengan Pasokan Tinggi
    @Rule(Fact(moving_average_valued='low'), Fact(rsi_valued='low'), Fact(supply_demand_valued='high'), Fact(net_foreign_inflow_valued='high'))
    def weak_signal_buy(self):
        self.declare(Fact(recommendation='Buy: Harga undervalued, tetapi supply tinggi, risiko penurunan harga tetap ada'))

    # Kombinasi Jual dengan Pasokan dan Arus Masuk Asing Negatif
    @Rule(Fact(rsi_valued='high'), Fact(supply_demand_valued='low'), Fact(net_foreign_inflow_valued='low'))
    def strong_sell(self):
        self.declare(Fact(recommendation='Strong Sell: Kondisi overbought dengan pasokan rendah dan arus masuk asing negatif'))

    # Penjualan Meskipun Ada Arus Masuk Asing Positif
    @Rule(Fact(resistance='break'), Fact(net_foreign_inflow_valued='high'), Fact(supply_demand_valued='high'))
    def cautious_buy(self):
        self.declare(Fact(recommendation='Cautious Buy: Resistance tembus, tetapi supply tinggi dan risiko penurunan harga ada'))

    # Analisis Teknis dengan Sinergi Positif
    @Rule(Fact(moving_average_valued='low'), Fact(rsi_valued='low'), Fact(support='break'), Fact(net_foreign_inflow_valued='high'))
    def synergistic_buy(self):
        self.declare(Fact(recommendation='Synergistic Buy: Semua indikator mendukung, kesempatan untuk pertumbuhan harga'))

    # Arus Masuk Asing Tinggi tanpa Indikator Teknikal yang Mendukung
    @Rule(Fact(net_foreign_inflow_valued='high'), Fact(moving_average_valued='high'), Fact(rsi_valued='high'))
    def cautious_foreign_buy(self):
        self.declare(Fact(recommendation='Cautious Foreign Buy: Arus masuk asing positif, tetapi semua indikator teknik menunjukkan overvalued'))

    @Rule(Fact(resistance='break'), Fact(net_foreign_inflow_valued='high'), Fact(supply_demand_valued='high'))
    def cautious_buy(self):
        self.declare(Fact(recommendation='Cautious Buy: Resistance tembus, tetapi supply tinggi dan risiko penurunan harga ada'))

    @Rule(Fact(moving_average_valued='low'), Fact(rsi_valued='low'), Fact(support='break'), Fact(net_foreign_inflow_valued='high'))
    def synergistic_buy(self):
        self.declare(Fact(recommendation='Synergistic Buy: Semua indikator mendukung, kesempatan untuk pertumbuhan harga'))

    @Rule(Fact(net_foreign_inflow_valued='high'), Fact(moving_average_valued='high'), Fact(rsi_valued='high'))
    def cautious_foreign_buy(self):
        self.declare(Fact(recommendation='Cautious Foreign Buy: Arus masuk asing positif, tetapi semua indikator teknik menunjukkan overvalued'))

    @Rule(Fact(moving_average_valued='high'), Fact(supply_demand_valued='high'))
    def high_ma_high_supply_sell(self):
        self.declare(Fact(recommendation='Sell: Harga tinggi dan supply juga tinggi menunjukkan potensi penurunan'))

    @Rule(Fact(rsi_valued='high'), Fact(moving_average_valued='low'))
    def conflicting_signals(self):
        self.declare(Fact(recommendation='Perhatikan: Indikator berlawanan, risiko untuk ambil keputusan'))

    @Rule(Fact(net_foreign_inflow_valued='high'), Fact(resistance='unbreak'))
    def cautious_foreign_resistance(self):
        self.declare(Fact(recommendation='Cautious Buy: Arus masuk asing positif, tetapi resistance belum tembus'))

    @Rule(Fact(net_foreign_inflow_valued='low'), Fact(support='break'))
    def foreign_support_sell(self):
        self.declare(Fact(recommendation='Sell: Arus masuk asing rendah dan support tembus menunjukkan tekanan jual'))

    #Rule 6 parameter teknikal
    #Rule 6 parameter teknikal
    #Rule 6 parameter teknikal
    #Rule 6 parameter teknikal
    #Rule 6 parameter teknikal
    #Rule 6 parameter teknikal

    @Rule(Fact(moving_average_valued='high'), Fact(rsi_valued='high'), Fact(supply_demand_valued='high'), Fact(net_foreign_inflow='high'), Fact(resistance='break'), Fact(support='break'))
    def full_stock_rule_1(self):
        self.declare(Fact(recommendation='Moving Average menunjukkan tren naik. RSI berada dalam kondisi overbought. Supply dan demand menunjukkan tekanan beli tinggi. Aliran dana asing menunjukkan tren masuk tinggi. Resistensi telah ditembus, menunjukkan kekuatan bullish. Support telah ditembus, menunjukkan kelemahan bearish.'))


    @Rule(Fact(moving_average_valued='high'), Fact(rsi_valued='high'), Fact(supply_demand_valued='high'), Fact(net_foreign_inflow='high'), Fact(resistance='break'), Fact(support='unbreak'))
    def full_stock_rule_2(self):
        self.declare(Fact(recommendation='Moving Average menunjukkan tren naik. RSI berada dalam kondisi overbought. Supply dan demand menunjukkan tekanan beli tinggi. Aliran dana asing menunjukkan tren masuk tinggi. Resistensi telah ditembus, menunjukkan kekuatan bullish. Support belum ditembus, menunjukkan kekuatan bullish.'))


    @Rule(Fact(moving_average_valued='high'), Fact(rsi_valued='high'), Fact(supply_demand_valued='high'), Fact(net_foreign_inflow='high'), Fact(resistance='unbreak'), Fact(support='break'))
    def full_stock_rule_3(self):
        self.declare(Fact(recommendation='Moving Average menunjukkan tren naik. RSI berada dalam kondisi overbought. Supply dan demand menunjukkan tekanan beli tinggi. Aliran dana asing menunjukkan tren masuk tinggi. Resistensi belum ditembus, menunjukkan kekuatan bearish. Support telah ditembus, menunjukkan kelemahan bearish.'))


    @Rule(Fact(moving_average_valued='high'), Fact(rsi_valued='high'), Fact(supply_demand_valued='high'), Fact(net_foreign_inflow='high'), Fact(resistance='unbreak'), Fact(support='unbreak'))
    def full_stock_rule_4(self):
        self.declare(Fact(recommendation='Moving Average menunjukkan tren naik. RSI berada dalam kondisi overbought. Supply dan demand menunjukkan tekanan beli tinggi. Aliran dana asing menunjukkan tren masuk tinggi. Resistensi belum ditembus, menunjukkan kekuatan bearish. Support belum ditembus, menunjukkan kekuatan bullish.'))


    @Rule(Fact(moving_average_valued='high'), Fact(rsi_valued='high'), Fact(supply_demand_valued='high'), Fact(net_foreign_inflow='low'), Fact(resistance='break'), Fact(support='break'))
    def full_stock_rule_5(self):
        self.declare(Fact(recommendation='Moving Average menunjukkan tren naik. RSI berada dalam kondisi overbought. Supply dan demand menunjukkan tekanan beli tinggi. Aliran dana asing menunjukkan tren keluar tinggi. Resistensi telah ditembus, menunjukkan kekuatan bullish. Support telah ditembus, menunjukkan kelemahan bearish.'))


    @Rule(Fact(moving_average_valued='high'), Fact(rsi_valued='high'), Fact(supply_demand_valued='high'), Fact(net_foreign_inflow='low'), Fact(resistance='break'), Fact(support='unbreak'))
    def full_stock_rule_6(self):
        self.declare(Fact(recommendation='Moving Average menunjukkan tren naik. RSI berada dalam kondisi overbought. Supply dan demand menunjukkan tekanan beli tinggi. Aliran dana asing menunjukkan tren keluar tinggi. Resistensi telah ditembus, menunjukkan kekuatan bullish. Support belum ditembus, menunjukkan kekuatan bullish.'))


    @Rule(Fact(moving_average_valued='high'), Fact(rsi_valued='high'), Fact(supply_demand_valued='high'), Fact(net_foreign_inflow='low'), Fact(resistance='unbreak'), Fact(support='break'))
    def full_stock_rule_7(self):
        self.declare(Fact(recommendation='Moving Average menunjukkan tren naik. RSI berada dalam kondisi overbought. Supply dan demand menunjukkan tekanan beli tinggi. Aliran dana asing menunjukkan tren keluar tinggi. Resistensi belum ditembus, menunjukkan kekuatan bearish. Support telah ditembus, menunjukkan kelemahan bearish.'))


    @Rule(Fact(moving_average_valued='high'), Fact(rsi_valued='high'), Fact(supply_demand_valued='high'), Fact(net_foreign_inflow='low'), Fact(resistance='unbreak'), Fact(support='unbreak'))
    def full_stock_rule_8(self):
        self.declare(Fact(recommendation='Moving Average menunjukkan tren naik. RSI berada dalam kondisi overbought. Supply dan demand menunjukkan tekanan beli tinggi. Aliran dana asing menunjukkan tren keluar tinggi. Resistensi belum ditembus, menunjukkan kekuatan bearish. Support belum ditembus, menunjukkan kekuatan bullish.'))


    @Rule(Fact(moving_average_valued='high'), Fact(rsi_valued='high'), Fact(supply_demand_valued='low'), Fact(net_foreign_inflow='high'), Fact(resistance='break'), Fact(support='break'))
    def full_stock_rule_9(self):
        self.declare(Fact(recommendation='Moving Average menunjukkan tren naik. RSI berada dalam kondisi overbought. Supply dan demand menunjukkan tekanan jual tinggi. Aliran dana asing menunjukkan tren masuk tinggi. Resistensi telah ditembus, menunjukkan kekuatan bullish. Support telah ditembus, menunjukkan kelemahan bearish.'))


    @Rule(Fact(moving_average_valued='high'), Fact(rsi_valued='high'), Fact(supply_demand_valued='low'), Fact(net_foreign_inflow='high'), Fact(resistance='break'), Fact(support='unbreak'))
    def full_stock_rule_10(self):
        self.declare(Fact(recommendation='Moving Average menunjukkan tren naik. RSI berada dalam kondisi overbought. Supply dan demand menunjukkan tekanan jual tinggi. Aliran dana asing menunjukkan tren masuk tinggi. Resistensi telah ditembus, menunjukkan kekuatan bullish. Support belum ditembus, menunjukkan kekuatan bullish.'))


    @Rule(Fact(moving_average_valued='high'), Fact(rsi_valued='high'), Fact(supply_demand_valued='low'), Fact(net_foreign_inflow='high'), Fact(resistance='unbreak'), Fact(support='break'))
    def full_stock_rule_11(self):
        self.declare(Fact(recommendation='Moving Average menunjukkan tren naik. RSI berada dalam kondisi overbought. Supply dan demand menunjukkan tekanan jual tinggi. Aliran dana asing menunjukkan tren masuk tinggi. Resistensi belum ditembus, menunjukkan kekuatan bearish. Support telah ditembus, menunjukkan kelemahan bearish.'))


    @Rule(Fact(moving_average_valued='high'), Fact(rsi_valued='high'), Fact(supply_demand_valued='low'), Fact(net_foreign_inflow='high'), Fact(resistance='unbreak'), Fact(support='unbreak'))
    def full_stock_rule_12(self):
        self.declare(Fact(recommendation='Moving Average menunjukkan tren naik. RSI berada dalam kondisi overbought. Supply dan demand menunjukkan tekanan jual tinggi. Aliran dana asing menunjukkan tren masuk tinggi. Resistensi belum ditembus, menunjukkan kekuatan bearish. Support belum ditembus, menunjukkan kekuatan bullish.'))


    @Rule(Fact(moving_average_valued='high'), Fact(rsi_valued='high'), Fact(supply_demand_valued='low'), Fact(net_foreign_inflow='low'), Fact(resistance='break'), Fact(support='break'))
    def full_stock_rule_13(self):
        self.declare(Fact(recommendation='Moving Average menunjukkan tren naik. RSI berada dalam kondisi overbought. Supply dan demand menunjukkan tekanan jual tinggi. Aliran dana asing menunjukkan tren keluar tinggi. Resistensi telah ditembus, menunjukkan kekuatan bullish. Support telah ditembus, menunjukkan kelemahan bearish.'))


    @Rule(Fact(moving_average_valued='high'), Fact(rsi_valued='high'), Fact(supply_demand_valued='low'), Fact(net_foreign_inflow='low'), Fact(resistance='break'), Fact(support='unbreak'))
    def full_stock_rule_14(self):
        self.declare(Fact(recommendation='Moving Average menunjukkan tren naik. RSI berada dalam kondisi overbought. Supply dan demand menunjukkan tekanan jual tinggi. Aliran dana asing menunjukkan tren keluar tinggi. Resistensi telah ditembus, menunjukkan kekuatan bullish. Support belum ditembus, menunjukkan kekuatan bullish.'))


    @Rule(Fact(moving_average_valued='high'), Fact(rsi_valued='high'), Fact(supply_demand_valued='low'), Fact(net_foreign_inflow='low'), Fact(resistance='unbreak'), Fact(support='break'))
    def full_stock_rule_15(self):
        self.declare(Fact(recommendation='Moving Average menunjukkan tren naik. RSI berada dalam kondisi overbought. Supply dan demand menunjukkan tekanan jual tinggi. Aliran dana asing menunjukkan tren keluar tinggi. Resistensi belum ditembus, menunjukkan kekuatan bearish. Support telah ditembus, menunjukkan kelemahan bearish.'))


    @Rule(Fact(moving_average_valued='high'), Fact(rsi_valued='high'), Fact(supply_demand_valued='low'), Fact(net_foreign_inflow='low'), Fact(resistance='unbreak'), Fact(support='unbreak'))
    def full_stock_rule_16(self):
        self.declare(Fact(recommendation='Moving Average menunjukkan tren naik. RSI berada dalam kondisi overbought. Supply dan demand menunjukkan tekanan jual tinggi. Aliran dana asing menunjukkan tren keluar tinggi. Resistensi belum ditembus, menunjukkan kekuatan bearish. Support belum ditembus, menunjukkan kekuatan bullish.'))


    @Rule(Fact(moving_average_valued='high'), Fact(rsi_valued='low'), Fact(supply_demand_valued='high'), Fact(net_foreign_inflow='high'), Fact(resistance='break'), Fact(support='break'))
    def full_stock_rule_17(self):
        self.declare(Fact(recommendation='Moving Average menunjukkan tren naik. RSI berada dalam kondisi oversold. Supply dan demand menunjukkan tekanan beli tinggi. Aliran dana asing menunjukkan tren masuk tinggi. Resistensi telah ditembus, menunjukkan kekuatan bullish. Support telah ditembus, menunjukkan kelemahan bearish.'))


    @Rule(Fact(moving_average_valued='high'), Fact(rsi_valued='low'), Fact(supply_demand_valued='high'), Fact(net_foreign_inflow='high'), Fact(resistance='break'), Fact(support='unbreak'))
    def full_stock_rule_18(self):
        self.declare(Fact(recommendation='Moving Average menunjukkan tren naik. RSI berada dalam kondisi oversold. Supply dan demand menunjukkan tekanan beli tinggi. Aliran dana asing menunjukkan tren masuk tinggi. Resistensi telah ditembus, menunjukkan kekuatan bullish. Support belum ditembus, menunjukkan kekuatan bullish.'))


    @Rule(Fact(moving_average_valued='high'), Fact(rsi_valued='low'), Fact(supply_demand_valued='high'), Fact(net_foreign_inflow='high'), Fact(resistance='unbreak'), Fact(support='break'))
    def full_stock_rule_19(self):
        self.declare(Fact(recommendation='Moving Average menunjukkan tren naik. RSI berada dalam kondisi oversold. Supply dan demand menunjukkan tekanan beli tinggi. Aliran dana asing menunjukkan tren masuk tinggi. Resistensi belum ditembus, menunjukkan kekuatan bearish. Support telah ditembus, menunjukkan kelemahan bearish.'))


    @Rule(Fact(moving_average_valued='high'), Fact(rsi_valued='low'), Fact(supply_demand_valued='high'), Fact(net_foreign_inflow='high'), Fact(resistance='unbreak'), Fact(support='unbreak'))
    def full_stock_rule_20(self):
        self.declare(Fact(recommendation='Moving Average menunjukkan tren naik. RSI berada dalam kondisi oversold. Supply dan demand menunjukkan tekanan beli tinggi. Aliran dana asing menunjukkan tren masuk tinggi. Resistensi belum ditembus, menunjukkan kekuatan bearish. Support belum ditembus, menunjukkan kekuatan bullish.'))


    @Rule(Fact(moving_average_valued='high'), Fact(rsi_valued='low'), Fact(supply_demand_valued='high'), Fact(net_foreign_inflow='low'), Fact(resistance='break'), Fact(support='break'))
    def full_stock_rule_21(self):
        self.declare(Fact(recommendation='Moving Average menunjukkan tren naik. RSI berada dalam kondisi oversold. Supply dan demand menunjukkan tekanan beli tinggi. Aliran dana asing menunjukkan tren keluar tinggi. Resistensi telah ditembus, menunjukkan kekuatan bullish. Support telah ditembus, menunjukkan kelemahan bearish.'))


    @Rule(Fact(moving_average_valued='high'), Fact(rsi_valued='low'), Fact(supply_demand_valued='high'), Fact(net_foreign_inflow='low'), Fact(resistance='break'), Fact(support='unbreak'))
    def full_stock_rule_22(self):
        self.declare(Fact(recommendation='Moving Average menunjukkan tren naik. RSI berada dalam kondisi oversold. Supply dan demand menunjukkan tekanan beli tinggi. Aliran dana asing menunjukkan tren keluar tinggi. Resistensi telah ditembus, menunjukkan kekuatan bullish. Support belum ditembus, menunjukkan kekuatan bullish.'))


    @Rule(Fact(moving_average_valued='high'), Fact(rsi_valued='low'), Fact(supply_demand_valued='high'), Fact(net_foreign_inflow='low'), Fact(resistance='unbreak'), Fact(support='break'))
    def full_stock_rule_23(self):
        self.declare(Fact(recommendation='Moving Average menunjukkan tren naik. RSI berada dalam kondisi oversold. Supply dan demand menunjukkan tekanan beli tinggi. Aliran dana asing menunjukkan tren keluar tinggi. Resistensi belum ditembus, menunjukkan kekuatan bearish. Support telah ditembus, menunjukkan kelemahan bearish.'))


    @Rule(Fact(moving_average_valued='high'), Fact(rsi_valued='low'), Fact(supply_demand_valued='high'), Fact(net_foreign_inflow='low'), Fact(resistance='unbreak'), Fact(support='unbreak'))
    def full_stock_rule_24(self):
        self.declare(Fact(recommendation='Moving Average menunjukkan tren naik. RSI berada dalam kondisi oversold. Supply dan demand menunjukkan tekanan beli tinggi. Aliran dana asing menunjukkan tren keluar tinggi. Resistensi belum ditembus, menunjukkan kekuatan bearish. Support belum ditembus, menunjukkan kekuatan bullish.'))


    @Rule(Fact(moving_average_valued='high'), Fact(rsi_valued='low'), Fact(supply_demand_valued='low'), Fact(net_foreign_inflow='high'), Fact(resistance='break'), Fact(support='break'))
    def full_stock_rule_25(self):
        self.declare(Fact(recommendation='Moving Average menunjukkan tren naik. RSI berada dalam kondisi oversold. Supply dan demand menunjukkan tekanan jual tinggi. Aliran dana asing menunjukkan tren masuk tinggi. Resistensi telah ditembus, menunjukkan kekuatan bullish. Support telah ditembus, menunjukkan kelemahan bearish.'))


    @Rule(Fact(moving_average_valued='high'), Fact(rsi_valued='low'), Fact(supply_demand_valued='low'), Fact(net_foreign_inflow='high'), Fact(resistance='break'), Fact(support='unbreak'))
    def full_stock_rule_26(self):
        self.declare(Fact(recommendation='Moving Average menunjukkan tren naik. RSI berada dalam kondisi oversold. Supply dan demand menunjukkan tekanan jual tinggi. Aliran dana asing menunjukkan tren masuk tinggi. Resistensi telah ditembus, menunjukkan kekuatan bullish. Support belum ditembus, menunjukkan kekuatan bullish.'))


    @Rule(Fact(moving_average_valued='high'), Fact(rsi_valued='low'), Fact(supply_demand_valued='low'), Fact(net_foreign_inflow='high'), Fact(resistance='unbreak'), Fact(support='break'))
    def full_stock_rule_27(self):
        self.declare(Fact(recommendation='Moving Average menunjukkan tren naik. RSI berada dalam kondisi oversold. Supply dan demand menunjukkan tekanan jual tinggi. Aliran dana asing menunjukkan tren masuk tinggi. Resistensi belum ditembus, menunjukkan kekuatan bearish. Support telah ditembus, menunjukkan kelemahan bearish.'))


    @Rule(Fact(moving_average_valued='high'), Fact(rsi_valued='low'), Fact(supply_demand_valued='low'), Fact(net_foreign_inflow='high'), Fact(resistance='unbreak'), Fact(support='unbreak'))
    def full_stock_rule_28(self):
        self.declare(Fact(recommendation='Moving Average menunjukkan tren naik. RSI berada dalam kondisi oversold. Supply dan demand menunjukkan tekanan jual tinggi. Aliran dana asing menunjukkan tren masuk tinggi. Resistensi belum ditembus, menunjukkan kekuatan bearish. Support belum ditembus, menunjukkan kekuatan bullish.'))


    @Rule(Fact(moving_average_valued='high'), Fact(rsi_valued='low'), Fact(supply_demand_valued='low'), Fact(net_foreign_inflow='low'), Fact(resistance='break'), Fact(support='break'))
    def full_stock_rule_29(self):
        self.declare(Fact(recommendation='Moving Average menunjukkan tren naik. RSI berada dalam kondisi oversold. Supply dan demand menunjukkan tekanan jual tinggi. Aliran dana asing menunjukkan tren keluar tinggi. Resistensi telah ditembus, menunjukkan kekuatan bullish. Support telah ditembus, menunjukkan kelemahan bearish.'))


    @Rule(Fact(moving_average_valued='high'), Fact(rsi_valued='low'), Fact(supply_demand_valued='low'), Fact(net_foreign_inflow='low'), Fact(resistance='break'), Fact(support='unbreak'))
    def full_stock_rule_30(self):
        self.declare(Fact(recommendation='Moving Average menunjukkan tren naik. RSI berada dalam kondisi oversold. Supply dan demand menunjukkan tekanan jual tinggi. Aliran dana asing menunjukkan tren keluar tinggi. Resistensi telah ditembus, menunjukkan kekuatan bullish. Support belum ditembus, menunjukkan kekuatan bullish.'))


    @Rule(Fact(moving_average_valued='high'), Fact(rsi_valued='low'), Fact(supply_demand_valued='low'), Fact(net_foreign_inflow='low'), Fact(resistance='unbreak'), Fact(support='break'))
    def full_stock_rule_31(self):
        self.declare(Fact(recommendation='Moving Average menunjukkan tren naik. RSI berada dalam kondisi oversold. Supply dan demand menunjukkan tekanan jual tinggi. Aliran dana asing menunjukkan tren keluar tinggi. Resistensi belum ditembus, menunjukkan kekuatan bearish. Support telah ditembus, menunjukkan kelemahan bearish.'))


    @Rule(Fact(moving_average_valued='high'), Fact(rsi_valued='low'), Fact(supply_demand_valued='low'), Fact(net_foreign_inflow='low'), Fact(resistance='unbreak'), Fact(support='unbreak'))
    def full_stock_rule_32(self):
        self.declare(Fact(recommendation='Moving Average menunjukkan tren naik. RSI berada dalam kondisi oversold. Supply dan demand menunjukkan tekanan jual tinggi. Aliran dana asing menunjukkan tren keluar tinggi. Resistensi belum ditembus, menunjukkan kekuatan bearish. Support belum ditembus, menunjukkan kekuatan bullish.'))


    @Rule(Fact(moving_average_valued='low'), Fact(rsi_valued='high'), Fact(supply_demand_valued='high'), Fact(net_foreign_inflow='high'), Fact(resistance='break'), Fact(support='break'))
    def full_stock_rule_33(self):
        self.declare(Fact(recommendation='Moving Average menunjukkan tren turun. RSI berada dalam kondisi overbought. Supply dan demand menunjukkan tekanan beli tinggi. Aliran dana asing menunjukkan tren masuk tinggi. Resistensi telah ditembus, menunjukkan kekuatan bullish. Support telah ditembus, menunjukkan kelemahan bearish.'))


    @Rule(Fact(moving_average_valued='low'), Fact(rsi_valued='high'), Fact(supply_demand_valued='high'), Fact(net_foreign_inflow='high'), Fact(resistance='break'), Fact(support='unbreak'))
    def full_stock_rule_34(self):
        self.declare(Fact(recommendation='Moving Average menunjukkan tren turun. RSI berada dalam kondisi overbought. Supply dan demand menunjukkan tekanan beli tinggi. Aliran dana asing menunjukkan tren masuk tinggi. Resistensi telah ditembus, menunjukkan kekuatan bullish. Support belum ditembus, menunjukkan kekuatan bullish.'))


    @Rule(Fact(moving_average_valued='low'), Fact(rsi_valued='high'), Fact(supply_demand_valued='high'), Fact(net_foreign_inflow='high'), Fact(resistance='unbreak'), Fact(support='break'))
    def full_stock_rule_35(self):
        self.declare(Fact(recommendation='Moving Average menunjukkan tren turun. RSI berada dalam kondisi overbought. Supply dan demand menunjukkan tekanan beli tinggi. Aliran dana asing menunjukkan tren masuk tinggi. Resistensi belum ditembus, menunjukkan kekuatan bearish. Support telah ditembus, menunjukkan kelemahan bearish.'))


    @Rule(Fact(moving_average_valued='low'), Fact(rsi_valued='high'), Fact(supply_demand_valued='high'), Fact(net_foreign_inflow='high'), Fact(resistance='unbreak'), Fact(support='unbreak'))
    def full_stock_rule_36(self):
        self.declare(Fact(recommendation='Moving Average menunjukkan tren turun. RSI berada dalam kondisi overbought. Supply dan demand menunjukkan tekanan beli tinggi. Aliran dana asing menunjukkan tren masuk tinggi. Resistensi belum ditembus, menunjukkan kekuatan bearish. Support belum ditembus, menunjukkan kekuatan bullish.'))


    @Rule(Fact(moving_average_valued='low'), Fact(rsi_valued='high'), Fact(supply_demand_valued='high'), Fact(net_foreign_inflow='low'), Fact(resistance='break'), Fact(support='break'))
    def full_stock_rule_37(self):
        self.declare(Fact(recommendation='Moving Average menunjukkan tren turun. RSI berada dalam kondisi overbought. Supply dan demand menunjukkan tekanan beli tinggi. Aliran dana asing menunjukkan tren keluar tinggi. Resistensi telah ditembus, menunjukkan kekuatan bullish. Support telah ditembus, menunjukkan kelemahan bearish.'))


    @Rule(Fact(moving_average_valued='low'), Fact(rsi_valued='high'), Fact(supply_demand_valued='high'), Fact(net_foreign_inflow='low'), Fact(resistance='break'), Fact(support='unbreak'))
    def full_stock_rule_38(self):
        self.declare(Fact(recommendation='Moving Average menunjukkan tren turun. RSI berada dalam kondisi overbought. Supply dan demand menunjukkan tekanan beli tinggi. Aliran dana asing menunjukkan tren keluar tinggi. Resistensi telah ditembus, menunjukkan kekuatan bullish. Support belum ditembus, menunjukkan kekuatan bullish.'))


    @Rule(Fact(moving_average_valued='low'), Fact(rsi_valued='high'), Fact(supply_demand_valued='high'), Fact(net_foreign_inflow='low'), Fact(resistance='unbreak'), Fact(support='break'))
    def full_stock_rule_39(self):
        self.declare(Fact(recommendation='Moving Average menunjukkan tren turun. RSI berada dalam kondisi overbought. Supply dan demand menunjukkan tekanan beli tinggi. Aliran dana asing menunjukkan tren keluar tinggi. Resistensi belum ditembus, menunjukkan kekuatan bearish. Support telah ditembus, menunjukkan kelemahan bearish.'))


    @Rule(Fact(moving_average_valued='low'), Fact(rsi_valued='high'), Fact(supply_demand_valued='high'), Fact(net_foreign_inflow='low'), Fact(resistance='unbreak'), Fact(support='unbreak'))
    def full_stock_rule_40(self):
        self.declare(Fact(recommendation='Moving Average menunjukkan tren turun. RSI berada dalam kondisi overbought. Supply dan demand menunjukkan tekanan beli tinggi. Aliran dana asing menunjukkan tren keluar tinggi. Resistensi belum ditembus, menunjukkan kekuatan bearish. Support belum ditembus, menunjukkan kekuatan bullish.'))


    @Rule(Fact(moving_average_valued='low'), Fact(rsi_valued='high'), Fact(supply_demand_valued='low'), Fact(net_foreign_inflow='high'), Fact(resistance='break'), Fact(support='break'))
    def full_stock_rule_41(self):
        self.declare(Fact(recommendation='Moving Average menunjukkan tren turun. RSI berada dalam kondisi overbought. Supply dan demand menunjukkan tekanan jual tinggi. Aliran dana asing menunjukkan tren masuk tinggi. Resistensi telah ditembus, menunjukkan kekuatan bullish. Support telah ditembus, menunjukkan kelemahan bearish.'))


    @Rule(Fact(moving_average_valued='low'), Fact(rsi_valued='high'), Fact(supply_demand_valued='low'), Fact(net_foreign_inflow='high'), Fact(resistance='break'), Fact(support='unbreak'))
    def full_stock_rule_42(self):
        self.declare(Fact(recommendation='Moving Average menunjukkan tren turun. RSI berada dalam kondisi overbought. Supply dan demand menunjukkan tekanan jual tinggi. Aliran dana asing menunjukkan tren masuk tinggi. Resistensi telah ditembus, menunjukkan kekuatan bullish. Support belum ditembus, menunjukkan kekuatan bullish.'))


    @Rule(Fact(moving_average_valued='low'), Fact(rsi_valued='high'), Fact(supply_demand_valued='low'), Fact(net_foreign_inflow='high'), Fact(resistance='unbreak'), Fact(support='break'))
    def full_stock_rule_43(self):
        self.declare(Fact(recommendation='Moving Average menunjukkan tren turun. RSI berada dalam kondisi overbought. Supply dan demand menunjukkan tekanan jual tinggi. Aliran dana asing menunjukkan tren masuk tinggi. Resistensi belum ditembus, menunjukkan kekuatan bearish. Support telah ditembus, menunjukkan kelemahan bearish.'))


    @Rule(Fact(moving_average_valued='low'), Fact(rsi_valued='high'), Fact(supply_demand_valued='low'), Fact(net_foreign_inflow='high'), Fact(resistance='unbreak'), Fact(support='unbreak'))
    def full_stock_rule_44(self):
        self.declare(Fact(recommendation='Moving Average menunjukkan tren turun. RSI berada dalam kondisi overbought. Supply dan demand menunjukkan tekanan jual tinggi. Aliran dana asing menunjukkan tren masuk tinggi. Resistensi belum ditembus, menunjukkan kekuatan bearish. Support belum ditembus, menunjukkan kekuatan bullish.'))


    @Rule(Fact(moving_average_valued='low'), Fact(rsi_valued='high'), Fact(supply_demand_valued='low'), Fact(net_foreign_inflow='low'), Fact(resistance='break'), Fact(support='break'))
    def full_stock_rule_45(self):
        self.declare(Fact(recommendation='Moving Average menunjukkan tren turun. RSI berada dalam kondisi overbought. Supply dan demand menunjukkan tekanan jual tinggi. Aliran dana asing menunjukkan tren keluar tinggi. Resistensi telah ditembus, menunjukkan kekuatan bullish. Support telah ditembus, menunjukkan kelemahan bearish.'))


    @Rule(Fact(moving_average_valued='low'), Fact(rsi_valued='high'), Fact(supply_demand_valued='low'), Fact(net_foreign_inflow='low'), Fact(resistance='break'), Fact(support='unbreak'))
    def full_stock_rule_46(self):
        self.declare(Fact(recommendation='Moving Average menunjukkan tren turun. RSI berada dalam kondisi overbought. Supply dan demand menunjukkan tekanan jual tinggi. Aliran dana asing menunjukkan tren keluar tinggi. Resistensi telah ditembus, menunjukkan kekuatan bullish. Support belum ditembus, menunjukkan kekuatan bullish.'))


    @Rule(Fact(moving_average_valued='low'), Fact(rsi_valued='high'), Fact(supply_demand_valued='low'), Fact(net_foreign_inflow='low'), Fact(resistance='unbreak'), Fact(support='break'))
    def full_stock_rule_47(self):
        self.declare(Fact(recommendation='Moving Average menunjukkan tren turun. RSI berada dalam kondisi overbought. Supply dan demand menunjukkan tekanan jual tinggi. Aliran dana asing menunjukkan tren keluar tinggi. Resistensi belum ditembus, menunjukkan kekuatan bearish. Support telah ditembus, menunjukkan kelemahan bearish.'))


    @Rule(Fact(moving_average_valued='low'), Fact(rsi_valued='high'), Fact(supply_demand_valued='low'), Fact(net_foreign_inflow='low'), Fact(resistance='unbreak'), Fact(support='unbreak'))
    def full_stock_rule_48(self):
        self.declare(Fact(recommendation='Moving Average menunjukkan tren turun. RSI berada dalam kondisi overbought. Supply dan demand menunjukkan tekanan jual tinggi. Aliran dana asing menunjukkan tren keluar tinggi. Resistensi belum ditembus, menunjukkan kekuatan bearish. Support belum ditembus, menunjukkan kekuatan bullish.'))


    @Rule(Fact(moving_average_valued='low'), Fact(rsi_valued='low'), Fact(supply_demand_valued='high'), Fact(net_foreign_inflow='high'), Fact(resistance='break'), Fact(support='break'))
    def full_stock_rule_49(self):
        self.declare(Fact(recommendation='Moving Average menunjukkan tren turun. RSI berada dalam kondisi oversold. Supply dan demand menunjukkan tekanan beli tinggi. Aliran dana asing menunjukkan tren masuk tinggi. Resistensi telah ditembus, menunjukkan kekuatan bullish. Support telah ditembus, menunjukkan kelemahan bearish.'))


    @Rule(Fact(moving_average_valued='low'), Fact(rsi_valued='low'), Fact(supply_demand_valued='high'), Fact(net_foreign_inflow='high'), Fact(resistance='break'), Fact(support='unbreak'))
    def full_stock_rule_50(self):
        self.declare(Fact(recommendation='Moving Average menunjukkan tren turun. RSI berada dalam kondisi oversold. Supply dan demand menunjukkan tekanan beli tinggi. Aliran dana asing menunjukkan tren masuk tinggi. Resistensi telah ditembus, menunjukkan kekuatan bullish. Support belum ditembus, menunjukkan kekuatan bullish.'))


    @Rule(Fact(moving_average_valued='low'), Fact(rsi_valued='low'), Fact(supply_demand_valued='high'), Fact(net_foreign_inflow='high'), Fact(resistance='unbreak'), Fact(support='break'))
    def full_stock_rule_51(self):
        self.declare(Fact(recommendation='Moving Average menunjukkan tren turun. RSI berada dalam kondisi oversold. Supply dan demand menunjukkan tekanan beli tinggi. Aliran dana asing menunjukkan tren masuk tinggi. Resistensi belum ditembus, menunjukkan kekuatan bearish. Support telah ditembus, menunjukkan kelemahan bearish.'))


    @Rule(Fact(moving_average_valued='low'), Fact(rsi_valued='low'), Fact(supply_demand_valued='high'), Fact(net_foreign_inflow='high'), Fact(resistance='unbreak'), Fact(support='unbreak'))
    def full_stock_rule_52(self):
        self.declare(Fact(recommendation='Moving Average menunjukkan tren turun. RSI berada dalam kondisi oversold. Supply dan demand menunjukkan tekanan beli tinggi. Aliran dana asing menunjukkan tren masuk tinggi. Resistensi belum ditembus, menunjukkan kekuatan bearish. Support belum ditembus, menunjukkan kekuatan bullish.'))


    @Rule(Fact(moving_average_valued='low'), Fact(rsi_valued='low'), Fact(supply_demand_valued='high'), Fact(net_foreign_inflow='low'), Fact(resistance='break'), Fact(support='break'))
    def full_stock_rule_53(self):
        self.declare(Fact(recommendation='Moving Average menunjukkan tren turun. RSI berada dalam kondisi oversold. Supply dan demand menunjukkan tekanan beli tinggi. Aliran dana asing menunjukkan tren keluar tinggi. Resistensi telah ditembus, menunjukkan kekuatan bullish. Support telah ditembus, menunjukkan kelemahan bearish.'))


    @Rule(Fact(moving_average_valued='low'), Fact(rsi_valued='low'), Fact(supply_demand_valued='high'), Fact(net_foreign_inflow='low'), Fact(resistance='break'), Fact(support='unbreak'))
    def full_stock_rule_54(self):
        self.declare(Fact(recommendation='Moving Average menunjukkan tren turun. RSI berada dalam kondisi oversold. Supply dan demand menunjukkan tekanan beli tinggi. Aliran dana asing menunjukkan tren keluar tinggi. Resistensi telah ditembus, menunjukkan kekuatan bullish. Support belum ditembus, menunjukkan kekuatan bullish.'))


    @Rule(Fact(moving_average_valued='low'), Fact(rsi_valued='low'), Fact(supply_demand_valued='high'), Fact(net_foreign_inflow='low'), Fact(resistance='unbreak'), Fact(support='break'))
    def full_stock_rule_55(self):
        self.declare(Fact(recommendation='Moving Average menunjukkan tren turun. RSI berada dalam kondisi oversold. Supply dan demand menunjukkan tekanan beli tinggi. Aliran dana asing menunjukkan tren keluar tinggi. Resistensi belum ditembus, menunjukkan kekuatan bearish. Support telah ditembus, menunjukkan kelemahan bearish.'))


    @Rule(Fact(moving_average_valued='low'), Fact(rsi_valued='low'), Fact(supply_demand_valued='high'), Fact(net_foreign_inflow='low'), Fact(resistance='unbreak'), Fact(support='unbreak'))
    def full_stock_rule_56(self):
        self.declare(Fact(recommendation='Moving Average menunjukkan tren turun. RSI berada dalam kondisi oversold. Supply dan demand menunjukkan tekanan beli tinggi. Aliran dana asing menunjukkan tren keluar tinggi. Resistensi belum ditembus, menunjukkan kekuatan bearish. Support belum ditembus, menunjukkan kekuatan bullish.'))


    @Rule(Fact(moving_average_valued='low'), Fact(rsi_valued='low'), Fact(supply_demand_valued='low'), Fact(net_foreign_inflow='high'), Fact(resistance='break'), Fact(support='break'))
    def full_stock_rule_57(self):
        self.declare(Fact(recommendation='Moving Average menunjukkan tren turun. RSI berada dalam kondisi oversold. Supply dan demand menunjukkan tekanan jual tinggi. Aliran dana asing menunjukkan tren masuk tinggi. Resistensi telah ditembus, menunjukkan kekuatan bullish. Support telah ditembus, menunjukkan kelemahan bearish.'))


    @Rule(Fact(moving_average_valued='low'), Fact(rsi_valued='low'), Fact(supply_demand_valued='low'), Fact(net_foreign_inflow='high'), Fact(resistance='break'), Fact(support='unbreak'))
    def full_stock_rule_58(self):
        self.declare(Fact(recommendation='Moving Average menunjukkan tren turun. RSI berada dalam kondisi oversold. Supply dan demand menunjukkan tekanan jual tinggi. Aliran dana asing menunjukkan tren masuk tinggi. Resistensi telah ditembus, menunjukkan kekuatan bullish. Support belum ditembus, menunjukkan kekuatan bullish.'))


    @Rule(Fact(moving_average_valued='low'), Fact(rsi_valued='low'), Fact(supply_demand_valued='low'), Fact(net_foreign_inflow='high'), Fact(resistance='unbreak'), Fact(support='break'))
    def full_stock_rule_59(self):
        self.declare(Fact(recommendation='Moving Average menunjukkan tren turun. RSI berada dalam kondisi oversold. Supply dan demand menunjukkan tekanan jual tinggi. Aliran dana asing menunjukkan tren masuk tinggi. Resistensi belum ditembus, menunjukkan kekuatan bearish. Support telah ditembus, menunjukkan kelemahan bearish.'))


    @Rule(Fact(moving_average_valued='low'), Fact(rsi_valued='low'), Fact(supply_demand_valued='low'), Fact(net_foreign_inflow='high'), Fact(resistance='unbreak'), Fact(support='unbreak'))
    def full_stock_rule_60(self):
        self.declare(Fact(recommendation='Moving Average menunjukkan tren turun. RSI berada dalam kondisi oversold. Supply dan demand menunjukkan tekanan jual tinggi. Aliran dana asing menunjukkan tren masuk tinggi. Resistensi belum ditembus, menunjukkan kekuatan bearish. Support belum ditembus, menunjukkan kekuatan bullish.'))


    @Rule(Fact(moving_average_valued='low'), Fact(rsi_valued='low'), Fact(supply_demand_valued='low'), Fact(net_foreign_inflow='low'), Fact(resistance='break'), Fact(support='break'))
    def full_stock_rule_61(self):
        self.declare(Fact(recommendation='Moving Average menunjukkan tren turun. RSI berada dalam kondisi oversold. Supply dan demand menunjukkan tekanan jual tinggi. Aliran dana asing menunjukkan tren keluar tinggi. Resistensi telah ditembus, menunjukkan kekuatan bullish. Support telah ditembus, menunjukkan kelemahan bearish.'))


    @Rule(Fact(moving_average_valued='low'), Fact(rsi_valued='low'), Fact(supply_demand_valued='low'), Fact(net_foreign_inflow='low'), Fact(resistance='break'), Fact(support='unbreak'))
    def full_stock_rule_62(self):
        self.declare(Fact(recommendation='Moving Average menunjukkan tren turun. RSI berada dalam kondisi oversold. Supply dan demand menunjukkan tekanan jual tinggi. Aliran dana asing menunjukkan tren keluar tinggi. Resistensi telah ditembus, menunjukkan kekuatan bullish. Support belum ditembus, menunjukkan kekuatan bullish.'))


    @Rule(Fact(moving_average_valued='low'), Fact(rsi_valued='low'), Fact(supply_demand_valued='low'), Fact(net_foreign_inflow='low'), Fact(resistance='unbreak'), Fact(support='break'))
    def full_stock_rule_63(self):
        self.declare(Fact(recommendation='Moving Average menunjukkan tren turun. RSI berada dalam kondisi oversold. Supply dan demand menunjukkan tekanan jual tinggi. Aliran dana asing menunjukkan tren keluar tinggi. Resistensi belum ditembus, menunjukkan kekuatan bearish. Support telah ditembus, menunjukkan kelemahan bearish.'))


    @Rule(Fact(moving_average_valued='low'), Fact(rsi_valued='low'), Fact(supply_demand_valued='low'), Fact(net_foreign_inflow='low'), Fact(resistance='unbreak'), Fact(support='unbreak'))
    def full_stock_rule_64(self):
        self.declare(Fact(recommendation='Moving Average menunjukkan tren turun. RSI berada dalam kondisi oversold. Supply dan demand menunjukkan tekanan jual tinggi. Aliran dana asing menunjukkan tren keluar tinggi. Resistensi belum ditembus, menunjukkan kekuatan bearish. Support belum ditembus, menunjukkan kekuatan bullish.'))





    # Rule untuk Analisis IPO
    # Rule untuk Analisis IPO
    # Rule untuk Analisis IPO
    # Rule untuk Analisis IPO
    # Rule untuk Analisis IPO
    # Rule untuk Analisis IPO
    # Rule untuk Analisis IPO
    # Rule untuk Analisis IPO
    # Rule untuk Analisis IPO
    # Rule untuk Analisis IPO
    @Rule(Fact(net_income_valued='profit'))
    def rule_ipo_1(self):
        self.declare(Fact(recommendation='Beli karena dari nilai profitabilitas, perusahaan berada dalam kondisi untung bersih'))

    @Rule(Fact(underwriter_valued='good'))
    def rule_ipo_2(self):
        self.declare(Fact(recommendation='Beli, namun perhatikan saat hari pertama listing. Apabila Open ARA maka pasang take profit, Apabila Open tidak ARA maka pantau secara berkala')) 

    @Rule(Fact(underwriter_valued='bad'))
    def rule_ipo_3(self):
        self.declare(Fact(recommendation='Dari segi underwriter, tidak disarankan untuk membeli. Namun jika anda ingin menganalisa lebih lanjut tambahkan beberapa parameter fundamental'))   

    @Rule(Fact(underwriter_valued='good'), Fact(warrant_valued='good'))
    def rule_ipo_4(self):
        self.declare(Fact(recommendation='Rekomendasi Beli karena performa underwriter yang bagus dan terdapat bonus warrant saat membeli saham IPO'))

    @Rule(Fact(underwriter_valued='good'), Fact(warrant_valued='bad'))
    def rule_ipo_5(self):
        self.declare(Fact(recommendation='Beli, namun perhatikan saat hari pertama listing. Apabila Open ARA maka pasang take profit, Apabila Open tidak ARA maka pantau secara berkala'))

    @Rule(Fact(underwriter_valued='bad'), Fact(warrant_valued='good'))
    def rule_ipo_6(self):
        self.declare(Fact(recommendation='Beli namun perhatikan saat waktu listing, disarankan untuk melakukan penjualan warran'))

    @Rule(Fact(underwriter_valued='bad'), Fact(warrant_valued='bad'))
    def rule_ipo_7(self):
        self.declare(Fact(recommendation='Sangat tidak disarankan untuk membeli'))

    @Rule(Fact(underwriter_valued='good'), Fact(warrant_valued='good'), Fact(net_income_valued='profit'), Fact(per_valued='high'), Fact(der_valued='high'), Fact(roa_valued='high'), Fact(roe_valued='high'))
    def ipo2_rule_1(self):
        self.declare(Fact(recommendation='Underwriter berkualitas baik. Warrant menunjukkan kondisi baik. Laba bersih menunjukkan keuntungan. PER berada di tingkat yang tinggi. DER menunjukkan tingkat hutang yang tinggi. ROA menunjukkan efisiensi tinggi. ROE menunjukkan keuntungan yang tinggi.'))


    @Rule(Fact(underwriter_valued='good'), Fact(warrant_valued='good'), Fact(net_income_valued='profit'), Fact(per_valued='high'), Fact(der_valued='high'), Fact(roa_valued='high'), Fact(roe_valued='low'))
    def ipo2_rule_2(self):
        self.declare(Fact(recommendation='Underwriter berkualitas baik. Warrant menunjukkan kondisi baik. Laba bersih menunjukkan keuntungan. PER berada di tingkat yang tinggi. DER menunjukkan tingkat hutang yang tinggi. ROA menunjukkan efisiensi tinggi. ROE menunjukkan keuntungan yang rendah.'))


    @Rule(Fact(underwriter_valued='good'), Fact(warrant_valued='good'), Fact(net_income_valued='profit'), Fact(per_valued='high'), Fact(der_valued='high'), Fact(roa_valued='low'), Fact(roe_valued='high'))
    def ipo2_rule_3(self):
        self.declare(Fact(recommendation='Underwriter berkualitas baik. Warrant menunjukkan kondisi baik. Laba bersih menunjukkan keuntungan. PER berada di tingkat yang tinggi. DER menunjukkan tingkat hutang yang tinggi. ROA menunjukkan efisiensi rendah. ROE menunjukkan keuntungan yang tinggi.'))


    @Rule(Fact(underwriter_valued='good'), Fact(warrant_valued='good'), Fact(net_income_valued='profit'), Fact(per_valued='high'), Fact(der_valued='high'), Fact(roa_valued='low'), Fact(roe_valued='low'))
    def ipo2_rule_4(self):
        self.declare(Fact(recommendation='Underwriter berkualitas baik. Warrant menunjukkan kondisi baik. Laba bersih menunjukkan keuntungan. PER berada di tingkat yang tinggi. DER menunjukkan tingkat hutang yang tinggi. ROA menunjukkan efisiensi rendah. ROE menunjukkan keuntungan yang rendah.'))


    @Rule(Fact(underwriter_valued='good'), Fact(warrant_valued='good'), Fact(net_income_valued='profit'), Fact(per_valued='high'), Fact(der_valued='low'), Fact(roa_valued='high'), Fact(roe_valued='high'))
    def ipo2_rule_5(self):
        self.declare(Fact(recommendation='Underwriter berkualitas baik. Warrant menunjukkan kondisi baik. Laba bersih menunjukkan keuntungan. PER berada di tingkat yang tinggi. DER menunjukkan tingkat hutang yang rendah. ROA menunjukkan efisiensi tinggi. ROE menunjukkan keuntungan yang tinggi.'))


    @Rule(Fact(underwriter_valued='good'), Fact(warrant_valued='good'), Fact(net_income_valued='profit'), Fact(per_valued='high'), Fact(der_valued='low'), Fact(roa_valued='high'), Fact(roe_valued='low'))
    def ipo2_rule_6(self):
        self.declare(Fact(recommendation='Underwriter berkualitas baik. Warrant menunjukkan kondisi baik. Laba bersih menunjukkan keuntungan. PER berada di tingkat yang tinggi. DER menunjukkan tingkat hutang yang rendah. ROA menunjukkan efisiensi tinggi. ROE menunjukkan keuntungan yang rendah.'))


    @Rule(Fact(underwriter_valued='good'), Fact(warrant_valued='good'), Fact(net_income_valued='profit'), Fact(per_valued='high'), Fact(der_valued='low'), Fact(roa_valued='low'), Fact(roe_valued='high'))
    def ipo2_rule_7(self):
        self.declare(Fact(recommendation='Underwriter berkualitas baik. Warrant menunjukkan kondisi baik. Laba bersih menunjukkan keuntungan. PER berada di tingkat yang tinggi. DER menunjukkan tingkat hutang yang rendah. ROA menunjukkan efisiensi rendah. ROE menunjukkan keuntungan yang tinggi.'))


    @Rule(Fact(underwriter_valued='good'), Fact(warrant_valued='good'), Fact(net_income_valued='profit'), Fact(per_valued='high'), Fact(der_valued='low'), Fact(roa_valued='low'), Fact(roe_valued='low'))
    def ipo2_rule_8(self):
        self.declare(Fact(recommendation='Underwriter berkualitas baik. Warrant menunjukkan kondisi baik. Laba bersih menunjukkan keuntungan. PER berada di tingkat yang tinggi. DER menunjukkan tingkat hutang yang rendah. ROA menunjukkan efisiensi rendah. ROE menunjukkan keuntungan yang rendah.'))


    @Rule(Fact(underwriter_valued='good'), Fact(warrant_valued='good'), Fact(net_income_valued='profit'), Fact(per_valued='low'), Fact(der_valued='high'), Fact(roa_valued='high'), Fact(roe_valued='high'))
    def ipo2_rule_9(self):
        self.declare(Fact(recommendation='Underwriter berkualitas baik. Warrant menunjukkan kondisi baik. Laba bersih menunjukkan keuntungan. PER berada di tingkat yang rendah. DER menunjukkan tingkat hutang yang tinggi. ROA menunjukkan efisiensi tinggi. ROE menunjukkan keuntungan yang tinggi.'))


    @Rule(Fact(underwriter_valued='good'), Fact(warrant_valued='good'), Fact(net_income_valued='profit'), Fact(per_valued='low'), Fact(der_valued='high'), Fact(roa_valued='high'), Fact(roe_valued='low'))
    def ipo2_rule_10(self):
        self.declare(Fact(recommendation='Underwriter berkualitas baik. Warrant menunjukkan kondisi baik. Laba bersih menunjukkan keuntungan. PER berada di tingkat yang rendah. DER menunjukkan tingkat hutang yang tinggi. ROA menunjukkan efisiensi tinggi. ROE menunjukkan keuntungan yang rendah.'))


    @Rule(Fact(underwriter_valued='good'), Fact(warrant_valued='good'), Fact(net_income_valued='profit'), Fact(per_valued='low'), Fact(der_valued='high'), Fact(roa_valued='low'), Fact(roe_valued='high'))
    def ipo2_rule_11(self):
        self.declare(Fact(recommendation='Underwriter berkualitas baik. Warrant menunjukkan kondisi baik. Laba bersih menunjukkan keuntungan. PER berada di tingkat yang rendah. DER menunjukkan tingkat hutang yang tinggi. ROA menunjukkan efisiensi rendah. ROE menunjukkan keuntungan yang tinggi.'))


    @Rule(Fact(underwriter_valued='good'), Fact(warrant_valued='good'), Fact(net_income_valued='profit'), Fact(per_valued='low'), Fact(der_valued='high'), Fact(roa_valued='low'), Fact(roe_valued='low'))
    def ipo2_rule_12(self):
        self.declare(Fact(recommendation='Underwriter berkualitas baik. Warrant menunjukkan kondisi baik. Laba bersih menunjukkan keuntungan. PER berada di tingkat yang rendah. DER menunjukkan tingkat hutang yang tinggi. ROA menunjukkan efisiensi rendah. ROE menunjukkan keuntungan yang rendah.'))


    @Rule(Fact(underwriter_valued='good'), Fact(warrant_valued='good'), Fact(net_income_valued='profit'), Fact(per_valued='low'), Fact(der_valued='low'), Fact(roa_valued='high'), Fact(roe_valued='high'))
    def ipo2_rule_13(self):
        self.declare(Fact(recommendation='Underwriter berkualitas baik. Warrant menunjukkan kondisi baik. Laba bersih menunjukkan keuntungan. PER berada di tingkat yang rendah. DER menunjukkan tingkat hutang yang rendah. ROA menunjukkan efisiensi tinggi. ROE menunjukkan keuntungan yang tinggi.'))


    @Rule(Fact(underwriter_valued='good'), Fact(warrant_valued='good'), Fact(net_income_valued='profit'), Fact(per_valued='low'), Fact(der_valued='low'), Fact(roa_valued='high'), Fact(roe_valued='low'))
    def ipo2_rule_14(self):
        self.declare(Fact(recommendation='Underwriter berkualitas baik. Warrant menunjukkan kondisi baik. Laba bersih menunjukkan keuntungan. PER berada di tingkat yang rendah. DER menunjukkan tingkat hutang yang rendah. ROA menunjukkan efisiensi tinggi. ROE menunjukkan keuntungan yang rendah.'))


    @Rule(Fact(underwriter_valued='good'), Fact(warrant_valued='good'), Fact(net_income_valued='profit'), Fact(per_valued='low'), Fact(der_valued='low'), Fact(roa_valued='low'), Fact(roe_valued='high'))
    def ipo2_rule_15(self):
        self.declare(Fact(recommendation='Underwriter berkualitas baik. Warrant menunjukkan kondisi baik. Laba bersih menunjukkan keuntungan. PER berada di tingkat yang rendah. DER menunjukkan tingkat hutang yang rendah. ROA menunjukkan efisiensi rendah. ROE menunjukkan keuntungan yang tinggi.'))


    @Rule(Fact(underwriter_valued='good'), Fact(warrant_valued='good'), Fact(net_income_valued='profit'), Fact(per_valued='low'), Fact(der_valued='low'), Fact(roa_valued='low'), Fact(roe_valued='low'))
    def ipo2_rule_16(self):
        self.declare(Fact(recommendation='Underwriter berkualitas baik. Warrant menunjukkan kondisi baik. Laba bersih menunjukkan keuntungan. PER berada di tingkat yang rendah. DER menunjukkan tingkat hutang yang rendah. ROA menunjukkan efisiensi rendah. ROE menunjukkan keuntungan yang rendah.'))


    @Rule(Fact(underwriter_valued='good'), Fact(warrant_valued='good'), Fact(net_income_valued='loss'), Fact(per_valued='high'), Fact(der_valued='high'), Fact(roa_valued='high'), Fact(roe_valued='high'))
    def ipo2_rule_17(self):
        self.declare(Fact(recommendation='Underwriter berkualitas baik. Warrant menunjukkan kondisi baik. Laba bersih menunjukkan kerugian. PER berada di tingkat yang tinggi. DER menunjukkan tingkat hutang yang tinggi. ROA menunjukkan efisiensi tinggi. ROE menunjukkan keuntungan yang tinggi.'))


    @Rule(Fact(underwriter_valued='good'), Fact(warrant_valued='good'), Fact(net_income_valued='loss'), Fact(per_valued='high'), Fact(der_valued='high'), Fact(roa_valued='high'), Fact(roe_valued='low'))
    def ipo2_rule_18(self):
        self.declare(Fact(recommendation='Underwriter berkualitas baik. Warrant menunjukkan kondisi baik. Laba bersih menunjukkan kerugian. PER berada di tingkat yang tinggi. DER menunjukkan tingkat hutang yang tinggi. ROA menunjukkan efisiensi tinggi. ROE menunjukkan keuntungan yang rendah.'))


    @Rule(Fact(underwriter_valued='good'), Fact(warrant_valued='good'), Fact(net_income_valued='loss'), Fact(per_valued='high'), Fact(der_valued='high'), Fact(roa_valued='low'), Fact(roe_valued='high'))
    def ipo2_rule_19(self):
        self.declare(Fact(recommendation='Underwriter berkualitas baik. Warrant menunjukkan kondisi baik. Laba bersih menunjukkan kerugian. PER berada di tingkat yang tinggi. DER menunjukkan tingkat hutang yang tinggi. ROA menunjukkan efisiensi rendah. ROE menunjukkan keuntungan yang tinggi.'))


    @Rule(Fact(underwriter_valued='good'), Fact(warrant_valued='good'), Fact(net_income_valued='loss'), Fact(per_valued='high'), Fact(der_valued='high'), Fact(roa_valued='low'), Fact(roe_valued='low'))
    def ipo2_rule_20(self):
        self.declare(Fact(recommendation='Underwriter berkualitas baik. Warrant menunjukkan kondisi baik. Laba bersih menunjukkan kerugian. PER berada di tingkat yang tinggi. DER menunjukkan tingkat hutang yang tinggi. ROA menunjukkan efisiensi rendah. ROE menunjukkan keuntungan yang rendah.'))


    @Rule(Fact(underwriter_valued='good'), Fact(warrant_valued='good'), Fact(net_income_valued='loss'), Fact(per_valued='high'), Fact(der_valued='low'), Fact(roa_valued='high'), Fact(roe_valued='high'))
    def ipo2_rule_21(self):
        self.declare(Fact(recommendation='Underwriter berkualitas baik. Warrant menunjukkan kondisi baik. Laba bersih menunjukkan kerugian. PER berada di tingkat yang tinggi. DER menunjukkan tingkat hutang yang rendah. ROA menunjukkan efisiensi tinggi. ROE menunjukkan keuntungan yang tinggi.'))


    @Rule(Fact(underwriter_valued='good'), Fact(warrant_valued='good'), Fact(net_income_valued='loss'), Fact(per_valued='high'), Fact(der_valued='low'), Fact(roa_valued='high'), Fact(roe_valued='low'))
    def ipo2_rule_22(self):
        self.declare(Fact(recommendation='Underwriter berkualitas baik. Warrant menunjukkan kondisi baik. Laba bersih menunjukkan kerugian. PER berada di tingkat yang tinggi. DER menunjukkan tingkat hutang yang rendah. ROA menunjukkan efisiensi tinggi. ROE menunjukkan keuntungan yang rendah.'))


    @Rule(Fact(underwriter_valued='good'), Fact(warrant_valued='good'), Fact(net_income_valued='loss'), Fact(per_valued='high'), Fact(der_valued='low'), Fact(roa_valued='low'), Fact(roe_valued='high'))
    def ipo2_rule_23(self):
        self.declare(Fact(recommendation='Underwriter berkualitas baik. Warrant menunjukkan kondisi baik. Laba bersih menunjukkan kerugian. PER berada di tingkat yang tinggi. DER menunjukkan tingkat hutang yang rendah. ROA menunjukkan efisiensi rendah. ROE menunjukkan keuntungan yang tinggi.'))


    @Rule(Fact(underwriter_valued='good'), Fact(warrant_valued='good'), Fact(net_income_valued='loss'), Fact(per_valued='high'), Fact(der_valued='low'), Fact(roa_valued='low'), Fact(roe_valued='low'))
    def ipo2_rule_24(self):
        self.declare(Fact(recommendation='Underwriter berkualitas baik. Warrant menunjukkan kondisi baik. Laba bersih menunjukkan kerugian. PER berada di tingkat yang tinggi. DER menunjukkan tingkat hutang yang rendah. ROA menunjukkan efisiensi rendah. ROE menunjukkan keuntungan yang rendah.'))


    @Rule(Fact(underwriter_valued='good'), Fact(warrant_valued='good'), Fact(net_income_valued='loss'), Fact(per_valued='low'), Fact(der_valued='high'), Fact(roa_valued='high'), Fact(roe_valued='high'))
    def ipo2_rule_25(self):
        self.declare(Fact(recommendation='Underwriter berkualitas baik. Warrant menunjukkan kondisi baik. Laba bersih menunjukkan kerugian. PER berada di tingkat yang rendah. DER menunjukkan tingkat hutang yang tinggi. ROA menunjukkan efisiensi tinggi. ROE menunjukkan keuntungan yang tinggi.'))


    @Rule(Fact(underwriter_valued='good'), Fact(warrant_valued='good'), Fact(net_income_valued='loss'), Fact(per_valued='low'), Fact(der_valued='high'), Fact(roa_valued='high'), Fact(roe_valued='low'))
    def ipo2_rule_26(self):
        self.declare(Fact(recommendation='Underwriter berkualitas baik. Warrant menunjukkan kondisi baik. Laba bersih menunjukkan kerugian. PER berada di tingkat yang rendah. DER menunjukkan tingkat hutang yang tinggi. ROA menunjukkan efisiensi tinggi. ROE menunjukkan keuntungan yang rendah.'))


    @Rule(Fact(underwriter_valued='good'), Fact(warrant_valued='good'), Fact(net_income_valued='loss'), Fact(per_valued='low'), Fact(der_valued='high'), Fact(roa_valued='low'), Fact(roe_valued='high'))
    def ipo2_rule_27(self):
        self.declare(Fact(recommendation='Underwriter berkualitas baik. Warrant menunjukkan kondisi baik. Laba bersih menunjukkan kerugian. PER berada di tingkat yang rendah. DER menunjukkan tingkat hutang yang tinggi. ROA menunjukkan efisiensi rendah. ROE menunjukkan keuntungan yang tinggi.'))


    @Rule(Fact(underwriter_valued='good'), Fact(warrant_valued='good'), Fact(net_income_valued='loss'), Fact(per_valued='low'), Fact(der_valued='high'), Fact(roa_valued='low'), Fact(roe_valued='low'))
    def ipo2_rule_28(self):
        self.declare(Fact(recommendation='Underwriter berkualitas baik. Warrant menunjukkan kondisi baik. Laba bersih menunjukkan kerugian. PER berada di tingkat yang rendah. DER menunjukkan tingkat hutang yang tinggi. ROA menunjukkan efisiensi rendah. ROE menunjukkan keuntungan yang rendah.'))


    @Rule(Fact(underwriter_valued='good'), Fact(warrant_valued='good'), Fact(net_income_valued='loss'), Fact(per_valued='low'), Fact(der_valued='low'), Fact(roa_valued='high'), Fact(roe_valued='high'))
    def ipo2_rule_29(self):
        self.declare(Fact(recommendation='Underwriter berkualitas baik. Warrant menunjukkan kondisi baik. Laba bersih menunjukkan kerugian. PER berada di tingkat yang rendah. DER menunjukkan tingkat hutang yang rendah. ROA menunjukkan efisiensi tinggi. ROE menunjukkan keuntungan yang tinggi.'))


    @Rule(Fact(underwriter_valued='good'), Fact(warrant_valued='good'), Fact(net_income_valued='loss'), Fact(per_valued='low'), Fact(der_valued='low'), Fact(roa_valued='high'), Fact(roe_valued='low'))
    def ipo2_rule_30(self):
        self.declare(Fact(recommendation='Underwriter berkualitas baik. Warrant menunjukkan kondisi baik. Laba bersih menunjukkan kerugian. PER berada di tingkat yang rendah. DER menunjukkan tingkat hutang yang rendah. ROA menunjukkan efisiensi tinggi. ROE menunjukkan keuntungan yang rendah.'))


    @Rule(Fact(underwriter_valued='good'), Fact(warrant_valued='good'), Fact(net_income_valued='loss'), Fact(per_valued='low'), Fact(der_valued='low'), Fact(roa_valued='low'), Fact(roe_valued='high'))
    def ipo2_rule_31(self):
        self.declare(Fact(recommendation='Underwriter berkualitas baik. Warrant menunjukkan kondisi baik. Laba bersih menunjukkan kerugian. PER berada di tingkat yang rendah. DER menunjukkan tingkat hutang yang rendah. ROA menunjukkan efisiensi rendah. ROE menunjukkan keuntungan yang tinggi.'))


    @Rule(Fact(underwriter_valued='good'), Fact(warrant_valued='good'), Fact(net_income_valued='loss'), Fact(per_valued='low'), Fact(der_valued='low'), Fact(roa_valued='low'), Fact(roe_valued='low'))
    def ipo2_rule_32(self):
        self.declare(Fact(recommendation='Underwriter berkualitas baik. Warrant menunjukkan kondisi baik. Laba bersih menunjukkan kerugian. PER berada di tingkat yang rendah. DER menunjukkan tingkat hutang yang rendah. ROA menunjukkan efisiensi rendah. ROE menunjukkan keuntungan yang rendah.'))


    @Rule(Fact(underwriter_valued='good'), Fact(warrant_valued='bad'), Fact(net_income_valued='profit'), Fact(per_valued='high'), Fact(der_valued='high'), Fact(roa_valued='high'), Fact(roe_valued='high'))
    def ipo2_rule_33(self):
        self.declare(Fact(recommendation='Underwriter berkualitas baik. Warrant menunjukkan kondisi buruk. Laba bersih menunjukkan keuntungan. PER berada di tingkat yang tinggi. DER menunjukkan tingkat hutang yang tinggi. ROA menunjukkan efisiensi tinggi. ROE menunjukkan keuntungan yang tinggi.'))


    @Rule(Fact(underwriter_valued='good'), Fact(warrant_valued='bad'), Fact(net_income_valued='profit'), Fact(per_valued='high'), Fact(der_valued='high'), Fact(roa_valued='high'), Fact(roe_valued='low'))
    def ipo2_rule_34(self):
        self.declare(Fact(recommendation='Underwriter berkualitas baik. Warrant menunjukkan kondisi buruk. Laba bersih menunjukkan keuntungan. PER berada di tingkat yang tinggi. DER menunjukkan tingkat hutang yang tinggi. ROA menunjukkan efisiensi tinggi. ROE menunjukkan keuntungan yang rendah.'))


    @Rule(Fact(underwriter_valued='good'), Fact(warrant_valued='bad'), Fact(net_income_valued='profit'), Fact(per_valued='high'), Fact(der_valued='high'), Fact(roa_valued='low'), Fact(roe_valued='high'))
    def ipo2_rule_35(self):
        self.declare(Fact(recommendation='Underwriter berkualitas baik. Warrant menunjukkan kondisi buruk. Laba bersih menunjukkan keuntungan. PER berada di tingkat yang tinggi. DER menunjukkan tingkat hutang yang tinggi. ROA menunjukkan efisiensi rendah. ROE menunjukkan keuntungan yang tinggi.'))


    @Rule(Fact(underwriter_valued='good'), Fact(warrant_valued='bad'), Fact(net_income_valued='profit'), Fact(per_valued='high'), Fact(der_valued='high'), Fact(roa_valued='low'), Fact(roe_valued='low'))
    def ipo2_rule_36(self):
        self.declare(Fact(recommendation='Underwriter berkualitas baik. Warrant menunjukkan kondisi buruk. Laba bersih menunjukkan keuntungan. PER berada di tingkat yang tinggi. DER menunjukkan tingkat hutang yang tinggi. ROA menunjukkan efisiensi rendah. ROE menunjukkan keuntungan yang rendah.'))


    @Rule(Fact(underwriter_valued='good'), Fact(warrant_valued='bad'), Fact(net_income_valued='profit'), Fact(per_valued='high'), Fact(der_valued='low'), Fact(roa_valued='high'), Fact(roe_valued='high'))
    def ipo2_rule_37(self):
        self.declare(Fact(recommendation='Underwriter berkualitas baik. Warrant menunjukkan kondisi buruk. Laba bersih menunjukkan keuntungan. PER berada di tingkat yang tinggi. DER menunjukkan tingkat hutang yang rendah. ROA menunjukkan efisiensi tinggi. ROE menunjukkan keuntungan yang tinggi.'))


    @Rule(Fact(underwriter_valued='good'), Fact(warrant_valued='bad'), Fact(net_income_valued='profit'), Fact(per_valued='high'), Fact(der_valued='low'), Fact(roa_valued='high'), Fact(roe_valued='low'))
    def ipo2_rule_38(self):
        self.declare(Fact(recommendation='Underwriter berkualitas baik. Warrant menunjukkan kondisi buruk. Laba bersih menunjukkan keuntungan. PER berada di tingkat yang tinggi. DER menunjukkan tingkat hutang yang rendah. ROA menunjukkan efisiensi tinggi. ROE menunjukkan keuntungan yang rendah.'))


    @Rule(Fact(underwriter_valued='good'), Fact(warrant_valued='bad'), Fact(net_income_valued='profit'), Fact(per_valued='high'), Fact(der_valued='low'), Fact(roa_valued='low'), Fact(roe_valued='high'))
    def ipo2_rule_39(self):
        self.declare(Fact(recommendation='Underwriter berkualitas baik. Warrant menunjukkan kondisi buruk. Laba bersih menunjukkan keuntungan. PER berada di tingkat yang tinggi. DER menunjukkan tingkat hutang yang rendah. ROA menunjukkan efisiensi rendah. ROE menunjukkan keuntungan yang tinggi.'))


    @Rule(Fact(underwriter_valued='good'), Fact(warrant_valued='bad'), Fact(net_income_valued='profit'), Fact(per_valued='high'), Fact(der_valued='low'), Fact(roa_valued='low'), Fact(roe_valued='low'))
    def ipo2_rule_40(self):
        self.declare(Fact(recommendation='Underwriter berkualitas baik. Warrant menunjukkan kondisi buruk. Laba bersih menunjukkan keuntungan. PER berada di tingkat yang tinggi. DER menunjukkan tingkat hutang yang rendah. ROA menunjukkan efisiensi rendah. ROE menunjukkan keuntungan yang rendah.'))


    @Rule(Fact(underwriter_valued='good'), Fact(warrant_valued='bad'), Fact(net_income_valued='profit'), Fact(per_valued='low'), Fact(der_valued='high'), Fact(roa_valued='high'), Fact(roe_valued='high'))
    def ipo2_rule_41(self):
        self.declare(Fact(recommendation='Underwriter berkualitas baik. Warrant menunjukkan kondisi buruk. Laba bersih menunjukkan keuntungan. PER berada di tingkat yang rendah. DER menunjukkan tingkat hutang yang tinggi. ROA menunjukkan efisiensi tinggi. ROE menunjukkan keuntungan yang tinggi.'))


    @Rule(Fact(underwriter_valued='good'), Fact(warrant_valued='bad'), Fact(net_income_valued='profit'), Fact(per_valued='low'), Fact(der_valued='high'), Fact(roa_valued='high'), Fact(roe_valued='low'))
    def ipo2_rule_42(self):
        self.declare(Fact(recommendation='Underwriter berkualitas baik. Warrant menunjukkan kondisi buruk. Laba bersih menunjukkan keuntungan. PER berada di tingkat yang rendah. DER menunjukkan tingkat hutang yang tinggi. ROA menunjukkan efisiensi tinggi. ROE menunjukkan keuntungan yang rendah.'))


    @Rule(Fact(underwriter_valued='good'), Fact(warrant_valued='bad'), Fact(net_income_valued='profit'), Fact(per_valued='low'), Fact(der_valued='high'), Fact(roa_valued='low'), Fact(roe_valued='high'))
    def ipo2_rule_43(self):
        self.declare(Fact(recommendation='Underwriter berkualitas baik. Warrant menunjukkan kondisi buruk. Laba bersih menunjukkan keuntungan. PER berada di tingkat yang rendah. DER menunjukkan tingkat hutang yang tinggi. ROA menunjukkan efisiensi rendah. ROE menunjukkan keuntungan yang tinggi.'))


    @Rule(Fact(underwriter_valued='good'), Fact(warrant_valued='bad'), Fact(net_income_valued='profit'), Fact(per_valued='low'), Fact(der_valued='high'), Fact(roa_valued='low'), Fact(roe_valued='low'))
    def ipo2_rule_44(self):
        self.declare(Fact(recommendation='Underwriter berkualitas baik. Warrant menunjukkan kondisi buruk. Laba bersih menunjukkan keuntungan. PER berada di tingkat yang rendah. DER menunjukkan tingkat hutang yang tinggi. ROA menunjukkan efisiensi rendah. ROE menunjukkan keuntungan yang rendah.'))


    @Rule(Fact(underwriter_valued='good'), Fact(warrant_valued='bad'), Fact(net_income_valued='profit'), Fact(per_valued='low'), Fact(der_valued='low'), Fact(roa_valued='high'), Fact(roe_valued='high'))
    def ipo2_rule_45(self):
        self.declare(Fact(recommendation='Underwriter berkualitas baik. Warrant menunjukkan kondisi buruk. Laba bersih menunjukkan keuntungan. PER berada di tingkat yang rendah. DER menunjukkan tingkat hutang yang rendah. ROA menunjukkan efisiensi tinggi. ROE menunjukkan keuntungan yang tinggi.'))


    @Rule(Fact(underwriter_valued='good'), Fact(warrant_valued='bad'), Fact(net_income_valued='profit'), Fact(per_valued='low'), Fact(der_valued='low'), Fact(roa_valued='high'), Fact(roe_valued='low'))
    def ipo2_rule_46(self):
        self.declare(Fact(recommendation='Underwriter berkualitas baik. Warrant menunjukkan kondisi buruk. Laba bersih menunjukkan keuntungan. PER berada di tingkat yang rendah. DER menunjukkan tingkat hutang yang rendah. ROA menunjukkan efisiensi tinggi. ROE menunjukkan keuntungan yang rendah.'))


    @Rule(Fact(underwriter_valued='good'), Fact(warrant_valued='bad'), Fact(net_income_valued='profit'), Fact(per_valued='low'), Fact(der_valued='low'), Fact(roa_valued='low'), Fact(roe_valued='high'))
    def ipo2_rule_47(self):
        self.declare(Fact(recommendation='Underwriter berkualitas baik. Warrant menunjukkan kondisi buruk. Laba bersih menunjukkan keuntungan. PER berada di tingkat yang rendah. DER menunjukkan tingkat hutang yang rendah. ROA menunjukkan efisiensi rendah. ROE menunjukkan keuntungan yang tinggi.'))


    @Rule(Fact(underwriter_valued='good'), Fact(warrant_valued='bad'), Fact(net_income_valued='profit'), Fact(per_valued='low'), Fact(der_valued='low'), Fact(roa_valued='low'), Fact(roe_valued='low'))
    def ipo2_rule_48(self):
        self.declare(Fact(recommendation='Underwriter berkualitas baik. Warrant menunjukkan kondisi buruk. Laba bersih menunjukkan keuntungan. PER berada di tingkat yang rendah. DER menunjukkan tingkat hutang yang rendah. ROA menunjukkan efisiensi rendah. ROE menunjukkan keuntungan yang rendah.'))


    @Rule(Fact(underwriter_valued='good'), Fact(warrant_valued='bad'), Fact(net_income_valued='loss'), Fact(per_valued='high'), Fact(der_valued='high'), Fact(roa_valued='high'), Fact(roe_valued='high'))
    def ipo2_rule_49(self):
        self.declare(Fact(recommendation='Underwriter berkualitas baik. Warrant menunjukkan kondisi buruk. Laba bersih menunjukkan kerugian. PER berada di tingkat yang tinggi. DER menunjukkan tingkat hutang yang tinggi. ROA menunjukkan efisiensi tinggi. ROE menunjukkan keuntungan yang tinggi.'))


    @Rule(Fact(underwriter_valued='good'), Fact(warrant_valued='bad'), Fact(net_income_valued='loss'), Fact(per_valued='high'), Fact(der_valued='high'), Fact(roa_valued='high'), Fact(roe_valued='low'))
    def ipo2_rule_50(self):
        self.declare(Fact(recommendation='Underwriter berkualitas baik. Warrant menunjukkan kondisi buruk. Laba bersih menunjukkan kerugian. PER berada di tingkat yang tinggi. DER menunjukkan tingkat hutang yang tinggi. ROA menunjukkan efisiensi tinggi. ROE menunjukkan keuntungan yang rendah.'))


    @Rule(Fact(underwriter_valued='good'), Fact(warrant_valued='bad'), Fact(net_income_valued='loss'), Fact(per_valued='high'), Fact(der_valued='high'), Fact(roa_valued='low'), Fact(roe_valued='high'))
    def ipo2_rule_51(self):
        self.declare(Fact(recommendation='Underwriter berkualitas baik. Warrant menunjukkan kondisi buruk. Laba bersih menunjukkan kerugian. PER berada di tingkat yang tinggi. DER menunjukkan tingkat hutang yang tinggi. ROA menunjukkan efisiensi rendah. ROE menunjukkan keuntungan yang tinggi.'))


    @Rule(Fact(underwriter_valued='good'), Fact(warrant_valued='bad'), Fact(net_income_valued='loss'), Fact(per_valued='high'), Fact(der_valued='high'), Fact(roa_valued='low'), Fact(roe_valued='low'))
    def ipo2_rule_52(self):
        self.declare(Fact(recommendation='Underwriter berkualitas baik. Warrant menunjukkan kondisi buruk. Laba bersih menunjukkan kerugian. PER berada di tingkat yang tinggi. DER menunjukkan tingkat hutang yang tinggi. ROA menunjukkan efisiensi rendah. ROE menunjukkan keuntungan yang rendah.'))


    @Rule(Fact(underwriter_valued='good'), Fact(warrant_valued='bad'), Fact(net_income_valued='loss'), Fact(per_valued='high'), Fact(der_valued='low'), Fact(roa_valued='high'), Fact(roe_valued='high'))
    def ipo2_rule_53(self):
        self.declare(Fact(recommendation='Underwriter berkualitas baik. Warrant menunjukkan kondisi buruk. Laba bersih menunjukkan kerugian. PER berada di tingkat yang tinggi. DER menunjukkan tingkat hutang yang rendah. ROA menunjukkan efisiensi tinggi. ROE menunjukkan keuntungan yang tinggi.'))


    @Rule(Fact(underwriter_valued='good'), Fact(warrant_valued='bad'), Fact(net_income_valued='loss'), Fact(per_valued='high'), Fact(der_valued='low'), Fact(roa_valued='high'), Fact(roe_valued='low'))
    def ipo2_rule_54(self):
        self.declare(Fact(recommendation='Underwriter berkualitas baik. Warrant menunjukkan kondisi buruk. Laba bersih menunjukkan kerugian. PER berada di tingkat yang tinggi. DER menunjukkan tingkat hutang yang rendah. ROA menunjukkan efisiensi tinggi. ROE menunjukkan keuntungan yang rendah.'))


    @Rule(Fact(underwriter_valued='good'), Fact(warrant_valued='bad'), Fact(net_income_valued='loss'), Fact(per_valued='high'), Fact(der_valued='low'), Fact(roa_valued='low'), Fact(roe_valued='high'))
    def ipo2_rule_55(self):
        self.declare(Fact(recommendation='Underwriter berkualitas baik. Warrant menunjukkan kondisi buruk. Laba bersih menunjukkan kerugian. PER berada di tingkat yang tinggi. DER menunjukkan tingkat hutang yang rendah. ROA menunjukkan efisiensi rendah. ROE menunjukkan keuntungan yang tinggi.'))


    @Rule(Fact(underwriter_valued='good'), Fact(warrant_valued='bad'), Fact(net_income_valued='loss'), Fact(per_valued='high'), Fact(der_valued='low'), Fact(roa_valued='low'), Fact(roe_valued='low'))
    def ipo2_rule_56(self):
        self.declare(Fact(recommendation='Underwriter berkualitas baik. Warrant menunjukkan kondisi buruk. Laba bersih menunjukkan kerugian. PER berada di tingkat yang tinggi. DER menunjukkan tingkat hutang yang rendah. ROA menunjukkan efisiensi rendah. ROE menunjukkan keuntungan yang rendah.'))


    @Rule(Fact(underwriter_valued='good'), Fact(warrant_valued='bad'), Fact(net_income_valued='loss'), Fact(per_valued='low'), Fact(der_valued='high'), Fact(roa_valued='high'), Fact(roe_valued='high'))
    def ipo2_rule_57(self):
        self.declare(Fact(recommendation='Underwriter berkualitas baik. Warrant menunjukkan kondisi buruk. Laba bersih menunjukkan kerugian. PER berada di tingkat yang rendah. DER menunjukkan tingkat hutang yang tinggi. ROA menunjukkan efisiensi tinggi. ROE menunjukkan keuntungan yang tinggi.'))


    @Rule(Fact(underwriter_valued='good'), Fact(warrant_valued='bad'), Fact(net_income_valued='loss'), Fact(per_valued='low'), Fact(der_valued='high'), Fact(roa_valued='high'), Fact(roe_valued='low'))
    def ipo2_rule_58(self):
        self.declare(Fact(recommendation='Underwriter berkualitas baik. Warrant menunjukkan kondisi buruk. Laba bersih menunjukkan kerugian. PER berada di tingkat yang rendah. DER menunjukkan tingkat hutang yang tinggi. ROA menunjukkan efisiensi tinggi. ROE menunjukkan keuntungan yang rendah.'))


    @Rule(Fact(underwriter_valued='good'), Fact(warrant_valued='bad'), Fact(net_income_valued='loss'), Fact(per_valued='low'), Fact(der_valued='high'), Fact(roa_valued='low'), Fact(roe_valued='high'))
    def ipo2_rule_59(self):
        self.declare(Fact(recommendation='Underwriter berkualitas baik. Warrant menunjukkan kondisi buruk. Laba bersih menunjukkan kerugian. PER berada di tingkat yang rendah. DER menunjukkan tingkat hutang yang tinggi. ROA menunjukkan efisiensi rendah. ROE menunjukkan keuntungan yang tinggi.'))


    @Rule(Fact(underwriter_valued='good'), Fact(warrant_valued='bad'), Fact(net_income_valued='loss'), Fact(per_valued='low'), Fact(der_valued='high'), Fact(roa_valued='low'), Fact(roe_valued='low'))
    def ipo2_rule_60(self):
        self.declare(Fact(recommendation='Underwriter berkualitas baik. Warrant menunjukkan kondisi buruk. Laba bersih menunjukkan kerugian. PER berada di tingkat yang rendah. DER menunjukkan tingkat hutang yang tinggi. ROA menunjukkan efisiensi rendah. ROE menunjukkan keuntungan yang rendah.'))


    @Rule(Fact(underwriter_valued='good'), Fact(warrant_valued='bad'), Fact(net_income_valued='loss'), Fact(per_valued='low'), Fact(der_valued='low'), Fact(roa_valued='high'), Fact(roe_valued='high'))
    def ipo2_rule_61(self):
        self.declare(Fact(recommendation='Underwriter berkualitas baik. Warrant menunjukkan kondisi buruk. Laba bersih menunjukkan kerugian. PER berada di tingkat yang rendah. DER menunjukkan tingkat hutang yang rendah. ROA menunjukkan efisiensi tinggi. ROE menunjukkan keuntungan yang tinggi.'))


    @Rule(Fact(underwriter_valued='good'), Fact(warrant_valued='bad'), Fact(net_income_valued='loss'), Fact(per_valued='low'), Fact(der_valued='low'), Fact(roa_valued='high'), Fact(roe_valued='low'))
    def ipo2_rule_62(self):
        self.declare(Fact(recommendation='Underwriter berkualitas baik. Warrant menunjukkan kondisi buruk. Laba bersih menunjukkan kerugian. PER berada di tingkat yang rendah. DER menunjukkan tingkat hutang yang rendah. ROA menunjukkan efisiensi tinggi. ROE menunjukkan keuntungan yang rendah.'))


    @Rule(Fact(underwriter_valued='good'), Fact(warrant_valued='bad'), Fact(net_income_valued='loss'), Fact(per_valued='low'), Fact(der_valued='low'), Fact(roa_valued='low'), Fact(roe_valued='high'))
    def ipo2_rule_63(self):
        self.declare(Fact(recommendation='Underwriter berkualitas baik. Warrant menunjukkan kondisi buruk. Laba bersih menunjukkan kerugian. PER berada di tingkat yang rendah. DER menunjukkan tingkat hutang yang rendah. ROA menunjukkan efisiensi rendah. ROE menunjukkan keuntungan yang tinggi.'))


    @Rule(Fact(underwriter_valued='good'), Fact(warrant_valued='bad'), Fact(net_income_valued='loss'), Fact(per_valued='low'), Fact(der_valued='low'), Fact(roa_valued='low'), Fact(roe_valued='low'))
    def ipo2_rule_64(self):
        self.declare(Fact(recommendation='Underwriter berkualitas baik. Warrant menunjukkan kondisi buruk. Laba bersih menunjukkan kerugian. PER berada di tingkat yang rendah. DER menunjukkan tingkat hutang yang rendah. ROA menunjukkan efisiensi rendah. ROE menunjukkan keuntungan yang rendah.'))


    @Rule(Fact(underwriter_valued='bad'), Fact(warrant_valued='good'), Fact(net_income_valued='profit'), Fact(per_valued='high'), Fact(der_valued='high'), Fact(roa_valued='high'), Fact(roe_valued='high'))
    def ipo2_rule_65(self):
        self.declare(Fact(recommendation='Underwriter berkualitas buruk. Warrant menunjukkan kondisi baik. Laba bersih menunjukkan keuntungan. PER berada di tingkat yang tinggi. DER menunjukkan tingkat hutang yang tinggi. ROA menunjukkan efisiensi tinggi. ROE menunjukkan keuntungan yang tinggi.'))


    @Rule(Fact(underwriter_valued='bad'), Fact(warrant_valued='good'), Fact(net_income_valued='profit'), Fact(per_valued='high'), Fact(der_valued='high'), Fact(roa_valued='high'), Fact(roe_valued='low'))
    def ipo2_rule_66(self):
        self.declare(Fact(recommendation='Underwriter berkualitas buruk. Warrant menunjukkan kondisi baik. Laba bersih menunjukkan keuntungan. PER berada di tingkat yang tinggi. DER menunjukkan tingkat hutang yang tinggi. ROA menunjukkan efisiensi tinggi. ROE menunjukkan keuntungan yang rendah.'))


    @Rule(Fact(underwriter_valued='bad'), Fact(warrant_valued='good'), Fact(net_income_valued='profit'), Fact(per_valued='high'), Fact(der_valued='high'), Fact(roa_valued='low'), Fact(roe_valued='high'))
    def ipo2_rule_67(self):
        self.declare(Fact(recommendation='Underwriter berkualitas buruk. Warrant menunjukkan kondisi baik. Laba bersih menunjukkan keuntungan. PER berada di tingkat yang tinggi. DER menunjukkan tingkat hutang yang tinggi. ROA menunjukkan efisiensi rendah. ROE menunjukkan keuntungan yang tinggi.'))


    @Rule(Fact(underwriter_valued='bad'), Fact(warrant_valued='good'), Fact(net_income_valued='profit'), Fact(per_valued='high'), Fact(der_valued='high'), Fact(roa_valued='low'), Fact(roe_valued='low'))
    def ipo2_rule_68(self):
        self.declare(Fact(recommendation='Underwriter berkualitas buruk. Warrant menunjukkan kondisi baik. Laba bersih menunjukkan keuntungan. PER berada di tingkat yang tinggi. DER menunjukkan tingkat hutang yang tinggi. ROA menunjukkan efisiensi rendah. ROE menunjukkan keuntungan yang rendah.'))


    @Rule(Fact(underwriter_valued='bad'), Fact(warrant_valued='good'), Fact(net_income_valued='profit'), Fact(per_valued='high'), Fact(der_valued='low'), Fact(roa_valued='high'), Fact(roe_valued='high'))
    def ipo2_rule_69(self):
        self.declare(Fact(recommendation='Underwriter berkualitas buruk. Warrant menunjukkan kondisi baik. Laba bersih menunjukkan keuntungan. PER berada di tingkat yang tinggi. DER menunjukkan tingkat hutang yang rendah. ROA menunjukkan efisiensi tinggi. ROE menunjukkan keuntungan yang tinggi.'))


    @Rule(Fact(underwriter_valued='bad'), Fact(warrant_valued='good'), Fact(net_income_valued='profit'), Fact(per_valued='high'), Fact(der_valued='low'), Fact(roa_valued='high'), Fact(roe_valued='low'))
    def ipo2_rule_70(self):
        self.declare(Fact(recommendation='Underwriter berkualitas buruk. Warrant menunjukkan kondisi baik. Laba bersih menunjukkan keuntungan. PER berada di tingkat yang tinggi. DER menunjukkan tingkat hutang yang rendah. ROA menunjukkan efisiensi tinggi. ROE menunjukkan keuntungan yang rendah.'))


    @Rule(Fact(underwriter_valued='bad'), Fact(warrant_valued='good'), Fact(net_income_valued='profit'), Fact(per_valued='high'), Fact(der_valued='low'), Fact(roa_valued='low'), Fact(roe_valued='high'))
    def ipo2_rule_71(self):
        self.declare(Fact(recommendation='Underwriter berkualitas buruk. Warrant menunjukkan kondisi baik. Laba bersih menunjukkan keuntungan. PER berada di tingkat yang tinggi. DER menunjukkan tingkat hutang yang rendah. ROA menunjukkan efisiensi rendah. ROE menunjukkan keuntungan yang tinggi.'))


    @Rule(Fact(underwriter_valued='bad'), Fact(warrant_valued='good'), Fact(net_income_valued='profit'), Fact(per_valued='high'), Fact(der_valued='low'), Fact(roa_valued='low'), Fact(roe_valued='low'))
    def ipo2_rule_72(self):
        self.declare(Fact(recommendation='Underwriter berkualitas buruk. Warrant menunjukkan kondisi baik. Laba bersih menunjukkan keuntungan. PER berada di tingkat yang tinggi. DER menunjukkan tingkat hutang yang rendah. ROA menunjukkan efisiensi rendah. ROE menunjukkan keuntungan yang rendah.'))


    @Rule(Fact(underwriter_valued='bad'), Fact(warrant_valued='good'), Fact(net_income_valued='profit'), Fact(per_valued='low'), Fact(der_valued='high'), Fact(roa_valued='high'), Fact(roe_valued='high'))
    def ipo2_rule_73(self):
        self.declare(Fact(recommendation='Underwriter berkualitas buruk. Warrant menunjukkan kondisi baik. Laba bersih menunjukkan keuntungan. PER berada di tingkat yang rendah. DER menunjukkan tingkat hutang yang tinggi. ROA menunjukkan efisiensi tinggi. ROE menunjukkan keuntungan yang tinggi.'))


    @Rule(Fact(underwriter_valued='bad'), Fact(warrant_valued='good'), Fact(net_income_valued='profit'), Fact(per_valued='low'), Fact(der_valued='high'), Fact(roa_valued='high'), Fact(roe_valued='low'))
    def ipo2_rule_74(self):
        self.declare(Fact(recommendation='Underwriter berkualitas buruk. Warrant menunjukkan kondisi baik. Laba bersih menunjukkan keuntungan. PER berada di tingkat yang rendah. DER menunjukkan tingkat hutang yang tinggi. ROA menunjukkan efisiensi tinggi. ROE menunjukkan keuntungan yang rendah.'))


    @Rule(Fact(underwriter_valued='bad'), Fact(warrant_valued='good'), Fact(net_income_valued='profit'), Fact(per_valued='low'), Fact(der_valued='high'), Fact(roa_valued='low'), Fact(roe_valued='high'))
    def ipo2_rule_75(self):
        self.declare(Fact(recommendation='Underwriter berkualitas buruk. Warrant menunjukkan kondisi baik. Laba bersih menunjukkan keuntungan. PER berada di tingkat yang rendah. DER menunjukkan tingkat hutang yang tinggi. ROA menunjukkan efisiensi rendah. ROE menunjukkan keuntungan yang tinggi.'))


    @Rule(Fact(underwriter_valued='bad'), Fact(warrant_valued='good'), Fact(net_income_valued='profit'), Fact(per_valued='low'), Fact(der_valued='high'), Fact(roa_valued='low'), Fact(roe_valued='low'))
    def ipo2_rule_76(self):
        self.declare(Fact(recommendation='Underwriter berkualitas buruk. Warrant menunjukkan kondisi baik. Laba bersih menunjukkan keuntungan. PER berada di tingkat yang rendah. DER menunjukkan tingkat hutang yang tinggi. ROA menunjukkan efisiensi rendah. ROE menunjukkan keuntungan yang rendah.'))


    @Rule(Fact(underwriter_valued='bad'), Fact(warrant_valued='good'), Fact(net_income_valued='profit'), Fact(per_valued='low'), Fact(der_valued='low'), Fact(roa_valued='high'), Fact(roe_valued='high'))
    def ipo2_rule_77(self):
        self.declare(Fact(recommendation='Underwriter berkualitas buruk. Warrant menunjukkan kondisi baik. Laba bersih menunjukkan keuntungan. PER berada di tingkat yang rendah. DER menunjukkan tingkat hutang yang rendah. ROA menunjukkan efisiensi tinggi. ROE menunjukkan keuntungan yang tinggi.'))


    @Rule(Fact(underwriter_valued='bad'), Fact(warrant_valued='good'), Fact(net_income_valued='profit'), Fact(per_valued='low'), Fact(der_valued='low'), Fact(roa_valued='high'), Fact(roe_valued='low'))
    def ipo2_rule_78(self):
        self.declare(Fact(recommendation='Underwriter berkualitas buruk. Warrant menunjukkan kondisi baik. Laba bersih menunjukkan keuntungan. PER berada di tingkat yang rendah. DER menunjukkan tingkat hutang yang rendah. ROA menunjukkan efisiensi tinggi. ROE menunjukkan keuntungan yang rendah.'))


    @Rule(Fact(underwriter_valued='bad'), Fact(warrant_valued='good'), Fact(net_income_valued='profit'), Fact(per_valued='low'), Fact(der_valued='low'), Fact(roa_valued='low'), Fact(roe_valued='high'))
    def ipo2_rule_79(self):
        self.declare(Fact(recommendation='Underwriter berkualitas buruk. Warrant menunjukkan kondisi baik. Laba bersih menunjukkan keuntungan. PER berada di tingkat yang rendah. DER menunjukkan tingkat hutang yang rendah. ROA menunjukkan efisiensi rendah. ROE menunjukkan keuntungan yang tinggi.'))


    @Rule(Fact(underwriter_valued='bad'), Fact(warrant_valued='good'), Fact(net_income_valued='profit'), Fact(per_valued='low'), Fact(der_valued='low'), Fact(roa_valued='low'), Fact(roe_valued='low'))
    def ipo2_rule_80(self):
        self.declare(Fact(recommendation='Underwriter berkualitas buruk. Warrant menunjukkan kondisi baik. Laba bersih menunjukkan keuntungan. PER berada di tingkat yang rendah. DER menunjukkan tingkat hutang yang rendah. ROA menunjukkan efisiensi rendah. ROE menunjukkan keuntungan yang rendah.'))


    @Rule(Fact(underwriter_valued='bad'), Fact(warrant_valued='good'), Fact(net_income_valued='loss'), Fact(per_valued='high'), Fact(der_valued='high'), Fact(roa_valued='high'), Fact(roe_valued='high'))
    def ipo2_rule_81(self):
        self.declare(Fact(recommendation='Underwriter berkualitas buruk. Warrant menunjukkan kondisi baik. Laba bersih menunjukkan kerugian. PER berada di tingkat yang tinggi. DER menunjukkan tingkat hutang yang tinggi. ROA menunjukkan efisiensi tinggi. ROE menunjukkan keuntungan yang tinggi.'))


    @Rule(Fact(underwriter_valued='bad'), Fact(warrant_valued='good'), Fact(net_income_valued='loss'), Fact(per_valued='high'), Fact(der_valued='high'), Fact(roa_valued='high'), Fact(roe_valued='low'))
    def ipo2_rule_82(self):
        self.declare(Fact(recommendation='Underwriter berkualitas buruk. Warrant menunjukkan kondisi baik. Laba bersih menunjukkan kerugian. PER berada di tingkat yang tinggi. DER menunjukkan tingkat hutang yang tinggi. ROA menunjukkan efisiensi tinggi. ROE menunjukkan keuntungan yang rendah.'))


    @Rule(Fact(underwriter_valued='bad'), Fact(warrant_valued='good'), Fact(net_income_valued='loss'), Fact(per_valued='high'), Fact(der_valued='high'), Fact(roa_valued='low'), Fact(roe_valued='high'))
    def ipo2_rule_83(self):
        self.declare(Fact(recommendation='Underwriter berkualitas buruk. Warrant menunjukkan kondisi baik. Laba bersih menunjukkan kerugian. PER berada di tingkat yang tinggi. DER menunjukkan tingkat hutang yang tinggi. ROA menunjukkan efisiensi rendah. ROE menunjukkan keuntungan yang tinggi.'))


    @Rule(Fact(underwriter_valued='bad'), Fact(warrant_valued='good'), Fact(net_income_valued='loss'), Fact(per_valued='high'), Fact(der_valued='high'), Fact(roa_valued='low'), Fact(roe_valued='low'))
    def ipo2_rule_84(self):
        self.declare(Fact(recommendation='Underwriter berkualitas buruk. Warrant menunjukkan kondisi baik. Laba bersih menunjukkan kerugian. PER berada di tingkat yang tinggi. DER menunjukkan tingkat hutang yang tinggi. ROA menunjukkan efisiensi rendah. ROE menunjukkan keuntungan yang rendah.'))


    @Rule(Fact(underwriter_valued='bad'), Fact(warrant_valued='good'), Fact(net_income_valued='loss'), Fact(per_valued='high'), Fact(der_valued='low'), Fact(roa_valued='high'), Fact(roe_valued='high'))
    def ipo2_rule_85(self):
        self.declare(Fact(recommendation='Underwriter berkualitas buruk. Warrant menunjukkan kondisi baik. Laba bersih menunjukkan kerugian. PER berada di tingkat yang tinggi. DER menunjukkan tingkat hutang yang rendah. ROA menunjukkan efisiensi tinggi. ROE menunjukkan keuntungan yang tinggi.'))


    @Rule(Fact(underwriter_valued='bad'), Fact(warrant_valued='good'), Fact(net_income_valued='loss'), Fact(per_valued='high'), Fact(der_valued='low'), Fact(roa_valued='high'), Fact(roe_valued='low'))
    def ipo2_rule_86(self):
        self.declare(Fact(recommendation='Underwriter berkualitas buruk. Warrant menunjukkan kondisi baik. Laba bersih menunjukkan kerugian. PER berada di tingkat yang tinggi. DER menunjukkan tingkat hutang yang rendah. ROA menunjukkan efisiensi tinggi. ROE menunjukkan keuntungan yang rendah.'))


    @Rule(Fact(underwriter_valued='bad'), Fact(warrant_valued='good'), Fact(net_income_valued='loss'), Fact(per_valued='high'), Fact(der_valued='low'), Fact(roa_valued='low'), Fact(roe_valued='high'))
    def ipo2_rule_87(self):
        self.declare(Fact(recommendation='Underwriter berkualitas buruk. Warrant menunjukkan kondisi baik. Laba bersih menunjukkan kerugian. PER berada di tingkat yang tinggi. DER menunjukkan tingkat hutang yang rendah. ROA menunjukkan efisiensi rendah. ROE menunjukkan keuntungan yang tinggi.'))


    @Rule(Fact(underwriter_valued='bad'), Fact(warrant_valued='good'), Fact(net_income_valued='loss'), Fact(per_valued='high'), Fact(der_valued='low'), Fact(roa_valued='low'), Fact(roe_valued='low'))
    def ipo2_rule_88(self):
        self.declare(Fact(recommendation='Underwriter berkualitas buruk. Warrant menunjukkan kondisi baik. Laba bersih menunjukkan kerugian. PER berada di tingkat yang tinggi. DER menunjukkan tingkat hutang yang rendah. ROA menunjukkan efisiensi rendah. ROE menunjukkan keuntungan yang rendah.'))


    @Rule(Fact(underwriter_valued='bad'), Fact(warrant_valued='good'), Fact(net_income_valued='loss'), Fact(per_valued='low'), Fact(der_valued='high'), Fact(roa_valued='high'), Fact(roe_valued='high'))
    def ipo2_rule_89(self):
        self.declare(Fact(recommendation='Underwriter berkualitas buruk. Warrant menunjukkan kondisi baik. Laba bersih menunjukkan kerugian. PER berada di tingkat yang rendah. DER menunjukkan tingkat hutang yang tinggi. ROA menunjukkan efisiensi tinggi. ROE menunjukkan keuntungan yang tinggi.'))


    @Rule(Fact(underwriter_valued='bad'), Fact(warrant_valued='good'), Fact(net_income_valued='loss'), Fact(per_valued='low'), Fact(der_valued='high'), Fact(roa_valued='high'), Fact(roe_valued='low'))
    def ipo2_rule_90(self):
        self.declare(Fact(recommendation='Underwriter berkualitas buruk. Warrant menunjukkan kondisi baik. Laba bersih menunjukkan kerugian. PER berada di tingkat yang rendah. DER menunjukkan tingkat hutang yang tinggi. ROA menunjukkan efisiensi tinggi. ROE menunjukkan keuntungan yang rendah.'))


    @Rule(Fact(underwriter_valued='bad'), Fact(warrant_valued='good'), Fact(net_income_valued='loss'), Fact(per_valued='low'), Fact(der_valued='high'), Fact(roa_valued='low'), Fact(roe_valued='high'))
    def ipo2_rule_91(self):
        self.declare(Fact(recommendation='Underwriter berkualitas buruk. Warrant menunjukkan kondisi baik. Laba bersih menunjukkan kerugian. PER berada di tingkat yang rendah. DER menunjukkan tingkat hutang yang tinggi. ROA menunjukkan efisiensi rendah. ROE menunjukkan keuntungan yang tinggi.'))


    @Rule(Fact(underwriter_valued='bad'), Fact(warrant_valued='good'), Fact(net_income_valued='loss'), Fact(per_valued='low'), Fact(der_valued='high'), Fact(roa_valued='low'), Fact(roe_valued='low'))
    def ipo2_rule_92(self):
        self.declare(Fact(recommendation='Underwriter berkualitas buruk. Warrant menunjukkan kondisi baik. Laba bersih menunjukkan kerugian. PER berada di tingkat yang rendah. DER menunjukkan tingkat hutang yang tinggi. ROA menunjukkan efisiensi rendah. ROE menunjukkan keuntungan yang rendah.'))


    @Rule(Fact(underwriter_valued='bad'), Fact(warrant_valued='good'), Fact(net_income_valued='loss'), Fact(per_valued='low'), Fact(der_valued='low'), Fact(roa_valued='high'), Fact(roe_valued='high'))
    def ipo2_rule_93(self):
        self.declare(Fact(recommendation='Underwriter berkualitas buruk. Warrant menunjukkan kondisi baik. Laba bersih menunjukkan kerugian. PER berada di tingkat yang rendah. DER menunjukkan tingkat hutang yang rendah. ROA menunjukkan efisiensi tinggi. ROE menunjukkan keuntungan yang tinggi.'))


    @Rule(Fact(underwriter_valued='bad'), Fact(warrant_valued='good'), Fact(net_income_valued='loss'), Fact(per_valued='low'), Fact(der_valued='low'), Fact(roa_valued='high'), Fact(roe_valued='low'))
    def ipo2_rule_94(self):
        self.declare(Fact(recommendation='Underwriter berkualitas buruk. Warrant menunjukkan kondisi baik. Laba bersih menunjukkan kerugian. PER berada di tingkat yang rendah. DER menunjukkan tingkat hutang yang rendah. ROA menunjukkan efisiensi tinggi. ROE menunjukkan keuntungan yang rendah.'))


    @Rule(Fact(underwriter_valued='bad'), Fact(warrant_valued='good'), Fact(net_income_valued='loss'), Fact(per_valued='low'), Fact(der_valued='low'), Fact(roa_valued='low'), Fact(roe_valued='high'))
    def ipo2_rule_95(self):
        self.declare(Fact(recommendation='Underwriter berkualitas buruk. Warrant menunjukkan kondisi baik. Laba bersih menunjukkan kerugian. PER berada di tingkat yang rendah. DER menunjukkan tingkat hutang yang rendah. ROA menunjukkan efisiensi rendah. ROE menunjukkan keuntungan yang tinggi.'))


    @Rule(Fact(underwriter_valued='bad'), Fact(warrant_valued='good'), Fact(net_income_valued='loss'), Fact(per_valued='low'), Fact(der_valued='low'), Fact(roa_valued='low'), Fact(roe_valued='low'))
    def ipo2_rule_96(self):
        self.declare(Fact(recommendation='Underwriter berkualitas buruk. Warrant menunjukkan kondisi baik. Laba bersih menunjukkan kerugian. PER berada di tingkat yang rendah. DER menunjukkan tingkat hutang yang rendah. ROA menunjukkan efisiensi rendah. ROE menunjukkan keuntungan yang rendah.'))


    @Rule(Fact(underwriter_valued='bad'), Fact(warrant_valued='bad'), Fact(net_income_valued='profit'), Fact(per_valued='high'), Fact(der_valued='high'), Fact(roa_valued='high'), Fact(roe_valued='high'))
    def ipo2_rule_97(self):
        self.declare(Fact(recommendation='Underwriter berkualitas buruk. Warrant menunjukkan kondisi buruk. Laba bersih menunjukkan keuntungan. PER berada di tingkat yang tinggi. DER menunjukkan tingkat hutang yang tinggi. ROA menunjukkan efisiensi tinggi. ROE menunjukkan keuntungan yang tinggi.'))


    @Rule(Fact(underwriter_valued='bad'), Fact(warrant_valued='bad'), Fact(net_income_valued='profit'), Fact(per_valued='high'), Fact(der_valued='high'), Fact(roa_valued='high'), Fact(roe_valued='low'))
    def ipo2_rule_98(self):
        self.declare(Fact(recommendation='Underwriter berkualitas buruk. Warrant menunjukkan kondisi buruk. Laba bersih menunjukkan keuntungan. PER berada di tingkat yang tinggi. DER menunjukkan tingkat hutang yang tinggi. ROA menunjukkan efisiensi tinggi. ROE menunjukkan keuntungan yang rendah.'))


    @Rule(Fact(underwriter_valued='bad'), Fact(warrant_valued='bad'), Fact(net_income_valued='profit'), Fact(per_valued='high'), Fact(der_valued='high'), Fact(roa_valued='low'), Fact(roe_valued='high'))
    def ipo2_rule_99(self):
        self.declare(Fact(recommendation='Underwriter berkualitas buruk. Warrant menunjukkan kondisi buruk. Laba bersih menunjukkan keuntungan. PER berada di tingkat yang tinggi. DER menunjukkan tingkat hutang yang tinggi. ROA menunjukkan efisiensi rendah. ROE menunjukkan keuntungan yang tinggi.'))


    @Rule(Fact(underwriter_valued='bad'), Fact(warrant_valued='bad'), Fact(net_income_valued='profit'), Fact(per_valued='high'), Fact(der_valued='high'), Fact(roa_valued='low'), Fact(roe_valued='low'))
    def ipo2_rule_100(self):
        self.declare(Fact(recommendation='Underwriter berkualitas buruk. Warrant menunjukkan kondisi buruk. Laba bersih menunjukkan keuntungan. PER berada di tingkat yang tinggi. DER menunjukkan tingkat hutang yang tinggi. ROA menunjukkan efisiensi rendah. ROE menunjukkan keuntungan yang rendah.'))


    @Rule(Fact(underwriter_valued='bad'), Fact(warrant_valued='bad'), Fact(net_income_valued='profit'), Fact(per_valued='high'), Fact(der_valued='low'), Fact(roa_valued='high'), Fact(roe_valued='high'))
    def ipo2_rule_101(self):
        self.declare(Fact(recommendation='Underwriter berkualitas buruk. Warrant menunjukkan kondisi buruk. Laba bersih menunjukkan keuntungan. PER berada di tingkat yang tinggi. DER menunjukkan tingkat hutang yang rendah. ROA menunjukkan efisiensi tinggi. ROE menunjukkan keuntungan yang tinggi.'))


    @Rule(Fact(underwriter_valued='bad'), Fact(warrant_valued='bad'), Fact(net_income_valued='profit'), Fact(per_valued='high'), Fact(der_valued='low'), Fact(roa_valued='high'), Fact(roe_valued='low'))
    def ipo2_rule_102(self):
        self.declare(Fact(recommendation='Underwriter berkualitas buruk. Warrant menunjukkan kondisi buruk. Laba bersih menunjukkan keuntungan. PER berada di tingkat yang tinggi. DER menunjukkan tingkat hutang yang rendah. ROA menunjukkan efisiensi tinggi. ROE menunjukkan keuntungan yang rendah.'))


    @Rule(Fact(underwriter_valued='bad'), Fact(warrant_valued='bad'), Fact(net_income_valued='profit'), Fact(per_valued='high'), Fact(der_valued='low'), Fact(roa_valued='low'), Fact(roe_valued='high'))
    def ipo2_rule_103(self):
        self.declare(Fact(recommendation='Underwriter berkualitas buruk. Warrant menunjukkan kondisi buruk. Laba bersih menunjukkan keuntungan. PER berada di tingkat yang tinggi. DER menunjukkan tingkat hutang yang rendah. ROA menunjukkan efisiensi rendah. ROE menunjukkan keuntungan yang tinggi.'))


    @Rule(Fact(underwriter_valued='bad'), Fact(warrant_valued='bad'), Fact(net_income_valued='profit'), Fact(per_valued='high'), Fact(der_valued='low'), Fact(roa_valued='low'), Fact(roe_valued='low'))
    def ipo2_rule_104(self):
        self.declare(Fact(recommendation='Underwriter berkualitas buruk. Warrant menunjukkan kondisi buruk. Laba bersih menunjukkan keuntungan. PER berada di tingkat yang tinggi. DER menunjukkan tingkat hutang yang rendah. ROA menunjukkan efisiensi rendah. ROE menunjukkan keuntungan yang rendah.'))


    @Rule(Fact(underwriter_valued='bad'), Fact(warrant_valued='bad'), Fact(net_income_valued='profit'), Fact(per_valued='low'), Fact(der_valued='high'), Fact(roa_valued='high'), Fact(roe_valued='high'))
    def ipo2_rule_105(self):
        self.declare(Fact(recommendation='Underwriter berkualitas buruk. Warrant menunjukkan kondisi buruk. Laba bersih menunjukkan keuntungan. PER berada di tingkat yang rendah. DER menunjukkan tingkat hutang yang tinggi. ROA menunjukkan efisiensi tinggi. ROE menunjukkan keuntungan yang tinggi.'))


    @Rule(Fact(underwriter_valued='bad'), Fact(warrant_valued='bad'), Fact(net_income_valued='profit'), Fact(per_valued='low'), Fact(der_valued='high'), Fact(roa_valued='high'), Fact(roe_valued='low'))
    def ipo2_rule_106(self):
        self.declare(Fact(recommendation='Underwriter berkualitas buruk. Warrant menunjukkan kondisi buruk. Laba bersih menunjukkan keuntungan. PER berada di tingkat yang rendah. DER menunjukkan tingkat hutang yang tinggi. ROA menunjukkan efisiensi tinggi. ROE menunjukkan keuntungan yang rendah.'))


    @Rule(Fact(underwriter_valued='bad'), Fact(warrant_valued='bad'), Fact(net_income_valued='profit'), Fact(per_valued='low'), Fact(der_valued='high'), Fact(roa_valued='low'), Fact(roe_valued='high'))
    def ipo2_rule_107(self):
        self.declare(Fact(recommendation='Underwriter berkualitas buruk. Warrant menunjukkan kondisi buruk. Laba bersih menunjukkan keuntungan. PER berada di tingkat yang rendah. DER menunjukkan tingkat hutang yang tinggi. ROA menunjukkan efisiensi rendah. ROE menunjukkan keuntungan yang tinggi.'))


    @Rule(Fact(underwriter_valued='bad'), Fact(warrant_valued='bad'), Fact(net_income_valued='profit'), Fact(per_valued='low'), Fact(der_valued='high'), Fact(roa_valued='low'), Fact(roe_valued='low'))
    def ipo2_rule_108(self):
        self.declare(Fact(recommendation='Underwriter berkualitas buruk. Warrant menunjukkan kondisi buruk. Laba bersih menunjukkan keuntungan. PER berada di tingkat yang rendah. DER menunjukkan tingkat hutang yang tinggi. ROA menunjukkan efisiensi rendah. ROE menunjukkan keuntungan yang rendah.'))


    @Rule(Fact(underwriter_valued='bad'), Fact(warrant_valued='bad'), Fact(net_income_valued='profit'), Fact(per_valued='low'), Fact(der_valued='low'), Fact(roa_valued='high'), Fact(roe_valued='high'))
    def ipo2_rule_109(self):
        self.declare(Fact(recommendation='Underwriter berkualitas buruk. Warrant menunjukkan kondisi buruk. Laba bersih menunjukkan keuntungan. PER berada di tingkat yang rendah. DER menunjukkan tingkat hutang yang rendah. ROA menunjukkan efisiensi tinggi. ROE menunjukkan keuntungan yang tinggi.'))


    @Rule(Fact(underwriter_valued='bad'), Fact(warrant_valued='bad'), Fact(net_income_valued='profit'), Fact(per_valued='low'), Fact(der_valued='low'), Fact(roa_valued='high'), Fact(roe_valued='low'))
    def ipo2_rule_110(self):
        self.declare(Fact(recommendation='Underwriter berkualitas buruk. Warrant menunjukkan kondisi buruk. Laba bersih menunjukkan keuntungan. PER berada di tingkat yang rendah. DER menunjukkan tingkat hutang yang rendah. ROA menunjukkan efisiensi tinggi. ROE menunjukkan keuntungan yang rendah.'))


    @Rule(Fact(underwriter_valued='bad'), Fact(warrant_valued='bad'), Fact(net_income_valued='profit'), Fact(per_valued='low'), Fact(der_valued='low'), Fact(roa_valued='low'), Fact(roe_valued='high'))
    def ipo2_rule_111(self):
        self.declare(Fact(recommendation='Underwriter berkualitas buruk. Warrant menunjukkan kondisi buruk. Laba bersih menunjukkan keuntungan. PER berada di tingkat yang rendah. DER menunjukkan tingkat hutang yang rendah. ROA menunjukkan efisiensi rendah. ROE menunjukkan keuntungan yang tinggi.'))


    @Rule(Fact(underwriter_valued='bad'), Fact(warrant_valued='bad'), Fact(net_income_valued='profit'), Fact(per_valued='low'), Fact(der_valued='low'), Fact(roa_valued='low'), Fact(roe_valued='low'))
    def ipo2_rule_112(self):
        self.declare(Fact(recommendation='Underwriter berkualitas buruk. Warrant menunjukkan kondisi buruk. Laba bersih menunjukkan keuntungan. PER berada di tingkat yang rendah. DER menunjukkan tingkat hutang yang rendah. ROA menunjukkan efisiensi rendah. ROE menunjukkan keuntungan yang rendah.'))


    @Rule(Fact(underwriter_valued='bad'), Fact(warrant_valued='bad'), Fact(net_income_valued='loss'), Fact(per_valued='high'), Fact(der_valued='high'), Fact(roa_valued='high'), Fact(roe_valued='high'))
    def ipo2_rule_113(self):
        self.declare(Fact(recommendation='Underwriter berkualitas buruk. Warrant menunjukkan kondisi buruk. Laba bersih menunjukkan kerugian. PER berada di tingkat yang tinggi. DER menunjukkan tingkat hutang yang tinggi. ROA menunjukkan efisiensi tinggi. ROE menunjukkan keuntungan yang tinggi.'))


    @Rule(Fact(underwriter_valued='bad'), Fact(warrant_valued='bad'), Fact(net_income_valued='loss'), Fact(per_valued='high'), Fact(der_valued='high'), Fact(roa_valued='high'), Fact(roe_valued='low'))
    def ipo2_rule_114(self):
        self.declare(Fact(recommendation='Underwriter berkualitas buruk. Warrant menunjukkan kondisi buruk. Laba bersih menunjukkan kerugian. PER berada di tingkat yang tinggi. DER menunjukkan tingkat hutang yang tinggi. ROA menunjukkan efisiensi tinggi. ROE menunjukkan keuntungan yang rendah.'))


    @Rule(Fact(underwriter_valued='bad'), Fact(warrant_valued='bad'), Fact(net_income_valued='loss'), Fact(per_valued='high'), Fact(der_valued='high'), Fact(roa_valued='low'), Fact(roe_valued='high'))
    def ipo2_rule_115(self):
        self.declare(Fact(recommendation='Underwriter berkualitas buruk. Warrant menunjukkan kondisi buruk. Laba bersih menunjukkan kerugian. PER berada di tingkat yang tinggi. DER menunjukkan tingkat hutang yang tinggi. ROA menunjukkan efisiensi rendah. ROE menunjukkan keuntungan yang tinggi.'))


    @Rule(Fact(underwriter_valued='bad'), Fact(warrant_valued='bad'), Fact(net_income_valued='loss'), Fact(per_valued='high'), Fact(der_valued='high'), Fact(roa_valued='low'), Fact(roe_valued='low'))
    def ipo2_rule_116(self):
        self.declare(Fact(recommendation='Underwriter berkualitas buruk. Warrant menunjukkan kondisi buruk. Laba bersih menunjukkan kerugian. PER berada di tingkat yang tinggi. DER menunjukkan tingkat hutang yang tinggi. ROA menunjukkan efisiensi rendah. ROE menunjukkan keuntungan yang rendah.'))


    @Rule(Fact(underwriter_valued='bad'), Fact(warrant_valued='bad'), Fact(net_income_valued='loss'), Fact(per_valued='high'), Fact(der_valued='low'), Fact(roa_valued='high'), Fact(roe_valued='high'))
    def ipo2_rule_117(self):
        self.declare(Fact(recommendation='Underwriter berkualitas buruk. Warrant menunjukkan kondisi buruk. Laba bersih menunjukkan kerugian. PER berada di tingkat yang tinggi. DER menunjukkan tingkat hutang yang rendah. ROA menunjukkan efisiensi tinggi. ROE menunjukkan keuntungan yang tinggi.'))


    @Rule(Fact(underwriter_valued='bad'), Fact(warrant_valued='bad'), Fact(net_income_valued='loss'), Fact(per_valued='high'), Fact(der_valued='low'), Fact(roa_valued='high'), Fact(roe_valued='low'))
    def ipo2_rule_118(self):
        self.declare(Fact(recommendation='Underwriter berkualitas buruk. Warrant menunjukkan kondisi buruk. Laba bersih menunjukkan kerugian. PER berada di tingkat yang tinggi. DER menunjukkan tingkat hutang yang rendah. ROA menunjukkan efisiensi tinggi. ROE menunjukkan keuntungan yang rendah.'))


    @Rule(Fact(underwriter_valued='bad'), Fact(warrant_valued='bad'), Fact(net_income_valued='loss'), Fact(per_valued='high'), Fact(der_valued='low'), Fact(roa_valued='low'), Fact(roe_valued='high'))
    def ipo2_rule_119(self):
        self.declare(Fact(recommendation='Underwriter berkualitas buruk. Warrant menunjukkan kondisi buruk. Laba bersih menunjukkan kerugian. PER berada di tingkat yang tinggi. DER menunjukkan tingkat hutang yang rendah. ROA menunjukkan efisiensi rendah. ROE menunjukkan keuntungan yang tinggi.'))


    @Rule(Fact(underwriter_valued='bad'), Fact(warrant_valued='bad'), Fact(net_income_valued='loss'), Fact(per_valued='high'), Fact(der_valued='low'), Fact(roa_valued='low'), Fact(roe_valued='low'))
    def ipo2_rule_120(self):
        self.declare(Fact(recommendation='Underwriter berkualitas buruk. Warrant menunjukkan kondisi buruk. Laba bersih menunjukkan kerugian. PER berada di tingkat yang tinggi. DER menunjukkan tingkat hutang yang rendah. ROA menunjukkan efisiensi rendah. ROE menunjukkan keuntungan yang rendah.'))


    @Rule(Fact(underwriter_valued='bad'), Fact(warrant_valued='bad'), Fact(net_income_valued='loss'), Fact(per_valued='low'), Fact(der_valued='high'), Fact(roa_valued='high'), Fact(roe_valued='high'))
    def ipo2_rule_121(self):
        self.declare(Fact(recommendation='Underwriter berkualitas buruk. Warrant menunjukkan kondisi buruk. Laba bersih menunjukkan kerugian. PER berada di tingkat yang rendah. DER menunjukkan tingkat hutang yang tinggi. ROA menunjukkan efisiensi tinggi. ROE menunjukkan keuntungan yang tinggi.'))


    @Rule(Fact(underwriter_valued='bad'), Fact(warrant_valued='bad'), Fact(net_income_valued='loss'), Fact(per_valued='low'), Fact(der_valued='high'), Fact(roa_valued='high'), Fact(roe_valued='low'))
    def ipo2_rule_122(self):
        self.declare(Fact(recommendation='Underwriter berkualitas buruk. Warrant menunjukkan kondisi buruk. Laba bersih menunjukkan kerugian. PER berada di tingkat yang rendah. DER menunjukkan tingkat hutang yang tinggi. ROA menunjukkan efisiensi tinggi. ROE menunjukkan keuntungan yang rendah.'))


    @Rule(Fact(underwriter_valued='bad'), Fact(warrant_valued='bad'), Fact(net_income_valued='loss'), Fact(per_valued='low'), Fact(der_valued='high'), Fact(roa_valued='low'), Fact(roe_valued='high'))
    def ipo2_rule_123(self):
        self.declare(Fact(recommendation='Underwriter berkualitas buruk. Warrant menunjukkan kondisi buruk. Laba bersih menunjukkan kerugian. PER berada di tingkat yang rendah. DER menunjukkan tingkat hutang yang tinggi. ROA menunjukkan efisiensi rendah. ROE menunjukkan keuntungan yang tinggi.'))


    @Rule(Fact(underwriter_valued='bad'), Fact(warrant_valued='bad'), Fact(net_income_valued='loss'), Fact(per_valued='low'), Fact(der_valued='high'), Fact(roa_valued='low'), Fact(roe_valued='low'))
    def ipo2_rule_124(self):
        self.declare(Fact(recommendation='Underwriter berkualitas buruk. Warrant menunjukkan kondisi buruk. Laba bersih menunjukkan kerugian. PER berada di tingkat yang rendah. DER menunjukkan tingkat hutang yang tinggi. ROA menunjukkan efisiensi rendah. ROE menunjukkan keuntungan yang rendah.'))


    @Rule(Fact(underwriter_valued='bad'), Fact(warrant_valued='bad'), Fact(net_income_valued='loss'), Fact(per_valued='low'), Fact(der_valued='low'), Fact(roa_valued='high'), Fact(roe_valued='high'))
    def ipo2_rule_125(self):
        self.declare(Fact(recommendation='Underwriter berkualitas buruk. Warrant menunjukkan kondisi buruk. Laba bersih menunjukkan kerugian. PER berada di tingkat yang rendah. DER menunjukkan tingkat hutang yang rendah. ROA menunjukkan efisiensi tinggi. ROE menunjukkan keuntungan yang tinggi.'))


    @Rule(Fact(underwriter_valued='bad'), Fact(warrant_valued='bad'), Fact(net_income_valued='loss'), Fact(per_valued='low'), Fact(der_valued='low'), Fact(roa_valued='high'), Fact(roe_valued='low'))
    def ipo2_rule_126(self):
        self.declare(Fact(recommendation='Underwriter berkualitas buruk. Warrant menunjukkan kondisi buruk. Laba bersih menunjukkan kerugian. PER berada di tingkat yang rendah. DER menunjukkan tingkat hutang yang rendah. ROA menunjukkan efisiensi tinggi. ROE menunjukkan keuntungan yang rendah.'))


    @Rule(Fact(underwriter_valued='bad'), Fact(warrant_valued='bad'), Fact(net_income_valued='loss'), Fact(per_valued='low'), Fact(der_valued='low'), Fact(roa_valued='low'), Fact(roe_valued='high'))
    def ipo2_rule_127(self):
        self.declare(Fact(recommendation='Underwriter berkualitas buruk. Warrant menunjukkan kondisi buruk. Laba bersih menunjukkan kerugian. PER berada di tingkat yang rendah. DER menunjukkan tingkat hutang yang rendah. ROA menunjukkan efisiensi rendah. ROE menunjukkan keuntungan yang tinggi.'))


    @Rule(Fact(underwriter_valued='bad'), Fact(warrant_valued='bad'), Fact(net_income_valued='loss'), Fact(per_valued='low'), Fact(der_valued='low'), Fact(roa_valued='low'), Fact(roe_valued='low'))
    def ipo2_rule_128(self):
        self.declare(Fact(recommendation='Underwriter berkualitas buruk. Warrant menunjukkan kondisi buruk. Laba bersih menunjukkan kerugian. PER berada di tingkat yang rendah. DER menunjukkan tingkat hutang yang rendah. ROA menunjukkan efisiensi rendah. ROE menunjukkan keuntungan yang rendah.'))


    #Rule IPO 2 Parameter

    @Rule(Fact(underwriter_valued='good'), Fact(warrant_valued='good'))
    def financial2_rule_1(self):
        self.declare(Fact(recommendation='Underwriter berkualitas baik. Warrant menunjukkan kondisi baik.'))


    @Rule(Fact(underwriter_valued='good'), Fact(net_income_valued='profit'))
    def financial2_rule_2(self):
        self.declare(Fact(recommendation='Underwriter berkualitas baik. Laba bersih menunjukkan keuntungan.'))


    @Rule(Fact(underwriter_valued='good'), Fact(per_valued='high'))
    def financial2_rule_3(self):
        self.declare(Fact(recommendation='Underwriter berkualitas baik. PER berada di tingkat yang tinggi.'))


    @Rule(Fact(underwriter_valued='good'), Fact(der_valued='high'))
    def financial2_rule_4(self):
        self.declare(Fact(recommendation='Underwriter berkualitas baik. DER menunjukkan tingkat hutang yang tinggi.'))


    @Rule(Fact(underwriter_valued='good'), Fact(roa_valued='high'))
    def financial2_rule_5(self):
        self.declare(Fact(recommendation='Underwriter berkualitas baik. ROA menunjukkan efisiensi tinggi.'))


    @Rule(Fact(underwriter_valued='good'), Fact(roe_valued='high'))
    def financial2_rule_6(self):
        self.declare(Fact(recommendation='Underwriter berkualitas baik. ROE menunjukkan keuntungan yang tinggi.'))


    @Rule(Fact(warrant_valued='good'), Fact(net_income_valued='profit'))
    def financial2_rule_7(self):
        self.declare(Fact(recommendation='Warrant menunjukkan kondisi baik. Laba bersih menunjukkan keuntungan.'))


    @Rule(Fact(warrant_valued='good'), Fact(per_valued='high'))
    def financial2_rule_8(self):
        self.declare(Fact(recommendation='Warrant menunjukkan kondisi baik. PER berada di tingkat yang tinggi.'))


    @Rule(Fact(warrant_valued='good'), Fact(der_valued='high'))
    def financial2_rule_9(self):
        self.declare(Fact(recommendation='Warrant menunjukkan kondisi baik. DER menunjukkan tingkat hutang yang tinggi.'))


    @Rule(Fact(warrant_valued='good'), Fact(roa_valued='high'))
    def financial2_rule_10(self):
        self.declare(Fact(recommendation='Warrant menunjukkan kondisi baik. ROA menunjukkan efisiensi tinggi.'))


    @Rule(Fact(warrant_valued='good'), Fact(roe_valued='high'))
    def financial2_rule_11(self):
        self.declare(Fact(recommendation='Warrant menunjukkan kondisi baik. ROE menunjukkan keuntungan yang tinggi.'))


    @Rule(Fact(net_income_valued='profit'), Fact(per_valued='high'))
    def financial2_rule_12(self):
        self.declare(Fact(recommendation='Laba bersih menunjukkan keuntungan. PER berada di tingkat yang tinggi.'))


    @Rule(Fact(net_income_valued='profit'), Fact(der_valued='high'))
    def financial2_rule_13(self):
        self.declare(Fact(recommendation='Laba bersih menunjukkan keuntungan. DER menunjukkan tingkat hutang yang tinggi.'))


    @Rule(Fact(net_income_valued='profit'), Fact(roa_valued='high'))
    def financial2_rule_14(self):
        self.declare(Fact(recommendation='Laba bersih menunjukkan keuntungan. ROA menunjukkan efisiensi tinggi.'))


    @Rule(Fact(net_income_valued='profit'), Fact(roe_valued='high'))
    def financial2_rule_15(self):
        self.declare(Fact(recommendation='Laba bersih menunjukkan keuntungan. ROE menunjukkan keuntungan yang tinggi.'))


    @Rule(Fact(per_valued='high'), Fact(der_valued='high'))
    def financial2_rule_16(self):
        self.declare(Fact(recommendation='PER berada di tingkat yang tinggi. DER menunjukkan tingkat hutang yang tinggi.'))


    @Rule(Fact(per_valued='high'), Fact(roa_valued='high'))
    def financial2_rule_17(self):
        self.declare(Fact(recommendation='PER berada di tingkat yang tinggi. ROA menunjukkan efisiensi tinggi.'))


    @Rule(Fact(per_valued='high'), Fact(roe_valued='high'))
    def financial2_rule_18(self):
        self.declare(Fact(recommendation='PER berada di tingkat yang tinggi. ROE menunjukkan keuntungan yang tinggi.'))


    @Rule(Fact(der_valued='high'), Fact(roa_valued='high'))
    def financial2_rule_19(self):
        self.declare(Fact(recommendation='DER menunjukkan tingkat hutang yang tinggi. ROA menunjukkan efisiensi tinggi.'))


    @Rule(Fact(der_valued='high'), Fact(roe_valued='high'))
    def financial2_rule_20(self):
        self.declare(Fact(recommendation='DER menunjukkan tingkat hutang yang tinggi. ROE menunjukkan keuntungan yang tinggi.'))


    @Rule(Fact(roa_valued='high'), Fact(roe_valued='high'))
    def financial2_rule_21(self):
        self.declare(Fact(recommendation='ROA menunjukkan efisiensi tinggi. ROE menunjukkan keuntungan yang tinggi.'))


    @Rule(Fact(underwriter_valued='good'), Fact(warrant_valued='good'))
    def financial2_rule_22(self):
        self.declare(Fact(recommendation='Underwriter berkualitas baik. Warrant menunjukkan kondisi baik.'))


    @Rule(Fact(underwriter_valued='good'), Fact(net_income_valued='profit'))
    def financial2_rule_23(self):
        self.declare(Fact(recommendation='Underwriter berkualitas baik. Laba bersih menunjukkan keuntungan.'))


    @Rule(Fact(underwriter_valued='good'), Fact(per_valued='high'))
    def financial2_rule_24(self):
        self.declare(Fact(recommendation='Underwriter berkualitas baik. PER berada di tingkat yang tinggi.'))


    @Rule(Fact(underwriter_valued='good'), Fact(der_valued='high'))
    def financial2_rule_25(self):
        self.declare(Fact(recommendation='Underwriter berkualitas baik. DER menunjukkan tingkat hutang yang tinggi.'))


    @Rule(Fact(underwriter_valued='good'), Fact(roa_valued='high'))
    def financial2_rule_26(self):
        self.declare(Fact(recommendation='Underwriter berkualitas baik. ROA menunjukkan efisiensi tinggi.'))


    @Rule(Fact(underwriter_valued='good'), Fact(roe_valued='low'))
    def financial2_rule_27(self):
        self.declare(Fact(recommendation='Underwriter berkualitas baik. ROE menunjukkan keuntungan yang rendah.'))


    @Rule(Fact(warrant_valued='good'), Fact(net_income_valued='profit'))
    def financial2_rule_28(self):
        self.declare(Fact(recommendation='Warrant menunjukkan kondisi baik. Laba bersih menunjukkan keuntungan.'))


    @Rule(Fact(warrant_valued='good'), Fact(per_valued='high'))
    def financial2_rule_29(self):
        self.declare(Fact(recommendation='Warrant menunjukkan kondisi baik. PER berada di tingkat yang tinggi.'))


    @Rule(Fact(warrant_valued='good'), Fact(der_valued='high'))
    def financial2_rule_30(self):
        self.declare(Fact(recommendation='Warrant menunjukkan kondisi baik. DER menunjukkan tingkat hutang yang tinggi.'))


    @Rule(Fact(warrant_valued='good'), Fact(roa_valued='high'))
    def financial2_rule_31(self):
        self.declare(Fact(recommendation='Warrant menunjukkan kondisi baik. ROA menunjukkan efisiensi tinggi.'))


    @Rule(Fact(warrant_valued='good'), Fact(roe_valued='low'))
    def financial2_rule_32(self):
        self.declare(Fact(recommendation='Warrant menunjukkan kondisi baik. ROE menunjukkan keuntungan yang rendah.'))


    @Rule(Fact(net_income_valued='profit'), Fact(per_valued='high'))
    def financial2_rule_33(self):
        self.declare(Fact(recommendation='Laba bersih menunjukkan keuntungan. PER berada di tingkat yang tinggi.'))


    @Rule(Fact(net_income_valued='profit'), Fact(der_valued='high'))
    def financial2_rule_34(self):
        self.declare(Fact(recommendation='Laba bersih menunjukkan keuntungan. DER menunjukkan tingkat hutang yang tinggi.'))


    @Rule(Fact(net_income_valued='profit'), Fact(roa_valued='high'))
    def financial2_rule_35(self):
        self.declare(Fact(recommendation='Laba bersih menunjukkan keuntungan. ROA menunjukkan efisiensi tinggi.'))


    @Rule(Fact(net_income_valued='profit'), Fact(roe_valued='low'))
    def financial2_rule_36(self):
        self.declare(Fact(recommendation='Laba bersih menunjukkan keuntungan. ROE menunjukkan keuntungan yang rendah.'))


    @Rule(Fact(per_valued='high'), Fact(der_valued='high'))
    def financial2_rule_37(self):
        self.declare(Fact(recommendation='PER berada di tingkat yang tinggi. DER menunjukkan tingkat hutang yang tinggi.'))


    @Rule(Fact(per_valued='high'), Fact(roa_valued='high'))
    def financial2_rule_38(self):
        self.declare(Fact(recommendation='PER berada di tingkat yang tinggi. ROA menunjukkan efisiensi tinggi.'))


    @Rule(Fact(per_valued='high'), Fact(roe_valued='low'))
    def financial2_rule_39(self):
        self.declare(Fact(recommendation='PER berada di tingkat yang tinggi. ROE menunjukkan keuntungan yang rendah.'))


    @Rule(Fact(der_valued='high'), Fact(roa_valued='high'))
    def financial2_rule_40(self):
        self.declare(Fact(recommendation='DER menunjukkan tingkat hutang yang tinggi. ROA menunjukkan efisiensi tinggi.'))


    @Rule(Fact(der_valued='high'), Fact(roe_valued='low'))
    def financial2_rule_41(self):
        self.declare(Fact(recommendation='DER menunjukkan tingkat hutang yang tinggi. ROE menunjukkan keuntungan yang rendah.'))


    @Rule(Fact(roa_valued='high'), Fact(roe_valued='low'))
    def financial2_rule_42(self):
        self.declare(Fact(recommendation='ROA menunjukkan efisiensi tinggi. ROE menunjukkan keuntungan yang rendah.'))


    @Rule(Fact(underwriter_valued='good'), Fact(warrant_valued='good'))
    def financial2_rule_43(self):
        self.declare(Fact(recommendation='Underwriter berkualitas baik. Warrant menunjukkan kondisi baik.'))


    @Rule(Fact(underwriter_valued='good'), Fact(net_income_valued='profit'))
    def financial2_rule_44(self):
        self.declare(Fact(recommendation='Underwriter berkualitas baik. Laba bersih menunjukkan keuntungan.'))


    @Rule(Fact(underwriter_valued='good'), Fact(per_valued='high'))
    def financial2_rule_45(self):
        self.declare(Fact(recommendation='Underwriter berkualitas baik. PER berada di tingkat yang tinggi.'))


    @Rule(Fact(underwriter_valued='good'), Fact(der_valued='high'))
    def financial2_rule_46(self):
        self.declare(Fact(recommendation='Underwriter berkualitas baik. DER menunjukkan tingkat hutang yang tinggi.'))


    @Rule(Fact(underwriter_valued='good'), Fact(roa_valued='low'))
    def financial2_rule_47(self):
        self.declare(Fact(recommendation='Underwriter berkualitas baik. ROA menunjukkan efisiensi rendah.'))


    @Rule(Fact(underwriter_valued='good'), Fact(roe_valued='high'))
    def financial2_rule_48(self):
        self.declare(Fact(recommendation='Underwriter berkualitas baik. ROE menunjukkan keuntungan yang tinggi.'))


    @Rule(Fact(warrant_valued='good'), Fact(net_income_valued='profit'))
    def financial2_rule_49(self):
        self.declare(Fact(recommendation='Warrant menunjukkan kondisi baik. Laba bersih menunjukkan keuntungan.'))


    @Rule(Fact(warrant_valued='good'), Fact(per_valued='high'))
    def financial2_rule_50(self):
        self.declare(Fact(recommendation='Warrant menunjukkan kondisi baik. PER berada di tingkat yang tinggi.'))


    @Rule(Fact(warrant_valued='good'), Fact(der_valued='high'))
    def financial2_rule_51(self):
        self.declare(Fact(recommendation='Warrant menunjukkan kondisi baik. DER menunjukkan tingkat hutang yang tinggi.'))


    @Rule(Fact(warrant_valued='good'), Fact(roa_valued='low'))
    def financial2_rule_52(self):
        self.declare(Fact(recommendation='Warrant menunjukkan kondisi baik. ROA menunjukkan efisiensi rendah.'))


    @Rule(Fact(warrant_valued='good'), Fact(roe_valued='high'))
    def financial2_rule_53(self):
        self.declare(Fact(recommendation='Warrant menunjukkan kondisi baik. ROE menunjukkan keuntungan yang tinggi.'))


    @Rule(Fact(net_income_valued='profit'), Fact(per_valued='high'))
    def financial2_rule_54(self):
        self.declare(Fact(recommendation='Laba bersih menunjukkan keuntungan. PER berada di tingkat yang tinggi.'))


    @Rule(Fact(net_income_valued='profit'), Fact(der_valued='high'))
    def financial2_rule_55(self):
        self.declare(Fact(recommendation='Laba bersih menunjukkan keuntungan. DER menunjukkan tingkat hutang yang tinggi.'))


    @Rule(Fact(net_income_valued='profit'), Fact(roa_valued='low'))
    def financial2_rule_56(self):
        self.declare(Fact(recommendation='Laba bersih menunjukkan keuntungan. ROA menunjukkan efisiensi rendah.'))


    @Rule(Fact(net_income_valued='profit'), Fact(roe_valued='high'))
    def financial2_rule_57(self):
        self.declare(Fact(recommendation='Laba bersih menunjukkan keuntungan. ROE menunjukkan keuntungan yang tinggi.'))


    @Rule(Fact(per_valued='high'), Fact(der_valued='high'))
    def financial2_rule_58(self):
        self.declare(Fact(recommendation='PER berada di tingkat yang tinggi. DER menunjukkan tingkat hutang yang tinggi.'))


    @Rule(Fact(per_valued='high'), Fact(roa_valued='low'))
    def financial2_rule_59(self):
        self.declare(Fact(recommendation='PER berada di tingkat yang tinggi. ROA menunjukkan efisiensi rendah.'))


    @Rule(Fact(per_valued='high'), Fact(roe_valued='high'))
    def financial2_rule_60(self):
        self.declare(Fact(recommendation='PER berada di tingkat yang tinggi. ROE menunjukkan keuntungan yang tinggi.'))


    @Rule(Fact(der_valued='high'), Fact(roa_valued='low'))
    def financial2_rule_61(self):
        self.declare(Fact(recommendation='DER menunjukkan tingkat hutang yang tinggi. ROA menunjukkan efisiensi rendah.'))


    @Rule(Fact(der_valued='high'), Fact(roe_valued='high'))
    def financial2_rule_62(self):
        self.declare(Fact(recommendation='DER menunjukkan tingkat hutang yang tinggi. ROE menunjukkan keuntungan yang tinggi.'))


    @Rule(Fact(roa_valued='low'), Fact(roe_valued='high'))
    def financial2_rule_63(self):
        self.declare(Fact(recommendation='ROA menunjukkan efisiensi rendah. ROE menunjukkan keuntungan yang tinggi.'))


    @Rule(Fact(underwriter_valued='good'), Fact(warrant_valued='good'))
    def financial2_rule_64(self):
        self.declare(Fact(recommendation='Underwriter berkualitas baik. Warrant menunjukkan kondisi baik.'))


    @Rule(Fact(underwriter_valued='good'), Fact(net_income_valued='profit'))
    def financial2_rule_65(self):
        self.declare(Fact(recommendation='Underwriter berkualitas baik. Laba bersih menunjukkan keuntungan.'))


    @Rule(Fact(underwriter_valued='good'), Fact(per_valued='high'))
    def financial2_rule_66(self):
        self.declare(Fact(recommendation='Underwriter berkualitas baik. PER berada di tingkat yang tinggi.'))


    @Rule(Fact(underwriter_valued='good'), Fact(der_valued='high'))
    def financial2_rule_67(self):
        self.declare(Fact(recommendation='Underwriter berkualitas baik. DER menunjukkan tingkat hutang yang tinggi.'))


    @Rule(Fact(underwriter_valued='good'), Fact(roa_valued='low'))
    def financial2_rule_68(self):
        self.declare(Fact(recommendation='Underwriter berkualitas baik. ROA menunjukkan efisiensi rendah.'))


    @Rule(Fact(underwriter_valued='good'), Fact(roe_valued='low'))
    def financial2_rule_69(self):
        self.declare(Fact(recommendation='Underwriter berkualitas baik. ROE menunjukkan keuntungan yang rendah.'))


    @Rule(Fact(warrant_valued='good'), Fact(net_income_valued='profit'))
    def financial2_rule_70(self):
        self.declare(Fact(recommendation='Warrant menunjukkan kondisi baik. Laba bersih menunjukkan keuntungan.'))


    @Rule(Fact(warrant_valued='good'), Fact(per_valued='high'))
    def financial2_rule_71(self):
        self.declare(Fact(recommendation='Warrant menunjukkan kondisi baik. PER berada di tingkat yang tinggi.'))


    @Rule(Fact(warrant_valued='good'), Fact(der_valued='high'))
    def financial2_rule_72(self):
        self.declare(Fact(recommendation='Warrant menunjukkan kondisi baik. DER menunjukkan tingkat hutang yang tinggi.'))


    @Rule(Fact(warrant_valued='good'), Fact(roa_valued='low'))
    def financial2_rule_73(self):
        self.declare(Fact(recommendation='Warrant menunjukkan kondisi baik. ROA menunjukkan efisiensi rendah.'))


    @Rule(Fact(warrant_valued='good'), Fact(roe_valued='low'))
    def financial2_rule_74(self):
        self.declare(Fact(recommendation='Warrant menunjukkan kondisi baik. ROE menunjukkan keuntungan yang rendah.'))


    @Rule(Fact(net_income_valued='profit'), Fact(per_valued='high'))
    def financial2_rule_75(self):
        self.declare(Fact(recommendation='Laba bersih menunjukkan keuntungan. PER berada di tingkat yang tinggi.'))


    @Rule(Fact(net_income_valued='profit'), Fact(der_valued='high'))
    def financial2_rule_76(self):
        self.declare(Fact(recommendation='Laba bersih menunjukkan keuntungan. DER menunjukkan tingkat hutang yang tinggi.'))


    @Rule(Fact(net_income_valued='profit'), Fact(roa_valued='low'))
    def financial2_rule_77(self):
        self.declare(Fact(recommendation='Laba bersih menunjukkan keuntungan. ROA menunjukkan efisiensi rendah.'))


    @Rule(Fact(net_income_valued='profit'), Fact(roe_valued='low'))
    def financial2_rule_78(self):
        self.declare(Fact(recommendation='Laba bersih menunjukkan keuntungan. ROE menunjukkan keuntungan yang rendah.'))


    @Rule(Fact(per_valued='high'), Fact(der_valued='high'))
    def financial2_rule_79(self):
        self.declare(Fact(recommendation='PER berada di tingkat yang tinggi. DER menunjukkan tingkat hutang yang tinggi.'))


    @Rule(Fact(per_valued='high'), Fact(roa_valued='low'))
    def financial2_rule_80(self):
        self.declare(Fact(recommendation='PER berada di tingkat yang tinggi. ROA menunjukkan efisiensi rendah.'))


    @Rule(Fact(per_valued='high'), Fact(roe_valued='low'))
    def financial2_rule_81(self):
        self.declare(Fact(recommendation='PER berada di tingkat yang tinggi. ROE menunjukkan keuntungan yang rendah.'))


    @Rule(Fact(der_valued='high'), Fact(roa_valued='low'))
    def financial2_rule_82(self):
        self.declare(Fact(recommendation='DER menunjukkan tingkat hutang yang tinggi. ROA menunjukkan efisiensi rendah.'))


    @Rule(Fact(der_valued='high'), Fact(roe_valued='low'))
    def financial2_rule_83(self):
        self.declare(Fact(recommendation='DER menunjukkan tingkat hutang yang tinggi. ROE menunjukkan keuntungan yang rendah.'))


    @Rule(Fact(roa_valued='low'), Fact(roe_valued='low'))
    def financial2_rule_84(self):
        self.declare(Fact(recommendation='ROA menunjukkan efisiensi rendah. ROE menunjukkan keuntungan yang rendah.'))


    @Rule(Fact(underwriter_valued='good'), Fact(warrant_valued='good'))
    def financial2_rule_85(self):
        self.declare(Fact(recommendation='Underwriter berkualitas baik. Warrant menunjukkan kondisi baik.'))


    @Rule(Fact(underwriter_valued='good'), Fact(net_income_valued='profit'))
    def financial2_rule_86(self):
        self.declare(Fact(recommendation='Underwriter berkualitas baik. Laba bersih menunjukkan keuntungan.'))


    @Rule(Fact(underwriter_valued='good'), Fact(per_valued='high'))
    def financial2_rule_87(self):
        self.declare(Fact(recommendation='Underwriter berkualitas baik. PER berada di tingkat yang tinggi.'))


    @Rule(Fact(underwriter_valued='good'), Fact(der_valued='low'))
    def financial2_rule_88(self):
        self.declare(Fact(recommendation='Underwriter berkualitas baik. DER menunjukkan tingkat hutang yang rendah.'))


    @Rule(Fact(underwriter_valued='good'), Fact(roa_valued='high'))
    def financial2_rule_89(self):
        self.declare(Fact(recommendation='Underwriter berkualitas baik. ROA menunjukkan efisiensi tinggi.'))


    @Rule(Fact(underwriter_valued='good'), Fact(roe_valued='high'))
    def financial2_rule_90(self):
        self.declare(Fact(recommendation='Underwriter berkualitas baik. ROE menunjukkan keuntungan yang tinggi.'))


    @Rule(Fact(warrant_valued='good'), Fact(net_income_valued='profit'))
    def financial2_rule_91(self):
        self.declare(Fact(recommendation='Warrant menunjukkan kondisi baik. Laba bersih menunjukkan keuntungan.'))


    @Rule(Fact(warrant_valued='good'), Fact(per_valued='high'))
    def financial2_rule_92(self):
        self.declare(Fact(recommendation='Warrant menunjukkan kondisi baik. PER berada di tingkat yang tinggi.'))


    @Rule(Fact(warrant_valued='good'), Fact(der_valued='low'))
    def financial2_rule_93(self):
        self.declare(Fact(recommendation='Warrant menunjukkan kondisi baik. DER menunjukkan tingkat hutang yang rendah.'))


    @Rule(Fact(warrant_valued='good'), Fact(roa_valued='high'))
    def financial2_rule_94(self):
        self.declare(Fact(recommendation='Warrant menunjukkan kondisi baik. ROA menunjukkan efisiensi tinggi.'))


    @Rule(Fact(warrant_valued='good'), Fact(roe_valued='high'))
    def financial2_rule_95(self):
        self.declare(Fact(recommendation='Warrant menunjukkan kondisi baik. ROE menunjukkan keuntungan yang tinggi.'))


    @Rule(Fact(net_income_valued='profit'), Fact(per_valued='high'))
    def financial2_rule_96(self):
        self.declare(Fact(recommendation='Laba bersih menunjukkan keuntungan. PER berada di tingkat yang tinggi.'))


    @Rule(Fact(net_income_valued='profit'), Fact(der_valued='low'))
    def financial2_rule_97(self):
        self.declare(Fact(recommendation='Laba bersih menunjukkan keuntungan. DER menunjukkan tingkat hutang yang rendah.'))


    @Rule(Fact(net_income_valued='profit'), Fact(roa_valued='high'))
    def financial2_rule_98(self):
        self.declare(Fact(recommendation='Laba bersih menunjukkan keuntungan. ROA menunjukkan efisiensi tinggi.'))


    @Rule(Fact(net_income_valued='profit'), Fact(roe_valued='high'))
    def financial2_rule_99(self):
        self.declare(Fact(recommendation='Laba bersih menunjukkan keuntungan. ROE menunjukkan keuntungan yang tinggi.'))


    @Rule(Fact(per_valued='high'), Fact(der_valued='low'))
    def financial2_rule_100(self):
        self.declare(Fact(recommendation='PER berada di tingkat yang tinggi. DER menunjukkan tingkat hutang yang rendah.'))


    @Rule(Fact(per_valued='high'), Fact(roa_valued='high'))
    def financial2_rule_101(self):
        self.declare(Fact(recommendation='PER berada di tingkat yang tinggi. ROA menunjukkan efisiensi tinggi.'))


    @Rule(Fact(per_valued='high'), Fact(roe_valued='high'))
    def financial2_rule_102(self):
        self.declare(Fact(recommendation='PER berada di tingkat yang tinggi. ROE menunjukkan keuntungan yang tinggi.'))


    @Rule(Fact(der_valued='low'), Fact(roa_valued='high'))
    def financial2_rule_103(self):
        self.declare(Fact(recommendation='DER menunjukkan tingkat hutang yang rendah. ROA menunjukkan efisiensi tinggi.'))


    @Rule(Fact(der_valued='low'), Fact(roe_valued='high'))
    def financial2_rule_104(self):
        self.declare(Fact(recommendation='DER menunjukkan tingkat hutang yang rendah. ROE menunjukkan keuntungan yang tinggi.'))


    @Rule(Fact(roa_valued='high'), Fact(roe_valued='high'))
    def financial2_rule_105(self):
        self.declare(Fact(recommendation='ROA menunjukkan efisiensi tinggi. ROE menunjukkan keuntungan yang tinggi.'))


    @Rule(Fact(underwriter_valued='good'), Fact(warrant_valued='good'))
    def financial2_rule_106(self):
        self.declare(Fact(recommendation='Underwriter berkualitas baik. Warrant menunjukkan kondisi baik.'))


    @Rule(Fact(underwriter_valued='good'), Fact(net_income_valued='profit'))
    def financial2_rule_107(self):
        self.declare(Fact(recommendation='Underwriter berkualitas baik. Laba bersih menunjukkan keuntungan.'))


    @Rule(Fact(underwriter_valued='good'), Fact(per_valued='high'))
    def financial2_rule_108(self):
        self.declare(Fact(recommendation='Underwriter berkualitas baik. PER berada di tingkat yang tinggi.'))


    @Rule(Fact(underwriter_valued='good'), Fact(der_valued='low'))
    def financial2_rule_109(self):
        self.declare(Fact(recommendation='Underwriter berkualitas baik. DER menunjukkan tingkat hutang yang rendah.'))


    @Rule(Fact(underwriter_valued='good'), Fact(roa_valued='high'))
    def financial2_rule_110(self):
        self.declare(Fact(recommendation='Underwriter berkualitas baik. ROA menunjukkan efisiensi tinggi.'))


    @Rule(Fact(underwriter_valued='good'), Fact(roe_valued='low'))
    def financial2_rule_111(self):
        self.declare(Fact(recommendation='Underwriter berkualitas baik. ROE menunjukkan keuntungan yang rendah.'))


    @Rule(Fact(warrant_valued='good'), Fact(net_income_valued='profit'))
    def financial2_rule_112(self):
        self.declare(Fact(recommendation='Warrant menunjukkan kondisi baik. Laba bersih menunjukkan keuntungan.'))


    @Rule(Fact(warrant_valued='good'), Fact(per_valued='high'))
    def financial2_rule_113(self):
        self.declare(Fact(recommendation='Warrant menunjukkan kondisi baik. PER berada di tingkat yang tinggi.'))


    @Rule(Fact(warrant_valued='good'), Fact(der_valued='low'))
    def financial2_rule_114(self):
        self.declare(Fact(recommendation='Warrant menunjukkan kondisi baik. DER menunjukkan tingkat hutang yang rendah.'))


    @Rule(Fact(warrant_valued='good'), Fact(roa_valued='high'))
    def financial2_rule_115(self):
        self.declare(Fact(recommendation='Warrant menunjukkan kondisi baik. ROA menunjukkan efisiensi tinggi.'))


    @Rule(Fact(warrant_valued='good'), Fact(roe_valued='low'))
    def financial2_rule_116(self):
        self.declare(Fact(recommendation='Warrant menunjukkan kondisi baik. ROE menunjukkan keuntungan yang rendah.'))


    @Rule(Fact(net_income_valued='profit'), Fact(per_valued='high'))
    def financial2_rule_117(self):
        self.declare(Fact(recommendation='Laba bersih menunjukkan keuntungan. PER berada di tingkat yang tinggi.'))


    @Rule(Fact(net_income_valued='profit'), Fact(der_valued='low'))
    def financial2_rule_118(self):
        self.declare(Fact(recommendation='Laba bersih menunjukkan keuntungan. DER menunjukkan tingkat hutang yang rendah.'))


    @Rule(Fact(net_income_valued='profit'), Fact(roa_valued='high'))
    def financial2_rule_119(self):
        self.declare(Fact(recommendation='Laba bersih menunjukkan keuntungan. ROA menunjukkan efisiensi tinggi.'))


    @Rule(Fact(net_income_valued='profit'), Fact(roe_valued='low'))
    def financial2_rule_120(self):
        self.declare(Fact(recommendation='Laba bersih menunjukkan keuntungan. ROE menunjukkan keuntungan yang rendah.'))


    @Rule(Fact(per_valued='high'), Fact(der_valued='low'))
    def financial2_rule_121(self):
        self.declare(Fact(recommendation='PER berada di tingkat yang tinggi. DER menunjukkan tingkat hutang yang rendah.'))


    @Rule(Fact(per_valued='high'), Fact(roa_valued='high'))
    def financial2_rule_122(self):
        self.declare(Fact(recommendation='PER berada di tingkat yang tinggi. ROA menunjukkan efisiensi tinggi.'))


    @Rule(Fact(per_valued='high'), Fact(roe_valued='low'))
    def financial2_rule_123(self):
        self.declare(Fact(recommendation='PER berada di tingkat yang tinggi. ROE menunjukkan keuntungan yang rendah.'))


    @Rule(Fact(der_valued='low'), Fact(roa_valued='high'))
    def financial2_rule_124(self):
        self.declare(Fact(recommendation='DER menunjukkan tingkat hutang yang rendah. ROA menunjukkan efisiensi tinggi.'))


    @Rule(Fact(der_valued='low'), Fact(roe_valued='low'))
    def financial2_rule_125(self):
        self.declare(Fact(recommendation='DER menunjukkan tingkat hutang yang rendah. ROE menunjukkan keuntungan yang rendah.'))


    @Rule(Fact(roa_valued='high'), Fact(roe_valued='low'))
    def financial2_rule_126(self):
        self.declare(Fact(recommendation='ROA menunjukkan efisiensi tinggi. ROE menunjukkan keuntungan yang rendah.'))


    @Rule(Fact(underwriter_valued='good'), Fact(warrant_valued='good'))
    def financial2_rule_127(self):
        self.declare(Fact(recommendation='Underwriter berkualitas baik. Warrant menunjukkan kondisi baik.'))


    @Rule(Fact(underwriter_valued='good'), Fact(net_income_valued='profit'))
    def financial2_rule_128(self):
        self.declare(Fact(recommendation='Underwriter berkualitas baik. Laba bersih menunjukkan keuntungan.'))


    @Rule(Fact(underwriter_valued='good'), Fact(per_valued='high'))
    def financial2_rule_129(self):
        self.declare(Fact(recommendation='Underwriter berkualitas baik. PER berada di tingkat yang tinggi.'))


    @Rule(Fact(underwriter_valued='good'), Fact(der_valued='low'))
    def financial2_rule_130(self):
        self.declare(Fact(recommendation='Underwriter berkualitas baik. DER menunjukkan tingkat hutang yang rendah.'))


    @Rule(Fact(underwriter_valued='good'), Fact(roa_valued='low'))
    def financial2_rule_131(self):
        self.declare(Fact(recommendation='Underwriter berkualitas baik. ROA menunjukkan efisiensi rendah.'))


    @Rule(Fact(underwriter_valued='good'), Fact(roe_valued='high'))
    def financial2_rule_132(self):
        self.declare(Fact(recommendation='Underwriter berkualitas baik. ROE menunjukkan keuntungan yang tinggi.'))


    @Rule(Fact(warrant_valued='good'), Fact(net_income_valued='profit'))
    def financial2_rule_133(self):
        self.declare(Fact(recommendation='Warrant menunjukkan kondisi baik. Laba bersih menunjukkan keuntungan.'))


    @Rule(Fact(warrant_valued='good'), Fact(per_valued='high'))
    def financial2_rule_134(self):
        self.declare(Fact(recommendation='Warrant menunjukkan kondisi baik. PER berada di tingkat yang tinggi.'))


    @Rule(Fact(warrant_valued='good'), Fact(der_valued='low'))
    def financial2_rule_135(self):
        self.declare(Fact(recommendation='Warrant menunjukkan kondisi baik. DER menunjukkan tingkat hutang yang rendah.'))


    @Rule(Fact(warrant_valued='good'), Fact(roa_valued='low'))
    def financial2_rule_136(self):
        self.declare(Fact(recommendation='Warrant menunjukkan kondisi baik. ROA menunjukkan efisiensi rendah.'))


    @Rule(Fact(warrant_valued='good'), Fact(roe_valued='high'))
    def financial2_rule_137(self):
        self.declare(Fact(recommendation='Warrant menunjukkan kondisi baik. ROE menunjukkan keuntungan yang tinggi.'))


    @Rule(Fact(net_income_valued='profit'), Fact(per_valued='high'))
    def financial2_rule_138(self):
        self.declare(Fact(recommendation='Laba bersih menunjukkan keuntungan. PER berada di tingkat yang tinggi.'))


    @Rule(Fact(net_income_valued='profit'), Fact(der_valued='low'))
    def financial2_rule_139(self):
        self.declare(Fact(recommendation='Laba bersih menunjukkan keuntungan. DER menunjukkan tingkat hutang yang rendah.'))


    @Rule(Fact(net_income_valued='profit'), Fact(roa_valued='low'))
    def financial2_rule_140(self):
        self.declare(Fact(recommendation='Laba bersih menunjukkan keuntungan. ROA menunjukkan efisiensi rendah.'))


    @Rule(Fact(net_income_valued='profit'), Fact(roe_valued='high'))
    def financial2_rule_141(self):
        self.declare(Fact(recommendation='Laba bersih menunjukkan keuntungan. ROE menunjukkan keuntungan yang tinggi.'))


    @Rule(Fact(per_valued='high'), Fact(der_valued='low'))
    def financial2_rule_142(self):
        self.declare(Fact(recommendation='PER berada di tingkat yang tinggi. DER menunjukkan tingkat hutang yang rendah.'))


    @Rule(Fact(per_valued='high'), Fact(roa_valued='low'))
    def financial2_rule_143(self):
        self.declare(Fact(recommendation='PER berada di tingkat yang tinggi. ROA menunjukkan efisiensi rendah.'))


    @Rule(Fact(per_valued='high'), Fact(roe_valued='high'))
    def financial2_rule_144(self):
        self.declare(Fact(recommendation='PER berada di tingkat yang tinggi. ROE menunjukkan keuntungan yang tinggi.'))


    @Rule(Fact(der_valued='low'), Fact(roa_valued='low'))
    def financial2_rule_145(self):
        self.declare(Fact(recommendation='DER menunjukkan tingkat hutang yang rendah. ROA menunjukkan efisiensi rendah.'))


    @Rule(Fact(der_valued='low'), Fact(roe_valued='high'))
    def financial2_rule_146(self):
        self.declare(Fact(recommendation='DER menunjukkan tingkat hutang yang rendah. ROE menunjukkan keuntungan yang tinggi.'))


    @Rule(Fact(roa_valued='low'), Fact(roe_valued='high'))
    def financial2_rule_147(self):
        self.declare(Fact(recommendation='ROA menunjukkan efisiensi rendah. ROE menunjukkan keuntungan yang tinggi.'))


    @Rule(Fact(underwriter_valued='good'), Fact(warrant_valued='good'))
    def financial2_rule_148(self):
        self.declare(Fact(recommendation='Underwriter berkualitas baik. Warrant menunjukkan kondisi baik.'))


    @Rule(Fact(underwriter_valued='good'), Fact(net_income_valued='profit'))
    def financial2_rule_149(self):
        self.declare(Fact(recommendation='Underwriter berkualitas baik. Laba bersih menunjukkan keuntungan.'))


    @Rule(Fact(underwriter_valued='good'), Fact(per_valued='high'))
    def financial2_rule_150(self):
        self.declare(Fact(recommendation='Underwriter berkualitas baik. PER berada di tingkat yang tinggi.'))


    @Rule(Fact(underwriter_valued='good'), Fact(der_valued='low'))
    def financial2_rule_151(self):
        self.declare(Fact(recommendation='Underwriter berkualitas baik. DER menunjukkan tingkat hutang yang rendah.'))


    @Rule(Fact(underwriter_valued='good'), Fact(roa_valued='low'))
    def financial2_rule_152(self):
        self.declare(Fact(recommendation='Underwriter berkualitas baik. ROA menunjukkan efisiensi rendah.'))


    @Rule(Fact(underwriter_valued='good'), Fact(roe_valued='low'))
    def financial2_rule_153(self):
        self.declare(Fact(recommendation='Underwriter berkualitas baik. ROE menunjukkan keuntungan yang rendah.'))


    @Rule(Fact(warrant_valued='good'), Fact(net_income_valued='profit'))
    def financial2_rule_154(self):
        self.declare(Fact(recommendation='Warrant menunjukkan kondisi baik. Laba bersih menunjukkan keuntungan.'))


    @Rule(Fact(warrant_valued='good'), Fact(per_valued='high'))
    def financial2_rule_155(self):
        self.declare(Fact(recommendation='Warrant menunjukkan kondisi baik. PER berada di tingkat yang tinggi.'))


    @Rule(Fact(warrant_valued='good'), Fact(der_valued='low'))
    def financial2_rule_156(self):
        self.declare(Fact(recommendation='Warrant menunjukkan kondisi baik. DER menunjukkan tingkat hutang yang rendah.'))


    @Rule(Fact(warrant_valued='good'), Fact(roa_valued='low'))
    def financial2_rule_157(self):
        self.declare(Fact(recommendation='Warrant menunjukkan kondisi baik. ROA menunjukkan efisiensi rendah.'))


    @Rule(Fact(warrant_valued='good'), Fact(roe_valued='low'))
    def financial2_rule_158(self):
        self.declare(Fact(recommendation='Warrant menunjukkan kondisi baik. ROE menunjukkan keuntungan yang rendah.'))


    @Rule(Fact(net_income_valued='profit'), Fact(per_valued='high'))
    def financial2_rule_159(self):
        self.declare(Fact(recommendation='Laba bersih menunjukkan keuntungan. PER berada di tingkat yang tinggi.'))


    @Rule(Fact(net_income_valued='profit'), Fact(der_valued='low'))
    def financial2_rule_160(self):
        self.declare(Fact(recommendation='Laba bersih menunjukkan keuntungan. DER menunjukkan tingkat hutang yang rendah.'))


    @Rule(Fact(net_income_valued='profit'), Fact(roa_valued='low'))
    def financial2_rule_161(self):
        self.declare(Fact(recommendation='Laba bersih menunjukkan keuntungan. ROA menunjukkan efisiensi rendah.'))


    @Rule(Fact(net_income_valued='profit'), Fact(roe_valued='low'))
    def financial2_rule_162(self):
        self.declare(Fact(recommendation='Laba bersih menunjukkan keuntungan. ROE menunjukkan keuntungan yang rendah.'))


    @Rule(Fact(per_valued='high'), Fact(der_valued='low'))
    def financial2_rule_163(self):
        self.declare(Fact(recommendation='PER berada di tingkat yang tinggi. DER menunjukkan tingkat hutang yang rendah.'))


    @Rule(Fact(per_valued='high'), Fact(roa_valued='low'))
    def financial2_rule_164(self):
        self.declare(Fact(recommendation='PER berada di tingkat yang tinggi. ROA menunjukkan efisiensi rendah.'))


    @Rule(Fact(per_valued='high'), Fact(roe_valued='low'))
    def financial2_rule_165(self):
        self.declare(Fact(recommendation='PER berada di tingkat yang tinggi. ROE menunjukkan keuntungan yang rendah.'))


    @Rule(Fact(der_valued='low'), Fact(roa_valued='low'))
    def financial2_rule_166(self):
        self.declare(Fact(recommendation='DER menunjukkan tingkat hutang yang rendah. ROA menunjukkan efisiensi rendah.'))


    @Rule(Fact(der_valued='low'), Fact(roe_valued='low'))
    def financial2_rule_167(self):
        self.declare(Fact(recommendation='DER menunjukkan tingkat hutang yang rendah. ROE menunjukkan keuntungan yang rendah.'))


    @Rule(Fact(roa_valued='low'), Fact(roe_valued='low'))
    def financial2_rule_168(self):
        self.declare(Fact(recommendation='ROA menunjukkan efisiensi rendah. ROE menunjukkan keuntungan yang rendah.'))


    @Rule(Fact(underwriter_valued='good'), Fact(warrant_valued='good'))
    def financial2_rule_169(self):
        self.declare(Fact(recommendation='Underwriter berkualitas baik. Warrant menunjukkan kondisi baik.'))


    @Rule(Fact(underwriter_valued='good'), Fact(net_income_valued='profit'))
    def financial2_rule_170(self):
        self.declare(Fact(recommendation='Underwriter berkualitas baik. Laba bersih menunjukkan keuntungan.'))


    @Rule(Fact(underwriter_valued='good'), Fact(per_valued='low'))
    def financial2_rule_171(self):
        self.declare(Fact(recommendation='Underwriter berkualitas baik. PER berada di tingkat yang rendah.'))


    @Rule(Fact(underwriter_valued='good'), Fact(der_valued='high'))
    def financial2_rule_172(self):
        self.declare(Fact(recommendation='Underwriter berkualitas baik. DER menunjukkan tingkat hutang yang tinggi.'))


    @Rule(Fact(underwriter_valued='good'), Fact(roa_valued='high'))
    def financial2_rule_173(self):
        self.declare(Fact(recommendation='Underwriter berkualitas baik. ROA menunjukkan efisiensi tinggi.'))


    @Rule(Fact(underwriter_valued='good'), Fact(roe_valued='high'))
    def financial2_rule_174(self):
        self.declare(Fact(recommendation='Underwriter berkualitas baik. ROE menunjukkan keuntungan yang tinggi.'))


    @Rule(Fact(warrant_valued='good'), Fact(net_income_valued='profit'))
    def financial2_rule_175(self):
        self.declare(Fact(recommendation='Warrant menunjukkan kondisi baik. Laba bersih menunjukkan keuntungan.'))


    @Rule(Fact(warrant_valued='good'), Fact(per_valued='low'))
    def financial2_rule_176(self):
        self.declare(Fact(recommendation='Warrant menunjukkan kondisi baik. PER berada di tingkat yang rendah.'))


    @Rule(Fact(warrant_valued='good'), Fact(der_valued='high'))
    def financial2_rule_177(self):
        self.declare(Fact(recommendation='Warrant menunjukkan kondisi baik. DER menunjukkan tingkat hutang yang tinggi.'))


    @Rule(Fact(warrant_valued='good'), Fact(roa_valued='high'))
    def financial2_rule_178(self):
        self.declare(Fact(recommendation='Warrant menunjukkan kondisi baik. ROA menunjukkan efisiensi tinggi.'))


    @Rule(Fact(warrant_valued='good'), Fact(roe_valued='high'))
    def financial2_rule_179(self):
        self.declare(Fact(recommendation='Warrant menunjukkan kondisi baik. ROE menunjukkan keuntungan yang tinggi.'))


    @Rule(Fact(net_income_valued='profit'), Fact(per_valued='low'))
    def financial2_rule_180(self):
        self.declare(Fact(recommendation='Laba bersih menunjukkan keuntungan. PER berada di tingkat yang rendah.'))


    @Rule(Fact(net_income_valued='profit'), Fact(der_valued='high'))
    def financial2_rule_181(self):
        self.declare(Fact(recommendation='Laba bersih menunjukkan keuntungan. DER menunjukkan tingkat hutang yang tinggi.'))


    @Rule(Fact(net_income_valued='profit'), Fact(roa_valued='high'))
    def financial2_rule_182(self):
        self.declare(Fact(recommendation='Laba bersih menunjukkan keuntungan. ROA menunjukkan efisiensi tinggi.'))


    @Rule(Fact(net_income_valued='profit'), Fact(roe_valued='high'))
    def financial2_rule_183(self):
        self.declare(Fact(recommendation='Laba bersih menunjukkan keuntungan. ROE menunjukkan keuntungan yang tinggi.'))


    @Rule(Fact(per_valued='low'), Fact(der_valued='high'))
    def financial2_rule_184(self):
        self.declare(Fact(recommendation='PER berada di tingkat yang rendah. DER menunjukkan tingkat hutang yang tinggi.'))


    @Rule(Fact(per_valued='low'), Fact(roa_valued='high'))
    def financial2_rule_185(self):
        self.declare(Fact(recommendation='PER berada di tingkat yang rendah. ROA menunjukkan efisiensi tinggi.'))


    @Rule(Fact(per_valued='low'), Fact(roe_valued='high'))
    def financial2_rule_186(self):
        self.declare(Fact(recommendation='PER berada di tingkat yang rendah. ROE menunjukkan keuntungan yang tinggi.'))


    @Rule(Fact(der_valued='high'), Fact(roa_valued='high'))
    def financial2_rule_187(self):
        self.declare(Fact(recommendation='DER menunjukkan tingkat hutang yang tinggi. ROA menunjukkan efisiensi tinggi.'))


    @Rule(Fact(der_valued='high'), Fact(roe_valued='high'))
    def financial2_rule_188(self):
        self.declare(Fact(recommendation='DER menunjukkan tingkat hutang yang tinggi. ROE menunjukkan keuntungan yang tinggi.'))


    @Rule(Fact(roa_valued='high'), Fact(roe_valued='high'))
    def financial2_rule_189(self):
        self.declare(Fact(recommendation='ROA menunjukkan efisiensi tinggi. ROE menunjukkan keuntungan yang tinggi.'))


    @Rule(Fact(underwriter_valued='good'), Fact(warrant_valued='good'))
    def financial2_rule_190(self):
        self.declare(Fact(recommendation='Underwriter berkualitas baik. Warrant menunjukkan kondisi baik.'))


    @Rule(Fact(underwriter_valued='good'), Fact(net_income_valued='profit'))
    def financial2_rule_191(self):
        self.declare(Fact(recommendation='Underwriter berkualitas baik. Laba bersih menunjukkan keuntungan.'))


    @Rule(Fact(underwriter_valued='good'), Fact(per_valued='low'))
    def financial2_rule_192(self):
        self.declare(Fact(recommendation='Underwriter berkualitas baik. PER berada di tingkat yang rendah.'))


    @Rule(Fact(underwriter_valued='good'), Fact(der_valued='high'))
    def financial2_rule_193(self):
        self.declare(Fact(recommendation='Underwriter berkualitas baik. DER menunjukkan tingkat hutang yang tinggi.'))


    @Rule(Fact(underwriter_valued='good'), Fact(roa_valued='high'))
    def financial2_rule_194(self):
        self.declare(Fact(recommendation='Underwriter berkualitas baik. ROA menunjukkan efisiensi tinggi.'))


    @Rule(Fact(underwriter_valued='good'), Fact(roe_valued='low'))
    def financial2_rule_195(self):
        self.declare(Fact(recommendation='Underwriter berkualitas baik. ROE menunjukkan keuntungan yang rendah.'))


    @Rule(Fact(warrant_valued='good'), Fact(net_income_valued='profit'))
    def financial2_rule_196(self):
        self.declare(Fact(recommendation='Warrant menunjukkan kondisi baik. Laba bersih menunjukkan keuntungan.'))


    @Rule(Fact(warrant_valued='good'), Fact(per_valued='low'))
    def financial2_rule_197(self):
        self.declare(Fact(recommendation='Warrant menunjukkan kondisi baik. PER berada di tingkat yang rendah.'))


    @Rule(Fact(warrant_valued='good'), Fact(der_valued='high'))
    def financial2_rule_198(self):
        self.declare(Fact(recommendation='Warrant menunjukkan kondisi baik. DER menunjukkan tingkat hutang yang tinggi.'))


    @Rule(Fact(warrant_valued='good'), Fact(roa_valued='high'))
    def financial2_rule_199(self):
        self.declare(Fact(recommendation='Warrant menunjukkan kondisi baik. ROA menunjukkan efisiensi tinggi.'))


    @Rule(Fact(warrant_valued='good'), Fact(roe_valued='low'))
    def financial2_rule_200(self):
        self.declare(Fact(recommendation='Warrant menunjukkan kondisi baik. ROE menunjukkan keuntungan yang rendah.'))


    @Rule(Fact(net_income_valued='profit'), Fact(per_valued='low'))
    def financial2_rule_201(self):
        self.declare(Fact(recommendation='Laba bersih menunjukkan keuntungan. PER berada di tingkat yang rendah.'))


    @Rule(Fact(net_income_valued='profit'), Fact(der_valued='high'))
    def financial2_rule_202(self):
        self.declare(Fact(recommendation='Laba bersih menunjukkan keuntungan. DER menunjukkan tingkat hutang yang tinggi.'))


    @Rule(Fact(net_income_valued='profit'), Fact(roa_valued='high'))
    def financial2_rule_203(self):
        self.declare(Fact(recommendation='Laba bersih menunjukkan keuntungan. ROA menunjukkan efisiensi tinggi.'))


    @Rule(Fact(net_income_valued='profit'), Fact(roe_valued='low'))
    def financial2_rule_204(self):
        self.declare(Fact(recommendation='Laba bersih menunjukkan keuntungan. ROE menunjukkan keuntungan yang rendah.'))


    @Rule(Fact(per_valued='low'), Fact(der_valued='high'))
    def financial2_rule_205(self):
        self.declare(Fact(recommendation='PER berada di tingkat yang rendah. DER menunjukkan tingkat hutang yang tinggi.'))


    @Rule(Fact(per_valued='low'), Fact(roa_valued='high'))
    def financial2_rule_206(self):
        self.declare(Fact(recommendation='PER berada di tingkat yang rendah. ROA menunjukkan efisiensi tinggi.'))


    @Rule(Fact(per_valued='low'), Fact(roe_valued='low'))
    def financial2_rule_207(self):
        self.declare(Fact(recommendation='PER berada di tingkat yang rendah. ROE menunjukkan keuntungan yang rendah.'))


    @Rule(Fact(der_valued='high'), Fact(roa_valued='high'))
    def financial2_rule_208(self):
        self.declare(Fact(recommendation='DER menunjukkan tingkat hutang yang tinggi. ROA menunjukkan efisiensi tinggi.'))


    @Rule(Fact(der_valued='high'), Fact(roe_valued='low'))
    def financial2_rule_209(self):
        self.declare(Fact(recommendation='DER menunjukkan tingkat hutang yang tinggi. ROE menunjukkan keuntungan yang rendah.'))


    @Rule(Fact(roa_valued='high'), Fact(roe_valued='low'))
    def financial2_rule_210(self):
        self.declare(Fact(recommendation='ROA menunjukkan efisiensi tinggi. ROE menunjukkan keuntungan yang rendah.'))


    @Rule(Fact(underwriter_valued='good'), Fact(warrant_valued='good'))
    def financial2_rule_211(self):
        self.declare(Fact(recommendation='Underwriter berkualitas baik. Warrant menunjukkan kondisi baik.'))


    @Rule(Fact(underwriter_valued='good'), Fact(net_income_valued='profit'))
    def financial2_rule_212(self):
        self.declare(Fact(recommendation='Underwriter berkualitas baik. Laba bersih menunjukkan keuntungan.'))


    @Rule(Fact(underwriter_valued='good'), Fact(per_valued='low'))
    def financial2_rule_213(self):
        self.declare(Fact(recommendation='Underwriter berkualitas baik. PER berada di tingkat yang rendah.'))


    @Rule(Fact(underwriter_valued='good'), Fact(der_valued='high'))
    def financial2_rule_214(self):
        self.declare(Fact(recommendation='Underwriter berkualitas baik. DER menunjukkan tingkat hutang yang tinggi.'))


    @Rule(Fact(underwriter_valued='good'), Fact(roa_valued='low'))
    def financial2_rule_215(self):
        self.declare(Fact(recommendation='Underwriter berkualitas baik. ROA menunjukkan efisiensi rendah.'))


    @Rule(Fact(underwriter_valued='good'), Fact(roe_valued='high'))
    def financial2_rule_216(self):
        self.declare(Fact(recommendation='Underwriter berkualitas baik. ROE menunjukkan keuntungan yang tinggi.'))


    @Rule(Fact(warrant_valued='good'), Fact(net_income_valued='profit'))
    def financial2_rule_217(self):
        self.declare(Fact(recommendation='Warrant menunjukkan kondisi baik. Laba bersih menunjukkan keuntungan.'))


    @Rule(Fact(warrant_valued='good'), Fact(per_valued='low'))
    def financial2_rule_218(self):
        self.declare(Fact(recommendation='Warrant menunjukkan kondisi baik. PER berada di tingkat yang rendah.'))


    @Rule(Fact(warrant_valued='good'), Fact(der_valued='high'))
    def financial2_rule_219(self):
        self.declare(Fact(recommendation='Warrant menunjukkan kondisi baik. DER menunjukkan tingkat hutang yang tinggi.'))


    @Rule(Fact(warrant_valued='good'), Fact(roa_valued='low'))
    def financial2_rule_220(self):
        self.declare(Fact(recommendation='Warrant menunjukkan kondisi baik. ROA menunjukkan efisiensi rendah.'))


    @Rule(Fact(warrant_valued='good'), Fact(roe_valued='high'))
    def financial2_rule_221(self):
        self.declare(Fact(recommendation='Warrant menunjukkan kondisi baik. ROE menunjukkan keuntungan yang tinggi.'))


    @Rule(Fact(net_income_valued='profit'), Fact(per_valued='low'))
    def financial2_rule_222(self):
        self.declare(Fact(recommendation='Laba bersih menunjukkan keuntungan. PER berada di tingkat yang rendah.'))


    @Rule(Fact(net_income_valued='profit'), Fact(der_valued='high'))
    def financial2_rule_223(self):
        self.declare(Fact(recommendation='Laba bersih menunjukkan keuntungan. DER menunjukkan tingkat hutang yang tinggi.'))


    @Rule(Fact(net_income_valued='profit'), Fact(roa_valued='low'))
    def financial2_rule_224(self):
        self.declare(Fact(recommendation='Laba bersih menunjukkan keuntungan. ROA menunjukkan efisiensi rendah.'))


    @Rule(Fact(net_income_valued='profit'), Fact(roe_valued='high'))
    def financial2_rule_225(self):
        self.declare(Fact(recommendation='Laba bersih menunjukkan keuntungan. ROE menunjukkan keuntungan yang tinggi.'))


    @Rule(Fact(per_valued='low'), Fact(der_valued='high'))
    def financial2_rule_226(self):
        self.declare(Fact(recommendation='PER berada di tingkat yang rendah. DER menunjukkan tingkat hutang yang tinggi.'))


    @Rule(Fact(per_valued='low'), Fact(roa_valued='low'))
    def financial2_rule_227(self):
        self.declare(Fact(recommendation='PER berada di tingkat yang rendah. ROA menunjukkan efisiensi rendah.'))


    @Rule(Fact(per_valued='low'), Fact(roe_valued='high'))
    def financial2_rule_228(self):
        self.declare(Fact(recommendation='PER berada di tingkat yang rendah. ROE menunjukkan keuntungan yang tinggi.'))


    @Rule(Fact(der_valued='high'), Fact(roa_valued='low'))
    def financial2_rule_229(self):
        self.declare(Fact(recommendation='DER menunjukkan tingkat hutang yang tinggi. ROA menunjukkan efisiensi rendah.'))


    @Rule(Fact(der_valued='high'), Fact(roe_valued='high'))
    def financial2_rule_230(self):
        self.declare(Fact(recommendation='DER menunjukkan tingkat hutang yang tinggi. ROE menunjukkan keuntungan yang tinggi.'))


    @Rule(Fact(roa_valued='low'), Fact(roe_valued='high'))
    def financial2_rule_231(self):
        self.declare(Fact(recommendation='ROA menunjukkan efisiensi rendah. ROE menunjukkan keuntungan yang tinggi.'))


    @Rule(Fact(underwriter_valued='good'), Fact(warrant_valued='good'))
    def financial2_rule_232(self):
        self.declare(Fact(recommendation='Underwriter berkualitas baik. Warrant menunjukkan kondisi baik.'))


    @Rule(Fact(underwriter_valued='good'), Fact(net_income_valued='profit'))
    def financial2_rule_233(self):
        self.declare(Fact(recommendation='Underwriter berkualitas baik. Laba bersih menunjukkan keuntungan.'))


    @Rule(Fact(underwriter_valued='good'), Fact(per_valued='low'))
    def financial2_rule_234(self):
        self.declare(Fact(recommendation='Underwriter berkualitas baik. PER berada di tingkat yang rendah.'))


    @Rule(Fact(underwriter_valued='good'), Fact(der_valued='high'))
    def financial2_rule_235(self):
        self.declare(Fact(recommendation='Underwriter berkualitas baik. DER menunjukkan tingkat hutang yang tinggi.'))


    @Rule(Fact(underwriter_valued='good'), Fact(roa_valued='low'))
    def financial2_rule_236(self):
        self.declare(Fact(recommendation='Underwriter berkualitas baik. ROA menunjukkan efisiensi rendah.'))


    @Rule(Fact(underwriter_valued='good'), Fact(roe_valued='low'))
    def financial2_rule_237(self):
        self.declare(Fact(recommendation='Underwriter berkualitas baik. ROE menunjukkan keuntungan yang rendah.'))


    @Rule(Fact(warrant_valued='good'), Fact(net_income_valued='profit'))
    def financial2_rule_238(self):
        self.declare(Fact(recommendation='Warrant menunjukkan kondisi baik. Laba bersih menunjukkan keuntungan.'))


    @Rule(Fact(warrant_valued='good'), Fact(per_valued='low'))
    def financial2_rule_239(self):
        self.declare(Fact(recommendation='Warrant menunjukkan kondisi baik. PER berada di tingkat yang rendah.'))


    @Rule(Fact(warrant_valued='good'), Fact(der_valued='high'))
    def financial2_rule_240(self):
        self.declare(Fact(recommendation='Warrant menunjukkan kondisi baik. DER menunjukkan tingkat hutang yang tinggi.'))


    @Rule(Fact(warrant_valued='good'), Fact(roa_valued='low'))
    def financial2_rule_241(self):
        self.declare(Fact(recommendation='Warrant menunjukkan kondisi baik. ROA menunjukkan efisiensi rendah.'))


    @Rule(Fact(warrant_valued='good'), Fact(roe_valued='low'))
    def financial2_rule_242(self):
        self.declare(Fact(recommendation='Warrant menunjukkan kondisi baik. ROE menunjukkan keuntungan yang rendah.'))


    @Rule(Fact(net_income_valued='profit'), Fact(per_valued='low'))
    def financial2_rule_243(self):
        self.declare(Fact(recommendation='Laba bersih menunjukkan keuntungan. PER berada di tingkat yang rendah.'))


    @Rule(Fact(net_income_valued='profit'), Fact(der_valued='high'))
    def financial2_rule_244(self):
        self.declare(Fact(recommendation='Laba bersih menunjukkan keuntungan. DER menunjukkan tingkat hutang yang tinggi.'))


    @Rule(Fact(net_income_valued='profit'), Fact(roa_valued='low'))
    def financial2_rule_245(self):
        self.declare(Fact(recommendation='Laba bersih menunjukkan keuntungan. ROA menunjukkan efisiensi rendah.'))


    @Rule(Fact(net_income_valued='profit'), Fact(roe_valued='low'))
    def financial2_rule_246(self):
        self.declare(Fact(recommendation='Laba bersih menunjukkan keuntungan. ROE menunjukkan keuntungan yang rendah.'))


    @Rule(Fact(per_valued='low'), Fact(der_valued='high'))
    def financial2_rule_247(self):
        self.declare(Fact(recommendation='PER berada di tingkat yang rendah. DER menunjukkan tingkat hutang yang tinggi.'))


    @Rule(Fact(per_valued='low'), Fact(roa_valued='low'))
    def financial2_rule_248(self):
        self.declare(Fact(recommendation='PER berada di tingkat yang rendah. ROA menunjukkan efisiensi rendah.'))


    @Rule(Fact(per_valued='low'), Fact(roe_valued='low'))
    def financial2_rule_249(self):
        self.declare(Fact(recommendation='PER berada di tingkat yang rendah. ROE menunjukkan keuntungan yang rendah.'))


    @Rule(Fact(der_valued='high'), Fact(roa_valued='low'))
    def financial2_rule_250(self):
        self.declare(Fact(recommendation='DER menunjukkan tingkat hutang yang tinggi. ROA menunjukkan efisiensi rendah.'))


    @Rule(Fact(der_valued='high'), Fact(roe_valued='low'))
    def financial2_rule_251(self):
        self.declare(Fact(recommendation='DER menunjukkan tingkat hutang yang tinggi. ROE menunjukkan keuntungan yang rendah.'))


    @Rule(Fact(roa_valued='low'), Fact(roe_valued='low'))
    def financial2_rule_252(self):
        self.declare(Fact(recommendation='ROA menunjukkan efisiensi rendah. ROE menunjukkan keuntungan yang rendah.'))


    @Rule(Fact(underwriter_valued='good'), Fact(warrant_valued='good'))
    def financial2_rule_253(self):
        self.declare(Fact(recommendation='Underwriter berkualitas baik. Warrant menunjukkan kondisi baik.'))


    @Rule(Fact(underwriter_valued='good'), Fact(net_income_valued='profit'))
    def financial2_rule_254(self):
        self.declare(Fact(recommendation='Underwriter berkualitas baik. Laba bersih menunjukkan keuntungan.'))


    @Rule(Fact(underwriter_valued='good'), Fact(per_valued='low'))
    def financial2_rule_255(self):
        self.declare(Fact(recommendation='Underwriter berkualitas baik. PER berada di tingkat yang rendah.'))


    @Rule(Fact(underwriter_valued='good'), Fact(der_valued='low'))
    def financial2_rule_256(self):
        self.declare(Fact(recommendation='Underwriter berkualitas baik. DER menunjukkan tingkat hutang yang rendah.'))


    @Rule(Fact(underwriter_valued='good'), Fact(roa_valued='high'))
    def financial2_rule_257(self):
        self.declare(Fact(recommendation='Underwriter berkualitas baik. ROA menunjukkan efisiensi tinggi.'))


    @Rule(Fact(underwriter_valued='good'), Fact(roe_valued='high'))
    def financial2_rule_258(self):
        self.declare(Fact(recommendation='Underwriter berkualitas baik. ROE menunjukkan keuntungan yang tinggi.'))


    @Rule(Fact(warrant_valued='good'), Fact(net_income_valued='profit'))
    def financial2_rule_259(self):
        self.declare(Fact(recommendation='Warrant menunjukkan kondisi baik. Laba bersih menunjukkan keuntungan.'))


    @Rule(Fact(warrant_valued='good'), Fact(per_valued='low'))
    def financial2_rule_260(self):
        self.declare(Fact(recommendation='Warrant menunjukkan kondisi baik. PER berada di tingkat yang rendah.'))


    @Rule(Fact(warrant_valued='good'), Fact(der_valued='low'))
    def financial2_rule_261(self):
        self.declare(Fact(recommendation='Warrant menunjukkan kondisi baik. DER menunjukkan tingkat hutang yang rendah.'))


    @Rule(Fact(warrant_valued='good'), Fact(roa_valued='high'))
    def financial2_rule_262(self):
        self.declare(Fact(recommendation='Warrant menunjukkan kondisi baik. ROA menunjukkan efisiensi tinggi.'))


    @Rule(Fact(warrant_valued='good'), Fact(roe_valued='high'))
    def financial2_rule_263(self):
        self.declare(Fact(recommendation='Warrant menunjukkan kondisi baik. ROE menunjukkan keuntungan yang tinggi.'))


    @Rule(Fact(net_income_valued='profit'), Fact(per_valued='low'))
    def financial2_rule_264(self):
        self.declare(Fact(recommendation='Laba bersih menunjukkan keuntungan. PER berada di tingkat yang rendah.'))


    @Rule(Fact(net_income_valued='profit'), Fact(der_valued='low'))
    def financial2_rule_265(self):
        self.declare(Fact(recommendation='Laba bersih menunjukkan keuntungan. DER menunjukkan tingkat hutang yang rendah.'))


    @Rule(Fact(net_income_valued='profit'), Fact(roa_valued='high'))
    def financial2_rule_266(self):
        self.declare(Fact(recommendation='Laba bersih menunjukkan keuntungan. ROA menunjukkan efisiensi tinggi.'))


    @Rule(Fact(net_income_valued='profit'), Fact(roe_valued='high'))
    def financial2_rule_267(self):
        self.declare(Fact(recommendation='Laba bersih menunjukkan keuntungan. ROE menunjukkan keuntungan yang tinggi.'))


    @Rule(Fact(per_valued='low'), Fact(der_valued='low'))
    def financial2_rule_268(self):
        self.declare(Fact(recommendation='PER berada di tingkat yang rendah. DER menunjukkan tingkat hutang yang rendah.'))


    @Rule(Fact(per_valued='low'), Fact(roa_valued='high'))
    def financial2_rule_269(self):
        self.declare(Fact(recommendation='PER berada di tingkat yang rendah. ROA menunjukkan efisiensi tinggi.'))


    @Rule(Fact(per_valued='low'), Fact(roe_valued='high'))
    def financial2_rule_270(self):
        self.declare(Fact(recommendation='PER berada di tingkat yang rendah. ROE menunjukkan keuntungan yang tinggi.'))


    @Rule(Fact(der_valued='low'), Fact(roa_valued='high'))
    def financial2_rule_271(self):
        self.declare(Fact(recommendation='DER menunjukkan tingkat hutang yang rendah. ROA menunjukkan efisiensi tinggi.'))


    @Rule(Fact(der_valued='low'), Fact(roe_valued='high'))
    def financial2_rule_272(self):
        self.declare(Fact(recommendation='DER menunjukkan tingkat hutang yang rendah. ROE menunjukkan keuntungan yang tinggi.'))


    @Rule(Fact(roa_valued='high'), Fact(roe_valued='high'))
    def financial2_rule_273(self):
        self.declare(Fact(recommendation='ROA menunjukkan efisiensi tinggi. ROE menunjukkan keuntungan yang tinggi.'))


    @Rule(Fact(underwriter_valued='good'), Fact(warrant_valued='good'))
    def financial2_rule_274(self):
        self.declare(Fact(recommendation='Underwriter berkualitas baik. Warrant menunjukkan kondisi baik.'))


    @Rule(Fact(underwriter_valued='good'), Fact(net_income_valued='profit'))
    def financial2_rule_275(self):
        self.declare(Fact(recommendation='Underwriter berkualitas baik. Laba bersih menunjukkan keuntungan.'))


    @Rule(Fact(underwriter_valued='good'), Fact(per_valued='low'))
    def financial2_rule_276(self):
        self.declare(Fact(recommendation='Underwriter berkualitas baik. PER berada di tingkat yang rendah.'))


    @Rule(Fact(underwriter_valued='good'), Fact(der_valued='low'))
    def financial2_rule_277(self):
        self.declare(Fact(recommendation='Underwriter berkualitas baik. DER menunjukkan tingkat hutang yang rendah.'))


    @Rule(Fact(underwriter_valued='good'), Fact(roa_valued='high'))
    def financial2_rule_278(self):
        self.declare(Fact(recommendation='Underwriter berkualitas baik. ROA menunjukkan efisiensi tinggi.'))


    @Rule(Fact(underwriter_valued='good'), Fact(roe_valued='low'))
    def financial2_rule_279(self):
        self.declare(Fact(recommendation='Underwriter berkualitas baik. ROE menunjukkan keuntungan yang rendah.'))


    @Rule(Fact(warrant_valued='good'), Fact(net_income_valued='profit'))
    def financial2_rule_280(self):
        self.declare(Fact(recommendation='Warrant menunjukkan kondisi baik. Laba bersih menunjukkan keuntungan.'))


    @Rule(Fact(warrant_valued='good'), Fact(per_valued='low'))
    def financial2_rule_281(self):
        self.declare(Fact(recommendation='Warrant menunjukkan kondisi baik. PER berada di tingkat yang rendah.'))


    @Rule(Fact(warrant_valued='good'), Fact(der_valued='low'))
    def financial2_rule_282(self):
        self.declare(Fact(recommendation='Warrant menunjukkan kondisi baik. DER menunjukkan tingkat hutang yang rendah.'))


    @Rule(Fact(warrant_valued='good'), Fact(roa_valued='high'))
    def financial2_rule_283(self):
        self.declare(Fact(recommendation='Warrant menunjukkan kondisi baik. ROA menunjukkan efisiensi tinggi.'))


    @Rule(Fact(warrant_valued='good'), Fact(roe_valued='low'))
    def financial2_rule_284(self):
        self.declare(Fact(recommendation='Warrant menunjukkan kondisi baik. ROE menunjukkan keuntungan yang rendah.'))


    @Rule(Fact(net_income_valued='profit'), Fact(per_valued='low'))
    def financial2_rule_285(self):
        self.declare(Fact(recommendation='Laba bersih menunjukkan keuntungan. PER berada di tingkat yang rendah.'))


    @Rule(Fact(net_income_valued='profit'), Fact(der_valued='low'))
    def financial2_rule_286(self):
        self.declare(Fact(recommendation='Laba bersih menunjukkan keuntungan. DER menunjukkan tingkat hutang yang rendah.'))


    @Rule(Fact(net_income_valued='profit'), Fact(roa_valued='high'))
    def financial2_rule_287(self):
        self.declare(Fact(recommendation='Laba bersih menunjukkan keuntungan. ROA menunjukkan efisiensi tinggi.'))


    @Rule(Fact(net_income_valued='profit'), Fact(roe_valued='low'))
    def financial2_rule_288(self):
        self.declare(Fact(recommendation='Laba bersih menunjukkan keuntungan. ROE menunjukkan keuntungan yang rendah.'))


    @Rule(Fact(per_valued='low'), Fact(der_valued='low'))
    def financial2_rule_289(self):
        self.declare(Fact(recommendation='PER berada di tingkat yang rendah. DER menunjukkan tingkat hutang yang rendah.'))


    @Rule(Fact(per_valued='low'), Fact(roa_valued='high'))
    def financial2_rule_290(self):
        self.declare(Fact(recommendation='PER berada di tingkat yang rendah. ROA menunjukkan efisiensi tinggi.'))


    @Rule(Fact(per_valued='low'), Fact(roe_valued='low'))
    def financial2_rule_291(self):
        self.declare(Fact(recommendation='PER berada di tingkat yang rendah. ROE menunjukkan keuntungan yang rendah.'))


    @Rule(Fact(der_valued='low'), Fact(roa_valued='high'))
    def financial2_rule_292(self):
        self.declare(Fact(recommendation='DER menunjukkan tingkat hutang yang rendah. ROA menunjukkan efisiensi tinggi.'))


    @Rule(Fact(der_valued='low'), Fact(roe_valued='low'))
    def financial2_rule_293(self):
        self.declare(Fact(recommendation='DER menunjukkan tingkat hutang yang rendah. ROE menunjukkan keuntungan yang rendah.'))


    @Rule(Fact(roa_valued='high'), Fact(roe_valued='low'))
    def financial2_rule_294(self):
        self.declare(Fact(recommendation='ROA menunjukkan efisiensi tinggi. ROE menunjukkan keuntungan yang rendah.'))


    @Rule(Fact(underwriter_valued='good'), Fact(warrant_valued='good'))
    def financial2_rule_295(self):
        self.declare(Fact(recommendation='Underwriter berkualitas baik. Warrant menunjukkan kondisi baik.'))


    @Rule(Fact(underwriter_valued='good'), Fact(net_income_valued='profit'))
    def financial2_rule_296(self):
        self.declare(Fact(recommendation='Underwriter berkualitas baik. Laba bersih menunjukkan keuntungan.'))


    @Rule(Fact(underwriter_valued='good'), Fact(per_valued='low'))
    def financial2_rule_297(self):
        self.declare(Fact(recommendation='Underwriter berkualitas baik. PER berada di tingkat yang rendah.'))


    @Rule(Fact(underwriter_valued='good'), Fact(der_valued='low'))
    def financial2_rule_298(self):
        self.declare(Fact(recommendation='Underwriter berkualitas baik. DER menunjukkan tingkat hutang yang rendah.'))


    @Rule(Fact(underwriter_valued='good'), Fact(roa_valued='low'))
    def financial2_rule_299(self):
        self.declare(Fact(recommendation='Underwriter berkualitas baik. ROA menunjukkan efisiensi rendah.'))


    @Rule(Fact(underwriter_valued='good'), Fact(roe_valued='high'))
    def financial2_rule_300(self):
        self.declare(Fact(recommendation='Underwriter berkualitas baik. ROE menunjukkan keuntungan yang tinggi.'))


    @Rule(Fact(warrant_valued='good'), Fact(net_income_valued='profit'))
    def financial2_rule_301(self):
        self.declare(Fact(recommendation='Warrant menunjukkan kondisi baik. Laba bersih menunjukkan keuntungan.'))


    @Rule(Fact(warrant_valued='good'), Fact(per_valued='low'))
    def financial2_rule_302(self):
        self.declare(Fact(recommendation='Warrant menunjukkan kondisi baik. PER berada di tingkat yang rendah.'))


    @Rule(Fact(warrant_valued='good'), Fact(der_valued='low'))
    def financial2_rule_303(self):
        self.declare(Fact(recommendation='Warrant menunjukkan kondisi baik. DER menunjukkan tingkat hutang yang rendah.'))


    @Rule(Fact(warrant_valued='good'), Fact(roa_valued='low'))
    def financial2_rule_304(self):
        self.declare(Fact(recommendation='Warrant menunjukkan kondisi baik. ROA menunjukkan efisiensi rendah.'))


    @Rule(Fact(warrant_valued='good'), Fact(roe_valued='high'))
    def financial2_rule_305(self):
        self.declare(Fact(recommendation='Warrant menunjukkan kondisi baik. ROE menunjukkan keuntungan yang tinggi.'))


    @Rule(Fact(net_income_valued='profit'), Fact(per_valued='low'))
    def financial2_rule_306(self):
        self.declare(Fact(recommendation='Laba bersih menunjukkan keuntungan. PER berada di tingkat yang rendah.'))


    @Rule(Fact(net_income_valued='profit'), Fact(der_valued='low'))
    def financial2_rule_307(self):
        self.declare(Fact(recommendation='Laba bersih menunjukkan keuntungan. DER menunjukkan tingkat hutang yang rendah.'))


    @Rule(Fact(net_income_valued='profit'), Fact(roa_valued='low'))
    def financial2_rule_308(self):
        self.declare(Fact(recommendation='Laba bersih menunjukkan keuntungan. ROA menunjukkan efisiensi rendah.'))


    @Rule(Fact(net_income_valued='profit'), Fact(roe_valued='high'))
    def financial2_rule_309(self):
        self.declare(Fact(recommendation='Laba bersih menunjukkan keuntungan. ROE menunjukkan keuntungan yang tinggi.'))


    @Rule(Fact(per_valued='low'), Fact(der_valued='low'))
    def financial2_rule_310(self):
        self.declare(Fact(recommendation='PER berada di tingkat yang rendah. DER menunjukkan tingkat hutang yang rendah.'))


    @Rule(Fact(per_valued='low'), Fact(roa_valued='low'))
    def financial2_rule_311(self):
        self.declare(Fact(recommendation='PER berada di tingkat yang rendah. ROA menunjukkan efisiensi rendah.'))


    @Rule(Fact(per_valued='low'), Fact(roe_valued='high'))
    def financial2_rule_312(self):
        self.declare(Fact(recommendation='PER berada di tingkat yang rendah. ROE menunjukkan keuntungan yang tinggi.'))


    @Rule(Fact(der_valued='low'), Fact(roa_valued='low'))
    def financial2_rule_313(self):
        self.declare(Fact(recommendation='DER menunjukkan tingkat hutang yang rendah. ROA menunjukkan efisiensi rendah.'))


    @Rule(Fact(der_valued='low'), Fact(roe_valued='high'))
    def financial2_rule_314(self):
        self.declare(Fact(recommendation='DER menunjukkan tingkat hutang yang rendah. ROE menunjukkan keuntungan yang tinggi.'))


    @Rule(Fact(roa_valued='low'), Fact(roe_valued='high'))
    def financial2_rule_315(self):
        self.declare(Fact(recommendation='ROA menunjukkan efisiensi rendah. ROE menunjukkan keuntungan yang tinggi.'))


    @Rule(Fact(underwriter_valued='good'), Fact(warrant_valued='good'))
    def financial2_rule_316(self):
        self.declare(Fact(recommendation='Underwriter berkualitas baik. Warrant menunjukkan kondisi baik.'))


    @Rule(Fact(underwriter_valued='good'), Fact(net_income_valued='profit'))
    def financial2_rule_317(self):
        self.declare(Fact(recommendation='Underwriter berkualitas baik. Laba bersih menunjukkan keuntungan.'))


    @Rule(Fact(underwriter_valued='good'), Fact(per_valued='low'))
    def financial2_rule_318(self):
        self.declare(Fact(recommendation='Underwriter berkualitas baik. PER berada di tingkat yang rendah.'))


    @Rule(Fact(underwriter_valued='good'), Fact(der_valued='low'))
    def financial2_rule_319(self):
        self.declare(Fact(recommendation='Underwriter berkualitas baik. DER menunjukkan tingkat hutang yang rendah.'))


    @Rule(Fact(underwriter_valued='good'), Fact(roa_valued='low'))
    def financial2_rule_320(self):
        self.declare(Fact(recommendation='Underwriter berkualitas baik. ROA menunjukkan efisiensi rendah.'))


    @Rule(Fact(underwriter_valued='good'), Fact(roe_valued='low'))
    def financial2_rule_321(self):
        self.declare(Fact(recommendation='Underwriter berkualitas baik. ROE menunjukkan keuntungan yang rendah.'))


    @Rule(Fact(warrant_valued='good'), Fact(net_income_valued='profit'))
    def financial2_rule_322(self):
        self.declare(Fact(recommendation='Warrant menunjukkan kondisi baik. Laba bersih menunjukkan keuntungan.'))


    @Rule(Fact(warrant_valued='good'), Fact(per_valued='low'))
    def financial2_rule_323(self):
        self.declare(Fact(recommendation='Warrant menunjukkan kondisi baik. PER berada di tingkat yang rendah.'))


    @Rule(Fact(warrant_valued='good'), Fact(der_valued='low'))
    def financial2_rule_324(self):
        self.declare(Fact(recommendation='Warrant menunjukkan kondisi baik. DER menunjukkan tingkat hutang yang rendah.'))


    @Rule(Fact(warrant_valued='good'), Fact(roa_valued='low'))
    def financial2_rule_325(self):
        self.declare(Fact(recommendation='Warrant menunjukkan kondisi baik. ROA menunjukkan efisiensi rendah.'))


    @Rule(Fact(warrant_valued='good'), Fact(roe_valued='low'))
    def financial2_rule_326(self):
        self.declare(Fact(recommendation='Warrant menunjukkan kondisi baik. ROE menunjukkan keuntungan yang rendah.'))


    @Rule(Fact(net_income_valued='profit'), Fact(per_valued='low'))
    def financial2_rule_327(self):
        self.declare(Fact(recommendation='Laba bersih menunjukkan keuntungan. PER berada di tingkat yang rendah.'))


    @Rule(Fact(net_income_valued='profit'), Fact(der_valued='low'))
    def financial2_rule_328(self):
        self.declare(Fact(recommendation='Laba bersih menunjukkan keuntungan. DER menunjukkan tingkat hutang yang rendah.'))


    @Rule(Fact(net_income_valued='profit'), Fact(roa_valued='low'))
    def financial2_rule_329(self):
        self.declare(Fact(recommendation='Laba bersih menunjukkan keuntungan. ROA menunjukkan efisiensi rendah.'))


    @Rule(Fact(net_income_valued='profit'), Fact(roe_valued='low'))
    def financial2_rule_330(self):
        self.declare(Fact(recommendation='Laba bersih menunjukkan keuntungan. ROE menunjukkan keuntungan yang rendah.'))


    @Rule(Fact(per_valued='low'), Fact(der_valued='low'))
    def financial2_rule_331(self):
        self.declare(Fact(recommendation='PER berada di tingkat yang rendah. DER menunjukkan tingkat hutang yang rendah.'))


    @Rule(Fact(per_valued='low'), Fact(roa_valued='low'))
    def financial2_rule_332(self):
        self.declare(Fact(recommendation='PER berada di tingkat yang rendah. ROA menunjukkan efisiensi rendah.'))


    @Rule(Fact(per_valued='low'), Fact(roe_valued='low'))
    def financial2_rule_333(self):
        self.declare(Fact(recommendation='PER berada di tingkat yang rendah. ROE menunjukkan keuntungan yang rendah.'))


    @Rule(Fact(der_valued='low'), Fact(roa_valued='low'))
    def financial2_rule_334(self):
        self.declare(Fact(recommendation='DER menunjukkan tingkat hutang yang rendah. ROA menunjukkan efisiensi rendah.'))


    @Rule(Fact(der_valued='low'), Fact(roe_valued='low'))
    def financial2_rule_335(self):
        self.declare(Fact(recommendation='DER menunjukkan tingkat hutang yang rendah. ROE menunjukkan keuntungan yang rendah.'))


    @Rule(Fact(roa_valued='low'), Fact(roe_valued='low'))
    def financial2_rule_336(self):
        self.declare(Fact(recommendation='ROA menunjukkan efisiensi rendah. ROE menunjukkan keuntungan yang rendah.'))


    @Rule(Fact(underwriter_valued='good'), Fact(warrant_valued='good'))
    def financial2_rule_337(self):
        self.declare(Fact(recommendation='Underwriter berkualitas baik. Warrant menunjukkan kondisi baik.'))


    @Rule(Fact(underwriter_valued='good'), Fact(net_income_valued='loss'))
    def financial2_rule_338(self):
        self.declare(Fact(recommendation='Underwriter berkualitas baik. Laba bersih menunjukkan kerugian.'))


    @Rule(Fact(underwriter_valued='good'), Fact(per_valued='high'))
    def financial2_rule_339(self):
        self.declare(Fact(recommendation='Underwriter berkualitas baik. PER berada di tingkat yang tinggi.'))


    @Rule(Fact(underwriter_valued='good'), Fact(der_valued='high'))
    def financial2_rule_340(self):
        self.declare(Fact(recommendation='Underwriter berkualitas baik. DER menunjukkan tingkat hutang yang tinggi.'))


    @Rule(Fact(underwriter_valued='good'), Fact(roa_valued='high'))
    def financial2_rule_341(self):
        self.declare(Fact(recommendation='Underwriter berkualitas baik. ROA menunjukkan efisiensi tinggi.'))


    @Rule(Fact(underwriter_valued='good'), Fact(roe_valued='high'))
    def financial2_rule_342(self):
        self.declare(Fact(recommendation='Underwriter berkualitas baik. ROE menunjukkan keuntungan yang tinggi.'))


    @Rule(Fact(warrant_valued='good'), Fact(net_income_valued='loss'))
    def financial2_rule_343(self):
        self.declare(Fact(recommendation='Warrant menunjukkan kondisi baik. Laba bersih menunjukkan kerugian.'))


    @Rule(Fact(warrant_valued='good'), Fact(per_valued='high'))
    def financial2_rule_344(self):
        self.declare(Fact(recommendation='Warrant menunjukkan kondisi baik. PER berada di tingkat yang tinggi.'))


    @Rule(Fact(warrant_valued='good'), Fact(der_valued='high'))
    def financial2_rule_345(self):
        self.declare(Fact(recommendation='Warrant menunjukkan kondisi baik. DER menunjukkan tingkat hutang yang tinggi.'))


    @Rule(Fact(warrant_valued='good'), Fact(roa_valued='high'))
    def financial2_rule_346(self):
        self.declare(Fact(recommendation='Warrant menunjukkan kondisi baik. ROA menunjukkan efisiensi tinggi.'))


    @Rule(Fact(warrant_valued='good'), Fact(roe_valued='high'))
    def financial2_rule_347(self):
        self.declare(Fact(recommendation='Warrant menunjukkan kondisi baik. ROE menunjukkan keuntungan yang tinggi.'))


    @Rule(Fact(net_income_valued='loss'), Fact(per_valued='high'))
    def financial2_rule_348(self):
        self.declare(Fact(recommendation='Laba bersih menunjukkan kerugian. PER berada di tingkat yang tinggi.'))


    @Rule(Fact(net_income_valued='loss'), Fact(der_valued='high'))
    def financial2_rule_349(self):
        self.declare(Fact(recommendation='Laba bersih menunjukkan kerugian. DER menunjukkan tingkat hutang yang tinggi.'))


    @Rule(Fact(net_income_valued='loss'), Fact(roa_valued='high'))
    def financial2_rule_350(self):
        self.declare(Fact(recommendation='Laba bersih menunjukkan kerugian. ROA menunjukkan efisiensi tinggi.'))


    @Rule(Fact(net_income_valued='loss'), Fact(roe_valued='high'))
    def financial2_rule_351(self):
        self.declare(Fact(recommendation='Laba bersih menunjukkan kerugian. ROE menunjukkan keuntungan yang tinggi.'))


    @Rule(Fact(per_valued='high'), Fact(der_valued='high'))
    def financial2_rule_352(self):
        self.declare(Fact(recommendation='PER berada di tingkat yang tinggi. DER menunjukkan tingkat hutang yang tinggi.'))


    @Rule(Fact(per_valued='high'), Fact(roa_valued='high'))
    def financial2_rule_353(self):
        self.declare(Fact(recommendation='PER berada di tingkat yang tinggi. ROA menunjukkan efisiensi tinggi.'))


    @Rule(Fact(per_valued='high'), Fact(roe_valued='high'))
    def financial2_rule_354(self):
        self.declare(Fact(recommendation='PER berada di tingkat yang tinggi. ROE menunjukkan keuntungan yang tinggi.'))


    @Rule(Fact(der_valued='high'), Fact(roa_valued='high'))
    def financial2_rule_355(self):
        self.declare(Fact(recommendation='DER menunjukkan tingkat hutang yang tinggi. ROA menunjukkan efisiensi tinggi.'))


    @Rule(Fact(der_valued='high'), Fact(roe_valued='high'))
    def financial2_rule_356(self):
        self.declare(Fact(recommendation='DER menunjukkan tingkat hutang yang tinggi. ROE menunjukkan keuntungan yang tinggi.'))


    @Rule(Fact(roa_valued='high'), Fact(roe_valued='high'))
    def financial2_rule_357(self):
        self.declare(Fact(recommendation='ROA menunjukkan efisiensi tinggi. ROE menunjukkan keuntungan yang tinggi.'))


    @Rule(Fact(underwriter_valued='good'), Fact(warrant_valued='good'))
    def financial2_rule_358(self):
        self.declare(Fact(recommendation='Underwriter berkualitas baik. Warrant menunjukkan kondisi baik.'))


    @Rule(Fact(underwriter_valued='good'), Fact(net_income_valued='loss'))
    def financial2_rule_359(self):
        self.declare(Fact(recommendation='Underwriter berkualitas baik. Laba bersih menunjukkan kerugian.'))


    @Rule(Fact(underwriter_valued='good'), Fact(per_valued='high'))
    def financial2_rule_360(self):
        self.declare(Fact(recommendation='Underwriter berkualitas baik. PER berada di tingkat yang tinggi.'))


    @Rule(Fact(underwriter_valued='good'), Fact(der_valued='high'))
    def financial2_rule_361(self):
        self.declare(Fact(recommendation='Underwriter berkualitas baik. DER menunjukkan tingkat hutang yang tinggi.'))


    @Rule(Fact(underwriter_valued='good'), Fact(roa_valued='high'))
    def financial2_rule_362(self):
        self.declare(Fact(recommendation='Underwriter berkualitas baik. ROA menunjukkan efisiensi tinggi.'))


    @Rule(Fact(underwriter_valued='good'), Fact(roe_valued='low'))
    def financial2_rule_363(self):
        self.declare(Fact(recommendation='Underwriter berkualitas baik. ROE menunjukkan keuntungan yang rendah.'))


    @Rule(Fact(warrant_valued='good'), Fact(net_income_valued='loss'))
    def financial2_rule_364(self):
        self.declare(Fact(recommendation='Warrant menunjukkan kondisi baik. Laba bersih menunjukkan kerugian.'))


    @Rule(Fact(warrant_valued='good'), Fact(per_valued='high'))
    def financial2_rule_365(self):
        self.declare(Fact(recommendation='Warrant menunjukkan kondisi baik. PER berada di tingkat yang tinggi.'))


    @Rule(Fact(warrant_valued='good'), Fact(der_valued='high'))
    def financial2_rule_366(self):
        self.declare(Fact(recommendation='Warrant menunjukkan kondisi baik. DER menunjukkan tingkat hutang yang tinggi.'))


    @Rule(Fact(warrant_valued='good'), Fact(roa_valued='high'))
    def financial2_rule_367(self):
        self.declare(Fact(recommendation='Warrant menunjukkan kondisi baik. ROA menunjukkan efisiensi tinggi.'))


    @Rule(Fact(warrant_valued='good'), Fact(roe_valued='low'))
    def financial2_rule_368(self):
        self.declare(Fact(recommendation='Warrant menunjukkan kondisi baik. ROE menunjukkan keuntungan yang rendah.'))


    @Rule(Fact(net_income_valued='loss'), Fact(per_valued='high'))
    def financial2_rule_369(self):
        self.declare(Fact(recommendation='Laba bersih menunjukkan kerugian. PER berada di tingkat yang tinggi.'))


    @Rule(Fact(net_income_valued='loss'), Fact(der_valued='high'))
    def financial2_rule_370(self):
        self.declare(Fact(recommendation='Laba bersih menunjukkan kerugian. DER menunjukkan tingkat hutang yang tinggi.'))


    @Rule(Fact(net_income_valued='loss'), Fact(roa_valued='high'))
    def financial2_rule_371(self):
        self.declare(Fact(recommendation='Laba bersih menunjukkan kerugian. ROA menunjukkan efisiensi tinggi.'))


    @Rule(Fact(net_income_valued='loss'), Fact(roe_valued='low'))
    def financial2_rule_372(self):
        self.declare(Fact(recommendation='Laba bersih menunjukkan kerugian. ROE menunjukkan keuntungan yang rendah.'))


    @Rule(Fact(per_valued='high'), Fact(der_valued='high'))
    def financial2_rule_373(self):
        self.declare(Fact(recommendation='PER berada di tingkat yang tinggi. DER menunjukkan tingkat hutang yang tinggi.'))


    @Rule(Fact(per_valued='high'), Fact(roa_valued='high'))
    def financial2_rule_374(self):
        self.declare(Fact(recommendation='PER berada di tingkat yang tinggi. ROA menunjukkan efisiensi tinggi.'))


    @Rule(Fact(per_valued='high'), Fact(roe_valued='low'))
    def financial2_rule_375(self):
        self.declare(Fact(recommendation='PER berada di tingkat yang tinggi. ROE menunjukkan keuntungan yang rendah.'))


    @Rule(Fact(der_valued='high'), Fact(roa_valued='high'))
    def financial2_rule_376(self):
        self.declare(Fact(recommendation='DER menunjukkan tingkat hutang yang tinggi. ROA menunjukkan efisiensi tinggi.'))


    @Rule(Fact(der_valued='high'), Fact(roe_valued='low'))
    def financial2_rule_377(self):
        self.declare(Fact(recommendation='DER menunjukkan tingkat hutang yang tinggi. ROE menunjukkan keuntungan yang rendah.'))


    @Rule(Fact(roa_valued='high'), Fact(roe_valued='low'))
    def financial2_rule_378(self):
        self.declare(Fact(recommendation='ROA menunjukkan efisiensi tinggi. ROE menunjukkan keuntungan yang rendah.'))


    @Rule(Fact(underwriter_valued='good'), Fact(warrant_valued='good'))
    def financial2_rule_379(self):
        self.declare(Fact(recommendation='Underwriter berkualitas baik. Warrant menunjukkan kondisi baik.'))


    @Rule(Fact(underwriter_valued='good'), Fact(net_income_valued='loss'))
    def financial2_rule_380(self):
        self.declare(Fact(recommendation='Underwriter berkualitas baik. Laba bersih menunjukkan kerugian.'))


    @Rule(Fact(underwriter_valued='good'), Fact(per_valued='high'))
    def financial2_rule_381(self):
        self.declare(Fact(recommendation='Underwriter berkualitas baik. PER berada di tingkat yang tinggi.'))


    @Rule(Fact(underwriter_valued='good'), Fact(der_valued='high'))
    def financial2_rule_382(self):
        self.declare(Fact(recommendation='Underwriter berkualitas baik. DER menunjukkan tingkat hutang yang tinggi.'))


    @Rule(Fact(underwriter_valued='good'), Fact(roa_valued='low'))
    def financial2_rule_383(self):
        self.declare(Fact(recommendation='Underwriter berkualitas baik. ROA menunjukkan efisiensi rendah.'))


    @Rule(Fact(underwriter_valued='good'), Fact(roe_valued='high'))
    def financial2_rule_384(self):
        self.declare(Fact(recommendation='Underwriter berkualitas baik. ROE menunjukkan keuntungan yang tinggi.'))


    @Rule(Fact(warrant_valued='good'), Fact(net_income_valued='loss'))
    def financial2_rule_385(self):
        self.declare(Fact(recommendation='Warrant menunjukkan kondisi baik. Laba bersih menunjukkan kerugian.'))


    @Rule(Fact(warrant_valued='good'), Fact(per_valued='high'))
    def financial2_rule_386(self):
        self.declare(Fact(recommendation='Warrant menunjukkan kondisi baik. PER berada di tingkat yang tinggi.'))


    @Rule(Fact(warrant_valued='good'), Fact(der_valued='high'))
    def financial2_rule_387(self):
        self.declare(Fact(recommendation='Warrant menunjukkan kondisi baik. DER menunjukkan tingkat hutang yang tinggi.'))


    @Rule(Fact(warrant_valued='good'), Fact(roa_valued='low'))
    def financial2_rule_388(self):
        self.declare(Fact(recommendation='Warrant menunjukkan kondisi baik. ROA menunjukkan efisiensi rendah.'))


    @Rule(Fact(warrant_valued='good'), Fact(roe_valued='high'))
    def financial2_rule_389(self):
        self.declare(Fact(recommendation='Warrant menunjukkan kondisi baik. ROE menunjukkan keuntungan yang tinggi.'))


    @Rule(Fact(net_income_valued='loss'), Fact(per_valued='high'))
    def financial2_rule_390(self):
        self.declare(Fact(recommendation='Laba bersih menunjukkan kerugian. PER berada di tingkat yang tinggi.'))


    @Rule(Fact(net_income_valued='loss'), Fact(der_valued='high'))
    def financial2_rule_391(self):
        self.declare(Fact(recommendation='Laba bersih menunjukkan kerugian. DER menunjukkan tingkat hutang yang tinggi.'))


    @Rule(Fact(net_income_valued='loss'), Fact(roa_valued='low'))
    def financial2_rule_392(self):
        self.declare(Fact(recommendation='Laba bersih menunjukkan kerugian. ROA menunjukkan efisiensi rendah.'))


    @Rule(Fact(net_income_valued='loss'), Fact(roe_valued='high'))
    def financial2_rule_393(self):
        self.declare(Fact(recommendation='Laba bersih menunjukkan kerugian. ROE menunjukkan keuntungan yang tinggi.'))


    @Rule(Fact(per_valued='high'), Fact(der_valued='high'))
    def financial2_rule_394(self):
        self.declare(Fact(recommendation='PER berada di tingkat yang tinggi. DER menunjukkan tingkat hutang yang tinggi.'))


    @Rule(Fact(per_valued='high'), Fact(roa_valued='low'))
    def financial2_rule_395(self):
        self.declare(Fact(recommendation='PER berada di tingkat yang tinggi. ROA menunjukkan efisiensi rendah.'))


    @Rule(Fact(per_valued='high'), Fact(roe_valued='high'))
    def financial2_rule_396(self):
        self.declare(Fact(recommendation='PER berada di tingkat yang tinggi. ROE menunjukkan keuntungan yang tinggi.'))


    @Rule(Fact(der_valued='high'), Fact(roa_valued='low'))
    def financial2_rule_397(self):
        self.declare(Fact(recommendation='DER menunjukkan tingkat hutang yang tinggi. ROA menunjukkan efisiensi rendah.'))


    @Rule(Fact(der_valued='high'), Fact(roe_valued='high'))
    def financial2_rule_398(self):
        self.declare(Fact(recommendation='DER menunjukkan tingkat hutang yang tinggi. ROE menunjukkan keuntungan yang tinggi.'))


    @Rule(Fact(roa_valued='low'), Fact(roe_valued='high'))
    def financial2_rule_399(self):
        self.declare(Fact(recommendation='ROA menunjukkan efisiensi rendah. ROE menunjukkan keuntungan yang tinggi.'))


    @Rule(Fact(underwriter_valued='good'), Fact(warrant_valued='good'))
    def financial2_rule_400(self):
        self.declare(Fact(recommendation='Underwriter berkualitas baik. Warrant menunjukkan kondisi baik.'))


    @Rule(Fact(underwriter_valued='good'), Fact(net_income_valued='loss'))
    def financial2_rule_401(self):
        self.declare(Fact(recommendation='Underwriter berkualitas baik. Laba bersih menunjukkan kerugian.'))


    @Rule(Fact(underwriter_valued='good'), Fact(per_valued='high'))
    def financial2_rule_402(self):
        self.declare(Fact(recommendation='Underwriter berkualitas baik. PER berada di tingkat yang tinggi.'))


    @Rule(Fact(underwriter_valued='good'), Fact(der_valued='high'))
    def financial2_rule_403(self):
        self.declare(Fact(recommendation='Underwriter berkualitas baik. DER menunjukkan tingkat hutang yang tinggi.'))


    @Rule(Fact(underwriter_valued='good'), Fact(roa_valued='low'))
    def financial2_rule_404(self):
        self.declare(Fact(recommendation='Underwriter berkualitas baik. ROA menunjukkan efisiensi rendah.'))


    @Rule(Fact(underwriter_valued='good'), Fact(roe_valued='low'))
    def financial2_rule_405(self):
        self.declare(Fact(recommendation='Underwriter berkualitas baik. ROE menunjukkan keuntungan yang rendah.'))


    @Rule(Fact(warrant_valued='good'), Fact(net_income_valued='loss'))
    def financial2_rule_406(self):
        self.declare(Fact(recommendation='Warrant menunjukkan kondisi baik. Laba bersih menunjukkan kerugian.'))


    @Rule(Fact(warrant_valued='good'), Fact(per_valued='high'))
    def financial2_rule_407(self):
        self.declare(Fact(recommendation='Warrant menunjukkan kondisi baik. PER berada di tingkat yang tinggi.'))


    @Rule(Fact(warrant_valued='good'), Fact(der_valued='high'))
    def financial2_rule_408(self):
        self.declare(Fact(recommendation='Warrant menunjukkan kondisi baik. DER menunjukkan tingkat hutang yang tinggi.'))


    @Rule(Fact(warrant_valued='good'), Fact(roa_valued='low'))
    def financial2_rule_409(self):
        self.declare(Fact(recommendation='Warrant menunjukkan kondisi baik. ROA menunjukkan efisiensi rendah.'))


    @Rule(Fact(warrant_valued='good'), Fact(roe_valued='low'))
    def financial2_rule_410(self):
        self.declare(Fact(recommendation='Warrant menunjukkan kondisi baik. ROE menunjukkan keuntungan yang rendah.'))


    @Rule(Fact(net_income_valued='loss'), Fact(per_valued='high'))
    def financial2_rule_411(self):
        self.declare(Fact(recommendation='Laba bersih menunjukkan kerugian. PER berada di tingkat yang tinggi.'))


    @Rule(Fact(net_income_valued='loss'), Fact(der_valued='high'))
    def financial2_rule_412(self):
        self.declare(Fact(recommendation='Laba bersih menunjukkan kerugian. DER menunjukkan tingkat hutang yang tinggi.'))


    @Rule(Fact(net_income_valued='loss'), Fact(roa_valued='low'))
    def financial2_rule_413(self):
        self.declare(Fact(recommendation='Laba bersih menunjukkan kerugian. ROA menunjukkan efisiensi rendah.'))


    @Rule(Fact(net_income_valued='loss'), Fact(roe_valued='low'))
    def financial2_rule_414(self):
        self.declare(Fact(recommendation='Laba bersih menunjukkan kerugian. ROE menunjukkan keuntungan yang rendah.'))


    @Rule(Fact(per_valued='high'), Fact(der_valued='high'))
    def financial2_rule_415(self):
        self.declare(Fact(recommendation='PER berada di tingkat yang tinggi. DER menunjukkan tingkat hutang yang tinggi.'))


    @Rule(Fact(per_valued='high'), Fact(roa_valued='low'))
    def financial2_rule_416(self):
        self.declare(Fact(recommendation='PER berada di tingkat yang tinggi. ROA menunjukkan efisiensi rendah.'))


    @Rule(Fact(per_valued='high'), Fact(roe_valued='low'))
    def financial2_rule_417(self):
        self.declare(Fact(recommendation='PER berada di tingkat yang tinggi. ROE menunjukkan keuntungan yang rendah.'))


    @Rule(Fact(der_valued='high'), Fact(roa_valued='low'))
    def financial2_rule_418(self):
        self.declare(Fact(recommendation='DER menunjukkan tingkat hutang yang tinggi. ROA menunjukkan efisiensi rendah.'))


    @Rule(Fact(der_valued='high'), Fact(roe_valued='low'))
    def financial2_rule_419(self):
        self.declare(Fact(recommendation='DER menunjukkan tingkat hutang yang tinggi. ROE menunjukkan keuntungan yang rendah.'))


    @Rule(Fact(roa_valued='low'), Fact(roe_valued='low'))
    def financial2_rule_420(self):
        self.declare(Fact(recommendation='ROA menunjukkan efisiensi rendah. ROE menunjukkan keuntungan yang rendah.'))


    @Rule(Fact(underwriter_valued='good'), Fact(warrant_valued='good'))
    def financial2_rule_421(self):
        self.declare(Fact(recommendation='Underwriter berkualitas baik. Warrant menunjukkan kondisi baik.'))


    @Rule(Fact(underwriter_valued='good'), Fact(net_income_valued='loss'))
    def financial2_rule_422(self):
        self.declare(Fact(recommendation='Underwriter berkualitas baik. Laba bersih menunjukkan kerugian.'))


    @Rule(Fact(underwriter_valued='good'), Fact(per_valued='high'))
    def financial2_rule_423(self):
        self.declare(Fact(recommendation='Underwriter berkualitas baik. PER berada di tingkat yang tinggi.'))


    @Rule(Fact(underwriter_valued='good'), Fact(der_valued='low'))
    def financial2_rule_424(self):
        self.declare(Fact(recommendation='Underwriter berkualitas baik. DER menunjukkan tingkat hutang yang rendah.'))


    @Rule(Fact(underwriter_valued='good'), Fact(roa_valued='high'))
    def financial2_rule_425(self):
        self.declare(Fact(recommendation='Underwriter berkualitas baik. ROA menunjukkan efisiensi tinggi.'))


    @Rule(Fact(underwriter_valued='good'), Fact(roe_valued='high'))
    def financial2_rule_426(self):
        self.declare(Fact(recommendation='Underwriter berkualitas baik. ROE menunjukkan keuntungan yang tinggi.'))


    @Rule(Fact(warrant_valued='good'), Fact(net_income_valued='loss'))
    def financial2_rule_427(self):
        self.declare(Fact(recommendation='Warrant menunjukkan kondisi baik. Laba bersih menunjukkan kerugian.'))


    @Rule(Fact(warrant_valued='good'), Fact(per_valued='high'))
    def financial2_rule_428(self):
        self.declare(Fact(recommendation='Warrant menunjukkan kondisi baik. PER berada di tingkat yang tinggi.'))


    @Rule(Fact(warrant_valued='good'), Fact(der_valued='low'))
    def financial2_rule_429(self):
        self.declare(Fact(recommendation='Warrant menunjukkan kondisi baik. DER menunjukkan tingkat hutang yang rendah.'))


    @Rule(Fact(warrant_valued='good'), Fact(roa_valued='high'))
    def financial2_rule_430(self):
        self.declare(Fact(recommendation='Warrant menunjukkan kondisi baik. ROA menunjukkan efisiensi tinggi.'))


    @Rule(Fact(warrant_valued='good'), Fact(roe_valued='high'))
    def financial2_rule_431(self):
        self.declare(Fact(recommendation='Warrant menunjukkan kondisi baik. ROE menunjukkan keuntungan yang tinggi.'))


    @Rule(Fact(net_income_valued='loss'), Fact(per_valued='high'))
    def financial2_rule_432(self):
        self.declare(Fact(recommendation='Laba bersih menunjukkan kerugian. PER berada di tingkat yang tinggi.'))


    @Rule(Fact(net_income_valued='loss'), Fact(der_valued='low'))
    def financial2_rule_433(self):
        self.declare(Fact(recommendation='Laba bersih menunjukkan kerugian. DER menunjukkan tingkat hutang yang rendah.'))


    @Rule(Fact(net_income_valued='loss'), Fact(roa_valued='high'))
    def financial2_rule_434(self):
        self.declare(Fact(recommendation='Laba bersih menunjukkan kerugian. ROA menunjukkan efisiensi tinggi.'))


    @Rule(Fact(net_income_valued='loss'), Fact(roe_valued='high'))
    def financial2_rule_435(self):
        self.declare(Fact(recommendation='Laba bersih menunjukkan kerugian. ROE menunjukkan keuntungan yang tinggi.'))


    @Rule(Fact(per_valued='high'), Fact(der_valued='low'))
    def financial2_rule_436(self):
        self.declare(Fact(recommendation='PER berada di tingkat yang tinggi. DER menunjukkan tingkat hutang yang rendah.'))


    @Rule(Fact(per_valued='high'), Fact(roa_valued='high'))
    def financial2_rule_437(self):
        self.declare(Fact(recommendation='PER berada di tingkat yang tinggi. ROA menunjukkan efisiensi tinggi.'))


    @Rule(Fact(per_valued='high'), Fact(roe_valued='high'))
    def financial2_rule_438(self):
        self.declare(Fact(recommendation='PER berada di tingkat yang tinggi. ROE menunjukkan keuntungan yang tinggi.'))


    @Rule(Fact(der_valued='low'), Fact(roa_valued='high'))
    def financial2_rule_439(self):
        self.declare(Fact(recommendation='DER menunjukkan tingkat hutang yang rendah. ROA menunjukkan efisiensi tinggi.'))


    @Rule(Fact(der_valued='low'), Fact(roe_valued='high'))
    def financial2_rule_440(self):
        self.declare(Fact(recommendation='DER menunjukkan tingkat hutang yang rendah. ROE menunjukkan keuntungan yang tinggi.'))


    @Rule(Fact(roa_valued='high'), Fact(roe_valued='high'))
    def financial2_rule_441(self):
        self.declare(Fact(recommendation='ROA menunjukkan efisiensi tinggi. ROE menunjukkan keuntungan yang tinggi.'))


    @Rule(Fact(underwriter_valued='good'), Fact(warrant_valued='good'))
    def financial2_rule_442(self):
        self.declare(Fact(recommendation='Underwriter berkualitas baik. Warrant menunjukkan kondisi baik.'))


    @Rule(Fact(underwriter_valued='good'), Fact(net_income_valued='loss'))
    def financial2_rule_443(self):
        self.declare(Fact(recommendation='Underwriter berkualitas baik. Laba bersih menunjukkan kerugian.'))


    @Rule(Fact(underwriter_valued='good'), Fact(per_valued='high'))
    def financial2_rule_444(self):
        self.declare(Fact(recommendation='Underwriter berkualitas baik. PER berada di tingkat yang tinggi.'))


    @Rule(Fact(underwriter_valued='good'), Fact(der_valued='low'))
    def financial2_rule_445(self):
        self.declare(Fact(recommendation='Underwriter berkualitas baik. DER menunjukkan tingkat hutang yang rendah.'))


    @Rule(Fact(underwriter_valued='good'), Fact(roa_valued='high'))
    def financial2_rule_446(self):
        self.declare(Fact(recommendation='Underwriter berkualitas baik. ROA menunjukkan efisiensi tinggi.'))


    @Rule(Fact(underwriter_valued='good'), Fact(roe_valued='low'))
    def financial2_rule_447(self):
        self.declare(Fact(recommendation='Underwriter berkualitas baik. ROE menunjukkan keuntungan yang rendah.'))


    @Rule(Fact(warrant_valued='good'), Fact(net_income_valued='loss'))
    def financial2_rule_448(self):
        self.declare(Fact(recommendation='Warrant menunjukkan kondisi baik. Laba bersih menunjukkan kerugian.'))


    @Rule(Fact(warrant_valued='good'), Fact(per_valued='high'))
    def financial2_rule_449(self):
        self.declare(Fact(recommendation='Warrant menunjukkan kondisi baik. PER berada di tingkat yang tinggi.'))


    @Rule(Fact(warrant_valued='good'), Fact(der_valued='low'))
    def financial2_rule_450(self):
        self.declare(Fact(recommendation='Warrant menunjukkan kondisi baik. DER menunjukkan tingkat hutang yang rendah.'))


    @Rule(Fact(warrant_valued='good'), Fact(roa_valued='high'))
    def financial2_rule_451(self):
        self.declare(Fact(recommendation='Warrant menunjukkan kondisi baik. ROA menunjukkan efisiensi tinggi.'))


    @Rule(Fact(warrant_valued='good'), Fact(roe_valued='low'))
    def financial2_rule_452(self):
        self.declare(Fact(recommendation='Warrant menunjukkan kondisi baik. ROE menunjukkan keuntungan yang rendah.'))


    @Rule(Fact(net_income_valued='loss'), Fact(per_valued='high'))
    def financial2_rule_453(self):
        self.declare(Fact(recommendation='Laba bersih menunjukkan kerugian. PER berada di tingkat yang tinggi.'))


    @Rule(Fact(net_income_valued='loss'), Fact(der_valued='low'))
    def financial2_rule_454(self):
        self.declare(Fact(recommendation='Laba bersih menunjukkan kerugian. DER menunjukkan tingkat hutang yang rendah.'))


    @Rule(Fact(net_income_valued='loss'), Fact(roa_valued='high'))
    def financial2_rule_455(self):
        self.declare(Fact(recommendation='Laba bersih menunjukkan kerugian. ROA menunjukkan efisiensi tinggi.'))


    @Rule(Fact(net_income_valued='loss'), Fact(roe_valued='low'))
    def financial2_rule_456(self):
        self.declare(Fact(recommendation='Laba bersih menunjukkan kerugian. ROE menunjukkan keuntungan yang rendah.'))


    @Rule(Fact(per_valued='high'), Fact(der_valued='low'))
    def financial2_rule_457(self):
        self.declare(Fact(recommendation='PER berada di tingkat yang tinggi. DER menunjukkan tingkat hutang yang rendah.'))


    @Rule(Fact(per_valued='high'), Fact(roa_valued='high'))
    def financial2_rule_458(self):
        self.declare(Fact(recommendation='PER berada di tingkat yang tinggi. ROA menunjukkan efisiensi tinggi.'))


    @Rule(Fact(per_valued='high'), Fact(roe_valued='low'))
    def financial2_rule_459(self):
        self.declare(Fact(recommendation='PER berada di tingkat yang tinggi. ROE menunjukkan keuntungan yang rendah.'))


    @Rule(Fact(der_valued='low'), Fact(roa_valued='high'))
    def financial2_rule_460(self):
        self.declare(Fact(recommendation='DER menunjukkan tingkat hutang yang rendah. ROA menunjukkan efisiensi tinggi.'))


    @Rule(Fact(der_valued='low'), Fact(roe_valued='low'))
    def financial2_rule_461(self):
        self.declare(Fact(recommendation='DER menunjukkan tingkat hutang yang rendah. ROE menunjukkan keuntungan yang rendah.'))


    @Rule(Fact(roa_valued='high'), Fact(roe_valued='low'))
    def financial2_rule_462(self):
        self.declare(Fact(recommendation='ROA menunjukkan efisiensi tinggi. ROE menunjukkan keuntungan yang rendah.'))


    @Rule(Fact(underwriter_valued='good'), Fact(warrant_valued='good'))
    def financial2_rule_463(self):
        self.declare(Fact(recommendation='Underwriter berkualitas baik. Warrant menunjukkan kondisi baik.'))


    @Rule(Fact(underwriter_valued='good'), Fact(net_income_valued='loss'))
    def financial2_rule_464(self):
        self.declare(Fact(recommendation='Underwriter berkualitas baik. Laba bersih menunjukkan kerugian.'))


    @Rule(Fact(underwriter_valued='good'), Fact(per_valued='high'))
    def financial2_rule_465(self):
        self.declare(Fact(recommendation='Underwriter berkualitas baik. PER berada di tingkat yang tinggi.'))


    @Rule(Fact(underwriter_valued='good'), Fact(der_valued='low'))
    def financial2_rule_466(self):
        self.declare(Fact(recommendation='Underwriter berkualitas baik. DER menunjukkan tingkat hutang yang rendah.'))


    @Rule(Fact(underwriter_valued='good'), Fact(roa_valued='low'))
    def financial2_rule_467(self):
        self.declare(Fact(recommendation='Underwriter berkualitas baik. ROA menunjukkan efisiensi rendah.'))


    @Rule(Fact(underwriter_valued='good'), Fact(roe_valued='high'))
    def financial2_rule_468(self):
        self.declare(Fact(recommendation='Underwriter berkualitas baik. ROE menunjukkan keuntungan yang tinggi.'))


    @Rule(Fact(warrant_valued='good'), Fact(net_income_valued='loss'))
    def financial2_rule_469(self):
        self.declare(Fact(recommendation='Warrant menunjukkan kondisi baik. Laba bersih menunjukkan kerugian.'))


    @Rule(Fact(warrant_valued='good'), Fact(per_valued='high'))
    def financial2_rule_470(self):
        self.declare(Fact(recommendation='Warrant menunjukkan kondisi baik. PER berada di tingkat yang tinggi.'))


    @Rule(Fact(warrant_valued='good'), Fact(der_valued='low'))
    def financial2_rule_471(self):
        self.declare(Fact(recommendation='Warrant menunjukkan kondisi baik. DER menunjukkan tingkat hutang yang rendah.'))


    @Rule(Fact(warrant_valued='good'), Fact(roa_valued='low'))
    def financial2_rule_472(self):
        self.declare(Fact(recommendation='Warrant menunjukkan kondisi baik. ROA menunjukkan efisiensi rendah.'))


    @Rule(Fact(warrant_valued='good'), Fact(roe_valued='high'))
    def financial2_rule_473(self):
        self.declare(Fact(recommendation='Warrant menunjukkan kondisi baik. ROE menunjukkan keuntungan yang tinggi.'))


    @Rule(Fact(net_income_valued='loss'), Fact(per_valued='high'))
    def financial2_rule_474(self):
        self.declare(Fact(recommendation='Laba bersih menunjukkan kerugian. PER berada di tingkat yang tinggi.'))


    @Rule(Fact(net_income_valued='loss'), Fact(der_valued='low'))
    def financial2_rule_475(self):
        self.declare(Fact(recommendation='Laba bersih menunjukkan kerugian. DER menunjukkan tingkat hutang yang rendah.'))


    @Rule(Fact(net_income_valued='loss'), Fact(roa_valued='low'))
    def financial2_rule_476(self):
        self.declare(Fact(recommendation='Laba bersih menunjukkan kerugian. ROA menunjukkan efisiensi rendah.'))


    @Rule(Fact(net_income_valued='loss'), Fact(roe_valued='high'))
    def financial2_rule_477(self):
        self.declare(Fact(recommendation='Laba bersih menunjukkan kerugian. ROE menunjukkan keuntungan yang tinggi.'))


    @Rule(Fact(per_valued='high'), Fact(der_valued='low'))
    def financial2_rule_478(self):
        self.declare(Fact(recommendation='PER berada di tingkat yang tinggi. DER menunjukkan tingkat hutang yang rendah.'))


    @Rule(Fact(per_valued='high'), Fact(roa_valued='low'))
    def financial2_rule_479(self):
        self.declare(Fact(recommendation='PER berada di tingkat yang tinggi. ROA menunjukkan efisiensi rendah.'))


    @Rule(Fact(per_valued='high'), Fact(roe_valued='high'))
    def financial2_rule_480(self):
        self.declare(Fact(recommendation='PER berada di tingkat yang tinggi. ROE menunjukkan keuntungan yang tinggi.'))


    @Rule(Fact(der_valued='low'), Fact(roa_valued='low'))
    def financial2_rule_481(self):
        self.declare(Fact(recommendation='DER menunjukkan tingkat hutang yang rendah. ROA menunjukkan efisiensi rendah.'))


    @Rule(Fact(der_valued='low'), Fact(roe_valued='high'))
    def financial2_rule_482(self):
        self.declare(Fact(recommendation='DER menunjukkan tingkat hutang yang rendah. ROE menunjukkan keuntungan yang tinggi.'))


    @Rule(Fact(roa_valued='low'), Fact(roe_valued='high'))
    def financial2_rule_483(self):
        self.declare(Fact(recommendation='ROA menunjukkan efisiensi rendah. ROE menunjukkan keuntungan yang tinggi.'))


    @Rule(Fact(underwriter_valued='good'), Fact(warrant_valued='good'))
    def financial2_rule_484(self):
        self.declare(Fact(recommendation='Underwriter berkualitas baik. Warrant menunjukkan kondisi baik.'))


    @Rule(Fact(underwriter_valued='good'), Fact(net_income_valued='loss'))
    def financial2_rule_485(self):
        self.declare(Fact(recommendation='Underwriter berkualitas baik. Laba bersih menunjukkan kerugian.'))


    @Rule(Fact(underwriter_valued='good'), Fact(per_valued='high'))
    def financial2_rule_486(self):
        self.declare(Fact(recommendation='Underwriter berkualitas baik. PER berada di tingkat yang tinggi.'))


    @Rule(Fact(underwriter_valued='good'), Fact(der_valued='low'))
    def financial2_rule_487(self):
        self.declare(Fact(recommendation='Underwriter berkualitas baik. DER menunjukkan tingkat hutang yang rendah.'))


    @Rule(Fact(underwriter_valued='good'), Fact(roa_valued='low'))
    def financial2_rule_488(self):
        self.declare(Fact(recommendation='Underwriter berkualitas baik. ROA menunjukkan efisiensi rendah.'))


    @Rule(Fact(underwriter_valued='good'), Fact(roe_valued='low'))
    def financial2_rule_489(self):
        self.declare(Fact(recommendation='Underwriter berkualitas baik. ROE menunjukkan keuntungan yang rendah.'))


    @Rule(Fact(warrant_valued='good'), Fact(net_income_valued='loss'))
    def financial2_rule_490(self):
        self.declare(Fact(recommendation='Warrant menunjukkan kondisi baik. Laba bersih menunjukkan kerugian.'))


    @Rule(Fact(warrant_valued='good'), Fact(per_valued='high'))
    def financial2_rule_491(self):
        self.declare(Fact(recommendation='Warrant menunjukkan kondisi baik. PER berada di tingkat yang tinggi.'))


    @Rule(Fact(warrant_valued='good'), Fact(der_valued='low'))
    def financial2_rule_492(self):
        self.declare(Fact(recommendation='Warrant menunjukkan kondisi baik. DER menunjukkan tingkat hutang yang rendah.'))


    @Rule(Fact(warrant_valued='good'), Fact(roa_valued='low'))
    def financial2_rule_493(self):
        self.declare(Fact(recommendation='Warrant menunjukkan kondisi baik. ROA menunjukkan efisiensi rendah.'))


    @Rule(Fact(warrant_valued='good'), Fact(roe_valued='low'))
    def financial2_rule_494(self):
        self.declare(Fact(recommendation='Warrant menunjukkan kondisi baik. ROE menunjukkan keuntungan yang rendah.'))


    @Rule(Fact(net_income_valued='loss'), Fact(per_valued='high'))
    def financial2_rule_495(self):
        self.declare(Fact(recommendation='Laba bersih menunjukkan kerugian. PER berada di tingkat yang tinggi.'))


    @Rule(Fact(net_income_valued='loss'), Fact(der_valued='low'))
    def financial2_rule_496(self):
        self.declare(Fact(recommendation='Laba bersih menunjukkan kerugian. DER menunjukkan tingkat hutang yang rendah.'))


    @Rule(Fact(net_income_valued='loss'), Fact(roa_valued='low'))
    def financial2_rule_497(self):
        self.declare(Fact(recommendation='Laba bersih menunjukkan kerugian. ROA menunjukkan efisiensi rendah.'))


    @Rule(Fact(net_income_valued='loss'), Fact(roe_valued='low'))
    def financial2_rule_498(self):
        self.declare(Fact(recommendation='Laba bersih menunjukkan kerugian. ROE menunjukkan keuntungan yang rendah.'))


    @Rule(Fact(per_valued='high'), Fact(der_valued='low'))
    def financial2_rule_499(self):
        self.declare(Fact(recommendation='PER berada di tingkat yang tinggi. DER menunjukkan tingkat hutang yang rendah.'))


    @Rule(Fact(per_valued='high'), Fact(roa_valued='low'))
    def financial2_rule_500(self):
        self.declare(Fact(recommendation='PER berada di tingkat yang tinggi. ROA menunjukkan efisiensi rendah.'))


    @Rule(Fact(per_valued='high'), Fact(roe_valued='low'))
    def financial2_rule_501(self):
        self.declare(Fact(recommendation='PER berada di tingkat yang tinggi. ROE menunjukkan keuntungan yang rendah.'))


    @Rule(Fact(der_valued='low'), Fact(roa_valued='low'))
    def financial2_rule_502(self):
        self.declare(Fact(recommendation='DER menunjukkan tingkat hutang yang rendah. ROA menunjukkan efisiensi rendah.'))


    @Rule(Fact(der_valued='low'), Fact(roe_valued='low'))
    def financial2_rule_503(self):
        self.declare(Fact(recommendation='DER menunjukkan tingkat hutang yang rendah. ROE menunjukkan keuntungan yang rendah.'))


    @Rule(Fact(roa_valued='low'), Fact(roe_valued='low'))
    def financial2_rule_504(self):
        self.declare(Fact(recommendation='ROA menunjukkan efisiensi rendah. ROE menunjukkan keuntungan yang rendah.'))


    @Rule(Fact(underwriter_valued='good'), Fact(warrant_valued='good'))
    def financial2_rule_505(self):
        self.declare(Fact(recommendation='Underwriter berkualitas baik. Warrant menunjukkan kondisi baik.'))


    @Rule(Fact(underwriter_valued='good'), Fact(net_income_valued='loss'))
    def financial2_rule_506(self):
        self.declare(Fact(recommendation='Underwriter berkualitas baik. Laba bersih menunjukkan kerugian.'))


    @Rule(Fact(underwriter_valued='good'), Fact(per_valued='low'))
    def financial2_rule_507(self):
        self.declare(Fact(recommendation='Underwriter berkualitas baik. PER berada di tingkat yang rendah.'))


    @Rule(Fact(underwriter_valued='good'), Fact(der_valued='high'))
    def financial2_rule_508(self):
        self.declare(Fact(recommendation='Underwriter berkualitas baik. DER menunjukkan tingkat hutang yang tinggi.'))


    @Rule(Fact(underwriter_valued='good'), Fact(roa_valued='high'))
    def financial2_rule_509(self):
        self.declare(Fact(recommendation='Underwriter berkualitas baik. ROA menunjukkan efisiensi tinggi.'))


    @Rule(Fact(underwriter_valued='good'), Fact(roe_valued='high'))
    def financial2_rule_510(self):
        self.declare(Fact(recommendation='Underwriter berkualitas baik. ROE menunjukkan keuntungan yang tinggi.'))


    @Rule(Fact(warrant_valued='good'), Fact(net_income_valued='loss'))
    def financial2_rule_511(self):
        self.declare(Fact(recommendation='Warrant menunjukkan kondisi baik. Laba bersih menunjukkan kerugian.'))


    @Rule(Fact(warrant_valued='good'), Fact(per_valued='low'))
    def financial2_rule_512(self):
        self.declare(Fact(recommendation='Warrant menunjukkan kondisi baik. PER berada di tingkat yang rendah.'))


    @Rule(Fact(warrant_valued='good'), Fact(der_valued='high'))
    def financial2_rule_513(self):
        self.declare(Fact(recommendation='Warrant menunjukkan kondisi baik. DER menunjukkan tingkat hutang yang tinggi.'))


    @Rule(Fact(warrant_valued='good'), Fact(roa_valued='high'))
    def financial2_rule_514(self):
        self.declare(Fact(recommendation='Warrant menunjukkan kondisi baik. ROA menunjukkan efisiensi tinggi.'))


    @Rule(Fact(warrant_valued='good'), Fact(roe_valued='high'))
    def financial2_rule_515(self):
        self.declare(Fact(recommendation='Warrant menunjukkan kondisi baik. ROE menunjukkan keuntungan yang tinggi.'))


    @Rule(Fact(net_income_valued='loss'), Fact(per_valued='low'))
    def financial2_rule_516(self):
        self.declare(Fact(recommendation='Laba bersih menunjukkan kerugian. PER berada di tingkat yang rendah.'))


    @Rule(Fact(net_income_valued='loss'), Fact(der_valued='high'))
    def financial2_rule_517(self):
        self.declare(Fact(recommendation='Laba bersih menunjukkan kerugian. DER menunjukkan tingkat hutang yang tinggi.'))


    @Rule(Fact(net_income_valued='loss'), Fact(roa_valued='high'))
    def financial2_rule_518(self):
        self.declare(Fact(recommendation='Laba bersih menunjukkan kerugian. ROA menunjukkan efisiensi tinggi.'))


    @Rule(Fact(net_income_valued='loss'), Fact(roe_valued='high'))
    def financial2_rule_519(self):
        self.declare(Fact(recommendation='Laba bersih menunjukkan kerugian. ROE menunjukkan keuntungan yang tinggi.'))


    @Rule(Fact(per_valued='low'), Fact(der_valued='high'))
    def financial2_rule_520(self):
        self.declare(Fact(recommendation='PER berada di tingkat yang rendah. DER menunjukkan tingkat hutang yang tinggi.'))


    @Rule(Fact(per_valued='low'), Fact(roa_valued='high'))
    def financial2_rule_521(self):
        self.declare(Fact(recommendation='PER berada di tingkat yang rendah. ROA menunjukkan efisiensi tinggi.'))


    @Rule(Fact(per_valued='low'), Fact(roe_valued='high'))
    def financial2_rule_522(self):
        self.declare(Fact(recommendation='PER berada di tingkat yang rendah. ROE menunjukkan keuntungan yang tinggi.'))


    @Rule(Fact(der_valued='high'), Fact(roa_valued='high'))
    def financial2_rule_523(self):
        self.declare(Fact(recommendation='DER menunjukkan tingkat hutang yang tinggi. ROA menunjukkan efisiensi tinggi.'))


    @Rule(Fact(der_valued='high'), Fact(roe_valued='high'))
    def financial2_rule_524(self):
        self.declare(Fact(recommendation='DER menunjukkan tingkat hutang yang tinggi. ROE menunjukkan keuntungan yang tinggi.'))


    @Rule(Fact(roa_valued='high'), Fact(roe_valued='high'))
    def financial2_rule_525(self):
        self.declare(Fact(recommendation='ROA menunjukkan efisiensi tinggi. ROE menunjukkan keuntungan yang tinggi.'))


    @Rule(Fact(underwriter_valued='good'), Fact(warrant_valued='good'))
    def financial2_rule_526(self):
        self.declare(Fact(recommendation='Underwriter berkualitas baik. Warrant menunjukkan kondisi baik.'))


    @Rule(Fact(underwriter_valued='good'), Fact(net_income_valued='loss'))
    def financial2_rule_527(self):
        self.declare(Fact(recommendation='Underwriter berkualitas baik. Laba bersih menunjukkan kerugian.'))


    @Rule(Fact(underwriter_valued='good'), Fact(per_valued='low'))
    def financial2_rule_528(self):
        self.declare(Fact(recommendation='Underwriter berkualitas baik. PER berada di tingkat yang rendah.'))


    @Rule(Fact(underwriter_valued='good'), Fact(der_valued='high'))
    def financial2_rule_529(self):
        self.declare(Fact(recommendation='Underwriter berkualitas baik. DER menunjukkan tingkat hutang yang tinggi.'))


    @Rule(Fact(underwriter_valued='good'), Fact(roa_valued='high'))
    def financial2_rule_530(self):
        self.declare(Fact(recommendation='Underwriter berkualitas baik. ROA menunjukkan efisiensi tinggi.'))


    @Rule(Fact(underwriter_valued='good'), Fact(roe_valued='low'))
    def financial2_rule_531(self):
        self.declare(Fact(recommendation='Underwriter berkualitas baik. ROE menunjukkan keuntungan yang rendah.'))


    @Rule(Fact(warrant_valued='good'), Fact(net_income_valued='loss'))
    def financial2_rule_532(self):
        self.declare(Fact(recommendation='Warrant menunjukkan kondisi baik. Laba bersih menunjukkan kerugian.'))


    @Rule(Fact(warrant_valued='good'), Fact(per_valued='low'))
    def financial2_rule_533(self):
        self.declare(Fact(recommendation='Warrant menunjukkan kondisi baik. PER berada di tingkat yang rendah.'))


    @Rule(Fact(warrant_valued='good'), Fact(der_valued='high'))
    def financial2_rule_534(self):
        self.declare(Fact(recommendation='Warrant menunjukkan kondisi baik. DER menunjukkan tingkat hutang yang tinggi.'))


    @Rule(Fact(warrant_valued='good'), Fact(roa_valued='high'))
    def financial2_rule_535(self):
        self.declare(Fact(recommendation='Warrant menunjukkan kondisi baik. ROA menunjukkan efisiensi tinggi.'))


    @Rule(Fact(warrant_valued='good'), Fact(roe_valued='low'))
    def financial2_rule_536(self):
        self.declare(Fact(recommendation='Warrant menunjukkan kondisi baik. ROE menunjukkan keuntungan yang rendah.'))


    @Rule(Fact(net_income_valued='loss'), Fact(per_valued='low'))
    def financial2_rule_537(self):
        self.declare(Fact(recommendation='Laba bersih menunjukkan kerugian. PER berada di tingkat yang rendah.'))


    @Rule(Fact(net_income_valued='loss'), Fact(der_valued='high'))
    def financial2_rule_538(self):
        self.declare(Fact(recommendation='Laba bersih menunjukkan kerugian. DER menunjukkan tingkat hutang yang tinggi.'))


    @Rule(Fact(net_income_valued='loss'), Fact(roa_valued='high'))
    def financial2_rule_539(self):
        self.declare(Fact(recommendation='Laba bersih menunjukkan kerugian. ROA menunjukkan efisiensi tinggi.'))


    @Rule(Fact(net_income_valued='loss'), Fact(roe_valued='low'))
    def financial2_rule_540(self):
        self.declare(Fact(recommendation='Laba bersih menunjukkan kerugian. ROE menunjukkan keuntungan yang rendah.'))


    @Rule(Fact(per_valued='low'), Fact(der_valued='high'))
    def financial2_rule_541(self):
        self.declare(Fact(recommendation='PER berada di tingkat yang rendah. DER menunjukkan tingkat hutang yang tinggi.'))


    @Rule(Fact(per_valued='low'), Fact(roa_valued='high'))
    def financial2_rule_542(self):
        self.declare(Fact(recommendation='PER berada di tingkat yang rendah. ROA menunjukkan efisiensi tinggi.'))


    @Rule(Fact(per_valued='low'), Fact(roe_valued='low'))
    def financial2_rule_543(self):
        self.declare(Fact(recommendation='PER berada di tingkat yang rendah. ROE menunjukkan keuntungan yang rendah.'))


    @Rule(Fact(der_valued='high'), Fact(roa_valued='high'))
    def financial2_rule_544(self):
        self.declare(Fact(recommendation='DER menunjukkan tingkat hutang yang tinggi. ROA menunjukkan efisiensi tinggi.'))


    @Rule(Fact(der_valued='high'), Fact(roe_valued='low'))
    def financial2_rule_545(self):
        self.declare(Fact(recommendation='DER menunjukkan tingkat hutang yang tinggi. ROE menunjukkan keuntungan yang rendah.'))


    @Rule(Fact(roa_valued='high'), Fact(roe_valued='low'))
    def financial2_rule_546(self):
        self.declare(Fact(recommendation='ROA menunjukkan efisiensi tinggi. ROE menunjukkan keuntungan yang rendah.'))


    @Rule(Fact(underwriter_valued='good'), Fact(warrant_valued='good'))
    def financial2_rule_547(self):
        self.declare(Fact(recommendation='Underwriter berkualitas baik. Warrant menunjukkan kondisi baik.'))


    @Rule(Fact(underwriter_valued='good'), Fact(net_income_valued='loss'))
    def financial2_rule_548(self):
        self.declare(Fact(recommendation='Underwriter berkualitas baik. Laba bersih menunjukkan kerugian.'))


    @Rule(Fact(underwriter_valued='good'), Fact(per_valued='low'))
    def financial2_rule_549(self):
        self.declare(Fact(recommendation='Underwriter berkualitas baik. PER berada di tingkat yang rendah.'))


    @Rule(Fact(underwriter_valued='good'), Fact(der_valued='high'))
    def financial2_rule_550(self):
        self.declare(Fact(recommendation='Underwriter berkualitas baik. DER menunjukkan tingkat hutang yang tinggi.'))


    @Rule(Fact(underwriter_valued='good'), Fact(roa_valued='low'))
    def financial2_rule_551(self):
        self.declare(Fact(recommendation='Underwriter berkualitas baik. ROA menunjukkan efisiensi rendah.'))


    @Rule(Fact(underwriter_valued='good'), Fact(roe_valued='high'))
    def financial2_rule_552(self):
        self.declare(Fact(recommendation='Underwriter berkualitas baik. ROE menunjukkan keuntungan yang tinggi.'))


    @Rule(Fact(warrant_valued='good'), Fact(net_income_valued='loss'))
    def financial2_rule_553(self):
        self.declare(Fact(recommendation='Warrant menunjukkan kondisi baik. Laba bersih menunjukkan kerugian.'))


    @Rule(Fact(warrant_valued='good'), Fact(per_valued='low'))
    def financial2_rule_554(self):
        self.declare(Fact(recommendation='Warrant menunjukkan kondisi baik. PER berada di tingkat yang rendah.'))


    @Rule(Fact(warrant_valued='good'), Fact(der_valued='high'))
    def financial2_rule_555(self):
        self.declare(Fact(recommendation='Warrant menunjukkan kondisi baik. DER menunjukkan tingkat hutang yang tinggi.'))


    @Rule(Fact(warrant_valued='good'), Fact(roa_valued='low'))
    def financial2_rule_556(self):
        self.declare(Fact(recommendation='Warrant menunjukkan kondisi baik. ROA menunjukkan efisiensi rendah.'))


    @Rule(Fact(warrant_valued='good'), Fact(roe_valued='high'))
    def financial2_rule_557(self):
        self.declare(Fact(recommendation='Warrant menunjukkan kondisi baik. ROE menunjukkan keuntungan yang tinggi.'))


    @Rule(Fact(net_income_valued='loss'), Fact(per_valued='low'))
    def financial2_rule_558(self):
        self.declare(Fact(recommendation='Laba bersih menunjukkan kerugian. PER berada di tingkat yang rendah.'))


    @Rule(Fact(net_income_valued='loss'), Fact(der_valued='high'))
    def financial2_rule_559(self):
        self.declare(Fact(recommendation='Laba bersih menunjukkan kerugian. DER menunjukkan tingkat hutang yang tinggi.'))


    @Rule(Fact(net_income_valued='loss'), Fact(roa_valued='low'))
    def financial2_rule_560(self):
        self.declare(Fact(recommendation='Laba bersih menunjukkan kerugian. ROA menunjukkan efisiensi rendah.'))


    @Rule(Fact(net_income_valued='loss'), Fact(roe_valued='high'))
    def financial2_rule_561(self):
        self.declare(Fact(recommendation='Laba bersih menunjukkan kerugian. ROE menunjukkan keuntungan yang tinggi.'))


    @Rule(Fact(per_valued='low'), Fact(der_valued='high'))
    def financial2_rule_562(self):
        self.declare(Fact(recommendation='PER berada di tingkat yang rendah. DER menunjukkan tingkat hutang yang tinggi.'))


    @Rule(Fact(per_valued='low'), Fact(roa_valued='low'))
    def financial2_rule_563(self):
        self.declare(Fact(recommendation='PER berada di tingkat yang rendah. ROA menunjukkan efisiensi rendah.'))


    @Rule(Fact(per_valued='low'), Fact(roe_valued='high'))
    def financial2_rule_564(self):
        self.declare(Fact(recommendation='PER berada di tingkat yang rendah. ROE menunjukkan keuntungan yang tinggi.'))


    @Rule(Fact(der_valued='high'), Fact(roa_valued='low'))
    def financial2_rule_565(self):
        self.declare(Fact(recommendation='DER menunjukkan tingkat hutang yang tinggi. ROA menunjukkan efisiensi rendah.'))


    @Rule(Fact(der_valued='high'), Fact(roe_valued='high'))
    def financial2_rule_566(self):
        self.declare(Fact(recommendation='DER menunjukkan tingkat hutang yang tinggi. ROE menunjukkan keuntungan yang tinggi.'))


    @Rule(Fact(roa_valued='low'), Fact(roe_valued='high'))
    def financial2_rule_567(self):
        self.declare(Fact(recommendation='ROA menunjukkan efisiensi rendah. ROE menunjukkan keuntungan yang tinggi.'))


    @Rule(Fact(underwriter_valued='good'), Fact(warrant_valued='good'))
    def financial2_rule_568(self):
        self.declare(Fact(recommendation='Underwriter berkualitas baik. Warrant menunjukkan kondisi baik.'))


    @Rule(Fact(underwriter_valued='good'), Fact(net_income_valued='loss'))
    def financial2_rule_569(self):
        self.declare(Fact(recommendation='Underwriter berkualitas baik. Laba bersih menunjukkan kerugian.'))


    @Rule(Fact(underwriter_valued='good'), Fact(per_valued='low'))
    def financial2_rule_570(self):
        self.declare(Fact(recommendation='Underwriter berkualitas baik. PER berada di tingkat yang rendah.'))


    @Rule(Fact(underwriter_valued='good'), Fact(der_valued='high'))
    def financial2_rule_571(self):
        self.declare(Fact(recommendation='Underwriter berkualitas baik. DER menunjukkan tingkat hutang yang tinggi.'))


    @Rule(Fact(underwriter_valued='good'), Fact(roa_valued='low'))
    def financial2_rule_572(self):
        self.declare(Fact(recommendation='Underwriter berkualitas baik. ROA menunjukkan efisiensi rendah.'))


    @Rule(Fact(underwriter_valued='good'), Fact(roe_valued='low'))
    def financial2_rule_573(self):
        self.declare(Fact(recommendation='Underwriter berkualitas baik. ROE menunjukkan keuntungan yang rendah.'))


    @Rule(Fact(warrant_valued='good'), Fact(net_income_valued='loss'))
    def financial2_rule_574(self):
        self.declare(Fact(recommendation='Warrant menunjukkan kondisi baik. Laba bersih menunjukkan kerugian.'))


    @Rule(Fact(warrant_valued='good'), Fact(per_valued='low'))
    def financial2_rule_575(self):
        self.declare(Fact(recommendation='Warrant menunjukkan kondisi baik. PER berada di tingkat yang rendah.'))


    @Rule(Fact(warrant_valued='good'), Fact(der_valued='high'))
    def financial2_rule_576(self):
        self.declare(Fact(recommendation='Warrant menunjukkan kondisi baik. DER menunjukkan tingkat hutang yang tinggi.'))


    @Rule(Fact(warrant_valued='good'), Fact(roa_valued='low'))
    def financial2_rule_577(self):
        self.declare(Fact(recommendation='Warrant menunjukkan kondisi baik. ROA menunjukkan efisiensi rendah.'))


    @Rule(Fact(warrant_valued='good'), Fact(roe_valued='low'))
    def financial2_rule_578(self):
        self.declare(Fact(recommendation='Warrant menunjukkan kondisi baik. ROE menunjukkan keuntungan yang rendah.'))


    @Rule(Fact(net_income_valued='loss'), Fact(per_valued='low'))
    def financial2_rule_579(self):
        self.declare(Fact(recommendation='Laba bersih menunjukkan kerugian. PER berada di tingkat yang rendah.'))


    @Rule(Fact(net_income_valued='loss'), Fact(der_valued='high'))
    def financial2_rule_580(self):
        self.declare(Fact(recommendation='Laba bersih menunjukkan kerugian. DER menunjukkan tingkat hutang yang tinggi.'))


    @Rule(Fact(net_income_valued='loss'), Fact(roa_valued='low'))
    def financial2_rule_581(self):
        self.declare(Fact(recommendation='Laba bersih menunjukkan kerugian. ROA menunjukkan efisiensi rendah.'))


    @Rule(Fact(net_income_valued='loss'), Fact(roe_valued='low'))
    def financial2_rule_582(self):
        self.declare(Fact(recommendation='Laba bersih menunjukkan kerugian. ROE menunjukkan keuntungan yang rendah.'))


    @Rule(Fact(per_valued='low'), Fact(der_valued='high'))
    def financial2_rule_583(self):
        self.declare(Fact(recommendation='PER berada di tingkat yang rendah. DER menunjukkan tingkat hutang yang tinggi.'))


    @Rule(Fact(per_valued='low'), Fact(roa_valued='low'))
    def financial2_rule_584(self):
        self.declare(Fact(recommendation='PER berada di tingkat yang rendah. ROA menunjukkan efisiensi rendah.'))


    @Rule(Fact(per_valued='low'), Fact(roe_valued='low'))
    def financial2_rule_585(self):
        self.declare(Fact(recommendation='PER berada di tingkat yang rendah. ROE menunjukkan keuntungan yang rendah.'))


    @Rule(Fact(der_valued='high'), Fact(roa_valued='low'))
    def financial2_rule_586(self):
        self.declare(Fact(recommendation='DER menunjukkan tingkat hutang yang tinggi. ROA menunjukkan efisiensi rendah.'))


    @Rule(Fact(der_valued='high'), Fact(roe_valued='low'))
    def financial2_rule_587(self):
        self.declare(Fact(recommendation='DER menunjukkan tingkat hutang yang tinggi. ROE menunjukkan keuntungan yang rendah.'))


    @Rule(Fact(roa_valued='low'), Fact(roe_valued='low'))
    def financial2_rule_588(self):
        self.declare(Fact(recommendation='ROA menunjukkan efisiensi rendah. ROE menunjukkan keuntungan yang rendah.'))


    @Rule(Fact(underwriter_valued='good'), Fact(warrant_valued='good'))
    def financial2_rule_589(self):
        self.declare(Fact(recommendation='Underwriter berkualitas baik. Warrant menunjukkan kondisi baik.'))


    @Rule(Fact(underwriter_valued='good'), Fact(net_income_valued='loss'))
    def financial2_rule_590(self):
        self.declare(Fact(recommendation='Underwriter berkualitas baik. Laba bersih menunjukkan kerugian.'))


    @Rule(Fact(underwriter_valued='good'), Fact(per_valued='low'))
    def financial2_rule_591(self):
        self.declare(Fact(recommendation='Underwriter berkualitas baik. PER berada di tingkat yang rendah.'))


    @Rule(Fact(underwriter_valued='good'), Fact(der_valued='low'))
    def financial2_rule_592(self):
        self.declare(Fact(recommendation='Underwriter berkualitas baik. DER menunjukkan tingkat hutang yang rendah.'))


    @Rule(Fact(underwriter_valued='good'), Fact(roa_valued='high'))
    def financial2_rule_593(self):
        self.declare(Fact(recommendation='Underwriter berkualitas baik. ROA menunjukkan efisiensi tinggi.'))


    @Rule(Fact(underwriter_valued='good'), Fact(roe_valued='high'))
    def financial2_rule_594(self):
        self.declare(Fact(recommendation='Underwriter berkualitas baik. ROE menunjukkan keuntungan yang tinggi.'))


    @Rule(Fact(warrant_valued='good'), Fact(net_income_valued='loss'))
    def financial2_rule_595(self):
        self.declare(Fact(recommendation='Warrant menunjukkan kondisi baik. Laba bersih menunjukkan kerugian.'))


    @Rule(Fact(warrant_valued='good'), Fact(per_valued='low'))
    def financial2_rule_596(self):
        self.declare(Fact(recommendation='Warrant menunjukkan kondisi baik. PER berada di tingkat yang rendah.'))


    @Rule(Fact(warrant_valued='good'), Fact(der_valued='low'))
    def financial2_rule_597(self):
        self.declare(Fact(recommendation='Warrant menunjukkan kondisi baik. DER menunjukkan tingkat hutang yang rendah.'))


    @Rule(Fact(warrant_valued='good'), Fact(roa_valued='high'))
    def financial2_rule_598(self):
        self.declare(Fact(recommendation='Warrant menunjukkan kondisi baik. ROA menunjukkan efisiensi tinggi.'))


    @Rule(Fact(warrant_valued='good'), Fact(roe_valued='high'))
    def financial2_rule_599(self):
        self.declare(Fact(recommendation='Warrant menunjukkan kondisi baik. ROE menunjukkan keuntungan yang tinggi.'))


    @Rule(Fact(net_income_valued='loss'), Fact(per_valued='low'))
    def financial2_rule_600(self):
        self.declare(Fact(recommendation='Laba bersih menunjukkan kerugian. PER berada di tingkat yang rendah.'))


    @Rule(Fact(net_income_valued='loss'), Fact(der_valued='low'))
    def financial2_rule_601(self):
        self.declare(Fact(recommendation='Laba bersih menunjukkan kerugian. DER menunjukkan tingkat hutang yang rendah.'))


    @Rule(Fact(net_income_valued='loss'), Fact(roa_valued='high'))
    def financial2_rule_602(self):
        self.declare(Fact(recommendation='Laba bersih menunjukkan kerugian. ROA menunjukkan efisiensi tinggi.'))


    @Rule(Fact(net_income_valued='loss'), Fact(roe_valued='high'))
    def financial2_rule_603(self):
        self.declare(Fact(recommendation='Laba bersih menunjukkan kerugian. ROE menunjukkan keuntungan yang tinggi.'))


    @Rule(Fact(per_valued='low'), Fact(der_valued='low'))
    def financial2_rule_604(self):
        self.declare(Fact(recommendation='PER berada di tingkat yang rendah. DER menunjukkan tingkat hutang yang rendah.'))


    @Rule(Fact(per_valued='low'), Fact(roa_valued='high'))
    def financial2_rule_605(self):
        self.declare(Fact(recommendation='PER berada di tingkat yang rendah. ROA menunjukkan efisiensi tinggi.'))


    @Rule(Fact(per_valued='low'), Fact(roe_valued='high'))
    def financial2_rule_606(self):
        self.declare(Fact(recommendation='PER berada di tingkat yang rendah. ROE menunjukkan keuntungan yang tinggi.'))


    @Rule(Fact(der_valued='low'), Fact(roa_valued='high'))
    def financial2_rule_607(self):
        self.declare(Fact(recommendation='DER menunjukkan tingkat hutang yang rendah. ROA menunjukkan efisiensi tinggi.'))


    @Rule(Fact(der_valued='low'), Fact(roe_valued='high'))
    def financial2_rule_608(self):
        self.declare(Fact(recommendation='DER menunjukkan tingkat hutang yang rendah. ROE menunjukkan keuntungan yang tinggi.'))


    @Rule(Fact(roa_valued='high'), Fact(roe_valued='high'))
    def financial2_rule_609(self):
        self.declare(Fact(recommendation='ROA menunjukkan efisiensi tinggi. ROE menunjukkan keuntungan yang tinggi.'))


    @Rule(Fact(underwriter_valued='good'), Fact(warrant_valued='good'))
    def financial2_rule_610(self):
        self.declare(Fact(recommendation='Underwriter berkualitas baik. Warrant menunjukkan kondisi baik.'))


    @Rule(Fact(underwriter_valued='good'), Fact(net_income_valued='loss'))
    def financial2_rule_611(self):
        self.declare(Fact(recommendation='Underwriter berkualitas baik. Laba bersih menunjukkan kerugian.'))


    @Rule(Fact(underwriter_valued='good'), Fact(per_valued='low'))
    def financial2_rule_612(self):
        self.declare(Fact(recommendation='Underwriter berkualitas baik. PER berada di tingkat yang rendah.'))


    @Rule(Fact(underwriter_valued='good'), Fact(der_valued='low'))
    def financial2_rule_613(self):
        self.declare(Fact(recommendation='Underwriter berkualitas baik. DER menunjukkan tingkat hutang yang rendah.'))


    @Rule(Fact(underwriter_valued='good'), Fact(roa_valued='high'))
    def financial2_rule_614(self):
        self.declare(Fact(recommendation='Underwriter berkualitas baik. ROA menunjukkan efisiensi tinggi.'))


    @Rule(Fact(underwriter_valued='good'), Fact(roe_valued='low'))
    def financial2_rule_615(self):
        self.declare(Fact(recommendation='Underwriter berkualitas baik. ROE menunjukkan keuntungan yang rendah.'))


    @Rule(Fact(warrant_valued='good'), Fact(net_income_valued='loss'))
    def financial2_rule_616(self):
        self.declare(Fact(recommendation='Warrant menunjukkan kondisi baik. Laba bersih menunjukkan kerugian.'))


    @Rule(Fact(warrant_valued='good'), Fact(per_valued='low'))
    def financial2_rule_617(self):
        self.declare(Fact(recommendation='Warrant menunjukkan kondisi baik. PER berada di tingkat yang rendah.'))


    @Rule(Fact(warrant_valued='good'), Fact(der_valued='low'))
    def financial2_rule_618(self):
        self.declare(Fact(recommendation='Warrant menunjukkan kondisi baik. DER menunjukkan tingkat hutang yang rendah.'))


    @Rule(Fact(warrant_valued='good'), Fact(roa_valued='high'))
    def financial2_rule_619(self):
        self.declare(Fact(recommendation='Warrant menunjukkan kondisi baik. ROA menunjukkan efisiensi tinggi.'))


    @Rule(Fact(warrant_valued='good'), Fact(roe_valued='low'))
    def financial2_rule_620(self):
        self.declare(Fact(recommendation='Warrant menunjukkan kondisi baik. ROE menunjukkan keuntungan yang rendah.'))


    @Rule(Fact(net_income_valued='loss'), Fact(per_valued='low'))
    def financial2_rule_621(self):
        self.declare(Fact(recommendation='Laba bersih menunjukkan kerugian. PER berada di tingkat yang rendah.'))


    @Rule(Fact(net_income_valued='loss'), Fact(der_valued='low'))
    def financial2_rule_622(self):
        self.declare(Fact(recommendation='Laba bersih menunjukkan kerugian. DER menunjukkan tingkat hutang yang rendah.'))


    @Rule(Fact(net_income_valued='loss'), Fact(roa_valued='high'))
    def financial2_rule_623(self):
        self.declare(Fact(recommendation='Laba bersih menunjukkan kerugian. ROA menunjukkan efisiensi tinggi.'))


    @Rule(Fact(net_income_valued='loss'), Fact(roe_valued='low'))
    def financial2_rule_624(self):
        self.declare(Fact(recommendation='Laba bersih menunjukkan kerugian. ROE menunjukkan keuntungan yang rendah.'))


    @Rule(Fact(per_valued='low'), Fact(der_valued='low'))
    def financial2_rule_625(self):
        self.declare(Fact(recommendation='PER berada di tingkat yang rendah. DER menunjukkan tingkat hutang yang rendah.'))


    @Rule(Fact(per_valued='low'), Fact(roa_valued='high'))
    def financial2_rule_626(self):
        self.declare(Fact(recommendation='PER berada di tingkat yang rendah. ROA menunjukkan efisiensi tinggi.'))


    @Rule(Fact(per_valued='low'), Fact(roe_valued='low'))
    def financial2_rule_627(self):
        self.declare(Fact(recommendation='PER berada di tingkat yang rendah. ROE menunjukkan keuntungan yang rendah.'))


    @Rule(Fact(der_valued='low'), Fact(roa_valued='high'))
    def financial2_rule_628(self):
        self.declare(Fact(recommendation='DER menunjukkan tingkat hutang yang rendah. ROA menunjukkan efisiensi tinggi.'))


    @Rule(Fact(der_valued='low'), Fact(roe_valued='low'))
    def financial2_rule_629(self):
        self.declare(Fact(recommendation='DER menunjukkan tingkat hutang yang rendah. ROE menunjukkan keuntungan yang rendah.'))


    @Rule(Fact(roa_valued='high'), Fact(roe_valued='low'))
    def financial2_rule_630(self):
        self.declare(Fact(recommendation='ROA menunjukkan efisiensi tinggi. ROE menunjukkan keuntungan yang rendah.'))


    @Rule(Fact(underwriter_valued='good'), Fact(warrant_valued='good'))
    def financial2_rule_631(self):
        self.declare(Fact(recommendation='Underwriter berkualitas baik. Warrant menunjukkan kondisi baik.'))


    @Rule(Fact(underwriter_valued='good'), Fact(net_income_valued='loss'))
    def financial2_rule_632(self):
        self.declare(Fact(recommendation='Underwriter berkualitas baik. Laba bersih menunjukkan kerugian.'))


    @Rule(Fact(underwriter_valued='good'), Fact(per_valued='low'))
    def financial2_rule_633(self):
        self.declare(Fact(recommendation='Underwriter berkualitas baik. PER berada di tingkat yang rendah.'))


    @Rule(Fact(underwriter_valued='good'), Fact(der_valued='low'))
    def financial2_rule_634(self):
        self.declare(Fact(recommendation='Underwriter berkualitas baik. DER menunjukkan tingkat hutang yang rendah.'))


    @Rule(Fact(underwriter_valued='good'), Fact(roa_valued='low'))
    def financial2_rule_635(self):
        self.declare(Fact(recommendation='Underwriter berkualitas baik. ROA menunjukkan efisiensi rendah.'))


    @Rule(Fact(underwriter_valued='good'), Fact(roe_valued='high'))
    def financial2_rule_636(self):
        self.declare(Fact(recommendation='Underwriter berkualitas baik. ROE menunjukkan keuntungan yang tinggi.'))


    @Rule(Fact(warrant_valued='good'), Fact(net_income_valued='loss'))
    def financial2_rule_637(self):
        self.declare(Fact(recommendation='Warrant menunjukkan kondisi baik. Laba bersih menunjukkan kerugian.'))


    @Rule(Fact(warrant_valued='good'), Fact(per_valued='low'))
    def financial2_rule_638(self):
        self.declare(Fact(recommendation='Warrant menunjukkan kondisi baik. PER berada di tingkat yang rendah.'))


    @Rule(Fact(warrant_valued='good'), Fact(der_valued='low'))
    def financial2_rule_639(self):
        self.declare(Fact(recommendation='Warrant menunjukkan kondisi baik. DER menunjukkan tingkat hutang yang rendah.'))


    @Rule(Fact(warrant_valued='good'), Fact(roa_valued='low'))
    def financial2_rule_640(self):
        self.declare(Fact(recommendation='Warrant menunjukkan kondisi baik. ROA menunjukkan efisiensi rendah.'))


    @Rule(Fact(warrant_valued='good'), Fact(roe_valued='high'))
    def financial2_rule_641(self):
        self.declare(Fact(recommendation='Warrant menunjukkan kondisi baik. ROE menunjukkan keuntungan yang tinggi.'))


    @Rule(Fact(net_income_valued='loss'), Fact(per_valued='low'))
    def financial2_rule_642(self):
        self.declare(Fact(recommendation='Laba bersih menunjukkan kerugian. PER berada di tingkat yang rendah.'))


    @Rule(Fact(net_income_valued='loss'), Fact(der_valued='low'))
    def financial2_rule_643(self):
        self.declare(Fact(recommendation='Laba bersih menunjukkan kerugian. DER menunjukkan tingkat hutang yang rendah.'))


    @Rule(Fact(net_income_valued='loss'), Fact(roa_valued='low'))
    def financial2_rule_644(self):
        self.declare(Fact(recommendation='Laba bersih menunjukkan kerugian. ROA menunjukkan efisiensi rendah.'))


    @Rule(Fact(net_income_valued='loss'), Fact(roe_valued='high'))
    def financial2_rule_645(self):
        self.declare(Fact(recommendation='Laba bersih menunjukkan kerugian. ROE menunjukkan keuntungan yang tinggi.'))


    @Rule(Fact(per_valued='low'), Fact(der_valued='low'))
    def financial2_rule_646(self):
        self.declare(Fact(recommendation='PER berada di tingkat yang rendah. DER menunjukkan tingkat hutang yang rendah.'))


    @Rule(Fact(per_valued='low'), Fact(roa_valued='low'))
    def financial2_rule_647(self):
        self.declare(Fact(recommendation='PER berada di tingkat yang rendah. ROA menunjukkan efisiensi rendah.'))


    @Rule(Fact(per_valued='low'), Fact(roe_valued='high'))
    def financial2_rule_648(self):
        self.declare(Fact(recommendation='PER berada di tingkat yang rendah. ROE menunjukkan keuntungan yang tinggi.'))


    @Rule(Fact(der_valued='low'), Fact(roa_valued='low'))
    def financial2_rule_649(self):
        self.declare(Fact(recommendation='DER menunjukkan tingkat hutang yang rendah. ROA menunjukkan efisiensi rendah.'))


    @Rule(Fact(der_valued='low'), Fact(roe_valued='high'))
    def financial2_rule_650(self):
        self.declare(Fact(recommendation='DER menunjukkan tingkat hutang yang rendah. ROE menunjukkan keuntungan yang tinggi.'))


    @Rule(Fact(roa_valued='low'), Fact(roe_valued='high'))
    def financial2_rule_651(self):
        self.declare(Fact(recommendation='ROA menunjukkan efisiensi rendah. ROE menunjukkan keuntungan yang tinggi.'))


    @Rule(Fact(underwriter_valued='good'), Fact(warrant_valued='good'))
    def financial2_rule_652(self):
        self.declare(Fact(recommendation='Underwriter berkualitas baik. Warrant menunjukkan kondisi baik.'))


    @Rule(Fact(underwriter_valued='good'), Fact(net_income_valued='loss'))
    def financial2_rule_653(self):
        self.declare(Fact(recommendation='Underwriter berkualitas baik. Laba bersih menunjukkan kerugian.'))


    @Rule(Fact(underwriter_valued='good'), Fact(per_valued='low'))
    def financial2_rule_654(self):
        self.declare(Fact(recommendation='Underwriter berkualitas baik. PER berada di tingkat yang rendah.'))


    @Rule(Fact(underwriter_valued='good'), Fact(der_valued='low'))
    def financial2_rule_655(self):
        self.declare(Fact(recommendation='Underwriter berkualitas baik. DER menunjukkan tingkat hutang yang rendah.'))


    @Rule(Fact(underwriter_valued='good'), Fact(roa_valued='low'))
    def financial2_rule_656(self):
        self.declare(Fact(recommendation='Underwriter berkualitas baik. ROA menunjukkan efisiensi rendah.'))


    @Rule(Fact(underwriter_valued='good'), Fact(roe_valued='low'))
    def financial2_rule_657(self):
        self.declare(Fact(recommendation='Underwriter berkualitas baik. ROE menunjukkan keuntungan yang rendah.'))


    @Rule(Fact(warrant_valued='good'), Fact(net_income_valued='loss'))
    def financial2_rule_658(self):
        self.declare(Fact(recommendation='Warrant menunjukkan kondisi baik. Laba bersih menunjukkan kerugian.'))


    @Rule(Fact(warrant_valued='good'), Fact(per_valued='low'))
    def financial2_rule_659(self):
        self.declare(Fact(recommendation='Warrant menunjukkan kondisi baik. PER berada di tingkat yang rendah.'))


    @Rule(Fact(warrant_valued='good'), Fact(der_valued='low'))
    def financial2_rule_660(self):
        self.declare(Fact(recommendation='Warrant menunjukkan kondisi baik. DER menunjukkan tingkat hutang yang rendah.'))


    @Rule(Fact(warrant_valued='good'), Fact(roa_valued='low'))
    def financial2_rule_661(self):
        self.declare(Fact(recommendation='Warrant menunjukkan kondisi baik. ROA menunjukkan efisiensi rendah.'))


    @Rule(Fact(warrant_valued='good'), Fact(roe_valued='low'))
    def financial2_rule_662(self):
        self.declare(Fact(recommendation='Warrant menunjukkan kondisi baik. ROE menunjukkan keuntungan yang rendah.'))


    @Rule(Fact(net_income_valued='loss'), Fact(per_valued='low'))
    def financial2_rule_663(self):
        self.declare(Fact(recommendation='Laba bersih menunjukkan kerugian. PER berada di tingkat yang rendah.'))


    @Rule(Fact(net_income_valued='loss'), Fact(der_valued='low'))
    def financial2_rule_664(self):
        self.declare(Fact(recommendation='Laba bersih menunjukkan kerugian. DER menunjukkan tingkat hutang yang rendah.'))


    @Rule(Fact(net_income_valued='loss'), Fact(roa_valued='low'))
    def financial2_rule_665(self):
        self.declare(Fact(recommendation='Laba bersih menunjukkan kerugian. ROA menunjukkan efisiensi rendah.'))


    @Rule(Fact(net_income_valued='loss'), Fact(roe_valued='low'))
    def financial2_rule_666(self):
        self.declare(Fact(recommendation='Laba bersih menunjukkan kerugian. ROE menunjukkan keuntungan yang rendah.'))


    @Rule(Fact(per_valued='low'), Fact(der_valued='low'))
    def financial2_rule_667(self):
        self.declare(Fact(recommendation='PER berada di tingkat yang rendah. DER menunjukkan tingkat hutang yang rendah.'))


    @Rule(Fact(per_valued='low'), Fact(roa_valued='low'))
    def financial2_rule_668(self):
        self.declare(Fact(recommendation='PER berada di tingkat yang rendah. ROA menunjukkan efisiensi rendah.'))


    @Rule(Fact(per_valued='low'), Fact(roe_valued='low'))
    def financial2_rule_669(self):
        self.declare(Fact(recommendation='PER berada di tingkat yang rendah. ROE menunjukkan keuntungan yang rendah.'))


    @Rule(Fact(der_valued='low'), Fact(roa_valued='low'))
    def financial2_rule_670(self):
        self.declare(Fact(recommendation='DER menunjukkan tingkat hutang yang rendah. ROA menunjukkan efisiensi rendah.'))


    @Rule(Fact(der_valued='low'), Fact(roe_valued='low'))
    def financial2_rule_671(self):
        self.declare(Fact(recommendation='DER menunjukkan tingkat hutang yang rendah. ROE menunjukkan keuntungan yang rendah.'))


    @Rule(Fact(roa_valued='low'), Fact(roe_valued='low'))
    def financial2_rule_672(self):
        self.declare(Fact(recommendation='ROA menunjukkan efisiensi rendah. ROE menunjukkan keuntungan yang rendah.'))


    @Rule(Fact(underwriter_valued='good'), Fact(warrant_valued='bad'))
    def financial2_rule_673(self):
        self.declare(Fact(recommendation='Underwriter berkualitas baik. Warrant menunjukkan kondisi buruk.'))


    @Rule(Fact(underwriter_valued='good'), Fact(net_income_valued='profit'))
    def financial2_rule_674(self):
        self.declare(Fact(recommendation='Underwriter berkualitas baik. Laba bersih menunjukkan keuntungan.'))


    @Rule(Fact(underwriter_valued='good'), Fact(per_valued='high'))
    def financial2_rule_675(self):
        self.declare(Fact(recommendation='Underwriter berkualitas baik. PER berada di tingkat yang tinggi.'))


    @Rule(Fact(underwriter_valued='good'), Fact(der_valued='high'))
    def financial2_rule_676(self):
        self.declare(Fact(recommendation='Underwriter berkualitas baik. DER menunjukkan tingkat hutang yang tinggi.'))


    @Rule(Fact(underwriter_valued='good'), Fact(roa_valued='high'))
    def financial2_rule_677(self):
        self.declare(Fact(recommendation='Underwriter berkualitas baik. ROA menunjukkan efisiensi tinggi.'))


    @Rule(Fact(underwriter_valued='good'), Fact(roe_valued='high'))
    def financial2_rule_678(self):
        self.declare(Fact(recommendation='Underwriter berkualitas baik. ROE menunjukkan keuntungan yang tinggi.'))


    @Rule(Fact(warrant_valued='bad'), Fact(net_income_valued='profit'))
    def financial2_rule_679(self):
        self.declare(Fact(recommendation='Warrant menunjukkan kondisi buruk. Laba bersih menunjukkan keuntungan.'))


    @Rule(Fact(warrant_valued='bad'), Fact(per_valued='high'))
    def financial2_rule_680(self):
        self.declare(Fact(recommendation='Warrant menunjukkan kondisi buruk. PER berada di tingkat yang tinggi.'))


    @Rule(Fact(warrant_valued='bad'), Fact(der_valued='high'))
    def financial2_rule_681(self):
        self.declare(Fact(recommendation='Warrant menunjukkan kondisi buruk. DER menunjukkan tingkat hutang yang tinggi.'))


    @Rule(Fact(warrant_valued='bad'), Fact(roa_valued='high'))
    def financial2_rule_682(self):
        self.declare(Fact(recommendation='Warrant menunjukkan kondisi buruk. ROA menunjukkan efisiensi tinggi.'))


    @Rule(Fact(warrant_valued='bad'), Fact(roe_valued='high'))
    def financial2_rule_683(self):
        self.declare(Fact(recommendation='Warrant menunjukkan kondisi buruk. ROE menunjukkan keuntungan yang tinggi.'))


    @Rule(Fact(net_income_valued='profit'), Fact(per_valued='high'))
    def financial2_rule_684(self):
        self.declare(Fact(recommendation='Laba bersih menunjukkan keuntungan. PER berada di tingkat yang tinggi.'))


    @Rule(Fact(net_income_valued='profit'), Fact(der_valued='high'))
    def financial2_rule_685(self):
        self.declare(Fact(recommendation='Laba bersih menunjukkan keuntungan. DER menunjukkan tingkat hutang yang tinggi.'))


    @Rule(Fact(net_income_valued='profit'), Fact(roa_valued='high'))
    def financial2_rule_686(self):
        self.declare(Fact(recommendation='Laba bersih menunjukkan keuntungan. ROA menunjukkan efisiensi tinggi.'))


    @Rule(Fact(net_income_valued='profit'), Fact(roe_valued='high'))
    def financial2_rule_687(self):
        self.declare(Fact(recommendation='Laba bersih menunjukkan keuntungan. ROE menunjukkan keuntungan yang tinggi.'))


    @Rule(Fact(per_valued='high'), Fact(der_valued='high'))
    def financial2_rule_688(self):
        self.declare(Fact(recommendation='PER berada di tingkat yang tinggi. DER menunjukkan tingkat hutang yang tinggi.'))


    @Rule(Fact(per_valued='high'), Fact(roa_valued='high'))
    def financial2_rule_689(self):
        self.declare(Fact(recommendation='PER berada di tingkat yang tinggi. ROA menunjukkan efisiensi tinggi.'))


    @Rule(Fact(per_valued='high'), Fact(roe_valued='high'))
    def financial2_rule_690(self):
        self.declare(Fact(recommendation='PER berada di tingkat yang tinggi. ROE menunjukkan keuntungan yang tinggi.'))


    @Rule(Fact(der_valued='high'), Fact(roa_valued='high'))
    def financial2_rule_691(self):
        self.declare(Fact(recommendation='DER menunjukkan tingkat hutang yang tinggi. ROA menunjukkan efisiensi tinggi.'))


    @Rule(Fact(der_valued='high'), Fact(roe_valued='high'))
    def financial2_rule_692(self):
        self.declare(Fact(recommendation='DER menunjukkan tingkat hutang yang tinggi. ROE menunjukkan keuntungan yang tinggi.'))


    @Rule(Fact(roa_valued='high'), Fact(roe_valued='high'))
    def financial2_rule_693(self):
        self.declare(Fact(recommendation='ROA menunjukkan efisiensi tinggi. ROE menunjukkan keuntungan yang tinggi.'))


    @Rule(Fact(underwriter_valued='good'), Fact(warrant_valued='bad'))
    def financial2_rule_694(self):
        self.declare(Fact(recommendation='Underwriter berkualitas baik. Warrant menunjukkan kondisi buruk.'))


    @Rule(Fact(underwriter_valued='good'), Fact(net_income_valued='profit'))
    def financial2_rule_695(self):
        self.declare(Fact(recommendation='Underwriter berkualitas baik. Laba bersih menunjukkan keuntungan.'))


    @Rule(Fact(underwriter_valued='good'), Fact(per_valued='high'))
    def financial2_rule_696(self):
        self.declare(Fact(recommendation='Underwriter berkualitas baik. PER berada di tingkat yang tinggi.'))


    @Rule(Fact(underwriter_valued='good'), Fact(der_valued='high'))
    def financial2_rule_697(self):
        self.declare(Fact(recommendation='Underwriter berkualitas baik. DER menunjukkan tingkat hutang yang tinggi.'))


    @Rule(Fact(underwriter_valued='good'), Fact(roa_valued='high'))
    def financial2_rule_698(self):
        self.declare(Fact(recommendation='Underwriter berkualitas baik. ROA menunjukkan efisiensi tinggi.'))


    @Rule(Fact(underwriter_valued='good'), Fact(roe_valued='low'))
    def financial2_rule_699(self):
        self.declare(Fact(recommendation='Underwriter berkualitas baik. ROE menunjukkan keuntungan yang rendah.'))


    @Rule(Fact(warrant_valued='bad'), Fact(net_income_valued='profit'))
    def financial2_rule_700(self):
        self.declare(Fact(recommendation='Warrant menunjukkan kondisi buruk. Laba bersih menunjukkan keuntungan.'))


    @Rule(Fact(warrant_valued='bad'), Fact(per_valued='high'))
    def financial2_rule_701(self):
        self.declare(Fact(recommendation='Warrant menunjukkan kondisi buruk. PER berada di tingkat yang tinggi.'))


    @Rule(Fact(warrant_valued='bad'), Fact(der_valued='high'))
    def financial2_rule_702(self):
        self.declare(Fact(recommendation='Warrant menunjukkan kondisi buruk. DER menunjukkan tingkat hutang yang tinggi.'))


    @Rule(Fact(warrant_valued='bad'), Fact(roa_valued='high'))
    def financial2_rule_703(self):
        self.declare(Fact(recommendation='Warrant menunjukkan kondisi buruk. ROA menunjukkan efisiensi tinggi.'))


    @Rule(Fact(warrant_valued='bad'), Fact(roe_valued='low'))
    def financial2_rule_704(self):
        self.declare(Fact(recommendation='Warrant menunjukkan kondisi buruk. ROE menunjukkan keuntungan yang rendah.'))


    @Rule(Fact(net_income_valued='profit'), Fact(per_valued='high'))
    def financial2_rule_705(self):
        self.declare(Fact(recommendation='Laba bersih menunjukkan keuntungan. PER berada di tingkat yang tinggi.'))


    @Rule(Fact(net_income_valued='profit'), Fact(der_valued='high'))
    def financial2_rule_706(self):
        self.declare(Fact(recommendation='Laba bersih menunjukkan keuntungan. DER menunjukkan tingkat hutang yang tinggi.'))


    @Rule(Fact(net_income_valued='profit'), Fact(roa_valued='high'))
    def financial2_rule_707(self):
        self.declare(Fact(recommendation='Laba bersih menunjukkan keuntungan. ROA menunjukkan efisiensi tinggi.'))


    @Rule(Fact(net_income_valued='profit'), Fact(roe_valued='low'))
    def financial2_rule_708(self):
        self.declare(Fact(recommendation='Laba bersih menunjukkan keuntungan. ROE menunjukkan keuntungan yang rendah.'))


    @Rule(Fact(per_valued='high'), Fact(der_valued='high'))
    def financial2_rule_709(self):
        self.declare(Fact(recommendation='PER berada di tingkat yang tinggi. DER menunjukkan tingkat hutang yang tinggi.'))


    @Rule(Fact(per_valued='high'), Fact(roa_valued='high'))
    def financial2_rule_710(self):
        self.declare(Fact(recommendation='PER berada di tingkat yang tinggi. ROA menunjukkan efisiensi tinggi.'))


    @Rule(Fact(per_valued='high'), Fact(roe_valued='low'))
    def financial2_rule_711(self):
        self.declare(Fact(recommendation='PER berada di tingkat yang tinggi. ROE menunjukkan keuntungan yang rendah.'))


    @Rule(Fact(der_valued='high'), Fact(roa_valued='high'))
    def financial2_rule_712(self):
        self.declare(Fact(recommendation='DER menunjukkan tingkat hutang yang tinggi. ROA menunjukkan efisiensi tinggi.'))


    @Rule(Fact(der_valued='high'), Fact(roe_valued='low'))
    def financial2_rule_713(self):
        self.declare(Fact(recommendation='DER menunjukkan tingkat hutang yang tinggi. ROE menunjukkan keuntungan yang rendah.'))


    @Rule(Fact(roa_valued='high'), Fact(roe_valued='low'))
    def financial2_rule_714(self):
        self.declare(Fact(recommendation='ROA menunjukkan efisiensi tinggi. ROE menunjukkan keuntungan yang rendah.'))


    @Rule(Fact(underwriter_valued='good'), Fact(warrant_valued='bad'))
    def financial2_rule_715(self):
        self.declare(Fact(recommendation='Underwriter berkualitas baik. Warrant menunjukkan kondisi buruk.'))


    @Rule(Fact(underwriter_valued='good'), Fact(net_income_valued='profit'))
    def financial2_rule_716(self):
        self.declare(Fact(recommendation='Underwriter berkualitas baik. Laba bersih menunjukkan keuntungan.'))


    @Rule(Fact(underwriter_valued='good'), Fact(per_valued='high'))
    def financial2_rule_717(self):
        self.declare(Fact(recommendation='Underwriter berkualitas baik. PER berada di tingkat yang tinggi.'))


    @Rule(Fact(underwriter_valued='good'), Fact(der_valued='high'))
    def financial2_rule_718(self):
        self.declare(Fact(recommendation='Underwriter berkualitas baik. DER menunjukkan tingkat hutang yang tinggi.'))


    @Rule(Fact(underwriter_valued='good'), Fact(roa_valued='low'))
    def financial2_rule_719(self):
        self.declare(Fact(recommendation='Underwriter berkualitas baik. ROA menunjukkan efisiensi rendah.'))


    @Rule(Fact(underwriter_valued='good'), Fact(roe_valued='high'))
    def financial2_rule_720(self):
        self.declare(Fact(recommendation='Underwriter berkualitas baik. ROE menunjukkan keuntungan yang tinggi.'))


    @Rule(Fact(warrant_valued='bad'), Fact(net_income_valued='profit'))
    def financial2_rule_721(self):
        self.declare(Fact(recommendation='Warrant menunjukkan kondisi buruk. Laba bersih menunjukkan keuntungan.'))


    @Rule(Fact(warrant_valued='bad'), Fact(per_valued='high'))
    def financial2_rule_722(self):
        self.declare(Fact(recommendation='Warrant menunjukkan kondisi buruk. PER berada di tingkat yang tinggi.'))


    @Rule(Fact(warrant_valued='bad'), Fact(der_valued='high'))
    def financial2_rule_723(self):
        self.declare(Fact(recommendation='Warrant menunjukkan kondisi buruk. DER menunjukkan tingkat hutang yang tinggi.'))


    @Rule(Fact(warrant_valued='bad'), Fact(roa_valued='low'))
    def financial2_rule_724(self):
        self.declare(Fact(recommendation='Warrant menunjukkan kondisi buruk. ROA menunjukkan efisiensi rendah.'))


    @Rule(Fact(warrant_valued='bad'), Fact(roe_valued='high'))
    def financial2_rule_725(self):
        self.declare(Fact(recommendation='Warrant menunjukkan kondisi buruk. ROE menunjukkan keuntungan yang tinggi.'))


    @Rule(Fact(net_income_valued='profit'), Fact(per_valued='high'))
    def financial2_rule_726(self):
        self.declare(Fact(recommendation='Laba bersih menunjukkan keuntungan. PER berada di tingkat yang tinggi.'))


    @Rule(Fact(net_income_valued='profit'), Fact(der_valued='high'))
    def financial2_rule_727(self):
        self.declare(Fact(recommendation='Laba bersih menunjukkan keuntungan. DER menunjukkan tingkat hutang yang tinggi.'))


    @Rule(Fact(net_income_valued='profit'), Fact(roa_valued='low'))
    def financial2_rule_728(self):
        self.declare(Fact(recommendation='Laba bersih menunjukkan keuntungan. ROA menunjukkan efisiensi rendah.'))


    @Rule(Fact(net_income_valued='profit'), Fact(roe_valued='high'))
    def financial2_rule_729(self):
        self.declare(Fact(recommendation='Laba bersih menunjukkan keuntungan. ROE menunjukkan keuntungan yang tinggi.'))


    @Rule(Fact(per_valued='high'), Fact(der_valued='high'))
    def financial2_rule_730(self):
        self.declare(Fact(recommendation='PER berada di tingkat yang tinggi. DER menunjukkan tingkat hutang yang tinggi.'))


    @Rule(Fact(per_valued='high'), Fact(roa_valued='low'))
    def financial2_rule_731(self):
        self.declare(Fact(recommendation='PER berada di tingkat yang tinggi. ROA menunjukkan efisiensi rendah.'))


    @Rule(Fact(per_valued='high'), Fact(roe_valued='high'))
    def financial2_rule_732(self):
        self.declare(Fact(recommendation='PER berada di tingkat yang tinggi. ROE menunjukkan keuntungan yang tinggi.'))


    @Rule(Fact(der_valued='high'), Fact(roa_valued='low'))
    def financial2_rule_733(self):
        self.declare(Fact(recommendation='DER menunjukkan tingkat hutang yang tinggi. ROA menunjukkan efisiensi rendah.'))


    @Rule(Fact(der_valued='high'), Fact(roe_valued='high'))
    def financial2_rule_734(self):
        self.declare(Fact(recommendation='DER menunjukkan tingkat hutang yang tinggi. ROE menunjukkan keuntungan yang tinggi.'))


    @Rule(Fact(roa_valued='low'), Fact(roe_valued='high'))
    def financial2_rule_735(self):
        self.declare(Fact(recommendation='ROA menunjukkan efisiensi rendah. ROE menunjukkan keuntungan yang tinggi.'))


    @Rule(Fact(underwriter_valued='good'), Fact(warrant_valued='bad'))
    def financial2_rule_736(self):
        self.declare(Fact(recommendation='Underwriter berkualitas baik. Warrant menunjukkan kondisi buruk.'))


    @Rule(Fact(underwriter_valued='good'), Fact(net_income_valued='profit'))
    def financial2_rule_737(self):
        self.declare(Fact(recommendation='Underwriter berkualitas baik. Laba bersih menunjukkan keuntungan.'))


    @Rule(Fact(underwriter_valued='good'), Fact(per_valued='high'))
    def financial2_rule_738(self):
        self.declare(Fact(recommendation='Underwriter berkualitas baik. PER berada di tingkat yang tinggi.'))


    @Rule(Fact(underwriter_valued='good'), Fact(der_valued='high'))
    def financial2_rule_739(self):
        self.declare(Fact(recommendation='Underwriter berkualitas baik. DER menunjukkan tingkat hutang yang tinggi.'))


    @Rule(Fact(underwriter_valued='good'), Fact(roa_valued='low'))
    def financial2_rule_740(self):
        self.declare(Fact(recommendation='Underwriter berkualitas baik. ROA menunjukkan efisiensi rendah.'))


    @Rule(Fact(underwriter_valued='good'), Fact(roe_valued='low'))
    def financial2_rule_741(self):
        self.declare(Fact(recommendation='Underwriter berkualitas baik. ROE menunjukkan keuntungan yang rendah.'))


    @Rule(Fact(warrant_valued='bad'), Fact(net_income_valued='profit'))
    def financial2_rule_742(self):
        self.declare(Fact(recommendation='Warrant menunjukkan kondisi buruk. Laba bersih menunjukkan keuntungan.'))


    @Rule(Fact(warrant_valued='bad'), Fact(per_valued='high'))
    def financial2_rule_743(self):
        self.declare(Fact(recommendation='Warrant menunjukkan kondisi buruk. PER berada di tingkat yang tinggi.'))


    @Rule(Fact(warrant_valued='bad'), Fact(der_valued='high'))
    def financial2_rule_744(self):
        self.declare(Fact(recommendation='Warrant menunjukkan kondisi buruk. DER menunjukkan tingkat hutang yang tinggi.'))


    @Rule(Fact(warrant_valued='bad'), Fact(roa_valued='low'))
    def financial2_rule_745(self):
        self.declare(Fact(recommendation='Warrant menunjukkan kondisi buruk. ROA menunjukkan efisiensi rendah.'))


    @Rule(Fact(warrant_valued='bad'), Fact(roe_valued='low'))
    def financial2_rule_746(self):
        self.declare(Fact(recommendation='Warrant menunjukkan kondisi buruk. ROE menunjukkan keuntungan yang rendah.'))


    @Rule(Fact(net_income_valued='profit'), Fact(per_valued='high'))
    def financial2_rule_747(self):
        self.declare(Fact(recommendation='Laba bersih menunjukkan keuntungan. PER berada di tingkat yang tinggi.'))


    @Rule(Fact(net_income_valued='profit'), Fact(der_valued='high'))
    def financial2_rule_748(self):
        self.declare(Fact(recommendation='Laba bersih menunjukkan keuntungan. DER menunjukkan tingkat hutang yang tinggi.'))


    @Rule(Fact(net_income_valued='profit'), Fact(roa_valued='low'))
    def financial2_rule_749(self):
        self.declare(Fact(recommendation='Laba bersih menunjukkan keuntungan. ROA menunjukkan efisiensi rendah.'))


    @Rule(Fact(net_income_valued='profit'), Fact(roe_valued='low'))
    def financial2_rule_750(self):
        self.declare(Fact(recommendation='Laba bersih menunjukkan keuntungan. ROE menunjukkan keuntungan yang rendah.'))


    @Rule(Fact(per_valued='high'), Fact(der_valued='high'))
    def financial2_rule_751(self):
        self.declare(Fact(recommendation='PER berada di tingkat yang tinggi. DER menunjukkan tingkat hutang yang tinggi.'))


    @Rule(Fact(per_valued='high'), Fact(roa_valued='low'))
    def financial2_rule_752(self):
        self.declare(Fact(recommendation='PER berada di tingkat yang tinggi. ROA menunjukkan efisiensi rendah.'))


    @Rule(Fact(per_valued='high'), Fact(roe_valued='low'))
    def financial2_rule_753(self):
        self.declare(Fact(recommendation='PER berada di tingkat yang tinggi. ROE menunjukkan keuntungan yang rendah.'))


    @Rule(Fact(der_valued='high'), Fact(roa_valued='low'))
    def financial2_rule_754(self):
        self.declare(Fact(recommendation='DER menunjukkan tingkat hutang yang tinggi. ROA menunjukkan efisiensi rendah.'))


    @Rule(Fact(der_valued='high'), Fact(roe_valued='low'))
    def financial2_rule_755(self):
        self.declare(Fact(recommendation='DER menunjukkan tingkat hutang yang tinggi. ROE menunjukkan keuntungan yang rendah.'))


    @Rule(Fact(roa_valued='low'), Fact(roe_valued='low'))
    def financial2_rule_756(self):
        self.declare(Fact(recommendation='ROA menunjukkan efisiensi rendah. ROE menunjukkan keuntungan yang rendah.'))


    @Rule(Fact(underwriter_valued='good'), Fact(warrant_valued='bad'))
    def financial2_rule_757(self):
        self.declare(Fact(recommendation='Underwriter berkualitas baik. Warrant menunjukkan kondisi buruk.'))


    @Rule(Fact(underwriter_valued='good'), Fact(net_income_valued='profit'))
    def financial2_rule_758(self):
        self.declare(Fact(recommendation='Underwriter berkualitas baik. Laba bersih menunjukkan keuntungan.'))


    @Rule(Fact(underwriter_valued='good'), Fact(per_valued='high'))
    def financial2_rule_759(self):
        self.declare(Fact(recommendation='Underwriter berkualitas baik. PER berada di tingkat yang tinggi.'))


    @Rule(Fact(underwriter_valued='good'), Fact(der_valued='low'))
    def financial2_rule_760(self):
        self.declare(Fact(recommendation='Underwriter berkualitas baik. DER menunjukkan tingkat hutang yang rendah.'))


    @Rule(Fact(underwriter_valued='good'), Fact(roa_valued='high'))
    def financial2_rule_761(self):
        self.declare(Fact(recommendation='Underwriter berkualitas baik. ROA menunjukkan efisiensi tinggi.'))


    @Rule(Fact(underwriter_valued='good'), Fact(roe_valued='high'))
    def financial2_rule_762(self):
        self.declare(Fact(recommendation='Underwriter berkualitas baik. ROE menunjukkan keuntungan yang tinggi.'))


    @Rule(Fact(warrant_valued='bad'), Fact(net_income_valued='profit'))
    def financial2_rule_763(self):
        self.declare(Fact(recommendation='Warrant menunjukkan kondisi buruk. Laba bersih menunjukkan keuntungan.'))


    @Rule(Fact(warrant_valued='bad'), Fact(per_valued='high'))
    def financial2_rule_764(self):
        self.declare(Fact(recommendation='Warrant menunjukkan kondisi buruk. PER berada di tingkat yang tinggi.'))


    @Rule(Fact(warrant_valued='bad'), Fact(der_valued='low'))
    def financial2_rule_765(self):
        self.declare(Fact(recommendation='Warrant menunjukkan kondisi buruk. DER menunjukkan tingkat hutang yang rendah.'))


    @Rule(Fact(warrant_valued='bad'), Fact(roa_valued='high'))
    def financial2_rule_766(self):
        self.declare(Fact(recommendation='Warrant menunjukkan kondisi buruk. ROA menunjukkan efisiensi tinggi.'))


    @Rule(Fact(warrant_valued='bad'), Fact(roe_valued='high'))
    def financial2_rule_767(self):
        self.declare(Fact(recommendation='Warrant menunjukkan kondisi buruk. ROE menunjukkan keuntungan yang tinggi.'))


    @Rule(Fact(net_income_valued='profit'), Fact(per_valued='high'))
    def financial2_rule_768(self):
        self.declare(Fact(recommendation='Laba bersih menunjukkan keuntungan. PER berada di tingkat yang tinggi.'))


    @Rule(Fact(net_income_valued='profit'), Fact(der_valued='low'))
    def financial2_rule_769(self):
        self.declare(Fact(recommendation='Laba bersih menunjukkan keuntungan. DER menunjukkan tingkat hutang yang rendah.'))


    @Rule(Fact(net_income_valued='profit'), Fact(roa_valued='high'))
    def financial2_rule_770(self):
        self.declare(Fact(recommendation='Laba bersih menunjukkan keuntungan. ROA menunjukkan efisiensi tinggi.'))


    @Rule(Fact(net_income_valued='profit'), Fact(roe_valued='high'))
    def financial2_rule_771(self):
        self.declare(Fact(recommendation='Laba bersih menunjukkan keuntungan. ROE menunjukkan keuntungan yang tinggi.'))


    @Rule(Fact(per_valued='high'), Fact(der_valued='low'))
    def financial2_rule_772(self):
        self.declare(Fact(recommendation='PER berada di tingkat yang tinggi. DER menunjukkan tingkat hutang yang rendah.'))


    @Rule(Fact(per_valued='high'), Fact(roa_valued='high'))
    def financial2_rule_773(self):
        self.declare(Fact(recommendation='PER berada di tingkat yang tinggi. ROA menunjukkan efisiensi tinggi.'))


    @Rule(Fact(per_valued='high'), Fact(roe_valued='high'))
    def financial2_rule_774(self):
        self.declare(Fact(recommendation='PER berada di tingkat yang tinggi. ROE menunjukkan keuntungan yang tinggi.'))


    @Rule(Fact(der_valued='low'), Fact(roa_valued='high'))
    def financial2_rule_775(self):
        self.declare(Fact(recommendation='DER menunjukkan tingkat hutang yang rendah. ROA menunjukkan efisiensi tinggi.'))


    @Rule(Fact(der_valued='low'), Fact(roe_valued='high'))
    def financial2_rule_776(self):
        self.declare(Fact(recommendation='DER menunjukkan tingkat hutang yang rendah. ROE menunjukkan keuntungan yang tinggi.'))


    @Rule(Fact(roa_valued='high'), Fact(roe_valued='high'))
    def financial2_rule_777(self):
        self.declare(Fact(recommendation='ROA menunjukkan efisiensi tinggi. ROE menunjukkan keuntungan yang tinggi.'))


    @Rule(Fact(underwriter_valued='good'), Fact(warrant_valued='bad'))
    def financial2_rule_778(self):
        self.declare(Fact(recommendation='Underwriter berkualitas baik. Warrant menunjukkan kondisi buruk.'))


    @Rule(Fact(underwriter_valued='good'), Fact(net_income_valued='profit'))
    def financial2_rule_779(self):
        self.declare(Fact(recommendation='Underwriter berkualitas baik. Laba bersih menunjukkan keuntungan.'))


    @Rule(Fact(underwriter_valued='good'), Fact(per_valued='high'))
    def financial2_rule_780(self):
        self.declare(Fact(recommendation='Underwriter berkualitas baik. PER berada di tingkat yang tinggi.'))


    @Rule(Fact(underwriter_valued='good'), Fact(der_valued='low'))
    def financial2_rule_781(self):
        self.declare(Fact(recommendation='Underwriter berkualitas baik. DER menunjukkan tingkat hutang yang rendah.'))


    @Rule(Fact(underwriter_valued='good'), Fact(roa_valued='high'))
    def financial2_rule_782(self):
        self.declare(Fact(recommendation='Underwriter berkualitas baik. ROA menunjukkan efisiensi tinggi.'))


    @Rule(Fact(underwriter_valued='good'), Fact(roe_valued='low'))
    def financial2_rule_783(self):
        self.declare(Fact(recommendation='Underwriter berkualitas baik. ROE menunjukkan keuntungan yang rendah.'))


    @Rule(Fact(warrant_valued='bad'), Fact(net_income_valued='profit'))
    def financial2_rule_784(self):
        self.declare(Fact(recommendation='Warrant menunjukkan kondisi buruk. Laba bersih menunjukkan keuntungan.'))


    @Rule(Fact(warrant_valued='bad'), Fact(per_valued='high'))
    def financial2_rule_785(self):
        self.declare(Fact(recommendation='Warrant menunjukkan kondisi buruk. PER berada di tingkat yang tinggi.'))


    @Rule(Fact(warrant_valued='bad'), Fact(der_valued='low'))
    def financial2_rule_786(self):
        self.declare(Fact(recommendation='Warrant menunjukkan kondisi buruk. DER menunjukkan tingkat hutang yang rendah.'))


    @Rule(Fact(warrant_valued='bad'), Fact(roa_valued='high'))
    def financial2_rule_787(self):
        self.declare(Fact(recommendation='Warrant menunjukkan kondisi buruk. ROA menunjukkan efisiensi tinggi.'))


    @Rule(Fact(warrant_valued='bad'), Fact(roe_valued='low'))
    def financial2_rule_788(self):
        self.declare(Fact(recommendation='Warrant menunjukkan kondisi buruk. ROE menunjukkan keuntungan yang rendah.'))


    @Rule(Fact(net_income_valued='profit'), Fact(per_valued='high'))
    def financial2_rule_789(self):
        self.declare(Fact(recommendation='Laba bersih menunjukkan keuntungan. PER berada di tingkat yang tinggi.'))


    @Rule(Fact(net_income_valued='profit'), Fact(der_valued='low'))
    def financial2_rule_790(self):
        self.declare(Fact(recommendation='Laba bersih menunjukkan keuntungan. DER menunjukkan tingkat hutang yang rendah.'))


    @Rule(Fact(net_income_valued='profit'), Fact(roa_valued='high'))
    def financial2_rule_791(self):
        self.declare(Fact(recommendation='Laba bersih menunjukkan keuntungan. ROA menunjukkan efisiensi tinggi.'))


    @Rule(Fact(net_income_valued='profit'), Fact(roe_valued='low'))
    def financial2_rule_792(self):
        self.declare(Fact(recommendation='Laba bersih menunjukkan keuntungan. ROE menunjukkan keuntungan yang rendah.'))


    @Rule(Fact(per_valued='high'), Fact(der_valued='low'))
    def financial2_rule_793(self):
        self.declare(Fact(recommendation='PER berada di tingkat yang tinggi. DER menunjukkan tingkat hutang yang rendah.'))


    @Rule(Fact(per_valued='high'), Fact(roa_valued='high'))
    def financial2_rule_794(self):
        self.declare(Fact(recommendation='PER berada di tingkat yang tinggi. ROA menunjukkan efisiensi tinggi.'))


    @Rule(Fact(per_valued='high'), Fact(roe_valued='low'))
    def financial2_rule_795(self):
        self.declare(Fact(recommendation='PER berada di tingkat yang tinggi. ROE menunjukkan keuntungan yang rendah.'))


    @Rule(Fact(der_valued='low'), Fact(roa_valued='high'))
    def financial2_rule_796(self):
        self.declare(Fact(recommendation='DER menunjukkan tingkat hutang yang rendah. ROA menunjukkan efisiensi tinggi.'))


    @Rule(Fact(der_valued='low'), Fact(roe_valued='low'))
    def financial2_rule_797(self):
        self.declare(Fact(recommendation='DER menunjukkan tingkat hutang yang rendah. ROE menunjukkan keuntungan yang rendah.'))


    @Rule(Fact(roa_valued='high'), Fact(roe_valued='low'))
    def financial2_rule_798(self):
        self.declare(Fact(recommendation='ROA menunjukkan efisiensi tinggi. ROE menunjukkan keuntungan yang rendah.'))


    @Rule(Fact(underwriter_valued='good'), Fact(warrant_valued='bad'))
    def financial2_rule_799(self):
        self.declare(Fact(recommendation='Underwriter berkualitas baik. Warrant menunjukkan kondisi buruk.'))


    @Rule(Fact(underwriter_valued='good'), Fact(net_income_valued='profit'))
    def financial2_rule_800(self):
        self.declare(Fact(recommendation='Underwriter berkualitas baik. Laba bersih menunjukkan keuntungan.'))


    @Rule(Fact(underwriter_valued='good'), Fact(per_valued='high'))
    def financial2_rule_801(self):
        self.declare(Fact(recommendation='Underwriter berkualitas baik. PER berada di tingkat yang tinggi.'))


    @Rule(Fact(underwriter_valued='good'), Fact(der_valued='low'))
    def financial2_rule_802(self):
        self.declare(Fact(recommendation='Underwriter berkualitas baik. DER menunjukkan tingkat hutang yang rendah.'))


    @Rule(Fact(underwriter_valued='good'), Fact(roa_valued='low'))
    def financial2_rule_803(self):
        self.declare(Fact(recommendation='Underwriter berkualitas baik. ROA menunjukkan efisiensi rendah.'))


    @Rule(Fact(underwriter_valued='good'), Fact(roe_valued='high'))
    def financial2_rule_804(self):
        self.declare(Fact(recommendation='Underwriter berkualitas baik. ROE menunjukkan keuntungan yang tinggi.'))


    @Rule(Fact(warrant_valued='bad'), Fact(net_income_valued='profit'))
    def financial2_rule_805(self):
        self.declare(Fact(recommendation='Warrant menunjukkan kondisi buruk. Laba bersih menunjukkan keuntungan.'))


    @Rule(Fact(warrant_valued='bad'), Fact(per_valued='high'))
    def financial2_rule_806(self):
        self.declare(Fact(recommendation='Warrant menunjukkan kondisi buruk. PER berada di tingkat yang tinggi.'))


    @Rule(Fact(warrant_valued='bad'), Fact(der_valued='low'))
    def financial2_rule_807(self):
        self.declare(Fact(recommendation='Warrant menunjukkan kondisi buruk. DER menunjukkan tingkat hutang yang rendah.'))


    @Rule(Fact(warrant_valued='bad'), Fact(roa_valued='low'))
    def financial2_rule_808(self):
        self.declare(Fact(recommendation='Warrant menunjukkan kondisi buruk. ROA menunjukkan efisiensi rendah.'))


    @Rule(Fact(warrant_valued='bad'), Fact(roe_valued='high'))
    def financial2_rule_809(self):
        self.declare(Fact(recommendation='Warrant menunjukkan kondisi buruk. ROE menunjukkan keuntungan yang tinggi.'))


    @Rule(Fact(net_income_valued='profit'), Fact(per_valued='high'))
    def financial2_rule_810(self):
        self.declare(Fact(recommendation='Laba bersih menunjukkan keuntungan. PER berada di tingkat yang tinggi.'))


    @Rule(Fact(net_income_valued='profit'), Fact(der_valued='low'))
    def financial2_rule_811(self):
        self.declare(Fact(recommendation='Laba bersih menunjukkan keuntungan. DER menunjukkan tingkat hutang yang rendah.'))


    @Rule(Fact(net_income_valued='profit'), Fact(roa_valued='low'))
    def financial2_rule_812(self):
        self.declare(Fact(recommendation='Laba bersih menunjukkan keuntungan. ROA menunjukkan efisiensi rendah.'))


    @Rule(Fact(net_income_valued='profit'), Fact(roe_valued='high'))
    def financial2_rule_813(self):
        self.declare(Fact(recommendation='Laba bersih menunjukkan keuntungan. ROE menunjukkan keuntungan yang tinggi.'))


    @Rule(Fact(per_valued='high'), Fact(der_valued='low'))
    def financial2_rule_814(self):
        self.declare(Fact(recommendation='PER berada di tingkat yang tinggi. DER menunjukkan tingkat hutang yang rendah.'))


    @Rule(Fact(per_valued='high'), Fact(roa_valued='low'))
    def financial2_rule_815(self):
        self.declare(Fact(recommendation='PER berada di tingkat yang tinggi. ROA menunjukkan efisiensi rendah.'))


    @Rule(Fact(per_valued='high'), Fact(roe_valued='high'))
    def financial2_rule_816(self):
        self.declare(Fact(recommendation='PER berada di tingkat yang tinggi. ROE menunjukkan keuntungan yang tinggi.'))


    @Rule(Fact(der_valued='low'), Fact(roa_valued='low'))
    def financial2_rule_817(self):
        self.declare(Fact(recommendation='DER menunjukkan tingkat hutang yang rendah. ROA menunjukkan efisiensi rendah.'))


    @Rule(Fact(der_valued='low'), Fact(roe_valued='high'))
    def financial2_rule_818(self):
        self.declare(Fact(recommendation='DER menunjukkan tingkat hutang yang rendah. ROE menunjukkan keuntungan yang tinggi.'))


    @Rule(Fact(roa_valued='low'), Fact(roe_valued='high'))
    def financial2_rule_819(self):
        self.declare(Fact(recommendation='ROA menunjukkan efisiensi rendah. ROE menunjukkan keuntungan yang tinggi.'))


    @Rule(Fact(underwriter_valued='good'), Fact(warrant_valued='bad'))
    def financial2_rule_820(self):
        self.declare(Fact(recommendation='Underwriter berkualitas baik. Warrant menunjukkan kondisi buruk.'))


    @Rule(Fact(underwriter_valued='good'), Fact(net_income_valued='profit'))
    def financial2_rule_821(self):
        self.declare(Fact(recommendation='Underwriter berkualitas baik. Laba bersih menunjukkan keuntungan.'))


    @Rule(Fact(underwriter_valued='good'), Fact(per_valued='high'))
    def financial2_rule_822(self):
        self.declare(Fact(recommendation='Underwriter berkualitas baik. PER berada di tingkat yang tinggi.'))


    @Rule(Fact(underwriter_valued='good'), Fact(der_valued='low'))
    def financial2_rule_823(self):
        self.declare(Fact(recommendation='Underwriter berkualitas baik. DER menunjukkan tingkat hutang yang rendah.'))


    @Rule(Fact(underwriter_valued='good'), Fact(roa_valued='low'))
    def financial2_rule_824(self):
        self.declare(Fact(recommendation='Underwriter berkualitas baik. ROA menunjukkan efisiensi rendah.'))


    @Rule(Fact(underwriter_valued='good'), Fact(roe_valued='low'))
    def financial2_rule_825(self):
        self.declare(Fact(recommendation='Underwriter berkualitas baik. ROE menunjukkan keuntungan yang rendah.'))


    @Rule(Fact(warrant_valued='bad'), Fact(net_income_valued='profit'))
    def financial2_rule_826(self):
        self.declare(Fact(recommendation='Warrant menunjukkan kondisi buruk. Laba bersih menunjukkan keuntungan.'))


    @Rule(Fact(warrant_valued='bad'), Fact(per_valued='high'))
    def financial2_rule_827(self):
        self.declare(Fact(recommendation='Warrant menunjukkan kondisi buruk. PER berada di tingkat yang tinggi.'))


    @Rule(Fact(warrant_valued='bad'), Fact(der_valued='low'))
    def financial2_rule_828(self):
        self.declare(Fact(recommendation='Warrant menunjukkan kondisi buruk. DER menunjukkan tingkat hutang yang rendah.'))


    @Rule(Fact(warrant_valued='bad'), Fact(roa_valued='low'))
    def financial2_rule_829(self):
        self.declare(Fact(recommendation='Warrant menunjukkan kondisi buruk. ROA menunjukkan efisiensi rendah.'))


    @Rule(Fact(warrant_valued='bad'), Fact(roe_valued='low'))
    def financial2_rule_830(self):
        self.declare(Fact(recommendation='Warrant menunjukkan kondisi buruk. ROE menunjukkan keuntungan yang rendah.'))


    @Rule(Fact(net_income_valued='profit'), Fact(per_valued='high'))
    def financial2_rule_831(self):
        self.declare(Fact(recommendation='Laba bersih menunjukkan keuntungan. PER berada di tingkat yang tinggi.'))


    @Rule(Fact(net_income_valued='profit'), Fact(der_valued='low'))
    def financial2_rule_832(self):
        self.declare(Fact(recommendation='Laba bersih menunjukkan keuntungan. DER menunjukkan tingkat hutang yang rendah.'))


    @Rule(Fact(net_income_valued='profit'), Fact(roa_valued='low'))
    def financial2_rule_833(self):
        self.declare(Fact(recommendation='Laba bersih menunjukkan keuntungan. ROA menunjukkan efisiensi rendah.'))


    @Rule(Fact(net_income_valued='profit'), Fact(roe_valued='low'))
    def financial2_rule_834(self):
        self.declare(Fact(recommendation='Laba bersih menunjukkan keuntungan. ROE menunjukkan keuntungan yang rendah.'))


    @Rule(Fact(per_valued='high'), Fact(der_valued='low'))
    def financial2_rule_835(self):
        self.declare(Fact(recommendation='PER berada di tingkat yang tinggi. DER menunjukkan tingkat hutang yang rendah.'))


    @Rule(Fact(per_valued='high'), Fact(roa_valued='low'))
    def financial2_rule_836(self):
        self.declare(Fact(recommendation='PER berada di tingkat yang tinggi. ROA menunjukkan efisiensi rendah.'))


    @Rule(Fact(per_valued='high'), Fact(roe_valued='low'))
    def financial2_rule_837(self):
        self.declare(Fact(recommendation='PER berada di tingkat yang tinggi. ROE menunjukkan keuntungan yang rendah.'))


    @Rule(Fact(der_valued='low'), Fact(roa_valued='low'))
    def financial2_rule_838(self):
        self.declare(Fact(recommendation='DER menunjukkan tingkat hutang yang rendah. ROA menunjukkan efisiensi rendah.'))


    @Rule(Fact(der_valued='low'), Fact(roe_valued='low'))
    def financial2_rule_839(self):
        self.declare(Fact(recommendation='DER menunjukkan tingkat hutang yang rendah. ROE menunjukkan keuntungan yang rendah.'))


    @Rule(Fact(roa_valued='low'), Fact(roe_valued='low'))
    def financial2_rule_840(self):
        self.declare(Fact(recommendation='ROA menunjukkan efisiensi rendah. ROE menunjukkan keuntungan yang rendah.'))


    @Rule(Fact(underwriter_valued='good'), Fact(warrant_valued='bad'))
    def financial2_rule_841(self):
        self.declare(Fact(recommendation='Underwriter berkualitas baik. Warrant menunjukkan kondisi buruk.'))


    @Rule(Fact(underwriter_valued='good'), Fact(net_income_valued='profit'))
    def financial2_rule_842(self):
        self.declare(Fact(recommendation='Underwriter berkualitas baik. Laba bersih menunjukkan keuntungan.'))


    @Rule(Fact(underwriter_valued='good'), Fact(per_valued='low'))
    def financial2_rule_843(self):
        self.declare(Fact(recommendation='Underwriter berkualitas baik. PER berada di tingkat yang rendah.'))


    @Rule(Fact(underwriter_valued='good'), Fact(der_valued='high'))
    def financial2_rule_844(self):
        self.declare(Fact(recommendation='Underwriter berkualitas baik. DER menunjukkan tingkat hutang yang tinggi.'))


    @Rule(Fact(underwriter_valued='good'), Fact(roa_valued='high'))
    def financial2_rule_845(self):
        self.declare(Fact(recommendation='Underwriter berkualitas baik. ROA menunjukkan efisiensi tinggi.'))


    @Rule(Fact(underwriter_valued='good'), Fact(roe_valued='high'))
    def financial2_rule_846(self):
        self.declare(Fact(recommendation='Underwriter berkualitas baik. ROE menunjukkan keuntungan yang tinggi.'))


    @Rule(Fact(warrant_valued='bad'), Fact(net_income_valued='profit'))
    def financial2_rule_847(self):
        self.declare(Fact(recommendation='Warrant menunjukkan kondisi buruk. Laba bersih menunjukkan keuntungan.'))


    @Rule(Fact(warrant_valued='bad'), Fact(per_valued='low'))
    def financial2_rule_848(self):
        self.declare(Fact(recommendation='Warrant menunjukkan kondisi buruk. PER berada di tingkat yang rendah.'))


    @Rule(Fact(warrant_valued='bad'), Fact(der_valued='high'))
    def financial2_rule_849(self):
        self.declare(Fact(recommendation='Warrant menunjukkan kondisi buruk. DER menunjukkan tingkat hutang yang tinggi.'))


    @Rule(Fact(warrant_valued='bad'), Fact(roa_valued='high'))
    def financial2_rule_850(self):
        self.declare(Fact(recommendation='Warrant menunjukkan kondisi buruk. ROA menunjukkan efisiensi tinggi.'))


    @Rule(Fact(warrant_valued='bad'), Fact(roe_valued='high'))
    def financial2_rule_851(self):
        self.declare(Fact(recommendation='Warrant menunjukkan kondisi buruk. ROE menunjukkan keuntungan yang tinggi.'))


    @Rule(Fact(net_income_valued='profit'), Fact(per_valued='low'))
    def financial2_rule_852(self):
        self.declare(Fact(recommendation='Laba bersih menunjukkan keuntungan. PER berada di tingkat yang rendah.'))


    @Rule(Fact(net_income_valued='profit'), Fact(der_valued='high'))
    def financial2_rule_853(self):
        self.declare(Fact(recommendation='Laba bersih menunjukkan keuntungan. DER menunjukkan tingkat hutang yang tinggi.'))


    @Rule(Fact(net_income_valued='profit'), Fact(roa_valued='high'))
    def financial2_rule_854(self):
        self.declare(Fact(recommendation='Laba bersih menunjukkan keuntungan. ROA menunjukkan efisiensi tinggi.'))


    @Rule(Fact(net_income_valued='profit'), Fact(roe_valued='high'))
    def financial2_rule_855(self):
        self.declare(Fact(recommendation='Laba bersih menunjukkan keuntungan. ROE menunjukkan keuntungan yang tinggi.'))


    @Rule(Fact(per_valued='low'), Fact(der_valued='high'))
    def financial2_rule_856(self):
        self.declare(Fact(recommendation='PER berada di tingkat yang rendah. DER menunjukkan tingkat hutang yang tinggi.'))


    @Rule(Fact(per_valued='low'), Fact(roa_valued='high'))
    def financial2_rule_857(self):
        self.declare(Fact(recommendation='PER berada di tingkat yang rendah. ROA menunjukkan efisiensi tinggi.'))


    @Rule(Fact(per_valued='low'), Fact(roe_valued='high'))
    def financial2_rule_858(self):
        self.declare(Fact(recommendation='PER berada di tingkat yang rendah. ROE menunjukkan keuntungan yang tinggi.'))


    @Rule(Fact(der_valued='high'), Fact(roa_valued='high'))
    def financial2_rule_859(self):
        self.declare(Fact(recommendation='DER menunjukkan tingkat hutang yang tinggi. ROA menunjukkan efisiensi tinggi.'))


    @Rule(Fact(der_valued='high'), Fact(roe_valued='high'))
    def financial2_rule_860(self):
        self.declare(Fact(recommendation='DER menunjukkan tingkat hutang yang tinggi. ROE menunjukkan keuntungan yang tinggi.'))


    @Rule(Fact(roa_valued='high'), Fact(roe_valued='high'))
    def financial2_rule_861(self):
        self.declare(Fact(recommendation='ROA menunjukkan efisiensi tinggi. ROE menunjukkan keuntungan yang tinggi.'))


    @Rule(Fact(underwriter_valued='good'), Fact(warrant_valued='bad'))
    def financial2_rule_862(self):
        self.declare(Fact(recommendation='Underwriter berkualitas baik. Warrant menunjukkan kondisi buruk.'))


    @Rule(Fact(underwriter_valued='good'), Fact(net_income_valued='profit'))
    def financial2_rule_863(self):
        self.declare(Fact(recommendation='Underwriter berkualitas baik. Laba bersih menunjukkan keuntungan.'))


    @Rule(Fact(underwriter_valued='good'), Fact(per_valued='low'))
    def financial2_rule_864(self):
        self.declare(Fact(recommendation='Underwriter berkualitas baik. PER berada di tingkat yang rendah.'))


    @Rule(Fact(underwriter_valued='good'), Fact(der_valued='high'))
    def financial2_rule_865(self):
        self.declare(Fact(recommendation='Underwriter berkualitas baik. DER menunjukkan tingkat hutang yang tinggi.'))


    @Rule(Fact(underwriter_valued='good'), Fact(roa_valued='high'))
    def financial2_rule_866(self):
        self.declare(Fact(recommendation='Underwriter berkualitas baik. ROA menunjukkan efisiensi tinggi.'))


    @Rule(Fact(underwriter_valued='good'), Fact(roe_valued='low'))
    def financial2_rule_867(self):
        self.declare(Fact(recommendation='Underwriter berkualitas baik. ROE menunjukkan keuntungan yang rendah.'))


    @Rule(Fact(warrant_valued='bad'), Fact(net_income_valued='profit'))
    def financial2_rule_868(self):
        self.declare(Fact(recommendation='Warrant menunjukkan kondisi buruk. Laba bersih menunjukkan keuntungan.'))


    @Rule(Fact(warrant_valued='bad'), Fact(per_valued='low'))
    def financial2_rule_869(self):
        self.declare(Fact(recommendation='Warrant menunjukkan kondisi buruk. PER berada di tingkat yang rendah.'))


    @Rule(Fact(warrant_valued='bad'), Fact(der_valued='high'))
    def financial2_rule_870(self):
        self.declare(Fact(recommendation='Warrant menunjukkan kondisi buruk. DER menunjukkan tingkat hutang yang tinggi.'))


    @Rule(Fact(warrant_valued='bad'), Fact(roa_valued='high'))
    def financial2_rule_871(self):
        self.declare(Fact(recommendation='Warrant menunjukkan kondisi buruk. ROA menunjukkan efisiensi tinggi.'))


    @Rule(Fact(warrant_valued='bad'), Fact(roe_valued='low'))
    def financial2_rule_872(self):
        self.declare(Fact(recommendation='Warrant menunjukkan kondisi buruk. ROE menunjukkan keuntungan yang rendah.'))


    @Rule(Fact(net_income_valued='profit'), Fact(per_valued='low'))
    def financial2_rule_873(self):
        self.declare(Fact(recommendation='Laba bersih menunjukkan keuntungan. PER berada di tingkat yang rendah.'))


    @Rule(Fact(net_income_valued='profit'), Fact(der_valued='high'))
    def financial2_rule_874(self):
        self.declare(Fact(recommendation='Laba bersih menunjukkan keuntungan. DER menunjukkan tingkat hutang yang tinggi.'))


    @Rule(Fact(net_income_valued='profit'), Fact(roa_valued='high'))
    def financial2_rule_875(self):
        self.declare(Fact(recommendation='Laba bersih menunjukkan keuntungan. ROA menunjukkan efisiensi tinggi.'))


    @Rule(Fact(net_income_valued='profit'), Fact(roe_valued='low'))
    def financial2_rule_876(self):
        self.declare(Fact(recommendation='Laba bersih menunjukkan keuntungan. ROE menunjukkan keuntungan yang rendah.'))


    @Rule(Fact(per_valued='low'), Fact(der_valued='high'))
    def financial2_rule_877(self):
        self.declare(Fact(recommendation='PER berada di tingkat yang rendah. DER menunjukkan tingkat hutang yang tinggi.'))


    @Rule(Fact(per_valued='low'), Fact(roa_valued='high'))
    def financial2_rule_878(self):
        self.declare(Fact(recommendation='PER berada di tingkat yang rendah. ROA menunjukkan efisiensi tinggi.'))


    @Rule(Fact(per_valued='low'), Fact(roe_valued='low'))
    def financial2_rule_879(self):
        self.declare(Fact(recommendation='PER berada di tingkat yang rendah. ROE menunjukkan keuntungan yang rendah.'))


    @Rule(Fact(der_valued='high'), Fact(roa_valued='high'))
    def financial2_rule_880(self):
        self.declare(Fact(recommendation='DER menunjukkan tingkat hutang yang tinggi. ROA menunjukkan efisiensi tinggi.'))


    @Rule(Fact(der_valued='high'), Fact(roe_valued='low'))
    def financial2_rule_881(self):
        self.declare(Fact(recommendation='DER menunjukkan tingkat hutang yang tinggi. ROE menunjukkan keuntungan yang rendah.'))


    @Rule(Fact(roa_valued='high'), Fact(roe_valued='low'))
    def financial2_rule_882(self):
        self.declare(Fact(recommendation='ROA menunjukkan efisiensi tinggi. ROE menunjukkan keuntungan yang rendah.'))


    @Rule(Fact(underwriter_valued='good'), Fact(warrant_valued='bad'))
    def financial2_rule_883(self):
        self.declare(Fact(recommendation='Underwriter berkualitas baik. Warrant menunjukkan kondisi buruk.'))


    @Rule(Fact(underwriter_valued='good'), Fact(net_income_valued='profit'))
    def financial2_rule_884(self):
        self.declare(Fact(recommendation='Underwriter berkualitas baik. Laba bersih menunjukkan keuntungan.'))


    @Rule(Fact(underwriter_valued='good'), Fact(per_valued='low'))
    def financial2_rule_885(self):
        self.declare(Fact(recommendation='Underwriter berkualitas baik. PER berada di tingkat yang rendah.'))


    @Rule(Fact(underwriter_valued='good'), Fact(der_valued='high'))
    def financial2_rule_886(self):
        self.declare(Fact(recommendation='Underwriter berkualitas baik. DER menunjukkan tingkat hutang yang tinggi.'))


    @Rule(Fact(underwriter_valued='good'), Fact(roa_valued='low'))
    def financial2_rule_887(self):
        self.declare(Fact(recommendation='Underwriter berkualitas baik. ROA menunjukkan efisiensi rendah.'))


    @Rule(Fact(underwriter_valued='good'), Fact(roe_valued='high'))
    def financial2_rule_888(self):
        self.declare(Fact(recommendation='Underwriter berkualitas baik. ROE menunjukkan keuntungan yang tinggi.'))


    @Rule(Fact(warrant_valued='bad'), Fact(net_income_valued='profit'))
    def financial2_rule_889(self):
        self.declare(Fact(recommendation='Warrant menunjukkan kondisi buruk. Laba bersih menunjukkan keuntungan.'))


    @Rule(Fact(warrant_valued='bad'), Fact(per_valued='low'))
    def financial2_rule_890(self):
        self.declare(Fact(recommendation='Warrant menunjukkan kondisi buruk. PER berada di tingkat yang rendah.'))


    @Rule(Fact(warrant_valued='bad'), Fact(der_valued='high'))
    def financial2_rule_891(self):
        self.declare(Fact(recommendation='Warrant menunjukkan kondisi buruk. DER menunjukkan tingkat hutang yang tinggi.'))


    @Rule(Fact(warrant_valued='bad'), Fact(roa_valued='low'))
    def financial2_rule_892(self):
        self.declare(Fact(recommendation='Warrant menunjukkan kondisi buruk. ROA menunjukkan efisiensi rendah.'))


    @Rule(Fact(warrant_valued='bad'), Fact(roe_valued='high'))
    def financial2_rule_893(self):
        self.declare(Fact(recommendation='Warrant menunjukkan kondisi buruk. ROE menunjukkan keuntungan yang tinggi.'))


    @Rule(Fact(net_income_valued='profit'), Fact(per_valued='low'))
    def financial2_rule_894(self):
        self.declare(Fact(recommendation='Laba bersih menunjukkan keuntungan. PER berada di tingkat yang rendah.'))


    @Rule(Fact(net_income_valued='profit'), Fact(der_valued='high'))
    def financial2_rule_895(self):
        self.declare(Fact(recommendation='Laba bersih menunjukkan keuntungan. DER menunjukkan tingkat hutang yang tinggi.'))


    @Rule(Fact(net_income_valued='profit'), Fact(roa_valued='low'))
    def financial2_rule_896(self):
        self.declare(Fact(recommendation='Laba bersih menunjukkan keuntungan. ROA menunjukkan efisiensi rendah.'))


    @Rule(Fact(net_income_valued='profit'), Fact(roe_valued='high'))
    def financial2_rule_897(self):
        self.declare(Fact(recommendation='Laba bersih menunjukkan keuntungan. ROE menunjukkan keuntungan yang tinggi.'))


    @Rule(Fact(per_valued='low'), Fact(der_valued='high'))
    def financial2_rule_898(self):
        self.declare(Fact(recommendation='PER berada di tingkat yang rendah. DER menunjukkan tingkat hutang yang tinggi.'))


    @Rule(Fact(per_valued='low'), Fact(roa_valued='low'))
    def financial2_rule_899(self):
        self.declare(Fact(recommendation='PER berada di tingkat yang rendah. ROA menunjukkan efisiensi rendah.'))


    @Rule(Fact(per_valued='low'), Fact(roe_valued='high'))
    def financial2_rule_900(self):
        self.declare(Fact(recommendation='PER berada di tingkat yang rendah. ROE menunjukkan keuntungan yang tinggi.'))


    @Rule(Fact(der_valued='high'), Fact(roa_valued='low'))
    def financial2_rule_901(self):
        self.declare(Fact(recommendation='DER menunjukkan tingkat hutang yang tinggi. ROA menunjukkan efisiensi rendah.'))


    @Rule(Fact(der_valued='high'), Fact(roe_valued='high'))
    def financial2_rule_902(self):
        self.declare(Fact(recommendation='DER menunjukkan tingkat hutang yang tinggi. ROE menunjukkan keuntungan yang tinggi.'))


    @Rule(Fact(roa_valued='low'), Fact(roe_valued='high'))
    def financial2_rule_903(self):
        self.declare(Fact(recommendation='ROA menunjukkan efisiensi rendah. ROE menunjukkan keuntungan yang tinggi.'))


    @Rule(Fact(underwriter_valued='good'), Fact(warrant_valued='bad'))
    def financial2_rule_904(self):
        self.declare(Fact(recommendation='Underwriter berkualitas baik. Warrant menunjukkan kondisi buruk.'))


    @Rule(Fact(underwriter_valued='good'), Fact(net_income_valued='profit'))
    def financial2_rule_905(self):
        self.declare(Fact(recommendation='Underwriter berkualitas baik. Laba bersih menunjukkan keuntungan.'))


    @Rule(Fact(underwriter_valued='good'), Fact(per_valued='low'))
    def financial2_rule_906(self):
        self.declare(Fact(recommendation='Underwriter berkualitas baik. PER berada di tingkat yang rendah.'))


    @Rule(Fact(underwriter_valued='good'), Fact(der_valued='high'))
    def financial2_rule_907(self):
        self.declare(Fact(recommendation='Underwriter berkualitas baik. DER menunjukkan tingkat hutang yang tinggi.'))


    @Rule(Fact(underwriter_valued='good'), Fact(roa_valued='low'))
    def financial2_rule_908(self):
        self.declare(Fact(recommendation='Underwriter berkualitas baik. ROA menunjukkan efisiensi rendah.'))


    @Rule(Fact(underwriter_valued='good'), Fact(roe_valued='low'))
    def financial2_rule_909(self):
        self.declare(Fact(recommendation='Underwriter berkualitas baik. ROE menunjukkan keuntungan yang rendah.'))


    @Rule(Fact(warrant_valued='bad'), Fact(net_income_valued='profit'))
    def financial2_rule_910(self):
        self.declare(Fact(recommendation='Warrant menunjukkan kondisi buruk. Laba bersih menunjukkan keuntungan.'))


    @Rule(Fact(warrant_valued='bad'), Fact(per_valued='low'))
    def financial2_rule_911(self):
        self.declare(Fact(recommendation='Warrant menunjukkan kondisi buruk. PER berada di tingkat yang rendah.'))


    @Rule(Fact(warrant_valued='bad'), Fact(der_valued='high'))
    def financial2_rule_912(self):
        self.declare(Fact(recommendation='Warrant menunjukkan kondisi buruk. DER menunjukkan tingkat hutang yang tinggi.'))


    @Rule(Fact(warrant_valued='bad'), Fact(roa_valued='low'))
    def financial2_rule_913(self):
        self.declare(Fact(recommendation='Warrant menunjukkan kondisi buruk. ROA menunjukkan efisiensi rendah.'))


    @Rule(Fact(warrant_valued='bad'), Fact(roe_valued='low'))
    def financial2_rule_914(self):
        self.declare(Fact(recommendation='Warrant menunjukkan kondisi buruk. ROE menunjukkan keuntungan yang rendah.'))


    @Rule(Fact(net_income_valued='profit'), Fact(per_valued='low'))
    def financial2_rule_915(self):
        self.declare(Fact(recommendation='Laba bersih menunjukkan keuntungan. PER berada di tingkat yang rendah.'))


    @Rule(Fact(net_income_valued='profit'), Fact(der_valued='high'))
    def financial2_rule_916(self):
        self.declare(Fact(recommendation='Laba bersih menunjukkan keuntungan. DER menunjukkan tingkat hutang yang tinggi.'))


    @Rule(Fact(net_income_valued='profit'), Fact(roa_valued='low'))
    def financial2_rule_917(self):
        self.declare(Fact(recommendation='Laba bersih menunjukkan keuntungan. ROA menunjukkan efisiensi rendah.'))


    @Rule(Fact(net_income_valued='profit'), Fact(roe_valued='low'))
    def financial2_rule_918(self):
        self.declare(Fact(recommendation='Laba bersih menunjukkan keuntungan. ROE menunjukkan keuntungan yang rendah.'))


    @Rule(Fact(per_valued='low'), Fact(der_valued='high'))
    def financial2_rule_919(self):
        self.declare(Fact(recommendation='PER berada di tingkat yang rendah. DER menunjukkan tingkat hutang yang tinggi.'))


    @Rule(Fact(per_valued='low'), Fact(roa_valued='low'))
    def financial2_rule_920(self):
        self.declare(Fact(recommendation='PER berada di tingkat yang rendah. ROA menunjukkan efisiensi rendah.'))


    @Rule(Fact(per_valued='low'), Fact(roe_valued='low'))
    def financial2_rule_921(self):
        self.declare(Fact(recommendation='PER berada di tingkat yang rendah. ROE menunjukkan keuntungan yang rendah.'))


    @Rule(Fact(der_valued='high'), Fact(roa_valued='low'))
    def financial2_rule_922(self):
        self.declare(Fact(recommendation='DER menunjukkan tingkat hutang yang tinggi. ROA menunjukkan efisiensi rendah.'))


    @Rule(Fact(der_valued='high'), Fact(roe_valued='low'))
    def financial2_rule_923(self):
        self.declare(Fact(recommendation='DER menunjukkan tingkat hutang yang tinggi. ROE menunjukkan keuntungan yang rendah.'))


    @Rule(Fact(roa_valued='low'), Fact(roe_valued='low'))
    def financial2_rule_924(self):
        self.declare(Fact(recommendation='ROA menunjukkan efisiensi rendah. ROE menunjukkan keuntungan yang rendah.'))


    @Rule(Fact(underwriter_valued='good'), Fact(warrant_valued='bad'))
    def financial2_rule_925(self):
        self.declare(Fact(recommendation='Underwriter berkualitas baik. Warrant menunjukkan kondisi buruk.'))


    @Rule(Fact(underwriter_valued='good'), Fact(net_income_valued='profit'))
    def financial2_rule_926(self):
        self.declare(Fact(recommendation='Underwriter berkualitas baik. Laba bersih menunjukkan keuntungan.'))


    @Rule(Fact(underwriter_valued='good'), Fact(per_valued='low'))
    def financial2_rule_927(self):
        self.declare(Fact(recommendation='Underwriter berkualitas baik. PER berada di tingkat yang rendah.'))


    @Rule(Fact(underwriter_valued='good'), Fact(der_valued='low'))
    def financial2_rule_928(self):
        self.declare(Fact(recommendation='Underwriter berkualitas baik. DER menunjukkan tingkat hutang yang rendah.'))


    @Rule(Fact(underwriter_valued='good'), Fact(roa_valued='high'))
    def financial2_rule_929(self):
        self.declare(Fact(recommendation='Underwriter berkualitas baik. ROA menunjukkan efisiensi tinggi.'))


    @Rule(Fact(underwriter_valued='good'), Fact(roe_valued='high'))
    def financial2_rule_930(self):
        self.declare(Fact(recommendation='Underwriter berkualitas baik. ROE menunjukkan keuntungan yang tinggi.'))


    @Rule(Fact(warrant_valued='bad'), Fact(net_income_valued='profit'))
    def financial2_rule_931(self):
        self.declare(Fact(recommendation='Warrant menunjukkan kondisi buruk. Laba bersih menunjukkan keuntungan.'))


    @Rule(Fact(warrant_valued='bad'), Fact(per_valued='low'))
    def financial2_rule_932(self):
        self.declare(Fact(recommendation='Warrant menunjukkan kondisi buruk. PER berada di tingkat yang rendah.'))


    @Rule(Fact(warrant_valued='bad'), Fact(der_valued='low'))
    def financial2_rule_933(self):
        self.declare(Fact(recommendation='Warrant menunjukkan kondisi buruk. DER menunjukkan tingkat hutang yang rendah.'))


    @Rule(Fact(warrant_valued='bad'), Fact(roa_valued='high'))
    def financial2_rule_934(self):
        self.declare(Fact(recommendation='Warrant menunjukkan kondisi buruk. ROA menunjukkan efisiensi tinggi.'))


    @Rule(Fact(warrant_valued='bad'), Fact(roe_valued='high'))
    def financial2_rule_935(self):
        self.declare(Fact(recommendation='Warrant menunjukkan kondisi buruk. ROE menunjukkan keuntungan yang tinggi.'))


    @Rule(Fact(net_income_valued='profit'), Fact(per_valued='low'))
    def financial2_rule_936(self):
        self.declare(Fact(recommendation='Laba bersih menunjukkan keuntungan. PER berada di tingkat yang rendah.'))


    @Rule(Fact(net_income_valued='profit'), Fact(der_valued='low'))
    def financial2_rule_937(self):
        self.declare(Fact(recommendation='Laba bersih menunjukkan keuntungan. DER menunjukkan tingkat hutang yang rendah.'))


    @Rule(Fact(net_income_valued='profit'), Fact(roa_valued='high'))
    def financial2_rule_938(self):
        self.declare(Fact(recommendation='Laba bersih menunjukkan keuntungan. ROA menunjukkan efisiensi tinggi.'))


    @Rule(Fact(net_income_valued='profit'), Fact(roe_valued='high'))
    def financial2_rule_939(self):
        self.declare(Fact(recommendation='Laba bersih menunjukkan keuntungan. ROE menunjukkan keuntungan yang tinggi.'))


    @Rule(Fact(per_valued='low'), Fact(der_valued='low'))
    def financial2_rule_940(self):
        self.declare(Fact(recommendation='PER berada di tingkat yang rendah. DER menunjukkan tingkat hutang yang rendah.'))


    @Rule(Fact(per_valued='low'), Fact(roa_valued='high'))
    def financial2_rule_941(self):
        self.declare(Fact(recommendation='PER berada di tingkat yang rendah. ROA menunjukkan efisiensi tinggi.'))


    @Rule(Fact(per_valued='low'), Fact(roe_valued='high'))
    def financial2_rule_942(self):
        self.declare(Fact(recommendation='PER berada di tingkat yang rendah. ROE menunjukkan keuntungan yang tinggi.'))


    @Rule(Fact(der_valued='low'), Fact(roa_valued='high'))
    def financial2_rule_943(self):
        self.declare(Fact(recommendation='DER menunjukkan tingkat hutang yang rendah. ROA menunjukkan efisiensi tinggi.'))


    @Rule(Fact(der_valued='low'), Fact(roe_valued='high'))
    def financial2_rule_944(self):
        self.declare(Fact(recommendation='DER menunjukkan tingkat hutang yang rendah. ROE menunjukkan keuntungan yang tinggi.'))


    @Rule(Fact(roa_valued='high'), Fact(roe_valued='high'))
    def financial2_rule_945(self):
        self.declare(Fact(recommendation='ROA menunjukkan efisiensi tinggi. ROE menunjukkan keuntungan yang tinggi.'))


    @Rule(Fact(underwriter_valued='good'), Fact(warrant_valued='bad'))
    def financial2_rule_946(self):
        self.declare(Fact(recommendation='Underwriter berkualitas baik. Warrant menunjukkan kondisi buruk.'))


    @Rule(Fact(underwriter_valued='good'), Fact(net_income_valued='profit'))
    def financial2_rule_947(self):
        self.declare(Fact(recommendation='Underwriter berkualitas baik. Laba bersih menunjukkan keuntungan.'))


    @Rule(Fact(underwriter_valued='good'), Fact(per_valued='low'))
    def financial2_rule_948(self):
        self.declare(Fact(recommendation='Underwriter berkualitas baik. PER berada di tingkat yang rendah.'))


    @Rule(Fact(underwriter_valued='good'), Fact(der_valued='low'))
    def financial2_rule_949(self):
        self.declare(Fact(recommendation='Underwriter berkualitas baik. DER menunjukkan tingkat hutang yang rendah.'))


    @Rule(Fact(underwriter_valued='good'), Fact(roa_valued='high'))
    def financial2_rule_950(self):
        self.declare(Fact(recommendation='Underwriter berkualitas baik. ROA menunjukkan efisiensi tinggi.'))


    @Rule(Fact(underwriter_valued='good'), Fact(roe_valued='low'))
    def financial2_rule_951(self):
        self.declare(Fact(recommendation='Underwriter berkualitas baik. ROE menunjukkan keuntungan yang rendah.'))


    @Rule(Fact(warrant_valued='bad'), Fact(net_income_valued='profit'))
    def financial2_rule_952(self):
        self.declare(Fact(recommendation='Warrant menunjukkan kondisi buruk. Laba bersih menunjukkan keuntungan.'))


    @Rule(Fact(warrant_valued='bad'), Fact(per_valued='low'))
    def financial2_rule_953(self):
        self.declare(Fact(recommendation='Warrant menunjukkan kondisi buruk. PER berada di tingkat yang rendah.'))


    @Rule(Fact(warrant_valued='bad'), Fact(der_valued='low'))
    def financial2_rule_954(self):
        self.declare(Fact(recommendation='Warrant menunjukkan kondisi buruk. DER menunjukkan tingkat hutang yang rendah.'))


    @Rule(Fact(warrant_valued='bad'), Fact(roa_valued='high'))
    def financial2_rule_955(self):
        self.declare(Fact(recommendation='Warrant menunjukkan kondisi buruk. ROA menunjukkan efisiensi tinggi.'))


    @Rule(Fact(warrant_valued='bad'), Fact(roe_valued='low'))
    def financial2_rule_956(self):
        self.declare(Fact(recommendation='Warrant menunjukkan kondisi buruk. ROE menunjukkan keuntungan yang rendah.'))


    @Rule(Fact(net_income_valued='profit'), Fact(per_valued='low'))
    def financial2_rule_957(self):
        self.declare(Fact(recommendation='Laba bersih menunjukkan keuntungan. PER berada di tingkat yang rendah.'))


    @Rule(Fact(net_income_valued='profit'), Fact(der_valued='low'))
    def financial2_rule_958(self):
        self.declare(Fact(recommendation='Laba bersih menunjukkan keuntungan. DER menunjukkan tingkat hutang yang rendah.'))


    @Rule(Fact(net_income_valued='profit'), Fact(roa_valued='high'))
    def financial2_rule_959(self):
        self.declare(Fact(recommendation='Laba bersih menunjukkan keuntungan. ROA menunjukkan efisiensi tinggi.'))


    @Rule(Fact(net_income_valued='profit'), Fact(roe_valued='low'))
    def financial2_rule_960(self):
        self.declare(Fact(recommendation='Laba bersih menunjukkan keuntungan. ROE menunjukkan keuntungan yang rendah.'))


    @Rule(Fact(per_valued='low'), Fact(der_valued='low'))
    def financial2_rule_961(self):
        self.declare(Fact(recommendation='PER berada di tingkat yang rendah. DER menunjukkan tingkat hutang yang rendah.'))


    @Rule(Fact(per_valued='low'), Fact(roa_valued='high'))
    def financial2_rule_962(self):
        self.declare(Fact(recommendation='PER berada di tingkat yang rendah. ROA menunjukkan efisiensi tinggi.'))


    @Rule(Fact(per_valued='low'), Fact(roe_valued='low'))
    def financial2_rule_963(self):
        self.declare(Fact(recommendation='PER berada di tingkat yang rendah. ROE menunjukkan keuntungan yang rendah.'))


    @Rule(Fact(der_valued='low'), Fact(roa_valued='high'))
    def financial2_rule_964(self):
        self.declare(Fact(recommendation='DER menunjukkan tingkat hutang yang rendah. ROA menunjukkan efisiensi tinggi.'))


    @Rule(Fact(der_valued='low'), Fact(roe_valued='low'))
    def financial2_rule_965(self):
        self.declare(Fact(recommendation='DER menunjukkan tingkat hutang yang rendah. ROE menunjukkan keuntungan yang rendah.'))


    @Rule(Fact(roa_valued='high'), Fact(roe_valued='low'))
    def financial2_rule_966(self):
        self.declare(Fact(recommendation='ROA menunjukkan efisiensi tinggi. ROE menunjukkan keuntungan yang rendah.'))


    @Rule(Fact(underwriter_valued='good'), Fact(warrant_valued='bad'))
    def financial2_rule_967(self):
        self.declare(Fact(recommendation='Underwriter berkualitas baik. Warrant menunjukkan kondisi buruk.'))


    @Rule(Fact(underwriter_valued='good'), Fact(net_income_valued='profit'))
    def financial2_rule_968(self):
        self.declare(Fact(recommendation='Underwriter berkualitas baik. Laba bersih menunjukkan keuntungan.'))


    @Rule(Fact(underwriter_valued='good'), Fact(per_valued='low'))
    def financial2_rule_969(self):
        self.declare(Fact(recommendation='Underwriter berkualitas baik. PER berada di tingkat yang rendah.'))


    @Rule(Fact(underwriter_valued='good'), Fact(der_valued='low'))
    def financial2_rule_970(self):
        self.declare(Fact(recommendation='Underwriter berkualitas baik. DER menunjukkan tingkat hutang yang rendah.'))


    @Rule(Fact(underwriter_valued='good'), Fact(roa_valued='low'))
    def financial2_rule_971(self):
        self.declare(Fact(recommendation='Underwriter berkualitas baik. ROA menunjukkan efisiensi rendah.'))


    @Rule(Fact(underwriter_valued='good'), Fact(roe_valued='high'))
    def financial2_rule_972(self):
        self.declare(Fact(recommendation='Underwriter berkualitas baik. ROE menunjukkan keuntungan yang tinggi.'))


    @Rule(Fact(warrant_valued='bad'), Fact(net_income_valued='profit'))
    def financial2_rule_973(self):
        self.declare(Fact(recommendation='Warrant menunjukkan kondisi buruk. Laba bersih menunjukkan keuntungan.'))


    @Rule(Fact(warrant_valued='bad'), Fact(per_valued='low'))
    def financial2_rule_974(self):
        self.declare(Fact(recommendation='Warrant menunjukkan kondisi buruk. PER berada di tingkat yang rendah.'))


    @Rule(Fact(warrant_valued='bad'), Fact(der_valued='low'))
    def financial2_rule_975(self):
        self.declare(Fact(recommendation='Warrant menunjukkan kondisi buruk. DER menunjukkan tingkat hutang yang rendah.'))


    @Rule(Fact(warrant_valued='bad'), Fact(roa_valued='low'))
    def financial2_rule_976(self):
        self.declare(Fact(recommendation='Warrant menunjukkan kondisi buruk. ROA menunjukkan efisiensi rendah.'))


    @Rule(Fact(warrant_valued='bad'), Fact(roe_valued='high'))
    def financial2_rule_977(self):
        self.declare(Fact(recommendation='Warrant menunjukkan kondisi buruk. ROE menunjukkan keuntungan yang tinggi.'))


    @Rule(Fact(net_income_valued='profit'), Fact(per_valued='low'))
    def financial2_rule_978(self):
        self.declare(Fact(recommendation='Laba bersih menunjukkan keuntungan. PER berada di tingkat yang rendah.'))


    @Rule(Fact(net_income_valued='profit'), Fact(der_valued='low'))
    def financial2_rule_979(self):
        self.declare(Fact(recommendation='Laba bersih menunjukkan keuntungan. DER menunjukkan tingkat hutang yang rendah.'))


    @Rule(Fact(net_income_valued='profit'), Fact(roa_valued='low'))
    def financial2_rule_980(self):
        self.declare(Fact(recommendation='Laba bersih menunjukkan keuntungan. ROA menunjukkan efisiensi rendah.'))


    @Rule(Fact(net_income_valued='profit'), Fact(roe_valued='high'))
    def financial2_rule_981(self):
        self.declare(Fact(recommendation='Laba bersih menunjukkan keuntungan. ROE menunjukkan keuntungan yang tinggi.'))


    @Rule(Fact(per_valued='low'), Fact(der_valued='low'))
    def financial2_rule_982(self):
        self.declare(Fact(recommendation='PER berada di tingkat yang rendah. DER menunjukkan tingkat hutang yang rendah.'))


    @Rule(Fact(per_valued='low'), Fact(roa_valued='low'))
    def financial2_rule_983(self):
        self.declare(Fact(recommendation='PER berada di tingkat yang rendah. ROA menunjukkan efisiensi rendah.'))


    @Rule(Fact(per_valued='low'), Fact(roe_valued='high'))
    def financial2_rule_984(self):
        self.declare(Fact(recommendation='PER berada di tingkat yang rendah. ROE menunjukkan keuntungan yang tinggi.'))


    @Rule(Fact(der_valued='low'), Fact(roa_valued='low'))
    def financial2_rule_985(self):
        self.declare(Fact(recommendation='DER menunjukkan tingkat hutang yang rendah. ROA menunjukkan efisiensi rendah.'))


    @Rule(Fact(der_valued='low'), Fact(roe_valued='high'))
    def financial2_rule_986(self):
        self.declare(Fact(recommendation='DER menunjukkan tingkat hutang yang rendah. ROE menunjukkan keuntungan yang tinggi.'))


    @Rule(Fact(roa_valued='low'), Fact(roe_valued='high'))
    def financial2_rule_987(self):
        self.declare(Fact(recommendation='ROA menunjukkan efisiensi rendah. ROE menunjukkan keuntungan yang tinggi.'))


    @Rule(Fact(underwriter_valued='good'), Fact(warrant_valued='bad'))
    def financial2_rule_988(self):
        self.declare(Fact(recommendation='Underwriter berkualitas baik. Warrant menunjukkan kondisi buruk.'))


    @Rule(Fact(underwriter_valued='good'), Fact(net_income_valued='profit'))
    def financial2_rule_989(self):
        self.declare(Fact(recommendation='Underwriter berkualitas baik. Laba bersih menunjukkan keuntungan.'))


    @Rule(Fact(underwriter_valued='good'), Fact(per_valued='low'))
    def financial2_rule_990(self):
        self.declare(Fact(recommendation='Underwriter berkualitas baik. PER berada di tingkat yang rendah.'))


    @Rule(Fact(underwriter_valued='good'), Fact(der_valued='low'))
    def financial2_rule_991(self):
        self.declare(Fact(recommendation='Underwriter berkualitas baik. DER menunjukkan tingkat hutang yang rendah.'))


    @Rule(Fact(underwriter_valued='good'), Fact(roa_valued='low'))
    def financial2_rule_992(self):
        self.declare(Fact(recommendation='Underwriter berkualitas baik. ROA menunjukkan efisiensi rendah.'))


    @Rule(Fact(underwriter_valued='good'), Fact(roe_valued='low'))
    def financial2_rule_993(self):
        self.declare(Fact(recommendation='Underwriter berkualitas baik. ROE menunjukkan keuntungan yang rendah.'))


    @Rule(Fact(warrant_valued='bad'), Fact(net_income_valued='profit'))
    def financial2_rule_994(self):
        self.declare(Fact(recommendation='Warrant menunjukkan kondisi buruk. Laba bersih menunjukkan keuntungan.'))


    @Rule(Fact(warrant_valued='bad'), Fact(per_valued='low'))
    def financial2_rule_995(self):
        self.declare(Fact(recommendation='Warrant menunjukkan kondisi buruk. PER berada di tingkat yang rendah.'))


    @Rule(Fact(warrant_valued='bad'), Fact(der_valued='low'))
    def financial2_rule_996(self):
        self.declare(Fact(recommendation='Warrant menunjukkan kondisi buruk. DER menunjukkan tingkat hutang yang rendah.'))


    @Rule(Fact(warrant_valued='bad'), Fact(roa_valued='low'))
    def financial2_rule_997(self):
        self.declare(Fact(recommendation='Warrant menunjukkan kondisi buruk. ROA menunjukkan efisiensi rendah.'))


    @Rule(Fact(warrant_valued='bad'), Fact(roe_valued='low'))
    def financial2_rule_998(self):
        self.declare(Fact(recommendation='Warrant menunjukkan kondisi buruk. ROE menunjukkan keuntungan yang rendah.'))


    @Rule(Fact(net_income_valued='profit'), Fact(per_valued='low'))
    def financial2_rule_999(self):
        self.declare(Fact(recommendation='Laba bersih menunjukkan keuntungan. PER berada di tingkat yang rendah.'))


    @Rule(Fact(net_income_valued='profit'), Fact(der_valued='low'))
    def financial2_rule_1000(self):
        self.declare(Fact(recommendation='Laba bersih menunjukkan keuntungan. DER menunjukkan tingkat hutang yang rendah.'))


    @Rule(Fact(net_income_valued='profit'), Fact(roa_valued='low'))
    def financial2_rule_1001(self):
        self.declare(Fact(recommendation='Laba bersih menunjukkan keuntungan. ROA menunjukkan efisiensi rendah.'))


    @Rule(Fact(net_income_valued='profit'), Fact(roe_valued='low'))
    def financial2_rule_1002(self):
        self.declare(Fact(recommendation='Laba bersih menunjukkan keuntungan. ROE menunjukkan keuntungan yang rendah.'))


    @Rule(Fact(per_valued='low'), Fact(der_valued='low'))
    def financial2_rule_1003(self):
        self.declare(Fact(recommendation='PER berada di tingkat yang rendah. DER menunjukkan tingkat hutang yang rendah.'))


    @Rule(Fact(per_valued='low'), Fact(roa_valued='low'))
    def financial2_rule_1004(self):
        self.declare(Fact(recommendation='PER berada di tingkat yang rendah. ROA menunjukkan efisiensi rendah.'))


    @Rule(Fact(per_valued='low'), Fact(roe_valued='low'))
    def financial2_rule_1005(self):
        self.declare(Fact(recommendation='PER berada di tingkat yang rendah. ROE menunjukkan keuntungan yang rendah.'))


    @Rule(Fact(der_valued='low'), Fact(roa_valued='low'))
    def financial2_rule_1006(self):
        self.declare(Fact(recommendation='DER menunjukkan tingkat hutang yang rendah. ROA menunjukkan efisiensi rendah.'))


    @Rule(Fact(der_valued='low'), Fact(roe_valued='low'))
    def financial2_rule_1007(self):
        self.declare(Fact(recommendation='DER menunjukkan tingkat hutang yang rendah. ROE menunjukkan keuntungan yang rendah.'))


    @Rule(Fact(roa_valued='low'), Fact(roe_valued='low'))
    def financial2_rule_1008(self):
        self.declare(Fact(recommendation='ROA menunjukkan efisiensi rendah. ROE menunjukkan keuntungan yang rendah.'))


    @Rule(Fact(underwriter_valued='good'), Fact(warrant_valued='bad'))
    def financial2_rule_1009(self):
        self.declare(Fact(recommendation='Underwriter berkualitas baik. Warrant menunjukkan kondisi buruk.'))


    @Rule(Fact(underwriter_valued='good'), Fact(net_income_valued='loss'))
    def financial2_rule_1010(self):
        self.declare(Fact(recommendation='Underwriter berkualitas baik. Laba bersih menunjukkan kerugian.'))


    @Rule(Fact(underwriter_valued='good'), Fact(per_valued='high'))
    def financial2_rule_1011(self):
        self.declare(Fact(recommendation='Underwriter berkualitas baik. PER berada di tingkat yang tinggi.'))


    @Rule(Fact(underwriter_valued='good'), Fact(der_valued='high'))
    def financial2_rule_1012(self):
        self.declare(Fact(recommendation='Underwriter berkualitas baik. DER menunjukkan tingkat hutang yang tinggi.'))


    @Rule(Fact(underwriter_valued='good'), Fact(roa_valued='high'))
    def financial2_rule_1013(self):
        self.declare(Fact(recommendation='Underwriter berkualitas baik. ROA menunjukkan efisiensi tinggi.'))


    @Rule(Fact(underwriter_valued='good'), Fact(roe_valued='high'))
    def financial2_rule_1014(self):
        self.declare(Fact(recommendation='Underwriter berkualitas baik. ROE menunjukkan keuntungan yang tinggi.'))


    @Rule(Fact(warrant_valued='bad'), Fact(net_income_valued='loss'))
    def financial2_rule_1015(self):
        self.declare(Fact(recommendation='Warrant menunjukkan kondisi buruk. Laba bersih menunjukkan kerugian.'))


    @Rule(Fact(warrant_valued='bad'), Fact(per_valued='high'))
    def financial2_rule_1016(self):
        self.declare(Fact(recommendation='Warrant menunjukkan kondisi buruk. PER berada di tingkat yang tinggi.'))


    @Rule(Fact(warrant_valued='bad'), Fact(der_valued='high'))
    def financial2_rule_1017(self):
        self.declare(Fact(recommendation='Warrant menunjukkan kondisi buruk. DER menunjukkan tingkat hutang yang tinggi.'))


    @Rule(Fact(warrant_valued='bad'), Fact(roa_valued='high'))
    def financial2_rule_1018(self):
        self.declare(Fact(recommendation='Warrant menunjukkan kondisi buruk. ROA menunjukkan efisiensi tinggi.'))


    @Rule(Fact(warrant_valued='bad'), Fact(roe_valued='high'))
    def financial2_rule_1019(self):
        self.declare(Fact(recommendation='Warrant menunjukkan kondisi buruk. ROE menunjukkan keuntungan yang tinggi.'))


    @Rule(Fact(net_income_valued='loss'), Fact(per_valued='high'))
    def financial2_rule_1020(self):
        self.declare(Fact(recommendation='Laba bersih menunjukkan kerugian. PER berada di tingkat yang tinggi.'))


    @Rule(Fact(net_income_valued='loss'), Fact(der_valued='high'))
    def financial2_rule_1021(self):
        self.declare(Fact(recommendation='Laba bersih menunjukkan kerugian. DER menunjukkan tingkat hutang yang tinggi.'))


    @Rule(Fact(net_income_valued='loss'), Fact(roa_valued='high'))
    def financial2_rule_1022(self):
        self.declare(Fact(recommendation='Laba bersih menunjukkan kerugian. ROA menunjukkan efisiensi tinggi.'))


    @Rule(Fact(net_income_valued='loss'), Fact(roe_valued='high'))
    def financial2_rule_1023(self):
        self.declare(Fact(recommendation='Laba bersih menunjukkan kerugian. ROE menunjukkan keuntungan yang tinggi.'))


    @Rule(Fact(per_valued='high'), Fact(der_valued='high'))
    def financial2_rule_1024(self):
        self.declare(Fact(recommendation='PER berada di tingkat yang tinggi. DER menunjukkan tingkat hutang yang tinggi.'))


    @Rule(Fact(per_valued='high'), Fact(roa_valued='high'))
    def financial2_rule_1025(self):
        self.declare(Fact(recommendation='PER berada di tingkat yang tinggi. ROA menunjukkan efisiensi tinggi.'))


    @Rule(Fact(per_valued='high'), Fact(roe_valued='high'))
    def financial2_rule_1026(self):
        self.declare(Fact(recommendation='PER berada di tingkat yang tinggi. ROE menunjukkan keuntungan yang tinggi.'))


    @Rule(Fact(der_valued='high'), Fact(roa_valued='high'))
    def financial2_rule_1027(self):
        self.declare(Fact(recommendation='DER menunjukkan tingkat hutang yang tinggi. ROA menunjukkan efisiensi tinggi.'))


    @Rule(Fact(der_valued='high'), Fact(roe_valued='high'))
    def financial2_rule_1028(self):
        self.declare(Fact(recommendation='DER menunjukkan tingkat hutang yang tinggi. ROE menunjukkan keuntungan yang tinggi.'))


    @Rule(Fact(roa_valued='high'), Fact(roe_valued='high'))
    def financial2_rule_1029(self):
        self.declare(Fact(recommendation='ROA menunjukkan efisiensi tinggi. ROE menunjukkan keuntungan yang tinggi.'))


    @Rule(Fact(underwriter_valued='good'), Fact(warrant_valued='bad'))
    def financial2_rule_1030(self):
        self.declare(Fact(recommendation='Underwriter berkualitas baik. Warrant menunjukkan kondisi buruk.'))


    @Rule(Fact(underwriter_valued='good'), Fact(net_income_valued='loss'))
    def financial2_rule_1031(self):
        self.declare(Fact(recommendation='Underwriter berkualitas baik. Laba bersih menunjukkan kerugian.'))


    @Rule(Fact(underwriter_valued='good'), Fact(per_valued='high'))
    def financial2_rule_1032(self):
        self.declare(Fact(recommendation='Underwriter berkualitas baik. PER berada di tingkat yang tinggi.'))


    @Rule(Fact(underwriter_valued='good'), Fact(der_valued='high'))
    def financial2_rule_1033(self):
        self.declare(Fact(recommendation='Underwriter berkualitas baik. DER menunjukkan tingkat hutang yang tinggi.'))


    @Rule(Fact(underwriter_valued='good'), Fact(roa_valued='high'))
    def financial2_rule_1034(self):
        self.declare(Fact(recommendation='Underwriter berkualitas baik. ROA menunjukkan efisiensi tinggi.'))


    @Rule(Fact(underwriter_valued='good'), Fact(roe_valued='low'))
    def financial2_rule_1035(self):
        self.declare(Fact(recommendation='Underwriter berkualitas baik. ROE menunjukkan keuntungan yang rendah.'))


    @Rule(Fact(warrant_valued='bad'), Fact(net_income_valued='loss'))
    def financial2_rule_1036(self):
        self.declare(Fact(recommendation='Warrant menunjukkan kondisi buruk. Laba bersih menunjukkan kerugian.'))


    @Rule(Fact(warrant_valued='bad'), Fact(per_valued='high'))
    def financial2_rule_1037(self):
        self.declare(Fact(recommendation='Warrant menunjukkan kondisi buruk. PER berada di tingkat yang tinggi.'))


    @Rule(Fact(warrant_valued='bad'), Fact(der_valued='high'))
    def financial2_rule_1038(self):
        self.declare(Fact(recommendation='Warrant menunjukkan kondisi buruk. DER menunjukkan tingkat hutang yang tinggi.'))


    @Rule(Fact(warrant_valued='bad'), Fact(roa_valued='high'))
    def financial2_rule_1039(self):
        self.declare(Fact(recommendation='Warrant menunjukkan kondisi buruk. ROA menunjukkan efisiensi tinggi.'))


    @Rule(Fact(warrant_valued='bad'), Fact(roe_valued='low'))
    def financial2_rule_1040(self):
        self.declare(Fact(recommendation='Warrant menunjukkan kondisi buruk. ROE menunjukkan keuntungan yang rendah.'))


    @Rule(Fact(net_income_valued='loss'), Fact(per_valued='high'))
    def financial2_rule_1041(self):
        self.declare(Fact(recommendation='Laba bersih menunjukkan kerugian. PER berada di tingkat yang tinggi.'))


    @Rule(Fact(net_income_valued='loss'), Fact(der_valued='high'))
    def financial2_rule_1042(self):
        self.declare(Fact(recommendation='Laba bersih menunjukkan kerugian. DER menunjukkan tingkat hutang yang tinggi.'))


    @Rule(Fact(net_income_valued='loss'), Fact(roa_valued='high'))
    def financial2_rule_1043(self):
        self.declare(Fact(recommendation='Laba bersih menunjukkan kerugian. ROA menunjukkan efisiensi tinggi.'))


    @Rule(Fact(net_income_valued='loss'), Fact(roe_valued='low'))
    def financial2_rule_1044(self):
        self.declare(Fact(recommendation='Laba bersih menunjukkan kerugian. ROE menunjukkan keuntungan yang rendah.'))


    @Rule(Fact(per_valued='high'), Fact(der_valued='high'))
    def financial2_rule_1045(self):
        self.declare(Fact(recommendation='PER berada di tingkat yang tinggi. DER menunjukkan tingkat hutang yang tinggi.'))


    @Rule(Fact(per_valued='high'), Fact(roa_valued='high'))
    def financial2_rule_1046(self):
        self.declare(Fact(recommendation='PER berada di tingkat yang tinggi. ROA menunjukkan efisiensi tinggi.'))


    @Rule(Fact(per_valued='high'), Fact(roe_valued='low'))
    def financial2_rule_1047(self):
        self.declare(Fact(recommendation='PER berada di tingkat yang tinggi. ROE menunjukkan keuntungan yang rendah.'))


    @Rule(Fact(der_valued='high'), Fact(roa_valued='high'))
    def financial2_rule_1048(self):
        self.declare(Fact(recommendation='DER menunjukkan tingkat hutang yang tinggi. ROA menunjukkan efisiensi tinggi.'))


    @Rule(Fact(der_valued='high'), Fact(roe_valued='low'))
    def financial2_rule_1049(self):
        self.declare(Fact(recommendation='DER menunjukkan tingkat hutang yang tinggi. ROE menunjukkan keuntungan yang rendah.'))


    @Rule(Fact(roa_valued='high'), Fact(roe_valued='low'))
    def financial2_rule_1050(self):
        self.declare(Fact(recommendation='ROA menunjukkan efisiensi tinggi. ROE menunjukkan keuntungan yang rendah.'))


    @Rule(Fact(underwriter_valued='good'), Fact(warrant_valued='bad'))
    def financial2_rule_1051(self):
        self.declare(Fact(recommendation='Underwriter berkualitas baik. Warrant menunjukkan kondisi buruk.'))


    @Rule(Fact(underwriter_valued='good'), Fact(net_income_valued='loss'))
    def financial2_rule_1052(self):
        self.declare(Fact(recommendation='Underwriter berkualitas baik. Laba bersih menunjukkan kerugian.'))


    @Rule(Fact(underwriter_valued='good'), Fact(per_valued='high'))
    def financial2_rule_1053(self):
        self.declare(Fact(recommendation='Underwriter berkualitas baik. PER berada di tingkat yang tinggi.'))


    @Rule(Fact(underwriter_valued='good'), Fact(der_valued='high'))
    def financial2_rule_1054(self):
        self.declare(Fact(recommendation='Underwriter berkualitas baik. DER menunjukkan tingkat hutang yang tinggi.'))


    @Rule(Fact(underwriter_valued='good'), Fact(roa_valued='low'))
    def financial2_rule_1055(self):
        self.declare(Fact(recommendation='Underwriter berkualitas baik. ROA menunjukkan efisiensi rendah.'))


    @Rule(Fact(underwriter_valued='good'), Fact(roe_valued='high'))
    def financial2_rule_1056(self):
        self.declare(Fact(recommendation='Underwriter berkualitas baik. ROE menunjukkan keuntungan yang tinggi.'))


    @Rule(Fact(warrant_valued='bad'), Fact(net_income_valued='loss'))
    def financial2_rule_1057(self):
        self.declare(Fact(recommendation='Warrant menunjukkan kondisi buruk. Laba bersih menunjukkan kerugian.'))


    @Rule(Fact(warrant_valued='bad'), Fact(per_valued='high'))
    def financial2_rule_1058(self):
        self.declare(Fact(recommendation='Warrant menunjukkan kondisi buruk. PER berada di tingkat yang tinggi.'))


    @Rule(Fact(warrant_valued='bad'), Fact(der_valued='high'))
    def financial2_rule_1059(self):
        self.declare(Fact(recommendation='Warrant menunjukkan kondisi buruk. DER menunjukkan tingkat hutang yang tinggi.'))


    @Rule(Fact(warrant_valued='bad'), Fact(roa_valued='low'))
    def financial2_rule_1060(self):
        self.declare(Fact(recommendation='Warrant menunjukkan kondisi buruk. ROA menunjukkan efisiensi rendah.'))


    @Rule(Fact(warrant_valued='bad'), Fact(roe_valued='high'))
    def financial2_rule_1061(self):
        self.declare(Fact(recommendation='Warrant menunjukkan kondisi buruk. ROE menunjukkan keuntungan yang tinggi.'))


    @Rule(Fact(net_income_valued='loss'), Fact(per_valued='high'))
    def financial2_rule_1062(self):
        self.declare(Fact(recommendation='Laba bersih menunjukkan kerugian. PER berada di tingkat yang tinggi.'))


    @Rule(Fact(net_income_valued='loss'), Fact(der_valued='high'))
    def financial2_rule_1063(self):
        self.declare(Fact(recommendation='Laba bersih menunjukkan kerugian. DER menunjukkan tingkat hutang yang tinggi.'))


    @Rule(Fact(net_income_valued='loss'), Fact(roa_valued='low'))
    def financial2_rule_1064(self):
        self.declare(Fact(recommendation='Laba bersih menunjukkan kerugian. ROA menunjukkan efisiensi rendah.'))


    @Rule(Fact(net_income_valued='loss'), Fact(roe_valued='high'))
    def financial2_rule_1065(self):
        self.declare(Fact(recommendation='Laba bersih menunjukkan kerugian. ROE menunjukkan keuntungan yang tinggi.'))


    @Rule(Fact(per_valued='high'), Fact(der_valued='high'))
    def financial2_rule_1066(self):
        self.declare(Fact(recommendation='PER berada di tingkat yang tinggi. DER menunjukkan tingkat hutang yang tinggi.'))


    @Rule(Fact(per_valued='high'), Fact(roa_valued='low'))
    def financial2_rule_1067(self):
        self.declare(Fact(recommendation='PER berada di tingkat yang tinggi. ROA menunjukkan efisiensi rendah.'))


    @Rule(Fact(per_valued='high'), Fact(roe_valued='high'))
    def financial2_rule_1068(self):
        self.declare(Fact(recommendation='PER berada di tingkat yang tinggi. ROE menunjukkan keuntungan yang tinggi.'))


    @Rule(Fact(der_valued='high'), Fact(roa_valued='low'))
    def financial2_rule_1069(self):
        self.declare(Fact(recommendation='DER menunjukkan tingkat hutang yang tinggi. ROA menunjukkan efisiensi rendah.'))


    @Rule(Fact(der_valued='high'), Fact(roe_valued='high'))
    def financial2_rule_1070(self):
        self.declare(Fact(recommendation='DER menunjukkan tingkat hutang yang tinggi. ROE menunjukkan keuntungan yang tinggi.'))


    @Rule(Fact(roa_valued='low'), Fact(roe_valued='high'))
    def financial2_rule_1071(self):
        self.declare(Fact(recommendation='ROA menunjukkan efisiensi rendah. ROE menunjukkan keuntungan yang tinggi.'))


    @Rule(Fact(underwriter_valued='good'), Fact(warrant_valued='bad'))
    def financial2_rule_1072(self):
        self.declare(Fact(recommendation='Underwriter berkualitas baik. Warrant menunjukkan kondisi buruk.'))


    @Rule(Fact(underwriter_valued='good'), Fact(net_income_valued='loss'))
    def financial2_rule_1073(self):
        self.declare(Fact(recommendation='Underwriter berkualitas baik. Laba bersih menunjukkan kerugian.'))


    @Rule(Fact(underwriter_valued='good'), Fact(per_valued='high'))
    def financial2_rule_1074(self):
        self.declare(Fact(recommendation='Underwriter berkualitas baik. PER berada di tingkat yang tinggi.'))


    @Rule(Fact(underwriter_valued='good'), Fact(der_valued='high'))
    def financial2_rule_1075(self):
        self.declare(Fact(recommendation='Underwriter berkualitas baik. DER menunjukkan tingkat hutang yang tinggi.'))


    @Rule(Fact(underwriter_valued='good'), Fact(roa_valued='low'))
    def financial2_rule_1076(self):
        self.declare(Fact(recommendation='Underwriter berkualitas baik. ROA menunjukkan efisiensi rendah.'))


    @Rule(Fact(underwriter_valued='good'), Fact(roe_valued='low'))
    def financial2_rule_1077(self):
        self.declare(Fact(recommendation='Underwriter berkualitas baik. ROE menunjukkan keuntungan yang rendah.'))


    @Rule(Fact(warrant_valued='bad'), Fact(net_income_valued='loss'))
    def financial2_rule_1078(self):
        self.declare(Fact(recommendation='Warrant menunjukkan kondisi buruk. Laba bersih menunjukkan kerugian.'))


    @Rule(Fact(warrant_valued='bad'), Fact(per_valued='high'))
    def financial2_rule_1079(self):
        self.declare(Fact(recommendation='Warrant menunjukkan kondisi buruk. PER berada di tingkat yang tinggi.'))


    @Rule(Fact(warrant_valued='bad'), Fact(der_valued='high'))
    def financial2_rule_1080(self):
        self.declare(Fact(recommendation='Warrant menunjukkan kondisi buruk. DER menunjukkan tingkat hutang yang tinggi.'))


    @Rule(Fact(warrant_valued='bad'), Fact(roa_valued='low'))
    def financial2_rule_1081(self):
        self.declare(Fact(recommendation='Warrant menunjukkan kondisi buruk. ROA menunjukkan efisiensi rendah.'))


    @Rule(Fact(warrant_valued='bad'), Fact(roe_valued='low'))
    def financial2_rule_1082(self):
        self.declare(Fact(recommendation='Warrant menunjukkan kondisi buruk. ROE menunjukkan keuntungan yang rendah.'))


    @Rule(Fact(net_income_valued='loss'), Fact(per_valued='high'))
    def financial2_rule_1083(self):
        self.declare(Fact(recommendation='Laba bersih menunjukkan kerugian. PER berada di tingkat yang tinggi.'))


    @Rule(Fact(net_income_valued='loss'), Fact(der_valued='high'))
    def financial2_rule_1084(self):
        self.declare(Fact(recommendation='Laba bersih menunjukkan kerugian. DER menunjukkan tingkat hutang yang tinggi.'))


    @Rule(Fact(net_income_valued='loss'), Fact(roa_valued='low'))
    def financial2_rule_1085(self):
        self.declare(Fact(recommendation='Laba bersih menunjukkan kerugian. ROA menunjukkan efisiensi rendah.'))


    @Rule(Fact(net_income_valued='loss'), Fact(roe_valued='low'))
    def financial2_rule_1086(self):
        self.declare(Fact(recommendation='Laba bersih menunjukkan kerugian. ROE menunjukkan keuntungan yang rendah.'))


    @Rule(Fact(per_valued='high'), Fact(der_valued='high'))
    def financial2_rule_1087(self):
        self.declare(Fact(recommendation='PER berada di tingkat yang tinggi. DER menunjukkan tingkat hutang yang tinggi.'))


    @Rule(Fact(per_valued='high'), Fact(roa_valued='low'))
    def financial2_rule_1088(self):
        self.declare(Fact(recommendation='PER berada di tingkat yang tinggi. ROA menunjukkan efisiensi rendah.'))


    @Rule(Fact(per_valued='high'), Fact(roe_valued='low'))
    def financial2_rule_1089(self):
        self.declare(Fact(recommendation='PER berada di tingkat yang tinggi. ROE menunjukkan keuntungan yang rendah.'))


    @Rule(Fact(der_valued='high'), Fact(roa_valued='low'))
    def financial2_rule_1090(self):
        self.declare(Fact(recommendation='DER menunjukkan tingkat hutang yang tinggi. ROA menunjukkan efisiensi rendah.'))


    @Rule(Fact(der_valued='high'), Fact(roe_valued='low'))
    def financial2_rule_1091(self):
        self.declare(Fact(recommendation='DER menunjukkan tingkat hutang yang tinggi. ROE menunjukkan keuntungan yang rendah.'))


    @Rule(Fact(roa_valued='low'), Fact(roe_valued='low'))
    def financial2_rule_1092(self):
        self.declare(Fact(recommendation='ROA menunjukkan efisiensi rendah. ROE menunjukkan keuntungan yang rendah.'))


    @Rule(Fact(underwriter_valued='good'), Fact(warrant_valued='bad'))
    def financial2_rule_1093(self):
        self.declare(Fact(recommendation='Underwriter berkualitas baik. Warrant menunjukkan kondisi buruk.'))


    @Rule(Fact(underwriter_valued='good'), Fact(net_income_valued='loss'))
    def financial2_rule_1094(self):
        self.declare(Fact(recommendation='Underwriter berkualitas baik. Laba bersih menunjukkan kerugian.'))


    @Rule(Fact(underwriter_valued='good'), Fact(per_valued='high'))
    def financial2_rule_1095(self):
        self.declare(Fact(recommendation='Underwriter berkualitas baik. PER berada di tingkat yang tinggi.'))


    @Rule(Fact(underwriter_valued='good'), Fact(der_valued='low'))
    def financial2_rule_1096(self):
        self.declare(Fact(recommendation='Underwriter berkualitas baik. DER menunjukkan tingkat hutang yang rendah.'))


    @Rule(Fact(underwriter_valued='good'), Fact(roa_valued='high'))
    def financial2_rule_1097(self):
        self.declare(Fact(recommendation='Underwriter berkualitas baik. ROA menunjukkan efisiensi tinggi.'))


    @Rule(Fact(underwriter_valued='good'), Fact(roe_valued='high'))
    def financial2_rule_1098(self):
        self.declare(Fact(recommendation='Underwriter berkualitas baik. ROE menunjukkan keuntungan yang tinggi.'))


    @Rule(Fact(warrant_valued='bad'), Fact(net_income_valued='loss'))
    def financial2_rule_1099(self):
        self.declare(Fact(recommendation='Warrant menunjukkan kondisi buruk. Laba bersih menunjukkan kerugian.'))


    @Rule(Fact(warrant_valued='bad'), Fact(per_valued='high'))
    def financial2_rule_1100(self):
        self.declare(Fact(recommendation='Warrant menunjukkan kondisi buruk. PER berada di tingkat yang tinggi.'))


    @Rule(Fact(warrant_valued='bad'), Fact(der_valued='low'))
    def financial2_rule_1101(self):
        self.declare(Fact(recommendation='Warrant menunjukkan kondisi buruk. DER menunjukkan tingkat hutang yang rendah.'))


    @Rule(Fact(warrant_valued='bad'), Fact(roa_valued='high'))
    def financial2_rule_1102(self):
        self.declare(Fact(recommendation='Warrant menunjukkan kondisi buruk. ROA menunjukkan efisiensi tinggi.'))


    @Rule(Fact(warrant_valued='bad'), Fact(roe_valued='high'))
    def financial2_rule_1103(self):
        self.declare(Fact(recommendation='Warrant menunjukkan kondisi buruk. ROE menunjukkan keuntungan yang tinggi.'))


    @Rule(Fact(net_income_valued='loss'), Fact(per_valued='high'))
    def financial2_rule_1104(self):
        self.declare(Fact(recommendation='Laba bersih menunjukkan kerugian. PER berada di tingkat yang tinggi.'))


    @Rule(Fact(net_income_valued='loss'), Fact(der_valued='low'))
    def financial2_rule_1105(self):
        self.declare(Fact(recommendation='Laba bersih menunjukkan kerugian. DER menunjukkan tingkat hutang yang rendah.'))


    @Rule(Fact(net_income_valued='loss'), Fact(roa_valued='high'))
    def financial2_rule_1106(self):
        self.declare(Fact(recommendation='Laba bersih menunjukkan kerugian. ROA menunjukkan efisiensi tinggi.'))


    @Rule(Fact(net_income_valued='loss'), Fact(roe_valued='high'))
    def financial2_rule_1107(self):
        self.declare(Fact(recommendation='Laba bersih menunjukkan kerugian. ROE menunjukkan keuntungan yang tinggi.'))


    @Rule(Fact(per_valued='high'), Fact(der_valued='low'))
    def financial2_rule_1108(self):
        self.declare(Fact(recommendation='PER berada di tingkat yang tinggi. DER menunjukkan tingkat hutang yang rendah.'))


    @Rule(Fact(per_valued='high'), Fact(roa_valued='high'))
    def financial2_rule_1109(self):
        self.declare(Fact(recommendation='PER berada di tingkat yang tinggi. ROA menunjukkan efisiensi tinggi.'))


    @Rule(Fact(per_valued='high'), Fact(roe_valued='high'))
    def financial2_rule_1110(self):
        self.declare(Fact(recommendation='PER berada di tingkat yang tinggi. ROE menunjukkan keuntungan yang tinggi.'))


    @Rule(Fact(der_valued='low'), Fact(roa_valued='high'))
    def financial2_rule_1111(self):
        self.declare(Fact(recommendation='DER menunjukkan tingkat hutang yang rendah. ROA menunjukkan efisiensi tinggi.'))


    @Rule(Fact(der_valued='low'), Fact(roe_valued='high'))
    def financial2_rule_1112(self):
        self.declare(Fact(recommendation='DER menunjukkan tingkat hutang yang rendah. ROE menunjukkan keuntungan yang tinggi.'))


    @Rule(Fact(roa_valued='high'), Fact(roe_valued='high'))
    def financial2_rule_1113(self):
        self.declare(Fact(recommendation='ROA menunjukkan efisiensi tinggi. ROE menunjukkan keuntungan yang tinggi.'))


    @Rule(Fact(underwriter_valued='good'), Fact(warrant_valued='bad'))
    def financial2_rule_1114(self):
        self.declare(Fact(recommendation='Underwriter berkualitas baik. Warrant menunjukkan kondisi buruk.'))


    @Rule(Fact(underwriter_valued='good'), Fact(net_income_valued='loss'))
    def financial2_rule_1115(self):
        self.declare(Fact(recommendation='Underwriter berkualitas baik. Laba bersih menunjukkan kerugian.'))


    @Rule(Fact(underwriter_valued='good'), Fact(per_valued='high'))
    def financial2_rule_1116(self):
        self.declare(Fact(recommendation='Underwriter berkualitas baik. PER berada di tingkat yang tinggi.'))


    @Rule(Fact(underwriter_valued='good'), Fact(der_valued='low'))
    def financial2_rule_1117(self):
        self.declare(Fact(recommendation='Underwriter berkualitas baik. DER menunjukkan tingkat hutang yang rendah.'))


    @Rule(Fact(underwriter_valued='good'), Fact(roa_valued='high'))
    def financial2_rule_1118(self):
        self.declare(Fact(recommendation='Underwriter berkualitas baik. ROA menunjukkan efisiensi tinggi.'))


    @Rule(Fact(underwriter_valued='good'), Fact(roe_valued='low'))
    def financial2_rule_1119(self):
        self.declare(Fact(recommendation='Underwriter berkualitas baik. ROE menunjukkan keuntungan yang rendah.'))


    @Rule(Fact(warrant_valued='bad'), Fact(net_income_valued='loss'))
    def financial2_rule_1120(self):
        self.declare(Fact(recommendation='Warrant menunjukkan kondisi buruk. Laba bersih menunjukkan kerugian.'))


    @Rule(Fact(warrant_valued='bad'), Fact(per_valued='high'))
    def financial2_rule_1121(self):
        self.declare(Fact(recommendation='Warrant menunjukkan kondisi buruk. PER berada di tingkat yang tinggi.'))


    @Rule(Fact(warrant_valued='bad'), Fact(der_valued='low'))
    def financial2_rule_1122(self):
        self.declare(Fact(recommendation='Warrant menunjukkan kondisi buruk. DER menunjukkan tingkat hutang yang rendah.'))


    @Rule(Fact(warrant_valued='bad'), Fact(roa_valued='high'))
    def financial2_rule_1123(self):
        self.declare(Fact(recommendation='Warrant menunjukkan kondisi buruk. ROA menunjukkan efisiensi tinggi.'))


    @Rule(Fact(warrant_valued='bad'), Fact(roe_valued='low'))
    def financial2_rule_1124(self):
        self.declare(Fact(recommendation='Warrant menunjukkan kondisi buruk. ROE menunjukkan keuntungan yang rendah.'))


    @Rule(Fact(net_income_valued='loss'), Fact(per_valued='high'))
    def financial2_rule_1125(self):
        self.declare(Fact(recommendation='Laba bersih menunjukkan kerugian. PER berada di tingkat yang tinggi.'))


    @Rule(Fact(net_income_valued='loss'), Fact(der_valued='low'))
    def financial2_rule_1126(self):
        self.declare(Fact(recommendation='Laba bersih menunjukkan kerugian. DER menunjukkan tingkat hutang yang rendah.'))


    @Rule(Fact(net_income_valued='loss'), Fact(roa_valued='high'))
    def financial2_rule_1127(self):
        self.declare(Fact(recommendation='Laba bersih menunjukkan kerugian. ROA menunjukkan efisiensi tinggi.'))


    @Rule(Fact(net_income_valued='loss'), Fact(roe_valued='low'))
    def financial2_rule_1128(self):
        self.declare(Fact(recommendation='Laba bersih menunjukkan kerugian. ROE menunjukkan keuntungan yang rendah.'))


    @Rule(Fact(per_valued='high'), Fact(der_valued='low'))
    def financial2_rule_1129(self):
        self.declare(Fact(recommendation='PER berada di tingkat yang tinggi. DER menunjukkan tingkat hutang yang rendah.'))


    @Rule(Fact(per_valued='high'), Fact(roa_valued='high'))
    def financial2_rule_1130(self):
        self.declare(Fact(recommendation='PER berada di tingkat yang tinggi. ROA menunjukkan efisiensi tinggi.'))


    @Rule(Fact(per_valued='high'), Fact(roe_valued='low'))
    def financial2_rule_1131(self):
        self.declare(Fact(recommendation='PER berada di tingkat yang tinggi. ROE menunjukkan keuntungan yang rendah.'))


    @Rule(Fact(der_valued='low'), Fact(roa_valued='high'))
    def financial2_rule_1132(self):
        self.declare(Fact(recommendation='DER menunjukkan tingkat hutang yang rendah. ROA menunjukkan efisiensi tinggi.'))


    @Rule(Fact(der_valued='low'), Fact(roe_valued='low'))
    def financial2_rule_1133(self):
        self.declare(Fact(recommendation='DER menunjukkan tingkat hutang yang rendah. ROE menunjukkan keuntungan yang rendah.'))


    @Rule(Fact(roa_valued='high'), Fact(roe_valued='low'))
    def financial2_rule_1134(self):
        self.declare(Fact(recommendation='ROA menunjukkan efisiensi tinggi. ROE menunjukkan keuntungan yang rendah.'))


    @Rule(Fact(underwriter_valued='good'), Fact(warrant_valued='bad'))
    def financial2_rule_1135(self):
        self.declare(Fact(recommendation='Underwriter berkualitas baik. Warrant menunjukkan kondisi buruk.'))


    @Rule(Fact(underwriter_valued='good'), Fact(net_income_valued='loss'))
    def financial2_rule_1136(self):
        self.declare(Fact(recommendation='Underwriter berkualitas baik. Laba bersih menunjukkan kerugian.'))


    @Rule(Fact(underwriter_valued='good'), Fact(per_valued='high'))
    def financial2_rule_1137(self):
        self.declare(Fact(recommendation='Underwriter berkualitas baik. PER berada di tingkat yang tinggi.'))


    @Rule(Fact(underwriter_valued='good'), Fact(der_valued='low'))
    def financial2_rule_1138(self):
        self.declare(Fact(recommendation='Underwriter berkualitas baik. DER menunjukkan tingkat hutang yang rendah.'))


    @Rule(Fact(underwriter_valued='good'), Fact(roa_valued='low'))
    def financial2_rule_1139(self):
        self.declare(Fact(recommendation='Underwriter berkualitas baik. ROA menunjukkan efisiensi rendah.'))


    @Rule(Fact(underwriter_valued='good'), Fact(roe_valued='high'))
    def financial2_rule_1140(self):
        self.declare(Fact(recommendation='Underwriter berkualitas baik. ROE menunjukkan keuntungan yang tinggi.'))


    @Rule(Fact(warrant_valued='bad'), Fact(net_income_valued='loss'))
    def financial2_rule_1141(self):
        self.declare(Fact(recommendation='Warrant menunjukkan kondisi buruk. Laba bersih menunjukkan kerugian.'))


    @Rule(Fact(warrant_valued='bad'), Fact(per_valued='high'))
    def financial2_rule_1142(self):
        self.declare(Fact(recommendation='Warrant menunjukkan kondisi buruk. PER berada di tingkat yang tinggi.'))


    @Rule(Fact(warrant_valued='bad'), Fact(der_valued='low'))
    def financial2_rule_1143(self):
        self.declare(Fact(recommendation='Warrant menunjukkan kondisi buruk. DER menunjukkan tingkat hutang yang rendah.'))


    @Rule(Fact(warrant_valued='bad'), Fact(roa_valued='low'))
    def financial2_rule_1144(self):
        self.declare(Fact(recommendation='Warrant menunjukkan kondisi buruk. ROA menunjukkan efisiensi rendah.'))


    @Rule(Fact(warrant_valued='bad'), Fact(roe_valued='high'))
    def financial2_rule_1145(self):
        self.declare(Fact(recommendation='Warrant menunjukkan kondisi buruk. ROE menunjukkan keuntungan yang tinggi.'))


    @Rule(Fact(net_income_valued='loss'), Fact(per_valued='high'))
    def financial2_rule_1146(self):
        self.declare(Fact(recommendation='Laba bersih menunjukkan kerugian. PER berada di tingkat yang tinggi.'))


    @Rule(Fact(net_income_valued='loss'), Fact(der_valued='low'))
    def financial2_rule_1147(self):
        self.declare(Fact(recommendation='Laba bersih menunjukkan kerugian. DER menunjukkan tingkat hutang yang rendah.'))


    @Rule(Fact(net_income_valued='loss'), Fact(roa_valued='low'))
    def financial2_rule_1148(self):
        self.declare(Fact(recommendation='Laba bersih menunjukkan kerugian. ROA menunjukkan efisiensi rendah.'))


    @Rule(Fact(net_income_valued='loss'), Fact(roe_valued='high'))
    def financial2_rule_1149(self):
        self.declare(Fact(recommendation='Laba bersih menunjukkan kerugian. ROE menunjukkan keuntungan yang tinggi.'))


    @Rule(Fact(per_valued='high'), Fact(der_valued='low'))
    def financial2_rule_1150(self):
        self.declare(Fact(recommendation='PER berada di tingkat yang tinggi. DER menunjukkan tingkat hutang yang rendah.'))


    @Rule(Fact(per_valued='high'), Fact(roa_valued='low'))
    def financial2_rule_1151(self):
        self.declare(Fact(recommendation='PER berada di tingkat yang tinggi. ROA menunjukkan efisiensi rendah.'))


    @Rule(Fact(per_valued='high'), Fact(roe_valued='high'))
    def financial2_rule_1152(self):
        self.declare(Fact(recommendation='PER berada di tingkat yang tinggi. ROE menunjukkan keuntungan yang tinggi.'))


    @Rule(Fact(der_valued='low'), Fact(roa_valued='low'))
    def financial2_rule_1153(self):
        self.declare(Fact(recommendation='DER menunjukkan tingkat hutang yang rendah. ROA menunjukkan efisiensi rendah.'))


    @Rule(Fact(der_valued='low'), Fact(roe_valued='high'))
    def financial2_rule_1154(self):
        self.declare(Fact(recommendation='DER menunjukkan tingkat hutang yang rendah. ROE menunjukkan keuntungan yang tinggi.'))


    @Rule(Fact(roa_valued='low'), Fact(roe_valued='high'))
    def financial2_rule_1155(self):
        self.declare(Fact(recommendation='ROA menunjukkan efisiensi rendah. ROE menunjukkan keuntungan yang tinggi.'))


    @Rule(Fact(underwriter_valued='good'), Fact(warrant_valued='bad'))
    def financial2_rule_1156(self):
        self.declare(Fact(recommendation='Underwriter berkualitas baik. Warrant menunjukkan kondisi buruk.'))


    @Rule(Fact(underwriter_valued='good'), Fact(net_income_valued='loss'))
    def financial2_rule_1157(self):
        self.declare(Fact(recommendation='Underwriter berkualitas baik. Laba bersih menunjukkan kerugian.'))


    @Rule(Fact(underwriter_valued='good'), Fact(per_valued='high'))
    def financial2_rule_1158(self):
        self.declare(Fact(recommendation='Underwriter berkualitas baik. PER berada di tingkat yang tinggi.'))


    @Rule(Fact(underwriter_valued='good'), Fact(der_valued='low'))
    def financial2_rule_1159(self):
        self.declare(Fact(recommendation='Underwriter berkualitas baik. DER menunjukkan tingkat hutang yang rendah.'))


    @Rule(Fact(underwriter_valued='good'), Fact(roa_valued='low'))
    def financial2_rule_1160(self):
        self.declare(Fact(recommendation='Underwriter berkualitas baik. ROA menunjukkan efisiensi rendah.'))


    @Rule(Fact(underwriter_valued='good'), Fact(roe_valued='low'))
    def financial2_rule_1161(self):
        self.declare(Fact(recommendation='Underwriter berkualitas baik. ROE menunjukkan keuntungan yang rendah.'))


    @Rule(Fact(warrant_valued='bad'), Fact(net_income_valued='loss'))
    def financial2_rule_1162(self):
        self.declare(Fact(recommendation='Warrant menunjukkan kondisi buruk. Laba bersih menunjukkan kerugian.'))


    @Rule(Fact(warrant_valued='bad'), Fact(per_valued='high'))
    def financial2_rule_1163(self):
        self.declare(Fact(recommendation='Warrant menunjukkan kondisi buruk. PER berada di tingkat yang tinggi.'))


    @Rule(Fact(warrant_valued='bad'), Fact(der_valued='low'))
    def financial2_rule_1164(self):
        self.declare(Fact(recommendation='Warrant menunjukkan kondisi buruk. DER menunjukkan tingkat hutang yang rendah.'))


    @Rule(Fact(warrant_valued='bad'), Fact(roa_valued='low'))
    def financial2_rule_1165(self):
        self.declare(Fact(recommendation='Warrant menunjukkan kondisi buruk. ROA menunjukkan efisiensi rendah.'))


    @Rule(Fact(warrant_valued='bad'), Fact(roe_valued='low'))
    def financial2_rule_1166(self):
        self.declare(Fact(recommendation='Warrant menunjukkan kondisi buruk. ROE menunjukkan keuntungan yang rendah.'))


    @Rule(Fact(net_income_valued='loss'), Fact(per_valued='high'))
    def financial2_rule_1167(self):
        self.declare(Fact(recommendation='Laba bersih menunjukkan kerugian. PER berada di tingkat yang tinggi.'))


    @Rule(Fact(net_income_valued='loss'), Fact(der_valued='low'))
    def financial2_rule_1168(self):
        self.declare(Fact(recommendation='Laba bersih menunjukkan kerugian. DER menunjukkan tingkat hutang yang rendah.'))


    @Rule(Fact(net_income_valued='loss'), Fact(roa_valued='low'))
    def financial2_rule_1169(self):
        self.declare(Fact(recommendation='Laba bersih menunjukkan kerugian. ROA menunjukkan efisiensi rendah.'))


    @Rule(Fact(net_income_valued='loss'), Fact(roe_valued='low'))
    def financial2_rule_1170(self):
        self.declare(Fact(recommendation='Laba bersih menunjukkan kerugian. ROE menunjukkan keuntungan yang rendah.'))


    @Rule(Fact(per_valued='high'), Fact(der_valued='low'))
    def financial2_rule_1171(self):
        self.declare(Fact(recommendation='PER berada di tingkat yang tinggi. DER menunjukkan tingkat hutang yang rendah.'))


    @Rule(Fact(per_valued='high'), Fact(roa_valued='low'))
    def financial2_rule_1172(self):
        self.declare(Fact(recommendation='PER berada di tingkat yang tinggi. ROA menunjukkan efisiensi rendah.'))


    @Rule(Fact(per_valued='high'), Fact(roe_valued='low'))
    def financial2_rule_1173(self):
        self.declare(Fact(recommendation='PER berada di tingkat yang tinggi. ROE menunjukkan keuntungan yang rendah.'))


    @Rule(Fact(der_valued='low'), Fact(roa_valued='low'))
    def financial2_rule_1174(self):
        self.declare(Fact(recommendation='DER menunjukkan tingkat hutang yang rendah. ROA menunjukkan efisiensi rendah.'))


    @Rule(Fact(der_valued='low'), Fact(roe_valued='low'))
    def financial2_rule_1175(self):
        self.declare(Fact(recommendation='DER menunjukkan tingkat hutang yang rendah. ROE menunjukkan keuntungan yang rendah.'))


    @Rule(Fact(roa_valued='low'), Fact(roe_valued='low'))
    def financial2_rule_1176(self):
        self.declare(Fact(recommendation='ROA menunjukkan efisiensi rendah. ROE menunjukkan keuntungan yang rendah.'))


    @Rule(Fact(underwriter_valued='good'), Fact(warrant_valued='bad'))
    def financial2_rule_1177(self):
        self.declare(Fact(recommendation='Underwriter berkualitas baik. Warrant menunjukkan kondisi buruk.'))


    @Rule(Fact(underwriter_valued='good'), Fact(net_income_valued='loss'))
    def financial2_rule_1178(self):
        self.declare(Fact(recommendation='Underwriter berkualitas baik. Laba bersih menunjukkan kerugian.'))


    @Rule(Fact(underwriter_valued='good'), Fact(per_valued='low'))
    def financial2_rule_1179(self):
        self.declare(Fact(recommendation='Underwriter berkualitas baik. PER berada di tingkat yang rendah.'))


    @Rule(Fact(underwriter_valued='good'), Fact(der_valued='high'))
    def financial2_rule_1180(self):
        self.declare(Fact(recommendation='Underwriter berkualitas baik. DER menunjukkan tingkat hutang yang tinggi.'))


    @Rule(Fact(underwriter_valued='good'), Fact(roa_valued='high'))
    def financial2_rule_1181(self):
        self.declare(Fact(recommendation='Underwriter berkualitas baik. ROA menunjukkan efisiensi tinggi.'))


    @Rule(Fact(underwriter_valued='good'), Fact(roe_valued='high'))
    def financial2_rule_1182(self):
        self.declare(Fact(recommendation='Underwriter berkualitas baik. ROE menunjukkan keuntungan yang tinggi.'))


    @Rule(Fact(warrant_valued='bad'), Fact(net_income_valued='loss'))
    def financial2_rule_1183(self):
        self.declare(Fact(recommendation='Warrant menunjukkan kondisi buruk. Laba bersih menunjukkan kerugian.'))


    @Rule(Fact(warrant_valued='bad'), Fact(per_valued='low'))
    def financial2_rule_1184(self):
        self.declare(Fact(recommendation='Warrant menunjukkan kondisi buruk. PER berada di tingkat yang rendah.'))


    @Rule(Fact(warrant_valued='bad'), Fact(der_valued='high'))
    def financial2_rule_1185(self):
        self.declare(Fact(recommendation='Warrant menunjukkan kondisi buruk. DER menunjukkan tingkat hutang yang tinggi.'))


    @Rule(Fact(warrant_valued='bad'), Fact(roa_valued='high'))
    def financial2_rule_1186(self):
        self.declare(Fact(recommendation='Warrant menunjukkan kondisi buruk. ROA menunjukkan efisiensi tinggi.'))


    @Rule(Fact(warrant_valued='bad'), Fact(roe_valued='high'))
    def financial2_rule_1187(self):
        self.declare(Fact(recommendation='Warrant menunjukkan kondisi buruk. ROE menunjukkan keuntungan yang tinggi.'))


    @Rule(Fact(net_income_valued='loss'), Fact(per_valued='low'))
    def financial2_rule_1188(self):
        self.declare(Fact(recommendation='Laba bersih menunjukkan kerugian. PER berada di tingkat yang rendah.'))


    @Rule(Fact(net_income_valued='loss'), Fact(der_valued='high'))
    def financial2_rule_1189(self):
        self.declare(Fact(recommendation='Laba bersih menunjukkan kerugian. DER menunjukkan tingkat hutang yang tinggi.'))


    @Rule(Fact(net_income_valued='loss'), Fact(roa_valued='high'))
    def financial2_rule_1190(self):
        self.declare(Fact(recommendation='Laba bersih menunjukkan kerugian. ROA menunjukkan efisiensi tinggi.'))


    @Rule(Fact(net_income_valued='loss'), Fact(roe_valued='high'))
    def financial2_rule_1191(self):
        self.declare(Fact(recommendation='Laba bersih menunjukkan kerugian. ROE menunjukkan keuntungan yang tinggi.'))


    @Rule(Fact(per_valued='low'), Fact(der_valued='high'))
    def financial2_rule_1192(self):
        self.declare(Fact(recommendation='PER berada di tingkat yang rendah. DER menunjukkan tingkat hutang yang tinggi.'))


    @Rule(Fact(per_valued='low'), Fact(roa_valued='high'))
    def financial2_rule_1193(self):
        self.declare(Fact(recommendation='PER berada di tingkat yang rendah. ROA menunjukkan efisiensi tinggi.'))


    @Rule(Fact(per_valued='low'), Fact(roe_valued='high'))
    def financial2_rule_1194(self):
        self.declare(Fact(recommendation='PER berada di tingkat yang rendah. ROE menunjukkan keuntungan yang tinggi.'))


    @Rule(Fact(der_valued='high'), Fact(roa_valued='high'))
    def financial2_rule_1195(self):
        self.declare(Fact(recommendation='DER menunjukkan tingkat hutang yang tinggi. ROA menunjukkan efisiensi tinggi.'))


    @Rule(Fact(der_valued='high'), Fact(roe_valued='high'))
    def financial2_rule_1196(self):
        self.declare(Fact(recommendation='DER menunjukkan tingkat hutang yang tinggi. ROE menunjukkan keuntungan yang tinggi.'))


    @Rule(Fact(roa_valued='high'), Fact(roe_valued='high'))
    def financial2_rule_1197(self):
        self.declare(Fact(recommendation='ROA menunjukkan efisiensi tinggi. ROE menunjukkan keuntungan yang tinggi.'))


    @Rule(Fact(underwriter_valued='good'), Fact(warrant_valued='bad'))
    def financial2_rule_1198(self):
        self.declare(Fact(recommendation='Underwriter berkualitas baik. Warrant menunjukkan kondisi buruk.'))


    @Rule(Fact(underwriter_valued='good'), Fact(net_income_valued='loss'))
    def financial2_rule_1199(self):
        self.declare(Fact(recommendation='Underwriter berkualitas baik. Laba bersih menunjukkan kerugian.'))


    @Rule(Fact(underwriter_valued='good'), Fact(per_valued='low'))
    def financial2_rule_1200(self):
        self.declare(Fact(recommendation='Underwriter berkualitas baik. PER berada di tingkat yang rendah.'))


    @Rule(Fact(underwriter_valued='good'), Fact(der_valued='high'))
    def financial2_rule_1201(self):
        self.declare(Fact(recommendation='Underwriter berkualitas baik. DER menunjukkan tingkat hutang yang tinggi.'))


    @Rule(Fact(underwriter_valued='good'), Fact(roa_valued='high'))
    def financial2_rule_1202(self):
        self.declare(Fact(recommendation='Underwriter berkualitas baik. ROA menunjukkan efisiensi tinggi.'))


    @Rule(Fact(underwriter_valued='good'), Fact(roe_valued='low'))
    def financial2_rule_1203(self):
        self.declare(Fact(recommendation='Underwriter berkualitas baik. ROE menunjukkan keuntungan yang rendah.'))


    @Rule(Fact(warrant_valued='bad'), Fact(net_income_valued='loss'))
    def financial2_rule_1204(self):
        self.declare(Fact(recommendation='Warrant menunjukkan kondisi buruk. Laba bersih menunjukkan kerugian.'))


    @Rule(Fact(warrant_valued='bad'), Fact(per_valued='low'))
    def financial2_rule_1205(self):
        self.declare(Fact(recommendation='Warrant menunjukkan kondisi buruk. PER berada di tingkat yang rendah.'))


    @Rule(Fact(warrant_valued='bad'), Fact(der_valued='high'))
    def financial2_rule_1206(self):
        self.declare(Fact(recommendation='Warrant menunjukkan kondisi buruk. DER menunjukkan tingkat hutang yang tinggi.'))


    @Rule(Fact(warrant_valued='bad'), Fact(roa_valued='high'))
    def financial2_rule_1207(self):
        self.declare(Fact(recommendation='Warrant menunjukkan kondisi buruk. ROA menunjukkan efisiensi tinggi.'))


    @Rule(Fact(warrant_valued='bad'), Fact(roe_valued='low'))
    def financial2_rule_1208(self):
        self.declare(Fact(recommendation='Warrant menunjukkan kondisi buruk. ROE menunjukkan keuntungan yang rendah.'))


    @Rule(Fact(net_income_valued='loss'), Fact(per_valued='low'))
    def financial2_rule_1209(self):
        self.declare(Fact(recommendation='Laba bersih menunjukkan kerugian. PER berada di tingkat yang rendah.'))


    @Rule(Fact(net_income_valued='loss'), Fact(der_valued='high'))
    def financial2_rule_1210(self):
        self.declare(Fact(recommendation='Laba bersih menunjukkan kerugian. DER menunjukkan tingkat hutang yang tinggi.'))


    @Rule(Fact(net_income_valued='loss'), Fact(roa_valued='high'))
    def financial2_rule_1211(self):
        self.declare(Fact(recommendation='Laba bersih menunjukkan kerugian. ROA menunjukkan efisiensi tinggi.'))


    @Rule(Fact(net_income_valued='loss'), Fact(roe_valued='low'))
    def financial2_rule_1212(self):
        self.declare(Fact(recommendation='Laba bersih menunjukkan kerugian. ROE menunjukkan keuntungan yang rendah.'))


    @Rule(Fact(per_valued='low'), Fact(der_valued='high'))
    def financial2_rule_1213(self):
        self.declare(Fact(recommendation='PER berada di tingkat yang rendah. DER menunjukkan tingkat hutang yang tinggi.'))


    @Rule(Fact(per_valued='low'), Fact(roa_valued='high'))
    def financial2_rule_1214(self):
        self.declare(Fact(recommendation='PER berada di tingkat yang rendah. ROA menunjukkan efisiensi tinggi.'))


    @Rule(Fact(per_valued='low'), Fact(roe_valued='low'))
    def financial2_rule_1215(self):
        self.declare(Fact(recommendation='PER berada di tingkat yang rendah. ROE menunjukkan keuntungan yang rendah.'))


    @Rule(Fact(der_valued='high'), Fact(roa_valued='high'))
    def financial2_rule_1216(self):
        self.declare(Fact(recommendation='DER menunjukkan tingkat hutang yang tinggi. ROA menunjukkan efisiensi tinggi.'))


    @Rule(Fact(der_valued='high'), Fact(roe_valued='low'))
    def financial2_rule_1217(self):
        self.declare(Fact(recommendation='DER menunjukkan tingkat hutang yang tinggi. ROE menunjukkan keuntungan yang rendah.'))


    @Rule(Fact(roa_valued='high'), Fact(roe_valued='low'))
    def financial2_rule_1218(self):
        self.declare(Fact(recommendation='ROA menunjukkan efisiensi tinggi. ROE menunjukkan keuntungan yang rendah.'))


    @Rule(Fact(underwriter_valued='good'), Fact(warrant_valued='bad'))
    def financial2_rule_1219(self):
        self.declare(Fact(recommendation='Underwriter berkualitas baik. Warrant menunjukkan kondisi buruk.'))


    @Rule(Fact(underwriter_valued='good'), Fact(net_income_valued='loss'))
    def financial2_rule_1220(self):
        self.declare(Fact(recommendation='Underwriter berkualitas baik. Laba bersih menunjukkan kerugian.'))


    @Rule(Fact(underwriter_valued='good'), Fact(per_valued='low'))
    def financial2_rule_1221(self):
        self.declare(Fact(recommendation='Underwriter berkualitas baik. PER berada di tingkat yang rendah.'))


    @Rule(Fact(underwriter_valued='good'), Fact(der_valued='high'))
    def financial2_rule_1222(self):
        self.declare(Fact(recommendation='Underwriter berkualitas baik. DER menunjukkan tingkat hutang yang tinggi.'))


    @Rule(Fact(underwriter_valued='good'), Fact(roa_valued='low'))
    def financial2_rule_1223(self):
        self.declare(Fact(recommendation='Underwriter berkualitas baik. ROA menunjukkan efisiensi rendah.'))


    @Rule(Fact(underwriter_valued='good'), Fact(roe_valued='high'))
    def financial2_rule_1224(self):
        self.declare(Fact(recommendation='Underwriter berkualitas baik. ROE menunjukkan keuntungan yang tinggi.'))


    @Rule(Fact(warrant_valued='bad'), Fact(net_income_valued='loss'))
    def financial2_rule_1225(self):
        self.declare(Fact(recommendation='Warrant menunjukkan kondisi buruk. Laba bersih menunjukkan kerugian.'))


    @Rule(Fact(warrant_valued='bad'), Fact(per_valued='low'))
    def financial2_rule_1226(self):
        self.declare(Fact(recommendation='Warrant menunjukkan kondisi buruk. PER berada di tingkat yang rendah.'))


    @Rule(Fact(warrant_valued='bad'), Fact(der_valued='high'))
    def financial2_rule_1227(self):
        self.declare(Fact(recommendation='Warrant menunjukkan kondisi buruk. DER menunjukkan tingkat hutang yang tinggi.'))


    @Rule(Fact(warrant_valued='bad'), Fact(roa_valued='low'))
    def financial2_rule_1228(self):
        self.declare(Fact(recommendation='Warrant menunjukkan kondisi buruk. ROA menunjukkan efisiensi rendah.'))


    @Rule(Fact(warrant_valued='bad'), Fact(roe_valued='high'))
    def financial2_rule_1229(self):
        self.declare(Fact(recommendation='Warrant menunjukkan kondisi buruk. ROE menunjukkan keuntungan yang tinggi.'))


    @Rule(Fact(net_income_valued='loss'), Fact(per_valued='low'))
    def financial2_rule_1230(self):
        self.declare(Fact(recommendation='Laba bersih menunjukkan kerugian. PER berada di tingkat yang rendah.'))


    @Rule(Fact(net_income_valued='loss'), Fact(der_valued='high'))
    def financial2_rule_1231(self):
        self.declare(Fact(recommendation='Laba bersih menunjukkan kerugian. DER menunjukkan tingkat hutang yang tinggi.'))


    @Rule(Fact(net_income_valued='loss'), Fact(roa_valued='low'))
    def financial2_rule_1232(self):
        self.declare(Fact(recommendation='Laba bersih menunjukkan kerugian. ROA menunjukkan efisiensi rendah.'))


    @Rule(Fact(net_income_valued='loss'), Fact(roe_valued='high'))
    def financial2_rule_1233(self):
        self.declare(Fact(recommendation='Laba bersih menunjukkan kerugian. ROE menunjukkan keuntungan yang tinggi.'))


    @Rule(Fact(per_valued='low'), Fact(der_valued='high'))
    def financial2_rule_1234(self):
        self.declare(Fact(recommendation='PER berada di tingkat yang rendah. DER menunjukkan tingkat hutang yang tinggi.'))


    @Rule(Fact(per_valued='low'), Fact(roa_valued='low'))
    def financial2_rule_1235(self):
        self.declare(Fact(recommendation='PER berada di tingkat yang rendah. ROA menunjukkan efisiensi rendah.'))


    @Rule(Fact(per_valued='low'), Fact(roe_valued='high'))
    def financial2_rule_1236(self):
        self.declare(Fact(recommendation='PER berada di tingkat yang rendah. ROE menunjukkan keuntungan yang tinggi.'))


    @Rule(Fact(der_valued='high'), Fact(roa_valued='low'))
    def financial2_rule_1237(self):
        self.declare(Fact(recommendation='DER menunjukkan tingkat hutang yang tinggi. ROA menunjukkan efisiensi rendah.'))


    @Rule(Fact(der_valued='high'), Fact(roe_valued='high'))
    def financial2_rule_1238(self):
        self.declare(Fact(recommendation='DER menunjukkan tingkat hutang yang tinggi. ROE menunjukkan keuntungan yang tinggi.'))


    @Rule(Fact(roa_valued='low'), Fact(roe_valued='high'))
    def financial2_rule_1239(self):
        self.declare(Fact(recommendation='ROA menunjukkan efisiensi rendah. ROE menunjukkan keuntungan yang tinggi.'))


    @Rule(Fact(underwriter_valued='good'), Fact(warrant_valued='bad'))
    def financial2_rule_1240(self):
        self.declare(Fact(recommendation='Underwriter berkualitas baik. Warrant menunjukkan kondisi buruk.'))


    @Rule(Fact(underwriter_valued='good'), Fact(net_income_valued='loss'))
    def financial2_rule_1241(self):
        self.declare(Fact(recommendation='Underwriter berkualitas baik. Laba bersih menunjukkan kerugian.'))


    @Rule(Fact(underwriter_valued='good'), Fact(per_valued='low'))
    def financial2_rule_1242(self):
        self.declare(Fact(recommendation='Underwriter berkualitas baik. PER berada di tingkat yang rendah.'))


    @Rule(Fact(underwriter_valued='good'), Fact(der_valued='high'))
    def financial2_rule_1243(self):
        self.declare(Fact(recommendation='Underwriter berkualitas baik. DER menunjukkan tingkat hutang yang tinggi.'))


    @Rule(Fact(underwriter_valued='good'), Fact(roa_valued='low'))
    def financial2_rule_1244(self):
        self.declare(Fact(recommendation='Underwriter berkualitas baik. ROA menunjukkan efisiensi rendah.'))


    @Rule(Fact(underwriter_valued='good'), Fact(roe_valued='low'))
    def financial2_rule_1245(self):
        self.declare(Fact(recommendation='Underwriter berkualitas baik. ROE menunjukkan keuntungan yang rendah.'))


    @Rule(Fact(warrant_valued='bad'), Fact(net_income_valued='loss'))
    def financial2_rule_1246(self):
        self.declare(Fact(recommendation='Warrant menunjukkan kondisi buruk. Laba bersih menunjukkan kerugian.'))


    @Rule(Fact(warrant_valued='bad'), Fact(per_valued='low'))
    def financial2_rule_1247(self):
        self.declare(Fact(recommendation='Warrant menunjukkan kondisi buruk. PER berada di tingkat yang rendah.'))


    @Rule(Fact(warrant_valued='bad'), Fact(der_valued='high'))
    def financial2_rule_1248(self):
        self.declare(Fact(recommendation='Warrant menunjukkan kondisi buruk. DER menunjukkan tingkat hutang yang tinggi.'))


    @Rule(Fact(warrant_valued='bad'), Fact(roa_valued='low'))
    def financial2_rule_1249(self):
        self.declare(Fact(recommendation='Warrant menunjukkan kondisi buruk. ROA menunjukkan efisiensi rendah.'))


    @Rule(Fact(warrant_valued='bad'), Fact(roe_valued='low'))
    def financial2_rule_1250(self):
        self.declare(Fact(recommendation='Warrant menunjukkan kondisi buruk. ROE menunjukkan keuntungan yang rendah.'))


    @Rule(Fact(net_income_valued='loss'), Fact(per_valued='low'))
    def financial2_rule_1251(self):
        self.declare(Fact(recommendation='Laba bersih menunjukkan kerugian. PER berada di tingkat yang rendah.'))


    @Rule(Fact(net_income_valued='loss'), Fact(der_valued='high'))
    def financial2_rule_1252(self):
        self.declare(Fact(recommendation='Laba bersih menunjukkan kerugian. DER menunjukkan tingkat hutang yang tinggi.'))


    @Rule(Fact(net_income_valued='loss'), Fact(roa_valued='low'))
    def financial2_rule_1253(self):
        self.declare(Fact(recommendation='Laba bersih menunjukkan kerugian. ROA menunjukkan efisiensi rendah.'))


    @Rule(Fact(net_income_valued='loss'), Fact(roe_valued='low'))
    def financial2_rule_1254(self):
        self.declare(Fact(recommendation='Laba bersih menunjukkan kerugian. ROE menunjukkan keuntungan yang rendah.'))


    @Rule(Fact(per_valued='low'), Fact(der_valued='high'))
    def financial2_rule_1255(self):
        self.declare(Fact(recommendation='PER berada di tingkat yang rendah. DER menunjukkan tingkat hutang yang tinggi.'))


    @Rule(Fact(per_valued='low'), Fact(roa_valued='low'))
    def financial2_rule_1256(self):
        self.declare(Fact(recommendation='PER berada di tingkat yang rendah. ROA menunjukkan efisiensi rendah.'))


    @Rule(Fact(per_valued='low'), Fact(roe_valued='low'))
    def financial2_rule_1257(self):
        self.declare(Fact(recommendation='PER berada di tingkat yang rendah. ROE menunjukkan keuntungan yang rendah.'))


    @Rule(Fact(der_valued='high'), Fact(roa_valued='low'))
    def financial2_rule_1258(self):
        self.declare(Fact(recommendation='DER menunjukkan tingkat hutang yang tinggi. ROA menunjukkan efisiensi rendah.'))


    @Rule(Fact(der_valued='high'), Fact(roe_valued='low'))
    def financial2_rule_1259(self):
        self.declare(Fact(recommendation='DER menunjukkan tingkat hutang yang tinggi. ROE menunjukkan keuntungan yang rendah.'))


    @Rule(Fact(roa_valued='low'), Fact(roe_valued='low'))
    def financial2_rule_1260(self):
        self.declare(Fact(recommendation='ROA menunjukkan efisiensi rendah. ROE menunjukkan keuntungan yang rendah.'))


    @Rule(Fact(underwriter_valued='good'), Fact(warrant_valued='bad'))
    def financial2_rule_1261(self):
        self.declare(Fact(recommendation='Underwriter berkualitas baik. Warrant menunjukkan kondisi buruk.'))


    @Rule(Fact(underwriter_valued='good'), Fact(net_income_valued='loss'))
    def financial2_rule_1262(self):
        self.declare(Fact(recommendation='Underwriter berkualitas baik. Laba bersih menunjukkan kerugian.'))


    @Rule(Fact(underwriter_valued='good'), Fact(per_valued='low'))
    def financial2_rule_1263(self):
        self.declare(Fact(recommendation='Underwriter berkualitas baik. PER berada di tingkat yang rendah.'))


    @Rule(Fact(underwriter_valued='good'), Fact(der_valued='low'))
    def financial2_rule_1264(self):
        self.declare(Fact(recommendation='Underwriter berkualitas baik. DER menunjukkan tingkat hutang yang rendah.'))


    @Rule(Fact(underwriter_valued='good'), Fact(roa_valued='high'))
    def financial2_rule_1265(self):
        self.declare(Fact(recommendation='Underwriter berkualitas baik. ROA menunjukkan efisiensi tinggi.'))


    @Rule(Fact(underwriter_valued='good'), Fact(roe_valued='high'))
    def financial2_rule_1266(self):
        self.declare(Fact(recommendation='Underwriter berkualitas baik. ROE menunjukkan keuntungan yang tinggi.'))


    @Rule(Fact(warrant_valued='bad'), Fact(net_income_valued='loss'))
    def financial2_rule_1267(self):
        self.declare(Fact(recommendation='Warrant menunjukkan kondisi buruk. Laba bersih menunjukkan kerugian.'))


    @Rule(Fact(warrant_valued='bad'), Fact(per_valued='low'))
    def financial2_rule_1268(self):
        self.declare(Fact(recommendation='Warrant menunjukkan kondisi buruk. PER berada di tingkat yang rendah.'))


    @Rule(Fact(warrant_valued='bad'), Fact(der_valued='low'))
    def financial2_rule_1269(self):
        self.declare(Fact(recommendation='Warrant menunjukkan kondisi buruk. DER menunjukkan tingkat hutang yang rendah.'))


    @Rule(Fact(warrant_valued='bad'), Fact(roa_valued='high'))
    def financial2_rule_1270(self):
        self.declare(Fact(recommendation='Warrant menunjukkan kondisi buruk. ROA menunjukkan efisiensi tinggi.'))


    @Rule(Fact(warrant_valued='bad'), Fact(roe_valued='high'))
    def financial2_rule_1271(self):
        self.declare(Fact(recommendation='Warrant menunjukkan kondisi buruk. ROE menunjukkan keuntungan yang tinggi.'))


    @Rule(Fact(net_income_valued='loss'), Fact(per_valued='low'))
    def financial2_rule_1272(self):
        self.declare(Fact(recommendation='Laba bersih menunjukkan kerugian. PER berada di tingkat yang rendah.'))


    @Rule(Fact(net_income_valued='loss'), Fact(der_valued='low'))
    def financial2_rule_1273(self):
        self.declare(Fact(recommendation='Laba bersih menunjukkan kerugian. DER menunjukkan tingkat hutang yang rendah.'))


    @Rule(Fact(net_income_valued='loss'), Fact(roa_valued='high'))
    def financial2_rule_1274(self):
        self.declare(Fact(recommendation='Laba bersih menunjukkan kerugian. ROA menunjukkan efisiensi tinggi.'))


    @Rule(Fact(net_income_valued='loss'), Fact(roe_valued='high'))
    def financial2_rule_1275(self):
        self.declare(Fact(recommendation='Laba bersih menunjukkan kerugian. ROE menunjukkan keuntungan yang tinggi.'))


    @Rule(Fact(per_valued='low'), Fact(der_valued='low'))
    def financial2_rule_1276(self):
        self.declare(Fact(recommendation='PER berada di tingkat yang rendah. DER menunjukkan tingkat hutang yang rendah.'))


    @Rule(Fact(per_valued='low'), Fact(roa_valued='high'))
    def financial2_rule_1277(self):
        self.declare(Fact(recommendation='PER berada di tingkat yang rendah. ROA menunjukkan efisiensi tinggi.'))


    @Rule(Fact(per_valued='low'), Fact(roe_valued='high'))
    def financial2_rule_1278(self):
        self.declare(Fact(recommendation='PER berada di tingkat yang rendah. ROE menunjukkan keuntungan yang tinggi.'))


    @Rule(Fact(der_valued='low'), Fact(roa_valued='high'))
    def financial2_rule_1279(self):
        self.declare(Fact(recommendation='DER menunjukkan tingkat hutang yang rendah. ROA menunjukkan efisiensi tinggi.'))


    @Rule(Fact(der_valued='low'), Fact(roe_valued='high'))
    def financial2_rule_1280(self):
        self.declare(Fact(recommendation='DER menunjukkan tingkat hutang yang rendah. ROE menunjukkan keuntungan yang tinggi.'))


    @Rule(Fact(roa_valued='high'), Fact(roe_valued='high'))
    def financial2_rule_1281(self):
        self.declare(Fact(recommendation='ROA menunjukkan efisiensi tinggi. ROE menunjukkan keuntungan yang tinggi.'))


    @Rule(Fact(underwriter_valued='good'), Fact(warrant_valued='bad'))
    def financial2_rule_1282(self):
        self.declare(Fact(recommendation='Underwriter berkualitas baik. Warrant menunjukkan kondisi buruk.'))


    @Rule(Fact(underwriter_valued='good'), Fact(net_income_valued='loss'))
    def financial2_rule_1283(self):
        self.declare(Fact(recommendation='Underwriter berkualitas baik. Laba bersih menunjukkan kerugian.'))


    @Rule(Fact(underwriter_valued='good'), Fact(per_valued='low'))
    def financial2_rule_1284(self):
        self.declare(Fact(recommendation='Underwriter berkualitas baik. PER berada di tingkat yang rendah.'))


    @Rule(Fact(underwriter_valued='good'), Fact(der_valued='low'))
    def financial2_rule_1285(self):
        self.declare(Fact(recommendation='Underwriter berkualitas baik. DER menunjukkan tingkat hutang yang rendah.'))


    @Rule(Fact(underwriter_valued='good'), Fact(roa_valued='high'))
    def financial2_rule_1286(self):
        self.declare(Fact(recommendation='Underwriter berkualitas baik. ROA menunjukkan efisiensi tinggi.'))


    @Rule(Fact(underwriter_valued='good'), Fact(roe_valued='low'))
    def financial2_rule_1287(self):
        self.declare(Fact(recommendation='Underwriter berkualitas baik. ROE menunjukkan keuntungan yang rendah.'))


    @Rule(Fact(warrant_valued='bad'), Fact(net_income_valued='loss'))
    def financial2_rule_1288(self):
        self.declare(Fact(recommendation='Warrant menunjukkan kondisi buruk. Laba bersih menunjukkan kerugian.'))


    @Rule(Fact(warrant_valued='bad'), Fact(per_valued='low'))
    def financial2_rule_1289(self):
        self.declare(Fact(recommendation='Warrant menunjukkan kondisi buruk. PER berada di tingkat yang rendah.'))


    @Rule(Fact(warrant_valued='bad'), Fact(der_valued='low'))
    def financial2_rule_1290(self):
        self.declare(Fact(recommendation='Warrant menunjukkan kondisi buruk. DER menunjukkan tingkat hutang yang rendah.'))


    @Rule(Fact(warrant_valued='bad'), Fact(roa_valued='high'))
    def financial2_rule_1291(self):
        self.declare(Fact(recommendation='Warrant menunjukkan kondisi buruk. ROA menunjukkan efisiensi tinggi.'))


    @Rule(Fact(warrant_valued='bad'), Fact(roe_valued='low'))
    def financial2_rule_1292(self):
        self.declare(Fact(recommendation='Warrant menunjukkan kondisi buruk. ROE menunjukkan keuntungan yang rendah.'))


    @Rule(Fact(net_income_valued='loss'), Fact(per_valued='low'))
    def financial2_rule_1293(self):
        self.declare(Fact(recommendation='Laba bersih menunjukkan kerugian. PER berada di tingkat yang rendah.'))


    @Rule(Fact(net_income_valued='loss'), Fact(der_valued='low'))
    def financial2_rule_1294(self):
        self.declare(Fact(recommendation='Laba bersih menunjukkan kerugian. DER menunjukkan tingkat hutang yang rendah.'))


    @Rule(Fact(net_income_valued='loss'), Fact(roa_valued='high'))
    def financial2_rule_1295(self):
        self.declare(Fact(recommendation='Laba bersih menunjukkan kerugian. ROA menunjukkan efisiensi tinggi.'))


    @Rule(Fact(net_income_valued='loss'), Fact(roe_valued='low'))
    def financial2_rule_1296(self):
        self.declare(Fact(recommendation='Laba bersih menunjukkan kerugian. ROE menunjukkan keuntungan yang rendah.'))


    @Rule(Fact(per_valued='low'), Fact(der_valued='low'))
    def financial2_rule_1297(self):
        self.declare(Fact(recommendation='PER berada di tingkat yang rendah. DER menunjukkan tingkat hutang yang rendah.'))


    @Rule(Fact(per_valued='low'), Fact(roa_valued='high'))
    def financial2_rule_1298(self):
        self.declare(Fact(recommendation='PER berada di tingkat yang rendah. ROA menunjukkan efisiensi tinggi.'))


    @Rule(Fact(per_valued='low'), Fact(roe_valued='low'))
    def financial2_rule_1299(self):
        self.declare(Fact(recommendation='PER berada di tingkat yang rendah. ROE menunjukkan keuntungan yang rendah.'))


    @Rule(Fact(der_valued='low'), Fact(roa_valued='high'))
    def financial2_rule_1300(self):
        self.declare(Fact(recommendation='DER menunjukkan tingkat hutang yang rendah. ROA menunjukkan efisiensi tinggi.'))


    @Rule(Fact(der_valued='low'), Fact(roe_valued='low'))
    def financial2_rule_1301(self):
        self.declare(Fact(recommendation='DER menunjukkan tingkat hutang yang rendah. ROE menunjukkan keuntungan yang rendah.'))


    @Rule(Fact(roa_valued='high'), Fact(roe_valued='low'))
    def financial2_rule_1302(self):
        self.declare(Fact(recommendation='ROA menunjukkan efisiensi tinggi. ROE menunjukkan keuntungan yang rendah.'))


    @Rule(Fact(underwriter_valued='good'), Fact(warrant_valued='bad'))
    def financial2_rule_1303(self):
        self.declare(Fact(recommendation='Underwriter berkualitas baik. Warrant menunjukkan kondisi buruk.'))


    @Rule(Fact(underwriter_valued='good'), Fact(net_income_valued='loss'))
    def financial2_rule_1304(self):
        self.declare(Fact(recommendation='Underwriter berkualitas baik. Laba bersih menunjukkan kerugian.'))


    @Rule(Fact(underwriter_valued='good'), Fact(per_valued='low'))
    def financial2_rule_1305(self):
        self.declare(Fact(recommendation='Underwriter berkualitas baik. PER berada di tingkat yang rendah.'))


    @Rule(Fact(underwriter_valued='good'), Fact(der_valued='low'))
    def financial2_rule_1306(self):
        self.declare(Fact(recommendation='Underwriter berkualitas baik. DER menunjukkan tingkat hutang yang rendah.'))


    @Rule(Fact(underwriter_valued='good'), Fact(roa_valued='low'))
    def financial2_rule_1307(self):
        self.declare(Fact(recommendation='Underwriter berkualitas baik. ROA menunjukkan efisiensi rendah.'))


    @Rule(Fact(underwriter_valued='good'), Fact(roe_valued='high'))
    def financial2_rule_1308(self):
        self.declare(Fact(recommendation='Underwriter berkualitas baik. ROE menunjukkan keuntungan yang tinggi.'))


    @Rule(Fact(warrant_valued='bad'), Fact(net_income_valued='loss'))
    def financial2_rule_1309(self):
        self.declare(Fact(recommendation='Warrant menunjukkan kondisi buruk. Laba bersih menunjukkan kerugian.'))


    @Rule(Fact(warrant_valued='bad'), Fact(per_valued='low'))
    def financial2_rule_1310(self):
        self.declare(Fact(recommendation='Warrant menunjukkan kondisi buruk. PER berada di tingkat yang rendah.'))


    @Rule(Fact(warrant_valued='bad'), Fact(der_valued='low'))
    def financial2_rule_1311(self):
        self.declare(Fact(recommendation='Warrant menunjukkan kondisi buruk. DER menunjukkan tingkat hutang yang rendah.'))


    @Rule(Fact(warrant_valued='bad'), Fact(roa_valued='low'))
    def financial2_rule_1312(self):
        self.declare(Fact(recommendation='Warrant menunjukkan kondisi buruk. ROA menunjukkan efisiensi rendah.'))


    @Rule(Fact(warrant_valued='bad'), Fact(roe_valued='high'))
    def financial2_rule_1313(self):
        self.declare(Fact(recommendation='Warrant menunjukkan kondisi buruk. ROE menunjukkan keuntungan yang tinggi.'))


    @Rule(Fact(net_income_valued='loss'), Fact(per_valued='low'))
    def financial2_rule_1314(self):
        self.declare(Fact(recommendation='Laba bersih menunjukkan kerugian. PER berada di tingkat yang rendah.'))


    @Rule(Fact(net_income_valued='loss'), Fact(der_valued='low'))
    def financial2_rule_1315(self):
        self.declare(Fact(recommendation='Laba bersih menunjukkan kerugian. DER menunjukkan tingkat hutang yang rendah.'))


    @Rule(Fact(net_income_valued='loss'), Fact(roa_valued='low'))
    def financial2_rule_1316(self):
        self.declare(Fact(recommendation='Laba bersih menunjukkan kerugian. ROA menunjukkan efisiensi rendah.'))


    @Rule(Fact(net_income_valued='loss'), Fact(roe_valued='high'))
    def financial2_rule_1317(self):
        self.declare(Fact(recommendation='Laba bersih menunjukkan kerugian. ROE menunjukkan keuntungan yang tinggi.'))


    @Rule(Fact(per_valued='low'), Fact(der_valued='low'))
    def financial2_rule_1318(self):
        self.declare(Fact(recommendation='PER berada di tingkat yang rendah. DER menunjukkan tingkat hutang yang rendah.'))


    @Rule(Fact(per_valued='low'), Fact(roa_valued='low'))
    def financial2_rule_1319(self):
        self.declare(Fact(recommendation='PER berada di tingkat yang rendah. ROA menunjukkan efisiensi rendah.'))


    @Rule(Fact(per_valued='low'), Fact(roe_valued='high'))
    def financial2_rule_1320(self):
        self.declare(Fact(recommendation='PER berada di tingkat yang rendah. ROE menunjukkan keuntungan yang tinggi.'))


    @Rule(Fact(der_valued='low'), Fact(roa_valued='low'))
    def financial2_rule_1321(self):
        self.declare(Fact(recommendation='DER menunjukkan tingkat hutang yang rendah. ROA menunjukkan efisiensi rendah.'))


    @Rule(Fact(der_valued='low'), Fact(roe_valued='high'))
    def financial2_rule_1322(self):
        self.declare(Fact(recommendation='DER menunjukkan tingkat hutang yang rendah. ROE menunjukkan keuntungan yang tinggi.'))


    @Rule(Fact(roa_valued='low'), Fact(roe_valued='high'))
    def financial2_rule_1323(self):
        self.declare(Fact(recommendation='ROA menunjukkan efisiensi rendah. ROE menunjukkan keuntungan yang tinggi.'))


    @Rule(Fact(underwriter_valued='good'), Fact(warrant_valued='bad'))
    def financial2_rule_1324(self):
        self.declare(Fact(recommendation='Underwriter berkualitas baik. Warrant menunjukkan kondisi buruk.'))


    @Rule(Fact(underwriter_valued='good'), Fact(net_income_valued='loss'))
    def financial2_rule_1325(self):
        self.declare(Fact(recommendation='Underwriter berkualitas baik. Laba bersih menunjukkan kerugian.'))


    @Rule(Fact(underwriter_valued='good'), Fact(per_valued='low'))
    def financial2_rule_1326(self):
        self.declare(Fact(recommendation='Underwriter berkualitas baik. PER berada di tingkat yang rendah.'))


    @Rule(Fact(underwriter_valued='good'), Fact(der_valued='low'))
    def financial2_rule_1327(self):
        self.declare(Fact(recommendation='Underwriter berkualitas baik. DER menunjukkan tingkat hutang yang rendah.'))


    @Rule(Fact(underwriter_valued='good'), Fact(roa_valued='low'))
    def financial2_rule_1328(self):
        self.declare(Fact(recommendation='Underwriter berkualitas baik. ROA menunjukkan efisiensi rendah.'))


    @Rule(Fact(underwriter_valued='good'), Fact(roe_valued='low'))
    def financial2_rule_1329(self):
        self.declare(Fact(recommendation='Underwriter berkualitas baik. ROE menunjukkan keuntungan yang rendah.'))


    @Rule(Fact(warrant_valued='bad'), Fact(net_income_valued='loss'))
    def financial2_rule_1330(self):
        self.declare(Fact(recommendation='Warrant menunjukkan kondisi buruk. Laba bersih menunjukkan kerugian.'))


    @Rule(Fact(warrant_valued='bad'), Fact(per_valued='low'))
    def financial2_rule_1331(self):
        self.declare(Fact(recommendation='Warrant menunjukkan kondisi buruk. PER berada di tingkat yang rendah.'))


    @Rule(Fact(warrant_valued='bad'), Fact(der_valued='low'))
    def financial2_rule_1332(self):
        self.declare(Fact(recommendation='Warrant menunjukkan kondisi buruk. DER menunjukkan tingkat hutang yang rendah.'))


    @Rule(Fact(warrant_valued='bad'), Fact(roa_valued='low'))
    def financial2_rule_1333(self):
        self.declare(Fact(recommendation='Warrant menunjukkan kondisi buruk. ROA menunjukkan efisiensi rendah.'))


    @Rule(Fact(warrant_valued='bad'), Fact(roe_valued='low'))
    def financial2_rule_1334(self):
        self.declare(Fact(recommendation='Warrant menunjukkan kondisi buruk. ROE menunjukkan keuntungan yang rendah.'))


    @Rule(Fact(net_income_valued='loss'), Fact(per_valued='low'))
    def financial2_rule_1335(self):
        self.declare(Fact(recommendation='Laba bersih menunjukkan kerugian. PER berada di tingkat yang rendah.'))


    @Rule(Fact(net_income_valued='loss'), Fact(der_valued='low'))
    def financial2_rule_1336(self):
        self.declare(Fact(recommendation='Laba bersih menunjukkan kerugian. DER menunjukkan tingkat hutang yang rendah.'))


    @Rule(Fact(net_income_valued='loss'), Fact(roa_valued='low'))
    def financial2_rule_1337(self):
        self.declare(Fact(recommendation='Laba bersih menunjukkan kerugian. ROA menunjukkan efisiensi rendah.'))


    @Rule(Fact(net_income_valued='loss'), Fact(roe_valued='low'))
    def financial2_rule_1338(self):
        self.declare(Fact(recommendation='Laba bersih menunjukkan kerugian. ROE menunjukkan keuntungan yang rendah.'))


    @Rule(Fact(per_valued='low'), Fact(der_valued='low'))
    def financial2_rule_1339(self):
        self.declare(Fact(recommendation='PER berada di tingkat yang rendah. DER menunjukkan tingkat hutang yang rendah.'))


    @Rule(Fact(per_valued='low'), Fact(roa_valued='low'))
    def financial2_rule_1340(self):
        self.declare(Fact(recommendation='PER berada di tingkat yang rendah. ROA menunjukkan efisiensi rendah.'))


    @Rule(Fact(per_valued='low'), Fact(roe_valued='low'))
    def financial2_rule_1341(self):
        self.declare(Fact(recommendation='PER berada di tingkat yang rendah. ROE menunjukkan keuntungan yang rendah.'))


    @Rule(Fact(der_valued='low'), Fact(roa_valued='low'))
    def financial2_rule_1342(self):
        self.declare(Fact(recommendation='DER menunjukkan tingkat hutang yang rendah. ROA menunjukkan efisiensi rendah.'))


    @Rule(Fact(der_valued='low'), Fact(roe_valued='low'))
    def financial2_rule_1343(self):
        self.declare(Fact(recommendation='DER menunjukkan tingkat hutang yang rendah. ROE menunjukkan keuntungan yang rendah.'))


    @Rule(Fact(roa_valued='low'), Fact(roe_valued='low'))
    def financial2_rule_1344(self):
        self.declare(Fact(recommendation='ROA menunjukkan efisiensi rendah. ROE menunjukkan keuntungan yang rendah.'))


    @Rule(Fact(underwriter_valued='bad'), Fact(warrant_valued='good'))
    def financial2_rule_1345(self):
        self.declare(Fact(recommendation='Underwriter berkualitas buruk. Warrant menunjukkan kondisi baik.'))


    @Rule(Fact(underwriter_valued='bad'), Fact(net_income_valued='profit'))
    def financial2_rule_1346(self):
        self.declare(Fact(recommendation='Underwriter berkualitas buruk. Laba bersih menunjukkan keuntungan.'))


    @Rule(Fact(underwriter_valued='bad'), Fact(per_valued='high'))
    def financial2_rule_1347(self):
        self.declare(Fact(recommendation='Underwriter berkualitas buruk. PER berada di tingkat yang tinggi.'))


    @Rule(Fact(underwriter_valued='bad'), Fact(der_valued='high'))
    def financial2_rule_1348(self):
        self.declare(Fact(recommendation='Underwriter berkualitas buruk. DER menunjukkan tingkat hutang yang tinggi.'))


    @Rule(Fact(underwriter_valued='bad'), Fact(roa_valued='high'))
    def financial2_rule_1349(self):
        self.declare(Fact(recommendation='Underwriter berkualitas buruk. ROA menunjukkan efisiensi tinggi.'))


    @Rule(Fact(underwriter_valued='bad'), Fact(roe_valued='high'))
    def financial2_rule_1350(self):
        self.declare(Fact(recommendation='Underwriter berkualitas buruk. ROE menunjukkan keuntungan yang tinggi.'))


    @Rule(Fact(warrant_valued='good'), Fact(net_income_valued='profit'))
    def financial2_rule_1351(self):
        self.declare(Fact(recommendation='Warrant menunjukkan kondisi baik. Laba bersih menunjukkan keuntungan.'))


    @Rule(Fact(warrant_valued='good'), Fact(per_valued='high'))
    def financial2_rule_1352(self):
        self.declare(Fact(recommendation='Warrant menunjukkan kondisi baik. PER berada di tingkat yang tinggi.'))


    @Rule(Fact(warrant_valued='good'), Fact(der_valued='high'))
    def financial2_rule_1353(self):
        self.declare(Fact(recommendation='Warrant menunjukkan kondisi baik. DER menunjukkan tingkat hutang yang tinggi.'))


    @Rule(Fact(warrant_valued='good'), Fact(roa_valued='high'))
    def financial2_rule_1354(self):
        self.declare(Fact(recommendation='Warrant menunjukkan kondisi baik. ROA menunjukkan efisiensi tinggi.'))


    @Rule(Fact(warrant_valued='good'), Fact(roe_valued='high'))
    def financial2_rule_1355(self):
        self.declare(Fact(recommendation='Warrant menunjukkan kondisi baik. ROE menunjukkan keuntungan yang tinggi.'))


    @Rule(Fact(net_income_valued='profit'), Fact(per_valued='high'))
    def financial2_rule_1356(self):
        self.declare(Fact(recommendation='Laba bersih menunjukkan keuntungan. PER berada di tingkat yang tinggi.'))


    @Rule(Fact(net_income_valued='profit'), Fact(der_valued='high'))
    def financial2_rule_1357(self):
        self.declare(Fact(recommendation='Laba bersih menunjukkan keuntungan. DER menunjukkan tingkat hutang yang tinggi.'))


    @Rule(Fact(net_income_valued='profit'), Fact(roa_valued='high'))
    def financial2_rule_1358(self):
        self.declare(Fact(recommendation='Laba bersih menunjukkan keuntungan. ROA menunjukkan efisiensi tinggi.'))


    @Rule(Fact(net_income_valued='profit'), Fact(roe_valued='high'))
    def financial2_rule_1359(self):
        self.declare(Fact(recommendation='Laba bersih menunjukkan keuntungan. ROE menunjukkan keuntungan yang tinggi.'))


    @Rule(Fact(per_valued='high'), Fact(der_valued='high'))
    def financial2_rule_1360(self):
        self.declare(Fact(recommendation='PER berada di tingkat yang tinggi. DER menunjukkan tingkat hutang yang tinggi.'))


    @Rule(Fact(per_valued='high'), Fact(roa_valued='high'))
    def financial2_rule_1361(self):
        self.declare(Fact(recommendation='PER berada di tingkat yang tinggi. ROA menunjukkan efisiensi tinggi.'))


    @Rule(Fact(per_valued='high'), Fact(roe_valued='high'))
    def financial2_rule_1362(self):
        self.declare(Fact(recommendation='PER berada di tingkat yang tinggi. ROE menunjukkan keuntungan yang tinggi.'))


    @Rule(Fact(der_valued='high'), Fact(roa_valued='high'))
    def financial2_rule_1363(self):
        self.declare(Fact(recommendation='DER menunjukkan tingkat hutang yang tinggi. ROA menunjukkan efisiensi tinggi.'))


    @Rule(Fact(der_valued='high'), Fact(roe_valued='high'))
    def financial2_rule_1364(self):
        self.declare(Fact(recommendation='DER menunjukkan tingkat hutang yang tinggi. ROE menunjukkan keuntungan yang tinggi.'))


    @Rule(Fact(roa_valued='high'), Fact(roe_valued='high'))
    def financial2_rule_1365(self):
        self.declare(Fact(recommendation='ROA menunjukkan efisiensi tinggi. ROE menunjukkan keuntungan yang tinggi.'))


    @Rule(Fact(underwriter_valued='bad'), Fact(warrant_valued='good'))
    def financial2_rule_1366(self):
        self.declare(Fact(recommendation='Underwriter berkualitas buruk. Warrant menunjukkan kondisi baik.'))


    @Rule(Fact(underwriter_valued='bad'), Fact(net_income_valued='profit'))
    def financial2_rule_1367(self):
        self.declare(Fact(recommendation='Underwriter berkualitas buruk. Laba bersih menunjukkan keuntungan.'))


    @Rule(Fact(underwriter_valued='bad'), Fact(per_valued='high'))
    def financial2_rule_1368(self):
        self.declare(Fact(recommendation='Underwriter berkualitas buruk. PER berada di tingkat yang tinggi.'))


    @Rule(Fact(underwriter_valued='bad'), Fact(der_valued='high'))
    def financial2_rule_1369(self):
        self.declare(Fact(recommendation='Underwriter berkualitas buruk. DER menunjukkan tingkat hutang yang tinggi.'))


    @Rule(Fact(underwriter_valued='bad'), Fact(roa_valued='high'))
    def financial2_rule_1370(self):
        self.declare(Fact(recommendation='Underwriter berkualitas buruk. ROA menunjukkan efisiensi tinggi.'))


    @Rule(Fact(underwriter_valued='bad'), Fact(roe_valued='low'))
    def financial2_rule_1371(self):
        self.declare(Fact(recommendation='Underwriter berkualitas buruk. ROE menunjukkan keuntungan yang rendah.'))


    @Rule(Fact(warrant_valued='good'), Fact(net_income_valued='profit'))
    def financial2_rule_1372(self):
        self.declare(Fact(recommendation='Warrant menunjukkan kondisi baik. Laba bersih menunjukkan keuntungan.'))


    @Rule(Fact(warrant_valued='good'), Fact(per_valued='high'))
    def financial2_rule_1373(self):
        self.declare(Fact(recommendation='Warrant menunjukkan kondisi baik. PER berada di tingkat yang tinggi.'))


    @Rule(Fact(warrant_valued='good'), Fact(der_valued='high'))
    def financial2_rule_1374(self):
        self.declare(Fact(recommendation='Warrant menunjukkan kondisi baik. DER menunjukkan tingkat hutang yang tinggi.'))


    @Rule(Fact(warrant_valued='good'), Fact(roa_valued='high'))
    def financial2_rule_1375(self):
        self.declare(Fact(recommendation='Warrant menunjukkan kondisi baik. ROA menunjukkan efisiensi tinggi.'))


    @Rule(Fact(warrant_valued='good'), Fact(roe_valued='low'))
    def financial2_rule_1376(self):
        self.declare(Fact(recommendation='Warrant menunjukkan kondisi baik. ROE menunjukkan keuntungan yang rendah.'))


    @Rule(Fact(net_income_valued='profit'), Fact(per_valued='high'))
    def financial2_rule_1377(self):
        self.declare(Fact(recommendation='Laba bersih menunjukkan keuntungan. PER berada di tingkat yang tinggi.'))


    @Rule(Fact(net_income_valued='profit'), Fact(der_valued='high'))
    def financial2_rule_1378(self):
        self.declare(Fact(recommendation='Laba bersih menunjukkan keuntungan. DER menunjukkan tingkat hutang yang tinggi.'))


    @Rule(Fact(net_income_valued='profit'), Fact(roa_valued='high'))
    def financial2_rule_1379(self):
        self.declare(Fact(recommendation='Laba bersih menunjukkan keuntungan. ROA menunjukkan efisiensi tinggi.'))


    @Rule(Fact(net_income_valued='profit'), Fact(roe_valued='low'))
    def financial2_rule_1380(self):
        self.declare(Fact(recommendation='Laba bersih menunjukkan keuntungan. ROE menunjukkan keuntungan yang rendah.'))


    @Rule(Fact(per_valued='high'), Fact(der_valued='high'))
    def financial2_rule_1381(self):
        self.declare(Fact(recommendation='PER berada di tingkat yang tinggi. DER menunjukkan tingkat hutang yang tinggi.'))


    @Rule(Fact(per_valued='high'), Fact(roa_valued='high'))
    def financial2_rule_1382(self):
        self.declare(Fact(recommendation='PER berada di tingkat yang tinggi. ROA menunjukkan efisiensi tinggi.'))


    @Rule(Fact(per_valued='high'), Fact(roe_valued='low'))
    def financial2_rule_1383(self):
        self.declare(Fact(recommendation='PER berada di tingkat yang tinggi. ROE menunjukkan keuntungan yang rendah.'))


    @Rule(Fact(der_valued='high'), Fact(roa_valued='high'))
    def financial2_rule_1384(self):
        self.declare(Fact(recommendation='DER menunjukkan tingkat hutang yang tinggi. ROA menunjukkan efisiensi tinggi.'))


    @Rule(Fact(der_valued='high'), Fact(roe_valued='low'))
    def financial2_rule_1385(self):
        self.declare(Fact(recommendation='DER menunjukkan tingkat hutang yang tinggi. ROE menunjukkan keuntungan yang rendah.'))


    @Rule(Fact(roa_valued='high'), Fact(roe_valued='low'))
    def financial2_rule_1386(self):
        self.declare(Fact(recommendation='ROA menunjukkan efisiensi tinggi. ROE menunjukkan keuntungan yang rendah.'))


    @Rule(Fact(underwriter_valued='bad'), Fact(warrant_valued='good'))
    def financial2_rule_1387(self):
        self.declare(Fact(recommendation='Underwriter berkualitas buruk. Warrant menunjukkan kondisi baik.'))


    @Rule(Fact(underwriter_valued='bad'), Fact(net_income_valued='profit'))
    def financial2_rule_1388(self):
        self.declare(Fact(recommendation='Underwriter berkualitas buruk. Laba bersih menunjukkan keuntungan.'))


    @Rule(Fact(underwriter_valued='bad'), Fact(per_valued='high'))
    def financial2_rule_1389(self):
        self.declare(Fact(recommendation='Underwriter berkualitas buruk. PER berada di tingkat yang tinggi.'))


    @Rule(Fact(underwriter_valued='bad'), Fact(der_valued='high'))
    def financial2_rule_1390(self):
        self.declare(Fact(recommendation='Underwriter berkualitas buruk. DER menunjukkan tingkat hutang yang tinggi.'))


    @Rule(Fact(underwriter_valued='bad'), Fact(roa_valued='low'))
    def financial2_rule_1391(self):
        self.declare(Fact(recommendation='Underwriter berkualitas buruk. ROA menunjukkan efisiensi rendah.'))


    @Rule(Fact(underwriter_valued='bad'), Fact(roe_valued='high'))
    def financial2_rule_1392(self):
        self.declare(Fact(recommendation='Underwriter berkualitas buruk. ROE menunjukkan keuntungan yang tinggi.'))


    @Rule(Fact(warrant_valued='good'), Fact(net_income_valued='profit'))
    def financial2_rule_1393(self):
        self.declare(Fact(recommendation='Warrant menunjukkan kondisi baik. Laba bersih menunjukkan keuntungan.'))


    @Rule(Fact(warrant_valued='good'), Fact(per_valued='high'))
    def financial2_rule_1394(self):
        self.declare(Fact(recommendation='Warrant menunjukkan kondisi baik. PER berada di tingkat yang tinggi.'))


    @Rule(Fact(warrant_valued='good'), Fact(der_valued='high'))
    def financial2_rule_1395(self):
        self.declare(Fact(recommendation='Warrant menunjukkan kondisi baik. DER menunjukkan tingkat hutang yang tinggi.'))


    @Rule(Fact(warrant_valued='good'), Fact(roa_valued='low'))
    def financial2_rule_1396(self):
        self.declare(Fact(recommendation='Warrant menunjukkan kondisi baik. ROA menunjukkan efisiensi rendah.'))


    @Rule(Fact(warrant_valued='good'), Fact(roe_valued='high'))
    def financial2_rule_1397(self):
        self.declare(Fact(recommendation='Warrant menunjukkan kondisi baik. ROE menunjukkan keuntungan yang tinggi.'))


    @Rule(Fact(net_income_valued='profit'), Fact(per_valued='high'))
    def financial2_rule_1398(self):
        self.declare(Fact(recommendation='Laba bersih menunjukkan keuntungan. PER berada di tingkat yang tinggi.'))


    @Rule(Fact(net_income_valued='profit'), Fact(der_valued='high'))
    def financial2_rule_1399(self):
        self.declare(Fact(recommendation='Laba bersih menunjukkan keuntungan. DER menunjukkan tingkat hutang yang tinggi.'))


    @Rule(Fact(net_income_valued='profit'), Fact(roa_valued='low'))
    def financial2_rule_1400(self):
        self.declare(Fact(recommendation='Laba bersih menunjukkan keuntungan. ROA menunjukkan efisiensi rendah.'))


    @Rule(Fact(net_income_valued='profit'), Fact(roe_valued='high'))
    def financial2_rule_1401(self):
        self.declare(Fact(recommendation='Laba bersih menunjukkan keuntungan. ROE menunjukkan keuntungan yang tinggi.'))


    @Rule(Fact(per_valued='high'), Fact(der_valued='high'))
    def financial2_rule_1402(self):
        self.declare(Fact(recommendation='PER berada di tingkat yang tinggi. DER menunjukkan tingkat hutang yang tinggi.'))


    @Rule(Fact(per_valued='high'), Fact(roa_valued='low'))
    def financial2_rule_1403(self):
        self.declare(Fact(recommendation='PER berada di tingkat yang tinggi. ROA menunjukkan efisiensi rendah.'))


    @Rule(Fact(per_valued='high'), Fact(roe_valued='high'))
    def financial2_rule_1404(self):
        self.declare(Fact(recommendation='PER berada di tingkat yang tinggi. ROE menunjukkan keuntungan yang tinggi.'))


    @Rule(Fact(der_valued='high'), Fact(roa_valued='low'))
    def financial2_rule_1405(self):
        self.declare(Fact(recommendation='DER menunjukkan tingkat hutang yang tinggi. ROA menunjukkan efisiensi rendah.'))


    @Rule(Fact(der_valued='high'), Fact(roe_valued='high'))
    def financial2_rule_1406(self):
        self.declare(Fact(recommendation='DER menunjukkan tingkat hutang yang tinggi. ROE menunjukkan keuntungan yang tinggi.'))


    @Rule(Fact(roa_valued='low'), Fact(roe_valued='high'))
    def financial2_rule_1407(self):
        self.declare(Fact(recommendation='ROA menunjukkan efisiensi rendah. ROE menunjukkan keuntungan yang tinggi.'))


    @Rule(Fact(underwriter_valued='bad'), Fact(warrant_valued='good'))
    def financial2_rule_1408(self):
        self.declare(Fact(recommendation='Underwriter berkualitas buruk. Warrant menunjukkan kondisi baik.'))


    @Rule(Fact(underwriter_valued='bad'), Fact(net_income_valued='profit'))
    def financial2_rule_1409(self):
        self.declare(Fact(recommendation='Underwriter berkualitas buruk. Laba bersih menunjukkan keuntungan.'))


    @Rule(Fact(underwriter_valued='bad'), Fact(per_valued='high'))
    def financial2_rule_1410(self):
        self.declare(Fact(recommendation='Underwriter berkualitas buruk. PER berada di tingkat yang tinggi.'))


    @Rule(Fact(underwriter_valued='bad'), Fact(der_valued='high'))
    def financial2_rule_1411(self):
        self.declare(Fact(recommendation='Underwriter berkualitas buruk. DER menunjukkan tingkat hutang yang tinggi.'))


    @Rule(Fact(underwriter_valued='bad'), Fact(roa_valued='low'))
    def financial2_rule_1412(self):
        self.declare(Fact(recommendation='Underwriter berkualitas buruk. ROA menunjukkan efisiensi rendah.'))


    @Rule(Fact(underwriter_valued='bad'), Fact(roe_valued='low'))
    def financial2_rule_1413(self):
        self.declare(Fact(recommendation='Underwriter berkualitas buruk. ROE menunjukkan keuntungan yang rendah.'))


    @Rule(Fact(warrant_valued='good'), Fact(net_income_valued='profit'))
    def financial2_rule_1414(self):
        self.declare(Fact(recommendation='Warrant menunjukkan kondisi baik. Laba bersih menunjukkan keuntungan.'))


    @Rule(Fact(warrant_valued='good'), Fact(per_valued='high'))
    def financial2_rule_1415(self):
        self.declare(Fact(recommendation='Warrant menunjukkan kondisi baik. PER berada di tingkat yang tinggi.'))


    @Rule(Fact(warrant_valued='good'), Fact(der_valued='high'))
    def financial2_rule_1416(self):
        self.declare(Fact(recommendation='Warrant menunjukkan kondisi baik. DER menunjukkan tingkat hutang yang tinggi.'))


    @Rule(Fact(warrant_valued='good'), Fact(roa_valued='low'))
    def financial2_rule_1417(self):
        self.declare(Fact(recommendation='Warrant menunjukkan kondisi baik. ROA menunjukkan efisiensi rendah.'))


    @Rule(Fact(warrant_valued='good'), Fact(roe_valued='low'))
    def financial2_rule_1418(self):
        self.declare(Fact(recommendation='Warrant menunjukkan kondisi baik. ROE menunjukkan keuntungan yang rendah.'))


    @Rule(Fact(net_income_valued='profit'), Fact(per_valued='high'))
    def financial2_rule_1419(self):
        self.declare(Fact(recommendation='Laba bersih menunjukkan keuntungan. PER berada di tingkat yang tinggi.'))


    @Rule(Fact(net_income_valued='profit'), Fact(der_valued='high'))
    def financial2_rule_1420(self):
        self.declare(Fact(recommendation='Laba bersih menunjukkan keuntungan. DER menunjukkan tingkat hutang yang tinggi.'))


    @Rule(Fact(net_income_valued='profit'), Fact(roa_valued='low'))
    def financial2_rule_1421(self):
        self.declare(Fact(recommendation='Laba bersih menunjukkan keuntungan. ROA menunjukkan efisiensi rendah.'))


    @Rule(Fact(net_income_valued='profit'), Fact(roe_valued='low'))
    def financial2_rule_1422(self):
        self.declare(Fact(recommendation='Laba bersih menunjukkan keuntungan. ROE menunjukkan keuntungan yang rendah.'))


    @Rule(Fact(per_valued='high'), Fact(der_valued='high'))
    def financial2_rule_1423(self):
        self.declare(Fact(recommendation='PER berada di tingkat yang tinggi. DER menunjukkan tingkat hutang yang tinggi.'))


    @Rule(Fact(per_valued='high'), Fact(roa_valued='low'))
    def financial2_rule_1424(self):
        self.declare(Fact(recommendation='PER berada di tingkat yang tinggi. ROA menunjukkan efisiensi rendah.'))


    @Rule(Fact(per_valued='high'), Fact(roe_valued='low'))
    def financial2_rule_1425(self):
        self.declare(Fact(recommendation='PER berada di tingkat yang tinggi. ROE menunjukkan keuntungan yang rendah.'))


    @Rule(Fact(der_valued='high'), Fact(roa_valued='low'))
    def financial2_rule_1426(self):
        self.declare(Fact(recommendation='DER menunjukkan tingkat hutang yang tinggi. ROA menunjukkan efisiensi rendah.'))


    @Rule(Fact(der_valued='high'), Fact(roe_valued='low'))
    def financial2_rule_1427(self):
        self.declare(Fact(recommendation='DER menunjukkan tingkat hutang yang tinggi. ROE menunjukkan keuntungan yang rendah.'))


    @Rule(Fact(roa_valued='low'), Fact(roe_valued='low'))
    def financial2_rule_1428(self):
        self.declare(Fact(recommendation='ROA menunjukkan efisiensi rendah. ROE menunjukkan keuntungan yang rendah.'))


    @Rule(Fact(underwriter_valued='bad'), Fact(warrant_valued='good'))
    def financial2_rule_1429(self):
        self.declare(Fact(recommendation='Underwriter berkualitas buruk. Warrant menunjukkan kondisi baik.'))


    @Rule(Fact(underwriter_valued='bad'), Fact(net_income_valued='profit'))
    def financial2_rule_1430(self):
        self.declare(Fact(recommendation='Underwriter berkualitas buruk. Laba bersih menunjukkan keuntungan.'))


    @Rule(Fact(underwriter_valued='bad'), Fact(per_valued='high'))
    def financial2_rule_1431(self):
        self.declare(Fact(recommendation='Underwriter berkualitas buruk. PER berada di tingkat yang tinggi.'))


    @Rule(Fact(underwriter_valued='bad'), Fact(der_valued='low'))
    def financial2_rule_1432(self):
        self.declare(Fact(recommendation='Underwriter berkualitas buruk. DER menunjukkan tingkat hutang yang rendah.'))


    @Rule(Fact(underwriter_valued='bad'), Fact(roa_valued='high'))
    def financial2_rule_1433(self):
        self.declare(Fact(recommendation='Underwriter berkualitas buruk. ROA menunjukkan efisiensi tinggi.'))


    @Rule(Fact(underwriter_valued='bad'), Fact(roe_valued='high'))
    def financial2_rule_1434(self):
        self.declare(Fact(recommendation='Underwriter berkualitas buruk. ROE menunjukkan keuntungan yang tinggi.'))


    @Rule(Fact(warrant_valued='good'), Fact(net_income_valued='profit'))
    def financial2_rule_1435(self):
        self.declare(Fact(recommendation='Warrant menunjukkan kondisi baik. Laba bersih menunjukkan keuntungan.'))


    @Rule(Fact(warrant_valued='good'), Fact(per_valued='high'))
    def financial2_rule_1436(self):
        self.declare(Fact(recommendation='Warrant menunjukkan kondisi baik. PER berada di tingkat yang tinggi.'))


    @Rule(Fact(warrant_valued='good'), Fact(der_valued='low'))
    def financial2_rule_1437(self):
        self.declare(Fact(recommendation='Warrant menunjukkan kondisi baik. DER menunjukkan tingkat hutang yang rendah.'))


    @Rule(Fact(warrant_valued='good'), Fact(roa_valued='high'))
    def financial2_rule_1438(self):
        self.declare(Fact(recommendation='Warrant menunjukkan kondisi baik. ROA menunjukkan efisiensi tinggi.'))


    @Rule(Fact(warrant_valued='good'), Fact(roe_valued='high'))
    def financial2_rule_1439(self):
        self.declare(Fact(recommendation='Warrant menunjukkan kondisi baik. ROE menunjukkan keuntungan yang tinggi.'))


    @Rule(Fact(net_income_valued='profit'), Fact(per_valued='high'))
    def financial2_rule_1440(self):
        self.declare(Fact(recommendation='Laba bersih menunjukkan keuntungan. PER berada di tingkat yang tinggi.'))


    @Rule(Fact(net_income_valued='profit'), Fact(der_valued='low'))
    def financial2_rule_1441(self):
        self.declare(Fact(recommendation='Laba bersih menunjukkan keuntungan. DER menunjukkan tingkat hutang yang rendah.'))


    @Rule(Fact(net_income_valued='profit'), Fact(roa_valued='high'))
    def financial2_rule_1442(self):
        self.declare(Fact(recommendation='Laba bersih menunjukkan keuntungan. ROA menunjukkan efisiensi tinggi.'))


    @Rule(Fact(net_income_valued='profit'), Fact(roe_valued='high'))
    def financial2_rule_1443(self):
        self.declare(Fact(recommendation='Laba bersih menunjukkan keuntungan. ROE menunjukkan keuntungan yang tinggi.'))


    @Rule(Fact(per_valued='high'), Fact(der_valued='low'))
    def financial2_rule_1444(self):
        self.declare(Fact(recommendation='PER berada di tingkat yang tinggi. DER menunjukkan tingkat hutang yang rendah.'))


    @Rule(Fact(per_valued='high'), Fact(roa_valued='high'))
    def financial2_rule_1445(self):
        self.declare(Fact(recommendation='PER berada di tingkat yang tinggi. ROA menunjukkan efisiensi tinggi.'))


    @Rule(Fact(per_valued='high'), Fact(roe_valued='high'))
    def financial2_rule_1446(self):
        self.declare(Fact(recommendation='PER berada di tingkat yang tinggi. ROE menunjukkan keuntungan yang tinggi.'))


    @Rule(Fact(der_valued='low'), Fact(roa_valued='high'))
    def financial2_rule_1447(self):
        self.declare(Fact(recommendation='DER menunjukkan tingkat hutang yang rendah. ROA menunjukkan efisiensi tinggi.'))


    @Rule(Fact(der_valued='low'), Fact(roe_valued='high'))
    def financial2_rule_1448(self):
        self.declare(Fact(recommendation='DER menunjukkan tingkat hutang yang rendah. ROE menunjukkan keuntungan yang tinggi.'))


    @Rule(Fact(roa_valued='high'), Fact(roe_valued='high'))
    def financial2_rule_1449(self):
        self.declare(Fact(recommendation='ROA menunjukkan efisiensi tinggi. ROE menunjukkan keuntungan yang tinggi.'))


    @Rule(Fact(underwriter_valued='bad'), Fact(warrant_valued='good'))
    def financial2_rule_1450(self):
        self.declare(Fact(recommendation='Underwriter berkualitas buruk. Warrant menunjukkan kondisi baik.'))


    @Rule(Fact(underwriter_valued='bad'), Fact(net_income_valued='profit'))
    def financial2_rule_1451(self):
        self.declare(Fact(recommendation='Underwriter berkualitas buruk. Laba bersih menunjukkan keuntungan.'))


    @Rule(Fact(underwriter_valued='bad'), Fact(per_valued='high'))
    def financial2_rule_1452(self):
        self.declare(Fact(recommendation='Underwriter berkualitas buruk. PER berada di tingkat yang tinggi.'))


    @Rule(Fact(underwriter_valued='bad'), Fact(der_valued='low'))
    def financial2_rule_1453(self):
        self.declare(Fact(recommendation='Underwriter berkualitas buruk. DER menunjukkan tingkat hutang yang rendah.'))


    @Rule(Fact(underwriter_valued='bad'), Fact(roa_valued='high'))
    def financial2_rule_1454(self):
        self.declare(Fact(recommendation='Underwriter berkualitas buruk. ROA menunjukkan efisiensi tinggi.'))


    @Rule(Fact(underwriter_valued='bad'), Fact(roe_valued='low'))
    def financial2_rule_1455(self):
        self.declare(Fact(recommendation='Underwriter berkualitas buruk. ROE menunjukkan keuntungan yang rendah.'))


    @Rule(Fact(warrant_valued='good'), Fact(net_income_valued='profit'))
    def financial2_rule_1456(self):
        self.declare(Fact(recommendation='Warrant menunjukkan kondisi baik. Laba bersih menunjukkan keuntungan.'))


    @Rule(Fact(warrant_valued='good'), Fact(per_valued='high'))
    def financial2_rule_1457(self):
        self.declare(Fact(recommendation='Warrant menunjukkan kondisi baik. PER berada di tingkat yang tinggi.'))


    @Rule(Fact(warrant_valued='good'), Fact(der_valued='low'))
    def financial2_rule_1458(self):
        self.declare(Fact(recommendation='Warrant menunjukkan kondisi baik. DER menunjukkan tingkat hutang yang rendah.'))


    @Rule(Fact(warrant_valued='good'), Fact(roa_valued='high'))
    def financial2_rule_1459(self):
        self.declare(Fact(recommendation='Warrant menunjukkan kondisi baik. ROA menunjukkan efisiensi tinggi.'))


    @Rule(Fact(warrant_valued='good'), Fact(roe_valued='low'))
    def financial2_rule_1460(self):
        self.declare(Fact(recommendation='Warrant menunjukkan kondisi baik. ROE menunjukkan keuntungan yang rendah.'))


    @Rule(Fact(net_income_valued='profit'), Fact(per_valued='high'))
    def financial2_rule_1461(self):
        self.declare(Fact(recommendation='Laba bersih menunjukkan keuntungan. PER berada di tingkat yang tinggi.'))


    @Rule(Fact(net_income_valued='profit'), Fact(der_valued='low'))
    def financial2_rule_1462(self):
        self.declare(Fact(recommendation='Laba bersih menunjukkan keuntungan. DER menunjukkan tingkat hutang yang rendah.'))


    @Rule(Fact(net_income_valued='profit'), Fact(roa_valued='high'))
    def financial2_rule_1463(self):
        self.declare(Fact(recommendation='Laba bersih menunjukkan keuntungan. ROA menunjukkan efisiensi tinggi.'))


    @Rule(Fact(net_income_valued='profit'), Fact(roe_valued='low'))
    def financial2_rule_1464(self):
        self.declare(Fact(recommendation='Laba bersih menunjukkan keuntungan. ROE menunjukkan keuntungan yang rendah.'))


    @Rule(Fact(per_valued='high'), Fact(der_valued='low'))
    def financial2_rule_1465(self):
        self.declare(Fact(recommendation='PER berada di tingkat yang tinggi. DER menunjukkan tingkat hutang yang rendah.'))


    @Rule(Fact(per_valued='high'), Fact(roa_valued='high'))
    def financial2_rule_1466(self):
        self.declare(Fact(recommendation='PER berada di tingkat yang tinggi. ROA menunjukkan efisiensi tinggi.'))


    @Rule(Fact(per_valued='high'), Fact(roe_valued='low'))
    def financial2_rule_1467(self):
        self.declare(Fact(recommendation='PER berada di tingkat yang tinggi. ROE menunjukkan keuntungan yang rendah.'))


    @Rule(Fact(der_valued='low'), Fact(roa_valued='high'))
    def financial2_rule_1468(self):
        self.declare(Fact(recommendation='DER menunjukkan tingkat hutang yang rendah. ROA menunjukkan efisiensi tinggi.'))


    @Rule(Fact(der_valued='low'), Fact(roe_valued='low'))
    def financial2_rule_1469(self):
        self.declare(Fact(recommendation='DER menunjukkan tingkat hutang yang rendah. ROE menunjukkan keuntungan yang rendah.'))


    @Rule(Fact(roa_valued='high'), Fact(roe_valued='low'))
    def financial2_rule_1470(self):
        self.declare(Fact(recommendation='ROA menunjukkan efisiensi tinggi. ROE menunjukkan keuntungan yang rendah.'))


    @Rule(Fact(underwriter_valued='bad'), Fact(warrant_valued='good'))
    def financial2_rule_1471(self):
        self.declare(Fact(recommendation='Underwriter berkualitas buruk. Warrant menunjukkan kondisi baik.'))


    @Rule(Fact(underwriter_valued='bad'), Fact(net_income_valued='profit'))
    def financial2_rule_1472(self):
        self.declare(Fact(recommendation='Underwriter berkualitas buruk. Laba bersih menunjukkan keuntungan.'))


    @Rule(Fact(underwriter_valued='bad'), Fact(per_valued='high'))
    def financial2_rule_1473(self):
        self.declare(Fact(recommendation='Underwriter berkualitas buruk. PER berada di tingkat yang tinggi.'))


    @Rule(Fact(underwriter_valued='bad'), Fact(der_valued='low'))
    def financial2_rule_1474(self):
        self.declare(Fact(recommendation='Underwriter berkualitas buruk. DER menunjukkan tingkat hutang yang rendah.'))


    @Rule(Fact(underwriter_valued='bad'), Fact(roa_valued='low'))
    def financial2_rule_1475(self):
        self.declare(Fact(recommendation='Underwriter berkualitas buruk. ROA menunjukkan efisiensi rendah.'))


    @Rule(Fact(underwriter_valued='bad'), Fact(roe_valued='high'))
    def financial2_rule_1476(self):
        self.declare(Fact(recommendation='Underwriter berkualitas buruk. ROE menunjukkan keuntungan yang tinggi.'))


    @Rule(Fact(warrant_valued='good'), Fact(net_income_valued='profit'))
    def financial2_rule_1477(self):
        self.declare(Fact(recommendation='Warrant menunjukkan kondisi baik. Laba bersih menunjukkan keuntungan.'))


    @Rule(Fact(warrant_valued='good'), Fact(per_valued='high'))
    def financial2_rule_1478(self):
        self.declare(Fact(recommendation='Warrant menunjukkan kondisi baik. PER berada di tingkat yang tinggi.'))


    @Rule(Fact(warrant_valued='good'), Fact(der_valued='low'))
    def financial2_rule_1479(self):
        self.declare(Fact(recommendation='Warrant menunjukkan kondisi baik. DER menunjukkan tingkat hutang yang rendah.'))


    @Rule(Fact(warrant_valued='good'), Fact(roa_valued='low'))
    def financial2_rule_1480(self):
        self.declare(Fact(recommendation='Warrant menunjukkan kondisi baik. ROA menunjukkan efisiensi rendah.'))


    @Rule(Fact(warrant_valued='good'), Fact(roe_valued='high'))
    def financial2_rule_1481(self):
        self.declare(Fact(recommendation='Warrant menunjukkan kondisi baik. ROE menunjukkan keuntungan yang tinggi.'))


    @Rule(Fact(net_income_valued='profit'), Fact(per_valued='high'))
    def financial2_rule_1482(self):
        self.declare(Fact(recommendation='Laba bersih menunjukkan keuntungan. PER berada di tingkat yang tinggi.'))


    @Rule(Fact(net_income_valued='profit'), Fact(der_valued='low'))
    def financial2_rule_1483(self):
        self.declare(Fact(recommendation='Laba bersih menunjukkan keuntungan. DER menunjukkan tingkat hutang yang rendah.'))


    @Rule(Fact(net_income_valued='profit'), Fact(roa_valued='low'))
    def financial2_rule_1484(self):
        self.declare(Fact(recommendation='Laba bersih menunjukkan keuntungan. ROA menunjukkan efisiensi rendah.'))


    @Rule(Fact(net_income_valued='profit'), Fact(roe_valued='high'))
    def financial2_rule_1485(self):
        self.declare(Fact(recommendation='Laba bersih menunjukkan keuntungan. ROE menunjukkan keuntungan yang tinggi.'))


    @Rule(Fact(per_valued='high'), Fact(der_valued='low'))
    def financial2_rule_1486(self):
        self.declare(Fact(recommendation='PER berada di tingkat yang tinggi. DER menunjukkan tingkat hutang yang rendah.'))


    @Rule(Fact(per_valued='high'), Fact(roa_valued='low'))
    def financial2_rule_1487(self):
        self.declare(Fact(recommendation='PER berada di tingkat yang tinggi. ROA menunjukkan efisiensi rendah.'))


    @Rule(Fact(per_valued='high'), Fact(roe_valued='high'))
    def financial2_rule_1488(self):
        self.declare(Fact(recommendation='PER berada di tingkat yang tinggi. ROE menunjukkan keuntungan yang tinggi.'))


    @Rule(Fact(der_valued='low'), Fact(roa_valued='low'))
    def financial2_rule_1489(self):
        self.declare(Fact(recommendation='DER menunjukkan tingkat hutang yang rendah. ROA menunjukkan efisiensi rendah.'))


    @Rule(Fact(der_valued='low'), Fact(roe_valued='high'))
    def financial2_rule_1490(self):
        self.declare(Fact(recommendation='DER menunjukkan tingkat hutang yang rendah. ROE menunjukkan keuntungan yang tinggi.'))


    @Rule(Fact(roa_valued='low'), Fact(roe_valued='high'))
    def financial2_rule_1491(self):
        self.declare(Fact(recommendation='ROA menunjukkan efisiensi rendah. ROE menunjukkan keuntungan yang tinggi.'))


    @Rule(Fact(underwriter_valued='bad'), Fact(warrant_valued='good'))
    def financial2_rule_1492(self):
        self.declare(Fact(recommendation='Underwriter berkualitas buruk. Warrant menunjukkan kondisi baik.'))


    @Rule(Fact(underwriter_valued='bad'), Fact(net_income_valued='profit'))
    def financial2_rule_1493(self):
        self.declare(Fact(recommendation='Underwriter berkualitas buruk. Laba bersih menunjukkan keuntungan.'))


    @Rule(Fact(underwriter_valued='bad'), Fact(per_valued='high'))
    def financial2_rule_1494(self):
        self.declare(Fact(recommendation='Underwriter berkualitas buruk. PER berada di tingkat yang tinggi.'))


    @Rule(Fact(underwriter_valued='bad'), Fact(der_valued='low'))
    def financial2_rule_1495(self):
        self.declare(Fact(recommendation='Underwriter berkualitas buruk. DER menunjukkan tingkat hutang yang rendah.'))


    @Rule(Fact(underwriter_valued='bad'), Fact(roa_valued='low'))
    def financial2_rule_1496(self):
        self.declare(Fact(recommendation='Underwriter berkualitas buruk. ROA menunjukkan efisiensi rendah.'))


    @Rule(Fact(underwriter_valued='bad'), Fact(roe_valued='low'))
    def financial2_rule_1497(self):
        self.declare(Fact(recommendation='Underwriter berkualitas buruk. ROE menunjukkan keuntungan yang rendah.'))


    @Rule(Fact(warrant_valued='good'), Fact(net_income_valued='profit'))
    def financial2_rule_1498(self):
        self.declare(Fact(recommendation='Warrant menunjukkan kondisi baik. Laba bersih menunjukkan keuntungan.'))


    @Rule(Fact(warrant_valued='good'), Fact(per_valued='high'))
    def financial2_rule_1499(self):
        self.declare(Fact(recommendation='Warrant menunjukkan kondisi baik. PER berada di tingkat yang tinggi.'))


    @Rule(Fact(warrant_valued='good'), Fact(der_valued='low'))
    def financial2_rule_1500(self):
        self.declare(Fact(recommendation='Warrant menunjukkan kondisi baik. DER menunjukkan tingkat hutang yang rendah.'))


    @Rule(Fact(warrant_valued='good'), Fact(roa_valued='low'))
    def financial2_rule_1501(self):
        self.declare(Fact(recommendation='Warrant menunjukkan kondisi baik. ROA menunjukkan efisiensi rendah.'))


    @Rule(Fact(warrant_valued='good'), Fact(roe_valued='low'))
    def financial2_rule_1502(self):
        self.declare(Fact(recommendation='Warrant menunjukkan kondisi baik. ROE menunjukkan keuntungan yang rendah.'))


    @Rule(Fact(net_income_valued='profit'), Fact(per_valued='high'))
    def financial2_rule_1503(self):
        self.declare(Fact(recommendation='Laba bersih menunjukkan keuntungan. PER berada di tingkat yang tinggi.'))


    @Rule(Fact(net_income_valued='profit'), Fact(der_valued='low'))
    def financial2_rule_1504(self):
        self.declare(Fact(recommendation='Laba bersih menunjukkan keuntungan. DER menunjukkan tingkat hutang yang rendah.'))


    @Rule(Fact(net_income_valued='profit'), Fact(roa_valued='low'))
    def financial2_rule_1505(self):
        self.declare(Fact(recommendation='Laba bersih menunjukkan keuntungan. ROA menunjukkan efisiensi rendah.'))


    @Rule(Fact(net_income_valued='profit'), Fact(roe_valued='low'))
    def financial2_rule_1506(self):
        self.declare(Fact(recommendation='Laba bersih menunjukkan keuntungan. ROE menunjukkan keuntungan yang rendah.'))


    @Rule(Fact(per_valued='high'), Fact(der_valued='low'))
    def financial2_rule_1507(self):
        self.declare(Fact(recommendation='PER berada di tingkat yang tinggi. DER menunjukkan tingkat hutang yang rendah.'))


    @Rule(Fact(per_valued='high'), Fact(roa_valued='low'))
    def financial2_rule_1508(self):
        self.declare(Fact(recommendation='PER berada di tingkat yang tinggi. ROA menunjukkan efisiensi rendah.'))


    @Rule(Fact(per_valued='high'), Fact(roe_valued='low'))
    def financial2_rule_1509(self):
        self.declare(Fact(recommendation='PER berada di tingkat yang tinggi. ROE menunjukkan keuntungan yang rendah.'))


    @Rule(Fact(der_valued='low'), Fact(roa_valued='low'))
    def financial2_rule_1510(self):
        self.declare(Fact(recommendation='DER menunjukkan tingkat hutang yang rendah. ROA menunjukkan efisiensi rendah.'))


    @Rule(Fact(der_valued='low'), Fact(roe_valued='low'))
    def financial2_rule_1511(self):
        self.declare(Fact(recommendation='DER menunjukkan tingkat hutang yang rendah. ROE menunjukkan keuntungan yang rendah.'))


    @Rule(Fact(roa_valued='low'), Fact(roe_valued='low'))
    def financial2_rule_1512(self):
        self.declare(Fact(recommendation='ROA menunjukkan efisiensi rendah. ROE menunjukkan keuntungan yang rendah.'))


    @Rule(Fact(underwriter_valued='bad'), Fact(warrant_valued='good'))
    def financial2_rule_1513(self):
        self.declare(Fact(recommendation='Underwriter berkualitas buruk. Warrant menunjukkan kondisi baik.'))


    @Rule(Fact(underwriter_valued='bad'), Fact(net_income_valued='profit'))
    def financial2_rule_1514(self):
        self.declare(Fact(recommendation='Underwriter berkualitas buruk. Laba bersih menunjukkan keuntungan.'))


    @Rule(Fact(underwriter_valued='bad'), Fact(per_valued='low'))
    def financial2_rule_1515(self):
        self.declare(Fact(recommendation='Underwriter berkualitas buruk. PER berada di tingkat yang rendah.'))


    @Rule(Fact(underwriter_valued='bad'), Fact(der_valued='high'))
    def financial2_rule_1516(self):
        self.declare(Fact(recommendation='Underwriter berkualitas buruk. DER menunjukkan tingkat hutang yang tinggi.'))


    @Rule(Fact(underwriter_valued='bad'), Fact(roa_valued='high'))
    def financial2_rule_1517(self):
        self.declare(Fact(recommendation='Underwriter berkualitas buruk. ROA menunjukkan efisiensi tinggi.'))


    @Rule(Fact(underwriter_valued='bad'), Fact(roe_valued='high'))
    def financial2_rule_1518(self):
        self.declare(Fact(recommendation='Underwriter berkualitas buruk. ROE menunjukkan keuntungan yang tinggi.'))


    @Rule(Fact(warrant_valued='good'), Fact(net_income_valued='profit'))
    def financial2_rule_1519(self):
        self.declare(Fact(recommendation='Warrant menunjukkan kondisi baik. Laba bersih menunjukkan keuntungan.'))


    @Rule(Fact(warrant_valued='good'), Fact(per_valued='low'))
    def financial2_rule_1520(self):
        self.declare(Fact(recommendation='Warrant menunjukkan kondisi baik. PER berada di tingkat yang rendah.'))


    @Rule(Fact(warrant_valued='good'), Fact(der_valued='high'))
    def financial2_rule_1521(self):
        self.declare(Fact(recommendation='Warrant menunjukkan kondisi baik. DER menunjukkan tingkat hutang yang tinggi.'))


    @Rule(Fact(warrant_valued='good'), Fact(roa_valued='high'))
    def financial2_rule_1522(self):
        self.declare(Fact(recommendation='Warrant menunjukkan kondisi baik. ROA menunjukkan efisiensi tinggi.'))


    @Rule(Fact(warrant_valued='good'), Fact(roe_valued='high'))
    def financial2_rule_1523(self):
        self.declare(Fact(recommendation='Warrant menunjukkan kondisi baik. ROE menunjukkan keuntungan yang tinggi.'))


    @Rule(Fact(net_income_valued='profit'), Fact(per_valued='low'))
    def financial2_rule_1524(self):
        self.declare(Fact(recommendation='Laba bersih menunjukkan keuntungan. PER berada di tingkat yang rendah.'))


    @Rule(Fact(net_income_valued='profit'), Fact(der_valued='high'))
    def financial2_rule_1525(self):
        self.declare(Fact(recommendation='Laba bersih menunjukkan keuntungan. DER menunjukkan tingkat hutang yang tinggi.'))


    @Rule(Fact(net_income_valued='profit'), Fact(roa_valued='high'))
    def financial2_rule_1526(self):
        self.declare(Fact(recommendation='Laba bersih menunjukkan keuntungan. ROA menunjukkan efisiensi tinggi.'))


    @Rule(Fact(net_income_valued='profit'), Fact(roe_valued='high'))
    def financial2_rule_1527(self):
        self.declare(Fact(recommendation='Laba bersih menunjukkan keuntungan. ROE menunjukkan keuntungan yang tinggi.'))


    @Rule(Fact(per_valued='low'), Fact(der_valued='high'))
    def financial2_rule_1528(self):
        self.declare(Fact(recommendation='PER berada di tingkat yang rendah. DER menunjukkan tingkat hutang yang tinggi.'))


    @Rule(Fact(per_valued='low'), Fact(roa_valued='high'))
    def financial2_rule_1529(self):
        self.declare(Fact(recommendation='PER berada di tingkat yang rendah. ROA menunjukkan efisiensi tinggi.'))


    @Rule(Fact(per_valued='low'), Fact(roe_valued='high'))
    def financial2_rule_1530(self):
        self.declare(Fact(recommendation='PER berada di tingkat yang rendah. ROE menunjukkan keuntungan yang tinggi.'))


    @Rule(Fact(der_valued='high'), Fact(roa_valued='high'))
    def financial2_rule_1531(self):
        self.declare(Fact(recommendation='DER menunjukkan tingkat hutang yang tinggi. ROA menunjukkan efisiensi tinggi.'))


    @Rule(Fact(der_valued='high'), Fact(roe_valued='high'))
    def financial2_rule_1532(self):
        self.declare(Fact(recommendation='DER menunjukkan tingkat hutang yang tinggi. ROE menunjukkan keuntungan yang tinggi.'))


    @Rule(Fact(roa_valued='high'), Fact(roe_valued='high'))
    def financial2_rule_1533(self):
        self.declare(Fact(recommendation='ROA menunjukkan efisiensi tinggi. ROE menunjukkan keuntungan yang tinggi.'))


    @Rule(Fact(underwriter_valued='bad'), Fact(warrant_valued='good'))
    def financial2_rule_1534(self):
        self.declare(Fact(recommendation='Underwriter berkualitas buruk. Warrant menunjukkan kondisi baik.'))


    @Rule(Fact(underwriter_valued='bad'), Fact(net_income_valued='profit'))
    def financial2_rule_1535(self):
        self.declare(Fact(recommendation='Underwriter berkualitas buruk. Laba bersih menunjukkan keuntungan.'))


    @Rule(Fact(underwriter_valued='bad'), Fact(per_valued='low'))
    def financial2_rule_1536(self):
        self.declare(Fact(recommendation='Underwriter berkualitas buruk. PER berada di tingkat yang rendah.'))


    @Rule(Fact(underwriter_valued='bad'), Fact(der_valued='high'))
    def financial2_rule_1537(self):
        self.declare(Fact(recommendation='Underwriter berkualitas buruk. DER menunjukkan tingkat hutang yang tinggi.'))


    @Rule(Fact(underwriter_valued='bad'), Fact(roa_valued='high'))
    def financial2_rule_1538(self):
        self.declare(Fact(recommendation='Underwriter berkualitas buruk. ROA menunjukkan efisiensi tinggi.'))


    @Rule(Fact(underwriter_valued='bad'), Fact(roe_valued='low'))
    def financial2_rule_1539(self):
        self.declare(Fact(recommendation='Underwriter berkualitas buruk. ROE menunjukkan keuntungan yang rendah.'))


    @Rule(Fact(warrant_valued='good'), Fact(net_income_valued='profit'))
    def financial2_rule_1540(self):
        self.declare(Fact(recommendation='Warrant menunjukkan kondisi baik. Laba bersih menunjukkan keuntungan.'))


    @Rule(Fact(warrant_valued='good'), Fact(per_valued='low'))
    def financial2_rule_1541(self):
        self.declare(Fact(recommendation='Warrant menunjukkan kondisi baik. PER berada di tingkat yang rendah.'))


    @Rule(Fact(warrant_valued='good'), Fact(der_valued='high'))
    def financial2_rule_1542(self):
        self.declare(Fact(recommendation='Warrant menunjukkan kondisi baik. DER menunjukkan tingkat hutang yang tinggi.'))


    @Rule(Fact(warrant_valued='good'), Fact(roa_valued='high'))
    def financial2_rule_1543(self):
        self.declare(Fact(recommendation='Warrant menunjukkan kondisi baik. ROA menunjukkan efisiensi tinggi.'))


    @Rule(Fact(warrant_valued='good'), Fact(roe_valued='low'))
    def financial2_rule_1544(self):
        self.declare(Fact(recommendation='Warrant menunjukkan kondisi baik. ROE menunjukkan keuntungan yang rendah.'))


    @Rule(Fact(net_income_valued='profit'), Fact(per_valued='low'))
    def financial2_rule_1545(self):
        self.declare(Fact(recommendation='Laba bersih menunjukkan keuntungan. PER berada di tingkat yang rendah.'))


    @Rule(Fact(net_income_valued='profit'), Fact(der_valued='high'))
    def financial2_rule_1546(self):
        self.declare(Fact(recommendation='Laba bersih menunjukkan keuntungan. DER menunjukkan tingkat hutang yang tinggi.'))


    @Rule(Fact(net_income_valued='profit'), Fact(roa_valued='high'))
    def financial2_rule_1547(self):
        self.declare(Fact(recommendation='Laba bersih menunjukkan keuntungan. ROA menunjukkan efisiensi tinggi.'))


    @Rule(Fact(net_income_valued='profit'), Fact(roe_valued='low'))
    def financial2_rule_1548(self):
        self.declare(Fact(recommendation='Laba bersih menunjukkan keuntungan. ROE menunjukkan keuntungan yang rendah.'))


    @Rule(Fact(per_valued='low'), Fact(der_valued='high'))
    def financial2_rule_1549(self):
        self.declare(Fact(recommendation='PER berada di tingkat yang rendah. DER menunjukkan tingkat hutang yang tinggi.'))


    @Rule(Fact(per_valued='low'), Fact(roa_valued='high'))
    def financial2_rule_1550(self):
        self.declare(Fact(recommendation='PER berada di tingkat yang rendah. ROA menunjukkan efisiensi tinggi.'))


    @Rule(Fact(per_valued='low'), Fact(roe_valued='low'))
    def financial2_rule_1551(self):
        self.declare(Fact(recommendation='PER berada di tingkat yang rendah. ROE menunjukkan keuntungan yang rendah.'))


    @Rule(Fact(der_valued='high'), Fact(roa_valued='high'))
    def financial2_rule_1552(self):
        self.declare(Fact(recommendation='DER menunjukkan tingkat hutang yang tinggi. ROA menunjukkan efisiensi tinggi.'))


    @Rule(Fact(der_valued='high'), Fact(roe_valued='low'))
    def financial2_rule_1553(self):
        self.declare(Fact(recommendation='DER menunjukkan tingkat hutang yang tinggi. ROE menunjukkan keuntungan yang rendah.'))


    @Rule(Fact(roa_valued='high'), Fact(roe_valued='low'))
    def financial2_rule_1554(self):
        self.declare(Fact(recommendation='ROA menunjukkan efisiensi tinggi. ROE menunjukkan keuntungan yang rendah.'))


    @Rule(Fact(underwriter_valued='bad'), Fact(warrant_valued='good'))
    def financial2_rule_1555(self):
        self.declare(Fact(recommendation='Underwriter berkualitas buruk. Warrant menunjukkan kondisi baik.'))


    @Rule(Fact(underwriter_valued='bad'), Fact(net_income_valued='profit'))
    def financial2_rule_1556(self):
        self.declare(Fact(recommendation='Underwriter berkualitas buruk. Laba bersih menunjukkan keuntungan.'))


    @Rule(Fact(underwriter_valued='bad'), Fact(per_valued='low'))
    def financial2_rule_1557(self):
        self.declare(Fact(recommendation='Underwriter berkualitas buruk. PER berada di tingkat yang rendah.'))


    @Rule(Fact(underwriter_valued='bad'), Fact(der_valued='high'))
    def financial2_rule_1558(self):
        self.declare(Fact(recommendation='Underwriter berkualitas buruk. DER menunjukkan tingkat hutang yang tinggi.'))


    @Rule(Fact(underwriter_valued='bad'), Fact(roa_valued='low'))
    def financial2_rule_1559(self):
        self.declare(Fact(recommendation='Underwriter berkualitas buruk. ROA menunjukkan efisiensi rendah.'))


    @Rule(Fact(underwriter_valued='bad'), Fact(roe_valued='high'))
    def financial2_rule_1560(self):
        self.declare(Fact(recommendation='Underwriter berkualitas buruk. ROE menunjukkan keuntungan yang tinggi.'))


    @Rule(Fact(warrant_valued='good'), Fact(net_income_valued='profit'))
    def financial2_rule_1561(self):
        self.declare(Fact(recommendation='Warrant menunjukkan kondisi baik. Laba bersih menunjukkan keuntungan.'))


    @Rule(Fact(warrant_valued='good'), Fact(per_valued='low'))
    def financial2_rule_1562(self):
        self.declare(Fact(recommendation='Warrant menunjukkan kondisi baik. PER berada di tingkat yang rendah.'))


    @Rule(Fact(warrant_valued='good'), Fact(der_valued='high'))
    def financial2_rule_1563(self):
        self.declare(Fact(recommendation='Warrant menunjukkan kondisi baik. DER menunjukkan tingkat hutang yang tinggi.'))


    @Rule(Fact(warrant_valued='good'), Fact(roa_valued='low'))
    def financial2_rule_1564(self):
        self.declare(Fact(recommendation='Warrant menunjukkan kondisi baik. ROA menunjukkan efisiensi rendah.'))


    @Rule(Fact(warrant_valued='good'), Fact(roe_valued='high'))
    def financial2_rule_1565(self):
        self.declare(Fact(recommendation='Warrant menunjukkan kondisi baik. ROE menunjukkan keuntungan yang tinggi.'))


    @Rule(Fact(net_income_valued='profit'), Fact(per_valued='low'))
    def financial2_rule_1566(self):
        self.declare(Fact(recommendation='Laba bersih menunjukkan keuntungan. PER berada di tingkat yang rendah.'))


    @Rule(Fact(net_income_valued='profit'), Fact(der_valued='high'))
    def financial2_rule_1567(self):
        self.declare(Fact(recommendation='Laba bersih menunjukkan keuntungan. DER menunjukkan tingkat hutang yang tinggi.'))


    @Rule(Fact(net_income_valued='profit'), Fact(roa_valued='low'))
    def financial2_rule_1568(self):
        self.declare(Fact(recommendation='Laba bersih menunjukkan keuntungan. ROA menunjukkan efisiensi rendah.'))


    @Rule(Fact(net_income_valued='profit'), Fact(roe_valued='high'))
    def financial2_rule_1569(self):
        self.declare(Fact(recommendation='Laba bersih menunjukkan keuntungan. ROE menunjukkan keuntungan yang tinggi.'))


    @Rule(Fact(per_valued='low'), Fact(der_valued='high'))
    def financial2_rule_1570(self):
        self.declare(Fact(recommendation='PER berada di tingkat yang rendah. DER menunjukkan tingkat hutang yang tinggi.'))


    @Rule(Fact(per_valued='low'), Fact(roa_valued='low'))
    def financial2_rule_1571(self):
        self.declare(Fact(recommendation='PER berada di tingkat yang rendah. ROA menunjukkan efisiensi rendah.'))


    @Rule(Fact(per_valued='low'), Fact(roe_valued='high'))
    def financial2_rule_1572(self):
        self.declare(Fact(recommendation='PER berada di tingkat yang rendah. ROE menunjukkan keuntungan yang tinggi.'))


    @Rule(Fact(der_valued='high'), Fact(roa_valued='low'))
    def financial2_rule_1573(self):
        self.declare(Fact(recommendation='DER menunjukkan tingkat hutang yang tinggi. ROA menunjukkan efisiensi rendah.'))


    @Rule(Fact(der_valued='high'), Fact(roe_valued='high'))
    def financial2_rule_1574(self):
        self.declare(Fact(recommendation='DER menunjukkan tingkat hutang yang tinggi. ROE menunjukkan keuntungan yang tinggi.'))


    @Rule(Fact(roa_valued='low'), Fact(roe_valued='high'))
    def financial2_rule_1575(self):
        self.declare(Fact(recommendation='ROA menunjukkan efisiensi rendah. ROE menunjukkan keuntungan yang tinggi.'))


    @Rule(Fact(underwriter_valued='bad'), Fact(warrant_valued='good'))
    def financial2_rule_1576(self):
        self.declare(Fact(recommendation='Underwriter berkualitas buruk. Warrant menunjukkan kondisi baik.'))


    @Rule(Fact(underwriter_valued='bad'), Fact(net_income_valued='profit'))
    def financial2_rule_1577(self):
        self.declare(Fact(recommendation='Underwriter berkualitas buruk. Laba bersih menunjukkan keuntungan.'))


    @Rule(Fact(underwriter_valued='bad'), Fact(per_valued='low'))
    def financial2_rule_1578(self):
        self.declare(Fact(recommendation='Underwriter berkualitas buruk. PER berada di tingkat yang rendah.'))


    @Rule(Fact(underwriter_valued='bad'), Fact(der_valued='high'))
    def financial2_rule_1579(self):
        self.declare(Fact(recommendation='Underwriter berkualitas buruk. DER menunjukkan tingkat hutang yang tinggi.'))


    @Rule(Fact(underwriter_valued='bad'), Fact(roa_valued='low'))
    def financial2_rule_1580(self):
        self.declare(Fact(recommendation='Underwriter berkualitas buruk. ROA menunjukkan efisiensi rendah.'))


    @Rule(Fact(underwriter_valued='bad'), Fact(roe_valued='low'))
    def financial2_rule_1581(self):
        self.declare(Fact(recommendation='Underwriter berkualitas buruk. ROE menunjukkan keuntungan yang rendah.'))


    @Rule(Fact(warrant_valued='good'), Fact(net_income_valued='profit'))
    def financial2_rule_1582(self):
        self.declare(Fact(recommendation='Warrant menunjukkan kondisi baik. Laba bersih menunjukkan keuntungan.'))


    @Rule(Fact(warrant_valued='good'), Fact(per_valued='low'))
    def financial2_rule_1583(self):
        self.declare(Fact(recommendation='Warrant menunjukkan kondisi baik. PER berada di tingkat yang rendah.'))


    @Rule(Fact(warrant_valued='good'), Fact(der_valued='high'))
    def financial2_rule_1584(self):
        self.declare(Fact(recommendation='Warrant menunjukkan kondisi baik. DER menunjukkan tingkat hutang yang tinggi.'))


    @Rule(Fact(warrant_valued='good'), Fact(roa_valued='low'))
    def financial2_rule_1585(self):
        self.declare(Fact(recommendation='Warrant menunjukkan kondisi baik. ROA menunjukkan efisiensi rendah.'))


    @Rule(Fact(warrant_valued='good'), Fact(roe_valued='low'))
    def financial2_rule_1586(self):
        self.declare(Fact(recommendation='Warrant menunjukkan kondisi baik. ROE menunjukkan keuntungan yang rendah.'))


    @Rule(Fact(net_income_valued='profit'), Fact(per_valued='low'))
    def financial2_rule_1587(self):
        self.declare(Fact(recommendation='Laba bersih menunjukkan keuntungan. PER berada di tingkat yang rendah.'))


    @Rule(Fact(net_income_valued='profit'), Fact(der_valued='high'))
    def financial2_rule_1588(self):
        self.declare(Fact(recommendation='Laba bersih menunjukkan keuntungan. DER menunjukkan tingkat hutang yang tinggi.'))


    @Rule(Fact(net_income_valued='profit'), Fact(roa_valued='low'))
    def financial2_rule_1589(self):
        self.declare(Fact(recommendation='Laba bersih menunjukkan keuntungan. ROA menunjukkan efisiensi rendah.'))


    @Rule(Fact(net_income_valued='profit'), Fact(roe_valued='low'))
    def financial2_rule_1590(self):
        self.declare(Fact(recommendation='Laba bersih menunjukkan keuntungan. ROE menunjukkan keuntungan yang rendah.'))


    @Rule(Fact(per_valued='low'), Fact(der_valued='high'))
    def financial2_rule_1591(self):
        self.declare(Fact(recommendation='PER berada di tingkat yang rendah. DER menunjukkan tingkat hutang yang tinggi.'))


    @Rule(Fact(per_valued='low'), Fact(roa_valued='low'))
    def financial2_rule_1592(self):
        self.declare(Fact(recommendation='PER berada di tingkat yang rendah. ROA menunjukkan efisiensi rendah.'))


    @Rule(Fact(per_valued='low'), Fact(roe_valued='low'))
    def financial2_rule_1593(self):
        self.declare(Fact(recommendation='PER berada di tingkat yang rendah. ROE menunjukkan keuntungan yang rendah.'))


    @Rule(Fact(der_valued='high'), Fact(roa_valued='low'))
    def financial2_rule_1594(self):
        self.declare(Fact(recommendation='DER menunjukkan tingkat hutang yang tinggi. ROA menunjukkan efisiensi rendah.'))


    @Rule(Fact(der_valued='high'), Fact(roe_valued='low'))
    def financial2_rule_1595(self):
        self.declare(Fact(recommendation='DER menunjukkan tingkat hutang yang tinggi. ROE menunjukkan keuntungan yang rendah.'))


    @Rule(Fact(roa_valued='low'), Fact(roe_valued='low'))
    def financial2_rule_1596(self):
        self.declare(Fact(recommendation='ROA menunjukkan efisiensi rendah. ROE menunjukkan keuntungan yang rendah.'))


    @Rule(Fact(underwriter_valued='bad'), Fact(warrant_valued='good'))
    def financial2_rule_1597(self):
        self.declare(Fact(recommendation='Underwriter berkualitas buruk. Warrant menunjukkan kondisi baik.'))


    @Rule(Fact(underwriter_valued='bad'), Fact(net_income_valued='profit'))
    def financial2_rule_1598(self):
        self.declare(Fact(recommendation='Underwriter berkualitas buruk. Laba bersih menunjukkan keuntungan.'))


    @Rule(Fact(underwriter_valued='bad'), Fact(per_valued='low'))
    def financial2_rule_1599(self):
        self.declare(Fact(recommendation='Underwriter berkualitas buruk. PER berada di tingkat yang rendah.'))


    @Rule(Fact(underwriter_valued='bad'), Fact(der_valued='low'))
    def financial2_rule_1600(self):
        self.declare(Fact(recommendation='Underwriter berkualitas buruk. DER menunjukkan tingkat hutang yang rendah.'))


    @Rule(Fact(underwriter_valued='bad'), Fact(roa_valued='high'))
    def financial2_rule_1601(self):
        self.declare(Fact(recommendation='Underwriter berkualitas buruk. ROA menunjukkan efisiensi tinggi.'))


    @Rule(Fact(underwriter_valued='bad'), Fact(roe_valued='high'))
    def financial2_rule_1602(self):
        self.declare(Fact(recommendation='Underwriter berkualitas buruk. ROE menunjukkan keuntungan yang tinggi.'))


    @Rule(Fact(warrant_valued='good'), Fact(net_income_valued='profit'))
    def financial2_rule_1603(self):
        self.declare(Fact(recommendation='Warrant menunjukkan kondisi baik. Laba bersih menunjukkan keuntungan.'))


    @Rule(Fact(warrant_valued='good'), Fact(per_valued='low'))
    def financial2_rule_1604(self):
        self.declare(Fact(recommendation='Warrant menunjukkan kondisi baik. PER berada di tingkat yang rendah.'))


    @Rule(Fact(warrant_valued='good'), Fact(der_valued='low'))
    def financial2_rule_1605(self):
        self.declare(Fact(recommendation='Warrant menunjukkan kondisi baik. DER menunjukkan tingkat hutang yang rendah.'))


    @Rule(Fact(warrant_valued='good'), Fact(roa_valued='high'))
    def financial2_rule_1606(self):
        self.declare(Fact(recommendation='Warrant menunjukkan kondisi baik. ROA menunjukkan efisiensi tinggi.'))


    @Rule(Fact(warrant_valued='good'), Fact(roe_valued='high'))
    def financial2_rule_1607(self):
        self.declare(Fact(recommendation='Warrant menunjukkan kondisi baik. ROE menunjukkan keuntungan yang tinggi.'))


    @Rule(Fact(net_income_valued='profit'), Fact(per_valued='low'))
    def financial2_rule_1608(self):
        self.declare(Fact(recommendation='Laba bersih menunjukkan keuntungan. PER berada di tingkat yang rendah.'))


    @Rule(Fact(net_income_valued='profit'), Fact(der_valued='low'))
    def financial2_rule_1609(self):
        self.declare(Fact(recommendation='Laba bersih menunjukkan keuntungan. DER menunjukkan tingkat hutang yang rendah.'))


    @Rule(Fact(net_income_valued='profit'), Fact(roa_valued='high'))
    def financial2_rule_1610(self):
        self.declare(Fact(recommendation='Laba bersih menunjukkan keuntungan. ROA menunjukkan efisiensi tinggi.'))


    @Rule(Fact(net_income_valued='profit'), Fact(roe_valued='high'))
    def financial2_rule_1611(self):
        self.declare(Fact(recommendation='Laba bersih menunjukkan keuntungan. ROE menunjukkan keuntungan yang tinggi.'))


    @Rule(Fact(per_valued='low'), Fact(der_valued='low'))
    def financial2_rule_1612(self):
        self.declare(Fact(recommendation='PER berada di tingkat yang rendah. DER menunjukkan tingkat hutang yang rendah.'))


    @Rule(Fact(per_valued='low'), Fact(roa_valued='high'))
    def financial2_rule_1613(self):
        self.declare(Fact(recommendation='PER berada di tingkat yang rendah. ROA menunjukkan efisiensi tinggi.'))


    @Rule(Fact(per_valued='low'), Fact(roe_valued='high'))
    def financial2_rule_1614(self):
        self.declare(Fact(recommendation='PER berada di tingkat yang rendah. ROE menunjukkan keuntungan yang tinggi.'))


    @Rule(Fact(der_valued='low'), Fact(roa_valued='high'))
    def financial2_rule_1615(self):
        self.declare(Fact(recommendation='DER menunjukkan tingkat hutang yang rendah. ROA menunjukkan efisiensi tinggi.'))


    @Rule(Fact(der_valued='low'), Fact(roe_valued='high'))
    def financial2_rule_1616(self):
        self.declare(Fact(recommendation='DER menunjukkan tingkat hutang yang rendah. ROE menunjukkan keuntungan yang tinggi.'))


    @Rule(Fact(roa_valued='high'), Fact(roe_valued='high'))
    def financial2_rule_1617(self):
        self.declare(Fact(recommendation='ROA menunjukkan efisiensi tinggi. ROE menunjukkan keuntungan yang tinggi.'))


    @Rule(Fact(underwriter_valued='bad'), Fact(warrant_valued='good'))
    def financial2_rule_1618(self):
        self.declare(Fact(recommendation='Underwriter berkualitas buruk. Warrant menunjukkan kondisi baik.'))


    @Rule(Fact(underwriter_valued='bad'), Fact(net_income_valued='profit'))
    def financial2_rule_1619(self):
        self.declare(Fact(recommendation='Underwriter berkualitas buruk. Laba bersih menunjukkan keuntungan.'))


    @Rule(Fact(underwriter_valued='bad'), Fact(per_valued='low'))
    def financial2_rule_1620(self):
        self.declare(Fact(recommendation='Underwriter berkualitas buruk. PER berada di tingkat yang rendah.'))


    @Rule(Fact(underwriter_valued='bad'), Fact(der_valued='low'))
    def financial2_rule_1621(self):
        self.declare(Fact(recommendation='Underwriter berkualitas buruk. DER menunjukkan tingkat hutang yang rendah.'))


    @Rule(Fact(underwriter_valued='bad'), Fact(roa_valued='high'))
    def financial2_rule_1622(self):
        self.declare(Fact(recommendation='Underwriter berkualitas buruk. ROA menunjukkan efisiensi tinggi.'))


    @Rule(Fact(underwriter_valued='bad'), Fact(roe_valued='low'))
    def financial2_rule_1623(self):
        self.declare(Fact(recommendation='Underwriter berkualitas buruk. ROE menunjukkan keuntungan yang rendah.'))


    @Rule(Fact(warrant_valued='good'), Fact(net_income_valued='profit'))
    def financial2_rule_1624(self):
        self.declare(Fact(recommendation='Warrant menunjukkan kondisi baik. Laba bersih menunjukkan keuntungan.'))


    @Rule(Fact(warrant_valued='good'), Fact(per_valued='low'))
    def financial2_rule_1625(self):
        self.declare(Fact(recommendation='Warrant menunjukkan kondisi baik. PER berada di tingkat yang rendah.'))


    @Rule(Fact(warrant_valued='good'), Fact(der_valued='low'))
    def financial2_rule_1626(self):
        self.declare(Fact(recommendation='Warrant menunjukkan kondisi baik. DER menunjukkan tingkat hutang yang rendah.'))


    @Rule(Fact(warrant_valued='good'), Fact(roa_valued='high'))
    def financial2_rule_1627(self):
        self.declare(Fact(recommendation='Warrant menunjukkan kondisi baik. ROA menunjukkan efisiensi tinggi.'))


    @Rule(Fact(warrant_valued='good'), Fact(roe_valued='low'))
    def financial2_rule_1628(self):
        self.declare(Fact(recommendation='Warrant menunjukkan kondisi baik. ROE menunjukkan keuntungan yang rendah.'))


    @Rule(Fact(net_income_valued='profit'), Fact(per_valued='low'))
    def financial2_rule_1629(self):
        self.declare(Fact(recommendation='Laba bersih menunjukkan keuntungan. PER berada di tingkat yang rendah.'))


    @Rule(Fact(net_income_valued='profit'), Fact(der_valued='low'))
    def financial2_rule_1630(self):
        self.declare(Fact(recommendation='Laba bersih menunjukkan keuntungan. DER menunjukkan tingkat hutang yang rendah.'))


    @Rule(Fact(net_income_valued='profit'), Fact(roa_valued='high'))
    def financial2_rule_1631(self):
        self.declare(Fact(recommendation='Laba bersih menunjukkan keuntungan. ROA menunjukkan efisiensi tinggi.'))


    @Rule(Fact(net_income_valued='profit'), Fact(roe_valued='low'))
    def financial2_rule_1632(self):
        self.declare(Fact(recommendation='Laba bersih menunjukkan keuntungan. ROE menunjukkan keuntungan yang rendah.'))


    @Rule(Fact(per_valued='low'), Fact(der_valued='low'))
    def financial2_rule_1633(self):
        self.declare(Fact(recommendation='PER berada di tingkat yang rendah. DER menunjukkan tingkat hutang yang rendah.'))


    @Rule(Fact(per_valued='low'), Fact(roa_valued='high'))
    def financial2_rule_1634(self):
        self.declare(Fact(recommendation='PER berada di tingkat yang rendah. ROA menunjukkan efisiensi tinggi.'))


    @Rule(Fact(per_valued='low'), Fact(roe_valued='low'))
    def financial2_rule_1635(self):
        self.declare(Fact(recommendation='PER berada di tingkat yang rendah. ROE menunjukkan keuntungan yang rendah.'))


    @Rule(Fact(der_valued='low'), Fact(roa_valued='high'))
    def financial2_rule_1636(self):
        self.declare(Fact(recommendation='DER menunjukkan tingkat hutang yang rendah. ROA menunjukkan efisiensi tinggi.'))


    @Rule(Fact(der_valued='low'), Fact(roe_valued='low'))
    def financial2_rule_1637(self):
        self.declare(Fact(recommendation='DER menunjukkan tingkat hutang yang rendah. ROE menunjukkan keuntungan yang rendah.'))


    @Rule(Fact(roa_valued='high'), Fact(roe_valued='low'))
    def financial2_rule_1638(self):
        self.declare(Fact(recommendation='ROA menunjukkan efisiensi tinggi. ROE menunjukkan keuntungan yang rendah.'))


    @Rule(Fact(underwriter_valued='bad'), Fact(warrant_valued='good'))
    def financial2_rule_1639(self):
        self.declare(Fact(recommendation='Underwriter berkualitas buruk. Warrant menunjukkan kondisi baik.'))


    @Rule(Fact(underwriter_valued='bad'), Fact(net_income_valued='profit'))
    def financial2_rule_1640(self):
        self.declare(Fact(recommendation='Underwriter berkualitas buruk. Laba bersih menunjukkan keuntungan.'))


    @Rule(Fact(underwriter_valued='bad'), Fact(per_valued='low'))
    def financial2_rule_1641(self):
        self.declare(Fact(recommendation='Underwriter berkualitas buruk. PER berada di tingkat yang rendah.'))


    @Rule(Fact(underwriter_valued='bad'), Fact(der_valued='low'))
    def financial2_rule_1642(self):
        self.declare(Fact(recommendation='Underwriter berkualitas buruk. DER menunjukkan tingkat hutang yang rendah.'))


    @Rule(Fact(underwriter_valued='bad'), Fact(roa_valued='low'))
    def financial2_rule_1643(self):
        self.declare(Fact(recommendation='Underwriter berkualitas buruk. ROA menunjukkan efisiensi rendah.'))


    @Rule(Fact(underwriter_valued='bad'), Fact(roe_valued='high'))
    def financial2_rule_1644(self):
        self.declare(Fact(recommendation='Underwriter berkualitas buruk. ROE menunjukkan keuntungan yang tinggi.'))


    @Rule(Fact(warrant_valued='good'), Fact(net_income_valued='profit'))
    def financial2_rule_1645(self):
        self.declare(Fact(recommendation='Warrant menunjukkan kondisi baik. Laba bersih menunjukkan keuntungan.'))


    @Rule(Fact(warrant_valued='good'), Fact(per_valued='low'))
    def financial2_rule_1646(self):
        self.declare(Fact(recommendation='Warrant menunjukkan kondisi baik. PER berada di tingkat yang rendah.'))


    @Rule(Fact(warrant_valued='good'), Fact(der_valued='low'))
    def financial2_rule_1647(self):
        self.declare(Fact(recommendation='Warrant menunjukkan kondisi baik. DER menunjukkan tingkat hutang yang rendah.'))


    @Rule(Fact(warrant_valued='good'), Fact(roa_valued='low'))
    def financial2_rule_1648(self):
        self.declare(Fact(recommendation='Warrant menunjukkan kondisi baik. ROA menunjukkan efisiensi rendah.'))


    @Rule(Fact(warrant_valued='good'), Fact(roe_valued='high'))
    def financial2_rule_1649(self):
        self.declare(Fact(recommendation='Warrant menunjukkan kondisi baik. ROE menunjukkan keuntungan yang tinggi.'))


    @Rule(Fact(net_income_valued='profit'), Fact(per_valued='low'))
    def financial2_rule_1650(self):
        self.declare(Fact(recommendation='Laba bersih menunjukkan keuntungan. PER berada di tingkat yang rendah.'))


    @Rule(Fact(net_income_valued='profit'), Fact(der_valued='low'))
    def financial2_rule_1651(self):
        self.declare(Fact(recommendation='Laba bersih menunjukkan keuntungan. DER menunjukkan tingkat hutang yang rendah.'))


    @Rule(Fact(net_income_valued='profit'), Fact(roa_valued='low'))
    def financial2_rule_1652(self):
        self.declare(Fact(recommendation='Laba bersih menunjukkan keuntungan. ROA menunjukkan efisiensi rendah.'))


    @Rule(Fact(net_income_valued='profit'), Fact(roe_valued='high'))
    def financial2_rule_1653(self):
        self.declare(Fact(recommendation='Laba bersih menunjukkan keuntungan. ROE menunjukkan keuntungan yang tinggi.'))


    @Rule(Fact(per_valued='low'), Fact(der_valued='low'))
    def financial2_rule_1654(self):
        self.declare(Fact(recommendation='PER berada di tingkat yang rendah. DER menunjukkan tingkat hutang yang rendah.'))


    @Rule(Fact(per_valued='low'), Fact(roa_valued='low'))
    def financial2_rule_1655(self):
        self.declare(Fact(recommendation='PER berada di tingkat yang rendah. ROA menunjukkan efisiensi rendah.'))


    @Rule(Fact(per_valued='low'), Fact(roe_valued='high'))
    def financial2_rule_1656(self):
        self.declare(Fact(recommendation='PER berada di tingkat yang rendah. ROE menunjukkan keuntungan yang tinggi.'))


    @Rule(Fact(der_valued='low'), Fact(roa_valued='low'))
    def financial2_rule_1657(self):
        self.declare(Fact(recommendation='DER menunjukkan tingkat hutang yang rendah. ROA menunjukkan efisiensi rendah.'))


    @Rule(Fact(der_valued='low'), Fact(roe_valued='high'))
    def financial2_rule_1658(self):
        self.declare(Fact(recommendation='DER menunjukkan tingkat hutang yang rendah. ROE menunjukkan keuntungan yang tinggi.'))


    @Rule(Fact(roa_valued='low'), Fact(roe_valued='high'))
    def financial2_rule_1659(self):
        self.declare(Fact(recommendation='ROA menunjukkan efisiensi rendah. ROE menunjukkan keuntungan yang tinggi.'))


    @Rule(Fact(underwriter_valued='bad'), Fact(warrant_valued='good'))
    def financial2_rule_1660(self):
        self.declare(Fact(recommendation='Underwriter berkualitas buruk. Warrant menunjukkan kondisi baik.'))


    @Rule(Fact(underwriter_valued='bad'), Fact(net_income_valued='profit'))
    def financial2_rule_1661(self):
        self.declare(Fact(recommendation='Underwriter berkualitas buruk. Laba bersih menunjukkan keuntungan.'))


    @Rule(Fact(underwriter_valued='bad'), Fact(per_valued='low'))
    def financial2_rule_1662(self):
        self.declare(Fact(recommendation='Underwriter berkualitas buruk. PER berada di tingkat yang rendah.'))


    @Rule(Fact(underwriter_valued='bad'), Fact(der_valued='low'))
    def financial2_rule_1663(self):
        self.declare(Fact(recommendation='Underwriter berkualitas buruk. DER menunjukkan tingkat hutang yang rendah.'))


    @Rule(Fact(underwriter_valued='bad'), Fact(roa_valued='low'))
    def financial2_rule_1664(self):
        self.declare(Fact(recommendation='Underwriter berkualitas buruk. ROA menunjukkan efisiensi rendah.'))


    @Rule(Fact(underwriter_valued='bad'), Fact(roe_valued='low'))
    def financial2_rule_1665(self):
        self.declare(Fact(recommendation='Underwriter berkualitas buruk. ROE menunjukkan keuntungan yang rendah.'))


    @Rule(Fact(warrant_valued='good'), Fact(net_income_valued='profit'))
    def financial2_rule_1666(self):
        self.declare(Fact(recommendation='Warrant menunjukkan kondisi baik. Laba bersih menunjukkan keuntungan.'))


    @Rule(Fact(warrant_valued='good'), Fact(per_valued='low'))
    def financial2_rule_1667(self):
        self.declare(Fact(recommendation='Warrant menunjukkan kondisi baik. PER berada di tingkat yang rendah.'))


    @Rule(Fact(warrant_valued='good'), Fact(der_valued='low'))
    def financial2_rule_1668(self):
        self.declare(Fact(recommendation='Warrant menunjukkan kondisi baik. DER menunjukkan tingkat hutang yang rendah.'))


    @Rule(Fact(warrant_valued='good'), Fact(roa_valued='low'))
    def financial2_rule_1669(self):
        self.declare(Fact(recommendation='Warrant menunjukkan kondisi baik. ROA menunjukkan efisiensi rendah.'))


    @Rule(Fact(warrant_valued='good'), Fact(roe_valued='low'))
    def financial2_rule_1670(self):
        self.declare(Fact(recommendation='Warrant menunjukkan kondisi baik. ROE menunjukkan keuntungan yang rendah.'))


    @Rule(Fact(net_income_valued='profit'), Fact(per_valued='low'))
    def financial2_rule_1671(self):
        self.declare(Fact(recommendation='Laba bersih menunjukkan keuntungan. PER berada di tingkat yang rendah.'))


    @Rule(Fact(net_income_valued='profit'), Fact(der_valued='low'))
    def financial2_rule_1672(self):
        self.declare(Fact(recommendation='Laba bersih menunjukkan keuntungan. DER menunjukkan tingkat hutang yang rendah.'))


    @Rule(Fact(net_income_valued='profit'), Fact(roa_valued='low'))
    def financial2_rule_1673(self):
        self.declare(Fact(recommendation='Laba bersih menunjukkan keuntungan. ROA menunjukkan efisiensi rendah.'))


    @Rule(Fact(net_income_valued='profit'), Fact(roe_valued='low'))
    def financial2_rule_1674(self):
        self.declare(Fact(recommendation='Laba bersih menunjukkan keuntungan. ROE menunjukkan keuntungan yang rendah.'))


    @Rule(Fact(per_valued='low'), Fact(der_valued='low'))
    def financial2_rule_1675(self):
        self.declare(Fact(recommendation='PER berada di tingkat yang rendah. DER menunjukkan tingkat hutang yang rendah.'))


    @Rule(Fact(per_valued='low'), Fact(roa_valued='low'))
    def financial2_rule_1676(self):
        self.declare(Fact(recommendation='PER berada di tingkat yang rendah. ROA menunjukkan efisiensi rendah.'))


    @Rule(Fact(per_valued='low'), Fact(roe_valued='low'))
    def financial2_rule_1677(self):
        self.declare(Fact(recommendation='PER berada di tingkat yang rendah. ROE menunjukkan keuntungan yang rendah.'))


    @Rule(Fact(der_valued='low'), Fact(roa_valued='low'))
    def financial2_rule_1678(self):
        self.declare(Fact(recommendation='DER menunjukkan tingkat hutang yang rendah. ROA menunjukkan efisiensi rendah.'))


    @Rule(Fact(der_valued='low'), Fact(roe_valued='low'))
    def financial2_rule_1679(self):
        self.declare(Fact(recommendation='DER menunjukkan tingkat hutang yang rendah. ROE menunjukkan keuntungan yang rendah.'))


    @Rule(Fact(roa_valued='low'), Fact(roe_valued='low'))
    def financial2_rule_1680(self):
        self.declare(Fact(recommendation='ROA menunjukkan efisiensi rendah. ROE menunjukkan keuntungan yang rendah.'))


    @Rule(Fact(underwriter_valued='bad'), Fact(warrant_valued='good'))
    def financial2_rule_1681(self):
        self.declare(Fact(recommendation='Underwriter berkualitas buruk. Warrant menunjukkan kondisi baik.'))


    @Rule(Fact(underwriter_valued='bad'), Fact(net_income_valued='loss'))
    def financial2_rule_1682(self):
        self.declare(Fact(recommendation='Underwriter berkualitas buruk. Laba bersih menunjukkan kerugian.'))


    @Rule(Fact(underwriter_valued='bad'), Fact(per_valued='high'))
    def financial2_rule_1683(self):
        self.declare(Fact(recommendation='Underwriter berkualitas buruk. PER berada di tingkat yang tinggi.'))


    @Rule(Fact(underwriter_valued='bad'), Fact(der_valued='high'))
    def financial2_rule_1684(self):
        self.declare(Fact(recommendation='Underwriter berkualitas buruk. DER menunjukkan tingkat hutang yang tinggi.'))


    @Rule(Fact(underwriter_valued='bad'), Fact(roa_valued='high'))
    def financial2_rule_1685(self):
        self.declare(Fact(recommendation='Underwriter berkualitas buruk. ROA menunjukkan efisiensi tinggi.'))


    @Rule(Fact(underwriter_valued='bad'), Fact(roe_valued='high'))
    def financial2_rule_1686(self):
        self.declare(Fact(recommendation='Underwriter berkualitas buruk. ROE menunjukkan keuntungan yang tinggi.'))


    @Rule(Fact(warrant_valued='good'), Fact(net_income_valued='loss'))
    def financial2_rule_1687(self):
        self.declare(Fact(recommendation='Warrant menunjukkan kondisi baik. Laba bersih menunjukkan kerugian.'))


    @Rule(Fact(warrant_valued='good'), Fact(per_valued='high'))
    def financial2_rule_1688(self):
        self.declare(Fact(recommendation='Warrant menunjukkan kondisi baik. PER berada di tingkat yang tinggi.'))


    @Rule(Fact(warrant_valued='good'), Fact(der_valued='high'))
    def financial2_rule_1689(self):
        self.declare(Fact(recommendation='Warrant menunjukkan kondisi baik. DER menunjukkan tingkat hutang yang tinggi.'))


    @Rule(Fact(warrant_valued='good'), Fact(roa_valued='high'))
    def financial2_rule_1690(self):
        self.declare(Fact(recommendation='Warrant menunjukkan kondisi baik. ROA menunjukkan efisiensi tinggi.'))


    @Rule(Fact(warrant_valued='good'), Fact(roe_valued='high'))
    def financial2_rule_1691(self):
        self.declare(Fact(recommendation='Warrant menunjukkan kondisi baik. ROE menunjukkan keuntungan yang tinggi.'))


    @Rule(Fact(net_income_valued='loss'), Fact(per_valued='high'))
    def financial2_rule_1692(self):
        self.declare(Fact(recommendation='Laba bersih menunjukkan kerugian. PER berada di tingkat yang tinggi.'))


    @Rule(Fact(net_income_valued='loss'), Fact(der_valued='high'))
    def financial2_rule_1693(self):
        self.declare(Fact(recommendation='Laba bersih menunjukkan kerugian. DER menunjukkan tingkat hutang yang tinggi.'))


    @Rule(Fact(net_income_valued='loss'), Fact(roa_valued='high'))
    def financial2_rule_1694(self):
        self.declare(Fact(recommendation='Laba bersih menunjukkan kerugian. ROA menunjukkan efisiensi tinggi.'))


    @Rule(Fact(net_income_valued='loss'), Fact(roe_valued='high'))
    def financial2_rule_1695(self):
        self.declare(Fact(recommendation='Laba bersih menunjukkan kerugian. ROE menunjukkan keuntungan yang tinggi.'))


    @Rule(Fact(per_valued='high'), Fact(der_valued='high'))
    def financial2_rule_1696(self):
        self.declare(Fact(recommendation='PER berada di tingkat yang tinggi. DER menunjukkan tingkat hutang yang tinggi.'))


    @Rule(Fact(per_valued='high'), Fact(roa_valued='high'))
    def financial2_rule_1697(self):
        self.declare(Fact(recommendation='PER berada di tingkat yang tinggi. ROA menunjukkan efisiensi tinggi.'))


    @Rule(Fact(per_valued='high'), Fact(roe_valued='high'))
    def financial2_rule_1698(self):
        self.declare(Fact(recommendation='PER berada di tingkat yang tinggi. ROE menunjukkan keuntungan yang tinggi.'))


    @Rule(Fact(der_valued='high'), Fact(roa_valued='high'))
    def financial2_rule_1699(self):
        self.declare(Fact(recommendation='DER menunjukkan tingkat hutang yang tinggi. ROA menunjukkan efisiensi tinggi.'))


    @Rule(Fact(der_valued='high'), Fact(roe_valued='high'))
    def financial2_rule_1700(self):
        self.declare(Fact(recommendation='DER menunjukkan tingkat hutang yang tinggi. ROE menunjukkan keuntungan yang tinggi.'))


    @Rule(Fact(roa_valued='high'), Fact(roe_valued='high'))
    def financial2_rule_1701(self):
        self.declare(Fact(recommendation='ROA menunjukkan efisiensi tinggi. ROE menunjukkan keuntungan yang tinggi.'))


    @Rule(Fact(underwriter_valued='bad'), Fact(warrant_valued='good'))
    def financial2_rule_1702(self):
        self.declare(Fact(recommendation='Underwriter berkualitas buruk. Warrant menunjukkan kondisi baik.'))


    @Rule(Fact(underwriter_valued='bad'), Fact(net_income_valued='loss'))
    def financial2_rule_1703(self):
        self.declare(Fact(recommendation='Underwriter berkualitas buruk. Laba bersih menunjukkan kerugian.'))


    @Rule(Fact(underwriter_valued='bad'), Fact(per_valued='high'))
    def financial2_rule_1704(self):
        self.declare(Fact(recommendation='Underwriter berkualitas buruk. PER berada di tingkat yang tinggi.'))


    @Rule(Fact(underwriter_valued='bad'), Fact(der_valued='high'))
    def financial2_rule_1705(self):
        self.declare(Fact(recommendation='Underwriter berkualitas buruk. DER menunjukkan tingkat hutang yang tinggi.'))


    @Rule(Fact(underwriter_valued='bad'), Fact(roa_valued='high'))
    def financial2_rule_1706(self):
        self.declare(Fact(recommendation='Underwriter berkualitas buruk. ROA menunjukkan efisiensi tinggi.'))


    @Rule(Fact(underwriter_valued='bad'), Fact(roe_valued='low'))
    def financial2_rule_1707(self):
        self.declare(Fact(recommendation='Underwriter berkualitas buruk. ROE menunjukkan keuntungan yang rendah.'))


    @Rule(Fact(warrant_valued='good'), Fact(net_income_valued='loss'))
    def financial2_rule_1708(self):
        self.declare(Fact(recommendation='Warrant menunjukkan kondisi baik. Laba bersih menunjukkan kerugian.'))


    @Rule(Fact(warrant_valued='good'), Fact(per_valued='high'))
    def financial2_rule_1709(self):
        self.declare(Fact(recommendation='Warrant menunjukkan kondisi baik. PER berada di tingkat yang tinggi.'))


    @Rule(Fact(warrant_valued='good'), Fact(der_valued='high'))
    def financial2_rule_1710(self):
        self.declare(Fact(recommendation='Warrant menunjukkan kondisi baik. DER menunjukkan tingkat hutang yang tinggi.'))


    @Rule(Fact(warrant_valued='good'), Fact(roa_valued='high'))
    def financial2_rule_1711(self):
        self.declare(Fact(recommendation='Warrant menunjukkan kondisi baik. ROA menunjukkan efisiensi tinggi.'))


    @Rule(Fact(warrant_valued='good'), Fact(roe_valued='low'))
    def financial2_rule_1712(self):
        self.declare(Fact(recommendation='Warrant menunjukkan kondisi baik. ROE menunjukkan keuntungan yang rendah.'))


    @Rule(Fact(net_income_valued='loss'), Fact(per_valued='high'))
    def financial2_rule_1713(self):
        self.declare(Fact(recommendation='Laba bersih menunjukkan kerugian. PER berada di tingkat yang tinggi.'))


    @Rule(Fact(net_income_valued='loss'), Fact(der_valued='high'))
    def financial2_rule_1714(self):
        self.declare(Fact(recommendation='Laba bersih menunjukkan kerugian. DER menunjukkan tingkat hutang yang tinggi.'))


    @Rule(Fact(net_income_valued='loss'), Fact(roa_valued='high'))
    def financial2_rule_1715(self):
        self.declare(Fact(recommendation='Laba bersih menunjukkan kerugian. ROA menunjukkan efisiensi tinggi.'))


    @Rule(Fact(net_income_valued='loss'), Fact(roe_valued='low'))
    def financial2_rule_1716(self):
        self.declare(Fact(recommendation='Laba bersih menunjukkan kerugian. ROE menunjukkan keuntungan yang rendah.'))


    @Rule(Fact(per_valued='high'), Fact(der_valued='high'))
    def financial2_rule_1717(self):
        self.declare(Fact(recommendation='PER berada di tingkat yang tinggi. DER menunjukkan tingkat hutang yang tinggi.'))


    @Rule(Fact(per_valued='high'), Fact(roa_valued='high'))
    def financial2_rule_1718(self):
        self.declare(Fact(recommendation='PER berada di tingkat yang tinggi. ROA menunjukkan efisiensi tinggi.'))


    @Rule(Fact(per_valued='high'), Fact(roe_valued='low'))
    def financial2_rule_1719(self):
        self.declare(Fact(recommendation='PER berada di tingkat yang tinggi. ROE menunjukkan keuntungan yang rendah.'))


    @Rule(Fact(der_valued='high'), Fact(roa_valued='high'))
    def financial2_rule_1720(self):
        self.declare(Fact(recommendation='DER menunjukkan tingkat hutang yang tinggi. ROA menunjukkan efisiensi tinggi.'))


    @Rule(Fact(der_valued='high'), Fact(roe_valued='low'))
    def financial2_rule_1721(self):
        self.declare(Fact(recommendation='DER menunjukkan tingkat hutang yang tinggi. ROE menunjukkan keuntungan yang rendah.'))


    @Rule(Fact(roa_valued='high'), Fact(roe_valued='low'))
    def financial2_rule_1722(self):
        self.declare(Fact(recommendation='ROA menunjukkan efisiensi tinggi. ROE menunjukkan keuntungan yang rendah.'))


    @Rule(Fact(underwriter_valued='bad'), Fact(warrant_valued='good'))
    def financial2_rule_1723(self):
        self.declare(Fact(recommendation='Underwriter berkualitas buruk. Warrant menunjukkan kondisi baik.'))


    @Rule(Fact(underwriter_valued='bad'), Fact(net_income_valued='loss'))
    def financial2_rule_1724(self):
        self.declare(Fact(recommendation='Underwriter berkualitas buruk. Laba bersih menunjukkan kerugian.'))


    @Rule(Fact(underwriter_valued='bad'), Fact(per_valued='high'))
    def financial2_rule_1725(self):
        self.declare(Fact(recommendation='Underwriter berkualitas buruk. PER berada di tingkat yang tinggi.'))


    @Rule(Fact(underwriter_valued='bad'), Fact(der_valued='high'))
    def financial2_rule_1726(self):
        self.declare(Fact(recommendation='Underwriter berkualitas buruk. DER menunjukkan tingkat hutang yang tinggi.'))


    @Rule(Fact(underwriter_valued='bad'), Fact(roa_valued='low'))
    def financial2_rule_1727(self):
        self.declare(Fact(recommendation='Underwriter berkualitas buruk. ROA menunjukkan efisiensi rendah.'))


    @Rule(Fact(underwriter_valued='bad'), Fact(roe_valued='high'))
    def financial2_rule_1728(self):
        self.declare(Fact(recommendation='Underwriter berkualitas buruk. ROE menunjukkan keuntungan yang tinggi.'))


    @Rule(Fact(warrant_valued='good'), Fact(net_income_valued='loss'))
    def financial2_rule_1729(self):
        self.declare(Fact(recommendation='Warrant menunjukkan kondisi baik. Laba bersih menunjukkan kerugian.'))


    @Rule(Fact(warrant_valued='good'), Fact(per_valued='high'))
    def financial2_rule_1730(self):
        self.declare(Fact(recommendation='Warrant menunjukkan kondisi baik. PER berada di tingkat yang tinggi.'))


    @Rule(Fact(warrant_valued='good'), Fact(der_valued='high'))
    def financial2_rule_1731(self):
        self.declare(Fact(recommendation='Warrant menunjukkan kondisi baik. DER menunjukkan tingkat hutang yang tinggi.'))


    @Rule(Fact(warrant_valued='good'), Fact(roa_valued='low'))
    def financial2_rule_1732(self):
        self.declare(Fact(recommendation='Warrant menunjukkan kondisi baik. ROA menunjukkan efisiensi rendah.'))


    @Rule(Fact(warrant_valued='good'), Fact(roe_valued='high'))
    def financial2_rule_1733(self):
        self.declare(Fact(recommendation='Warrant menunjukkan kondisi baik. ROE menunjukkan keuntungan yang tinggi.'))


    @Rule(Fact(net_income_valued='loss'), Fact(per_valued='high'))
    def financial2_rule_1734(self):
        self.declare(Fact(recommendation='Laba bersih menunjukkan kerugian. PER berada di tingkat yang tinggi.'))


    @Rule(Fact(net_income_valued='loss'), Fact(der_valued='high'))
    def financial2_rule_1735(self):
        self.declare(Fact(recommendation='Laba bersih menunjukkan kerugian. DER menunjukkan tingkat hutang yang tinggi.'))


    @Rule(Fact(net_income_valued='loss'), Fact(roa_valued='low'))
    def financial2_rule_1736(self):
        self.declare(Fact(recommendation='Laba bersih menunjukkan kerugian. ROA menunjukkan efisiensi rendah.'))


    @Rule(Fact(net_income_valued='loss'), Fact(roe_valued='high'))
    def financial2_rule_1737(self):
        self.declare(Fact(recommendation='Laba bersih menunjukkan kerugian. ROE menunjukkan keuntungan yang tinggi.'))


    @Rule(Fact(per_valued='high'), Fact(der_valued='high'))
    def financial2_rule_1738(self):
        self.declare(Fact(recommendation='PER berada di tingkat yang tinggi. DER menunjukkan tingkat hutang yang tinggi.'))


    @Rule(Fact(per_valued='high'), Fact(roa_valued='low'))
    def financial2_rule_1739(self):
        self.declare(Fact(recommendation='PER berada di tingkat yang tinggi. ROA menunjukkan efisiensi rendah.'))


    @Rule(Fact(per_valued='high'), Fact(roe_valued='high'))
    def financial2_rule_1740(self):
        self.declare(Fact(recommendation='PER berada di tingkat yang tinggi. ROE menunjukkan keuntungan yang tinggi.'))


    @Rule(Fact(der_valued='high'), Fact(roa_valued='low'))
    def financial2_rule_1741(self):
        self.declare(Fact(recommendation='DER menunjukkan tingkat hutang yang tinggi. ROA menunjukkan efisiensi rendah.'))


    @Rule(Fact(der_valued='high'), Fact(roe_valued='high'))
    def financial2_rule_1742(self):
        self.declare(Fact(recommendation='DER menunjukkan tingkat hutang yang tinggi. ROE menunjukkan keuntungan yang tinggi.'))


    @Rule(Fact(roa_valued='low'), Fact(roe_valued='high'))
    def financial2_rule_1743(self):
        self.declare(Fact(recommendation='ROA menunjukkan efisiensi rendah. ROE menunjukkan keuntungan yang tinggi.'))


    @Rule(Fact(underwriter_valued='bad'), Fact(warrant_valued='good'))
    def financial2_rule_1744(self):
        self.declare(Fact(recommendation='Underwriter berkualitas buruk. Warrant menunjukkan kondisi baik.'))


    @Rule(Fact(underwriter_valued='bad'), Fact(net_income_valued='loss'))
    def financial2_rule_1745(self):
        self.declare(Fact(recommendation='Underwriter berkualitas buruk. Laba bersih menunjukkan kerugian.'))


    @Rule(Fact(underwriter_valued='bad'), Fact(per_valued='high'))
    def financial2_rule_1746(self):
        self.declare(Fact(recommendation='Underwriter berkualitas buruk. PER berada di tingkat yang tinggi.'))


    @Rule(Fact(underwriter_valued='bad'), Fact(der_valued='high'))
    def financial2_rule_1747(self):
        self.declare(Fact(recommendation='Underwriter berkualitas buruk. DER menunjukkan tingkat hutang yang tinggi.'))


    @Rule(Fact(underwriter_valued='bad'), Fact(roa_valued='low'))
    def financial2_rule_1748(self):
        self.declare(Fact(recommendation='Underwriter berkualitas buruk. ROA menunjukkan efisiensi rendah.'))


    @Rule(Fact(underwriter_valued='bad'), Fact(roe_valued='low'))
    def financial2_rule_1749(self):
        self.declare(Fact(recommendation='Underwriter berkualitas buruk. ROE menunjukkan keuntungan yang rendah.'))


    @Rule(Fact(warrant_valued='good'), Fact(net_income_valued='loss'))
    def financial2_rule_1750(self):
        self.declare(Fact(recommendation='Warrant menunjukkan kondisi baik. Laba bersih menunjukkan kerugian.'))


    @Rule(Fact(warrant_valued='good'), Fact(per_valued='high'))
    def financial2_rule_1751(self):
        self.declare(Fact(recommendation='Warrant menunjukkan kondisi baik. PER berada di tingkat yang tinggi.'))


    @Rule(Fact(warrant_valued='good'), Fact(der_valued='high'))
    def financial2_rule_1752(self):
        self.declare(Fact(recommendation='Warrant menunjukkan kondisi baik. DER menunjukkan tingkat hutang yang tinggi.'))


    @Rule(Fact(warrant_valued='good'), Fact(roa_valued='low'))
    def financial2_rule_1753(self):
        self.declare(Fact(recommendation='Warrant menunjukkan kondisi baik. ROA menunjukkan efisiensi rendah.'))


    @Rule(Fact(warrant_valued='good'), Fact(roe_valued='low'))
    def financial2_rule_1754(self):
        self.declare(Fact(recommendation='Warrant menunjukkan kondisi baik. ROE menunjukkan keuntungan yang rendah.'))


    @Rule(Fact(net_income_valued='loss'), Fact(per_valued='high'))
    def financial2_rule_1755(self):
        self.declare(Fact(recommendation='Laba bersih menunjukkan kerugian. PER berada di tingkat yang tinggi.'))


    @Rule(Fact(net_income_valued='loss'), Fact(der_valued='high'))
    def financial2_rule_1756(self):
        self.declare(Fact(recommendation='Laba bersih menunjukkan kerugian. DER menunjukkan tingkat hutang yang tinggi.'))


    @Rule(Fact(net_income_valued='loss'), Fact(roa_valued='low'))
    def financial2_rule_1757(self):
        self.declare(Fact(recommendation='Laba bersih menunjukkan kerugian. ROA menunjukkan efisiensi rendah.'))


    @Rule(Fact(net_income_valued='loss'), Fact(roe_valued='low'))
    def financial2_rule_1758(self):
        self.declare(Fact(recommendation='Laba bersih menunjukkan kerugian. ROE menunjukkan keuntungan yang rendah.'))


    @Rule(Fact(per_valued='high'), Fact(der_valued='high'))
    def financial2_rule_1759(self):
        self.declare(Fact(recommendation='PER berada di tingkat yang tinggi. DER menunjukkan tingkat hutang yang tinggi.'))


    @Rule(Fact(per_valued='high'), Fact(roa_valued='low'))
    def financial2_rule_1760(self):
        self.declare(Fact(recommendation='PER berada di tingkat yang tinggi. ROA menunjukkan efisiensi rendah.'))


    @Rule(Fact(per_valued='high'), Fact(roe_valued='low'))
    def financial2_rule_1761(self):
        self.declare(Fact(recommendation='PER berada di tingkat yang tinggi. ROE menunjukkan keuntungan yang rendah.'))


    @Rule(Fact(der_valued='high'), Fact(roa_valued='low'))
    def financial2_rule_1762(self):
        self.declare(Fact(recommendation='DER menunjukkan tingkat hutang yang tinggi. ROA menunjukkan efisiensi rendah.'))


    @Rule(Fact(der_valued='high'), Fact(roe_valued='low'))
    def financial2_rule_1763(self):
        self.declare(Fact(recommendation='DER menunjukkan tingkat hutang yang tinggi. ROE menunjukkan keuntungan yang rendah.'))


    @Rule(Fact(roa_valued='low'), Fact(roe_valued='low'))
    def financial2_rule_1764(self):
        self.declare(Fact(recommendation='ROA menunjukkan efisiensi rendah. ROE menunjukkan keuntungan yang rendah.'))


    @Rule(Fact(underwriter_valued='bad'), Fact(warrant_valued='good'))
    def financial2_rule_1765(self):
        self.declare(Fact(recommendation='Underwriter berkualitas buruk. Warrant menunjukkan kondisi baik.'))


    @Rule(Fact(underwriter_valued='bad'), Fact(net_income_valued='loss'))
    def financial2_rule_1766(self):
        self.declare(Fact(recommendation='Underwriter berkualitas buruk. Laba bersih menunjukkan kerugian.'))


    @Rule(Fact(underwriter_valued='bad'), Fact(per_valued='high'))
    def financial2_rule_1767(self):
        self.declare(Fact(recommendation='Underwriter berkualitas buruk. PER berada di tingkat yang tinggi.'))


    @Rule(Fact(underwriter_valued='bad'), Fact(der_valued='low'))
    def financial2_rule_1768(self):
        self.declare(Fact(recommendation='Underwriter berkualitas buruk. DER menunjukkan tingkat hutang yang rendah.'))


    @Rule(Fact(underwriter_valued='bad'), Fact(roa_valued='high'))
    def financial2_rule_1769(self):
        self.declare(Fact(recommendation='Underwriter berkualitas buruk. ROA menunjukkan efisiensi tinggi.'))


    @Rule(Fact(underwriter_valued='bad'), Fact(roe_valued='high'))
    def financial2_rule_1770(self):
        self.declare(Fact(recommendation='Underwriter berkualitas buruk. ROE menunjukkan keuntungan yang tinggi.'))


    @Rule(Fact(warrant_valued='good'), Fact(net_income_valued='loss'))
    def financial2_rule_1771(self):
        self.declare(Fact(recommendation='Warrant menunjukkan kondisi baik. Laba bersih menunjukkan kerugian.'))


    @Rule(Fact(warrant_valued='good'), Fact(per_valued='high'))
    def financial2_rule_1772(self):
        self.declare(Fact(recommendation='Warrant menunjukkan kondisi baik. PER berada di tingkat yang tinggi.'))


    @Rule(Fact(warrant_valued='good'), Fact(der_valued='low'))
    def financial2_rule_1773(self):
        self.declare(Fact(recommendation='Warrant menunjukkan kondisi baik. DER menunjukkan tingkat hutang yang rendah.'))


    @Rule(Fact(warrant_valued='good'), Fact(roa_valued='high'))
    def financial2_rule_1774(self):
        self.declare(Fact(recommendation='Warrant menunjukkan kondisi baik. ROA menunjukkan efisiensi tinggi.'))


    @Rule(Fact(warrant_valued='good'), Fact(roe_valued='high'))
    def financial2_rule_1775(self):
        self.declare(Fact(recommendation='Warrant menunjukkan kondisi baik. ROE menunjukkan keuntungan yang tinggi.'))


    @Rule(Fact(net_income_valued='loss'), Fact(per_valued='high'))
    def financial2_rule_1776(self):
        self.declare(Fact(recommendation='Laba bersih menunjukkan kerugian. PER berada di tingkat yang tinggi.'))


    @Rule(Fact(net_income_valued='loss'), Fact(der_valued='low'))
    def financial2_rule_1777(self):
        self.declare(Fact(recommendation='Laba bersih menunjukkan kerugian. DER menunjukkan tingkat hutang yang rendah.'))


    @Rule(Fact(net_income_valued='loss'), Fact(roa_valued='high'))
    def financial2_rule_1778(self):
        self.declare(Fact(recommendation='Laba bersih menunjukkan kerugian. ROA menunjukkan efisiensi tinggi.'))


    @Rule(Fact(net_income_valued='loss'), Fact(roe_valued='high'))
    def financial2_rule_1779(self):
        self.declare(Fact(recommendation='Laba bersih menunjukkan kerugian. ROE menunjukkan keuntungan yang tinggi.'))


    @Rule(Fact(per_valued='high'), Fact(der_valued='low'))
    def financial2_rule_1780(self):
        self.declare(Fact(recommendation='PER berada di tingkat yang tinggi. DER menunjukkan tingkat hutang yang rendah.'))


    @Rule(Fact(per_valued='high'), Fact(roa_valued='high'))
    def financial2_rule_1781(self):
        self.declare(Fact(recommendation='PER berada di tingkat yang tinggi. ROA menunjukkan efisiensi tinggi.'))


    @Rule(Fact(per_valued='high'), Fact(roe_valued='high'))
    def financial2_rule_1782(self):
        self.declare(Fact(recommendation='PER berada di tingkat yang tinggi. ROE menunjukkan keuntungan yang tinggi.'))


    @Rule(Fact(der_valued='low'), Fact(roa_valued='high'))
    def financial2_rule_1783(self):
        self.declare(Fact(recommendation='DER menunjukkan tingkat hutang yang rendah. ROA menunjukkan efisiensi tinggi.'))


    @Rule(Fact(der_valued='low'), Fact(roe_valued='high'))
    def financial2_rule_1784(self):
        self.declare(Fact(recommendation='DER menunjukkan tingkat hutang yang rendah. ROE menunjukkan keuntungan yang tinggi.'))


    @Rule(Fact(roa_valued='high'), Fact(roe_valued='high'))
    def financial2_rule_1785(self):
        self.declare(Fact(recommendation='ROA menunjukkan efisiensi tinggi. ROE menunjukkan keuntungan yang tinggi.'))


    @Rule(Fact(underwriter_valued='bad'), Fact(warrant_valued='good'))
    def financial2_rule_1786(self):
        self.declare(Fact(recommendation='Underwriter berkualitas buruk. Warrant menunjukkan kondisi baik.'))


    @Rule(Fact(underwriter_valued='bad'), Fact(net_income_valued='loss'))
    def financial2_rule_1787(self):
        self.declare(Fact(recommendation='Underwriter berkualitas buruk. Laba bersih menunjukkan kerugian.'))


    @Rule(Fact(underwriter_valued='bad'), Fact(per_valued='high'))
    def financial2_rule_1788(self):
        self.declare(Fact(recommendation='Underwriter berkualitas buruk. PER berada di tingkat yang tinggi.'))


    @Rule(Fact(underwriter_valued='bad'), Fact(der_valued='low'))
    def financial2_rule_1789(self):
        self.declare(Fact(recommendation='Underwriter berkualitas buruk. DER menunjukkan tingkat hutang yang rendah.'))


    @Rule(Fact(underwriter_valued='bad'), Fact(roa_valued='high'))
    def financial2_rule_1790(self):
        self.declare(Fact(recommendation='Underwriter berkualitas buruk. ROA menunjukkan efisiensi tinggi.'))


    @Rule(Fact(underwriter_valued='bad'), Fact(roe_valued='low'))
    def financial2_rule_1791(self):
        self.declare(Fact(recommendation='Underwriter berkualitas buruk. ROE menunjukkan keuntungan yang rendah.'))


    @Rule(Fact(warrant_valued='good'), Fact(net_income_valued='loss'))
    def financial2_rule_1792(self):
        self.declare(Fact(recommendation='Warrant menunjukkan kondisi baik. Laba bersih menunjukkan kerugian.'))


    @Rule(Fact(warrant_valued='good'), Fact(per_valued='high'))
    def financial2_rule_1793(self):
        self.declare(Fact(recommendation='Warrant menunjukkan kondisi baik. PER berada di tingkat yang tinggi.'))


    @Rule(Fact(warrant_valued='good'), Fact(der_valued='low'))
    def financial2_rule_1794(self):
        self.declare(Fact(recommendation='Warrant menunjukkan kondisi baik. DER menunjukkan tingkat hutang yang rendah.'))


    @Rule(Fact(warrant_valued='good'), Fact(roa_valued='high'))
    def financial2_rule_1795(self):
        self.declare(Fact(recommendation='Warrant menunjukkan kondisi baik. ROA menunjukkan efisiensi tinggi.'))


    @Rule(Fact(warrant_valued='good'), Fact(roe_valued='low'))
    def financial2_rule_1796(self):
        self.declare(Fact(recommendation='Warrant menunjukkan kondisi baik. ROE menunjukkan keuntungan yang rendah.'))


    @Rule(Fact(net_income_valued='loss'), Fact(per_valued='high'))
    def financial2_rule_1797(self):
        self.declare(Fact(recommendation='Laba bersih menunjukkan kerugian. PER berada di tingkat yang tinggi.'))


    @Rule(Fact(net_income_valued='loss'), Fact(der_valued='low'))
    def financial2_rule_1798(self):
        self.declare(Fact(recommendation='Laba bersih menunjukkan kerugian. DER menunjukkan tingkat hutang yang rendah.'))


    @Rule(Fact(net_income_valued='loss'), Fact(roa_valued='high'))
    def financial2_rule_1799(self):
        self.declare(Fact(recommendation='Laba bersih menunjukkan kerugian. ROA menunjukkan efisiensi tinggi.'))


    @Rule(Fact(net_income_valued='loss'), Fact(roe_valued='low'))
    def financial2_rule_1800(self):
        self.declare(Fact(recommendation='Laba bersih menunjukkan kerugian. ROE menunjukkan keuntungan yang rendah.'))


    @Rule(Fact(per_valued='high'), Fact(der_valued='low'))
    def financial2_rule_1801(self):
        self.declare(Fact(recommendation='PER berada di tingkat yang tinggi. DER menunjukkan tingkat hutang yang rendah.'))


    @Rule(Fact(per_valued='high'), Fact(roa_valued='high'))
    def financial2_rule_1802(self):
        self.declare(Fact(recommendation='PER berada di tingkat yang tinggi. ROA menunjukkan efisiensi tinggi.'))


    @Rule(Fact(per_valued='high'), Fact(roe_valued='low'))
    def financial2_rule_1803(self):
        self.declare(Fact(recommendation='PER berada di tingkat yang tinggi. ROE menunjukkan keuntungan yang rendah.'))


    @Rule(Fact(der_valued='low'), Fact(roa_valued='high'))
    def financial2_rule_1804(self):
        self.declare(Fact(recommendation='DER menunjukkan tingkat hutang yang rendah. ROA menunjukkan efisiensi tinggi.'))


    @Rule(Fact(der_valued='low'), Fact(roe_valued='low'))
    def financial2_rule_1805(self):
        self.declare(Fact(recommendation='DER menunjukkan tingkat hutang yang rendah. ROE menunjukkan keuntungan yang rendah.'))


    @Rule(Fact(roa_valued='high'), Fact(roe_valued='low'))
    def financial2_rule_1806(self):
        self.declare(Fact(recommendation='ROA menunjukkan efisiensi tinggi. ROE menunjukkan keuntungan yang rendah.'))


    @Rule(Fact(underwriter_valued='bad'), Fact(warrant_valued='good'))
    def financial2_rule_1807(self):
        self.declare(Fact(recommendation='Underwriter berkualitas buruk. Warrant menunjukkan kondisi baik.'))


    @Rule(Fact(underwriter_valued='bad'), Fact(net_income_valued='loss'))
    def financial2_rule_1808(self):
        self.declare(Fact(recommendation='Underwriter berkualitas buruk. Laba bersih menunjukkan kerugian.'))


    @Rule(Fact(underwriter_valued='bad'), Fact(per_valued='high'))
    def financial2_rule_1809(self):
        self.declare(Fact(recommendation='Underwriter berkualitas buruk. PER berada di tingkat yang tinggi.'))


    @Rule(Fact(underwriter_valued='bad'), Fact(der_valued='low'))
    def financial2_rule_1810(self):
        self.declare(Fact(recommendation='Underwriter berkualitas buruk. DER menunjukkan tingkat hutang yang rendah.'))


    @Rule(Fact(underwriter_valued='bad'), Fact(roa_valued='low'))
    def financial2_rule_1811(self):
        self.declare(Fact(recommendation='Underwriter berkualitas buruk. ROA menunjukkan efisiensi rendah.'))


    @Rule(Fact(underwriter_valued='bad'), Fact(roe_valued='high'))
    def financial2_rule_1812(self):
        self.declare(Fact(recommendation='Underwriter berkualitas buruk. ROE menunjukkan keuntungan yang tinggi.'))


    @Rule(Fact(warrant_valued='good'), Fact(net_income_valued='loss'))
    def financial2_rule_1813(self):
        self.declare(Fact(recommendation='Warrant menunjukkan kondisi baik. Laba bersih menunjukkan kerugian.'))


    @Rule(Fact(warrant_valued='good'), Fact(per_valued='high'))
    def financial2_rule_1814(self):
        self.declare(Fact(recommendation='Warrant menunjukkan kondisi baik. PER berada di tingkat yang tinggi.'))


    @Rule(Fact(warrant_valued='good'), Fact(der_valued='low'))
    def financial2_rule_1815(self):
        self.declare(Fact(recommendation='Warrant menunjukkan kondisi baik. DER menunjukkan tingkat hutang yang rendah.'))


    @Rule(Fact(warrant_valued='good'), Fact(roa_valued='low'))
    def financial2_rule_1816(self):
        self.declare(Fact(recommendation='Warrant menunjukkan kondisi baik. ROA menunjukkan efisiensi rendah.'))


    @Rule(Fact(warrant_valued='good'), Fact(roe_valued='high'))
    def financial2_rule_1817(self):
        self.declare(Fact(recommendation='Warrant menunjukkan kondisi baik. ROE menunjukkan keuntungan yang tinggi.'))


    @Rule(Fact(net_income_valued='loss'), Fact(per_valued='high'))
    def financial2_rule_1818(self):
        self.declare(Fact(recommendation='Laba bersih menunjukkan kerugian. PER berada di tingkat yang tinggi.'))


    @Rule(Fact(net_income_valued='loss'), Fact(der_valued='low'))
    def financial2_rule_1819(self):
        self.declare(Fact(recommendation='Laba bersih menunjukkan kerugian. DER menunjukkan tingkat hutang yang rendah.'))


    @Rule(Fact(net_income_valued='loss'), Fact(roa_valued='low'))
    def financial2_rule_1820(self):
        self.declare(Fact(recommendation='Laba bersih menunjukkan kerugian. ROA menunjukkan efisiensi rendah.'))


    @Rule(Fact(net_income_valued='loss'), Fact(roe_valued='high'))
    def financial2_rule_1821(self):
        self.declare(Fact(recommendation='Laba bersih menunjukkan kerugian. ROE menunjukkan keuntungan yang tinggi.'))


    @Rule(Fact(per_valued='high'), Fact(der_valued='low'))
    def financial2_rule_1822(self):
        self.declare(Fact(recommendation='PER berada di tingkat yang tinggi. DER menunjukkan tingkat hutang yang rendah.'))


    @Rule(Fact(per_valued='high'), Fact(roa_valued='low'))
    def financial2_rule_1823(self):
        self.declare(Fact(recommendation='PER berada di tingkat yang tinggi. ROA menunjukkan efisiensi rendah.'))


    @Rule(Fact(per_valued='high'), Fact(roe_valued='high'))
    def financial2_rule_1824(self):
        self.declare(Fact(recommendation='PER berada di tingkat yang tinggi. ROE menunjukkan keuntungan yang tinggi.'))


    @Rule(Fact(der_valued='low'), Fact(roa_valued='low'))
    def financial2_rule_1825(self):
        self.declare(Fact(recommendation='DER menunjukkan tingkat hutang yang rendah. ROA menunjukkan efisiensi rendah.'))


    @Rule(Fact(der_valued='low'), Fact(roe_valued='high'))
    def financial2_rule_1826(self):
        self.declare(Fact(recommendation='DER menunjukkan tingkat hutang yang rendah. ROE menunjukkan keuntungan yang tinggi.'))


    @Rule(Fact(roa_valued='low'), Fact(roe_valued='high'))
    def financial2_rule_1827(self):
        self.declare(Fact(recommendation='ROA menunjukkan efisiensi rendah. ROE menunjukkan keuntungan yang tinggi.'))


    @Rule(Fact(underwriter_valued='bad'), Fact(warrant_valued='good'))
    def financial2_rule_1828(self):
        self.declare(Fact(recommendation='Underwriter berkualitas buruk. Warrant menunjukkan kondisi baik.'))


    @Rule(Fact(underwriter_valued='bad'), Fact(net_income_valued='loss'))
    def financial2_rule_1829(self):
        self.declare(Fact(recommendation='Underwriter berkualitas buruk. Laba bersih menunjukkan kerugian.'))


    @Rule(Fact(underwriter_valued='bad'), Fact(per_valued='high'))
    def financial2_rule_1830(self):
        self.declare(Fact(recommendation='Underwriter berkualitas buruk. PER berada di tingkat yang tinggi.'))


    @Rule(Fact(underwriter_valued='bad'), Fact(der_valued='low'))
    def financial2_rule_1831(self):
        self.declare(Fact(recommendation='Underwriter berkualitas buruk. DER menunjukkan tingkat hutang yang rendah.'))


    @Rule(Fact(underwriter_valued='bad'), Fact(roa_valued='low'))
    def financial2_rule_1832(self):
        self.declare(Fact(recommendation='Underwriter berkualitas buruk. ROA menunjukkan efisiensi rendah.'))


    @Rule(Fact(underwriter_valued='bad'), Fact(roe_valued='low'))
    def financial2_rule_1833(self):
        self.declare(Fact(recommendation='Underwriter berkualitas buruk. ROE menunjukkan keuntungan yang rendah.'))


    @Rule(Fact(warrant_valued='good'), Fact(net_income_valued='loss'))
    def financial2_rule_1834(self):
        self.declare(Fact(recommendation='Warrant menunjukkan kondisi baik. Laba bersih menunjukkan kerugian.'))


    @Rule(Fact(warrant_valued='good'), Fact(per_valued='high'))
    def financial2_rule_1835(self):
        self.declare(Fact(recommendation='Warrant menunjukkan kondisi baik. PER berada di tingkat yang tinggi.'))


    @Rule(Fact(warrant_valued='good'), Fact(der_valued='low'))
    def financial2_rule_1836(self):
        self.declare(Fact(recommendation='Warrant menunjukkan kondisi baik. DER menunjukkan tingkat hutang yang rendah.'))


    @Rule(Fact(warrant_valued='good'), Fact(roa_valued='low'))
    def financial2_rule_1837(self):
        self.declare(Fact(recommendation='Warrant menunjukkan kondisi baik. ROA menunjukkan efisiensi rendah.'))


    @Rule(Fact(warrant_valued='good'), Fact(roe_valued='low'))
    def financial2_rule_1838(self):
        self.declare(Fact(recommendation='Warrant menunjukkan kondisi baik. ROE menunjukkan keuntungan yang rendah.'))


    @Rule(Fact(net_income_valued='loss'), Fact(per_valued='high'))
    def financial2_rule_1839(self):
        self.declare(Fact(recommendation='Laba bersih menunjukkan kerugian. PER berada di tingkat yang tinggi.'))


    @Rule(Fact(net_income_valued='loss'), Fact(der_valued='low'))
    def financial2_rule_1840(self):
        self.declare(Fact(recommendation='Laba bersih menunjukkan kerugian. DER menunjukkan tingkat hutang yang rendah.'))


    @Rule(Fact(net_income_valued='loss'), Fact(roa_valued='low'))
    def financial2_rule_1841(self):
        self.declare(Fact(recommendation='Laba bersih menunjukkan kerugian. ROA menunjukkan efisiensi rendah.'))


    @Rule(Fact(net_income_valued='loss'), Fact(roe_valued='low'))
    def financial2_rule_1842(self):
        self.declare(Fact(recommendation='Laba bersih menunjukkan kerugian. ROE menunjukkan keuntungan yang rendah.'))


    @Rule(Fact(per_valued='high'), Fact(der_valued='low'))
    def financial2_rule_1843(self):
        self.declare(Fact(recommendation='PER berada di tingkat yang tinggi. DER menunjukkan tingkat hutang yang rendah.'))


    @Rule(Fact(per_valued='high'), Fact(roa_valued='low'))
    def financial2_rule_1844(self):
        self.declare(Fact(recommendation='PER berada di tingkat yang tinggi. ROA menunjukkan efisiensi rendah.'))


    @Rule(Fact(per_valued='high'), Fact(roe_valued='low'))
    def financial2_rule_1845(self):
        self.declare(Fact(recommendation='PER berada di tingkat yang tinggi. ROE menunjukkan keuntungan yang rendah.'))


    @Rule(Fact(der_valued='low'), Fact(roa_valued='low'))
    def financial2_rule_1846(self):
        self.declare(Fact(recommendation='DER menunjukkan tingkat hutang yang rendah. ROA menunjukkan efisiensi rendah.'))


    @Rule(Fact(der_valued='low'), Fact(roe_valued='low'))
    def financial2_rule_1847(self):
        self.declare(Fact(recommendation='DER menunjukkan tingkat hutang yang rendah. ROE menunjukkan keuntungan yang rendah.'))


    @Rule(Fact(roa_valued='low'), Fact(roe_valued='low'))
    def financial2_rule_1848(self):
        self.declare(Fact(recommendation='ROA menunjukkan efisiensi rendah. ROE menunjukkan keuntungan yang rendah.'))


    @Rule(Fact(underwriter_valued='bad'), Fact(warrant_valued='good'))
    def financial2_rule_1849(self):
        self.declare(Fact(recommendation='Underwriter berkualitas buruk. Warrant menunjukkan kondisi baik.'))


    @Rule(Fact(underwriter_valued='bad'), Fact(net_income_valued='loss'))
    def financial2_rule_1850(self):
        self.declare(Fact(recommendation='Underwriter berkualitas buruk. Laba bersih menunjukkan kerugian.'))


    @Rule(Fact(underwriter_valued='bad'), Fact(per_valued='low'))
    def financial2_rule_1851(self):
        self.declare(Fact(recommendation='Underwriter berkualitas buruk. PER berada di tingkat yang rendah.'))


    @Rule(Fact(underwriter_valued='bad'), Fact(der_valued='high'))
    def financial2_rule_1852(self):
        self.declare(Fact(recommendation='Underwriter berkualitas buruk. DER menunjukkan tingkat hutang yang tinggi.'))


    @Rule(Fact(underwriter_valued='bad'), Fact(roa_valued='high'))
    def financial2_rule_1853(self):
        self.declare(Fact(recommendation='Underwriter berkualitas buruk. ROA menunjukkan efisiensi tinggi.'))


    @Rule(Fact(underwriter_valued='bad'), Fact(roe_valued='high'))
    def financial2_rule_1854(self):
        self.declare(Fact(recommendation='Underwriter berkualitas buruk. ROE menunjukkan keuntungan yang tinggi.'))


    @Rule(Fact(warrant_valued='good'), Fact(net_income_valued='loss'))
    def financial2_rule_1855(self):
        self.declare(Fact(recommendation='Warrant menunjukkan kondisi baik. Laba bersih menunjukkan kerugian.'))


    @Rule(Fact(warrant_valued='good'), Fact(per_valued='low'))
    def financial2_rule_1856(self):
        self.declare(Fact(recommendation='Warrant menunjukkan kondisi baik. PER berada di tingkat yang rendah.'))


    @Rule(Fact(warrant_valued='good'), Fact(der_valued='high'))
    def financial2_rule_1857(self):
        self.declare(Fact(recommendation='Warrant menunjukkan kondisi baik. DER menunjukkan tingkat hutang yang tinggi.'))


    @Rule(Fact(warrant_valued='good'), Fact(roa_valued='high'))
    def financial2_rule_1858(self):
        self.declare(Fact(recommendation='Warrant menunjukkan kondisi baik. ROA menunjukkan efisiensi tinggi.'))


    @Rule(Fact(warrant_valued='good'), Fact(roe_valued='high'))
    def financial2_rule_1859(self):
        self.declare(Fact(recommendation='Warrant menunjukkan kondisi baik. ROE menunjukkan keuntungan yang tinggi.'))


    @Rule(Fact(net_income_valued='loss'), Fact(per_valued='low'))
    def financial2_rule_1860(self):
        self.declare(Fact(recommendation='Laba bersih menunjukkan kerugian. PER berada di tingkat yang rendah.'))


    @Rule(Fact(net_income_valued='loss'), Fact(der_valued='high'))
    def financial2_rule_1861(self):
        self.declare(Fact(recommendation='Laba bersih menunjukkan kerugian. DER menunjukkan tingkat hutang yang tinggi.'))


    @Rule(Fact(net_income_valued='loss'), Fact(roa_valued='high'))
    def financial2_rule_1862(self):
        self.declare(Fact(recommendation='Laba bersih menunjukkan kerugian. ROA menunjukkan efisiensi tinggi.'))


    @Rule(Fact(net_income_valued='loss'), Fact(roe_valued='high'))
    def financial2_rule_1863(self):
        self.declare(Fact(recommendation='Laba bersih menunjukkan kerugian. ROE menunjukkan keuntungan yang tinggi.'))


    @Rule(Fact(per_valued='low'), Fact(der_valued='high'))
    def financial2_rule_1864(self):
        self.declare(Fact(recommendation='PER berada di tingkat yang rendah. DER menunjukkan tingkat hutang yang tinggi.'))


    @Rule(Fact(per_valued='low'), Fact(roa_valued='high'))
    def financial2_rule_1865(self):
        self.declare(Fact(recommendation='PER berada di tingkat yang rendah. ROA menunjukkan efisiensi tinggi.'))


    @Rule(Fact(per_valued='low'), Fact(roe_valued='high'))
    def financial2_rule_1866(self):
        self.declare(Fact(recommendation='PER berada di tingkat yang rendah. ROE menunjukkan keuntungan yang tinggi.'))


    @Rule(Fact(der_valued='high'), Fact(roa_valued='high'))
    def financial2_rule_1867(self):
        self.declare(Fact(recommendation='DER menunjukkan tingkat hutang yang tinggi. ROA menunjukkan efisiensi tinggi.'))


    @Rule(Fact(der_valued='high'), Fact(roe_valued='high'))
    def financial2_rule_1868(self):
        self.declare(Fact(recommendation='DER menunjukkan tingkat hutang yang tinggi. ROE menunjukkan keuntungan yang tinggi.'))


    @Rule(Fact(roa_valued='high'), Fact(roe_valued='high'))
    def financial2_rule_1869(self):
        self.declare(Fact(recommendation='ROA menunjukkan efisiensi tinggi. ROE menunjukkan keuntungan yang tinggi.'))


    @Rule(Fact(underwriter_valued='bad'), Fact(warrant_valued='good'))
    def financial2_rule_1870(self):
        self.declare(Fact(recommendation='Underwriter berkualitas buruk. Warrant menunjukkan kondisi baik.'))


    @Rule(Fact(underwriter_valued='bad'), Fact(net_income_valued='loss'))
    def financial2_rule_1871(self):
        self.declare(Fact(recommendation='Underwriter berkualitas buruk. Laba bersih menunjukkan kerugian.'))


    @Rule(Fact(underwriter_valued='bad'), Fact(per_valued='low'))
    def financial2_rule_1872(self):
        self.declare(Fact(recommendation='Underwriter berkualitas buruk. PER berada di tingkat yang rendah.'))


    @Rule(Fact(underwriter_valued='bad'), Fact(der_valued='high'))
    def financial2_rule_1873(self):
        self.declare(Fact(recommendation='Underwriter berkualitas buruk. DER menunjukkan tingkat hutang yang tinggi.'))


    @Rule(Fact(underwriter_valued='bad'), Fact(roa_valued='high'))
    def financial2_rule_1874(self):
        self.declare(Fact(recommendation='Underwriter berkualitas buruk. ROA menunjukkan efisiensi tinggi.'))


    @Rule(Fact(underwriter_valued='bad'), Fact(roe_valued='low'))
    def financial2_rule_1875(self):
        self.declare(Fact(recommendation='Underwriter berkualitas buruk. ROE menunjukkan keuntungan yang rendah.'))


    @Rule(Fact(warrant_valued='good'), Fact(net_income_valued='loss'))
    def financial2_rule_1876(self):
        self.declare(Fact(recommendation='Warrant menunjukkan kondisi baik. Laba bersih menunjukkan kerugian.'))


    @Rule(Fact(warrant_valued='good'), Fact(per_valued='low'))
    def financial2_rule_1877(self):
        self.declare(Fact(recommendation='Warrant menunjukkan kondisi baik. PER berada di tingkat yang rendah.'))


    @Rule(Fact(warrant_valued='good'), Fact(der_valued='high'))
    def financial2_rule_1878(self):
        self.declare(Fact(recommendation='Warrant menunjukkan kondisi baik. DER menunjukkan tingkat hutang yang tinggi.'))


    @Rule(Fact(warrant_valued='good'), Fact(roa_valued='high'))
    def financial2_rule_1879(self):
        self.declare(Fact(recommendation='Warrant menunjukkan kondisi baik. ROA menunjukkan efisiensi tinggi.'))


    @Rule(Fact(warrant_valued='good'), Fact(roe_valued='low'))
    def financial2_rule_1880(self):
        self.declare(Fact(recommendation='Warrant menunjukkan kondisi baik. ROE menunjukkan keuntungan yang rendah.'))


    @Rule(Fact(net_income_valued='loss'), Fact(per_valued='low'))
    def financial2_rule_1881(self):
        self.declare(Fact(recommendation='Laba bersih menunjukkan kerugian. PER berada di tingkat yang rendah.'))


    @Rule(Fact(net_income_valued='loss'), Fact(der_valued='high'))
    def financial2_rule_1882(self):
        self.declare(Fact(recommendation='Laba bersih menunjukkan kerugian. DER menunjukkan tingkat hutang yang tinggi.'))


    @Rule(Fact(net_income_valued='loss'), Fact(roa_valued='high'))
    def financial2_rule_1883(self):
        self.declare(Fact(recommendation='Laba bersih menunjukkan kerugian. ROA menunjukkan efisiensi tinggi.'))


    @Rule(Fact(net_income_valued='loss'), Fact(roe_valued='low'))
    def financial2_rule_1884(self):
        self.declare(Fact(recommendation='Laba bersih menunjukkan kerugian. ROE menunjukkan keuntungan yang rendah.'))


    @Rule(Fact(per_valued='low'), Fact(der_valued='high'))
    def financial2_rule_1885(self):
        self.declare(Fact(recommendation='PER berada di tingkat yang rendah. DER menunjukkan tingkat hutang yang tinggi.'))


    @Rule(Fact(per_valued='low'), Fact(roa_valued='high'))
    def financial2_rule_1886(self):
        self.declare(Fact(recommendation='PER berada di tingkat yang rendah. ROA menunjukkan efisiensi tinggi.'))


    @Rule(Fact(per_valued='low'), Fact(roe_valued='low'))
    def financial2_rule_1887(self):
        self.declare(Fact(recommendation='PER berada di tingkat yang rendah. ROE menunjukkan keuntungan yang rendah.'))


    @Rule(Fact(der_valued='high'), Fact(roa_valued='high'))
    def financial2_rule_1888(self):
        self.declare(Fact(recommendation='DER menunjukkan tingkat hutang yang tinggi. ROA menunjukkan efisiensi tinggi.'))


    @Rule(Fact(der_valued='high'), Fact(roe_valued='low'))
    def financial2_rule_1889(self):
        self.declare(Fact(recommendation='DER menunjukkan tingkat hutang yang tinggi. ROE menunjukkan keuntungan yang rendah.'))


    @Rule(Fact(roa_valued='high'), Fact(roe_valued='low'))
    def financial2_rule_1890(self):
        self.declare(Fact(recommendation='ROA menunjukkan efisiensi tinggi. ROE menunjukkan keuntungan yang rendah.'))


    @Rule(Fact(underwriter_valued='bad'), Fact(warrant_valued='good'))
    def financial2_rule_1891(self):
        self.declare(Fact(recommendation='Underwriter berkualitas buruk. Warrant menunjukkan kondisi baik.'))


    @Rule(Fact(underwriter_valued='bad'), Fact(net_income_valued='loss'))
    def financial2_rule_1892(self):
        self.declare(Fact(recommendation='Underwriter berkualitas buruk. Laba bersih menunjukkan kerugian.'))


    @Rule(Fact(underwriter_valued='bad'), Fact(per_valued='low'))
    def financial2_rule_1893(self):
        self.declare(Fact(recommendation='Underwriter berkualitas buruk. PER berada di tingkat yang rendah.'))


    @Rule(Fact(underwriter_valued='bad'), Fact(der_valued='high'))
    def financial2_rule_1894(self):
        self.declare(Fact(recommendation='Underwriter berkualitas buruk. DER menunjukkan tingkat hutang yang tinggi.'))


    @Rule(Fact(underwriter_valued='bad'), Fact(roa_valued='low'))
    def financial2_rule_1895(self):
        self.declare(Fact(recommendation='Underwriter berkualitas buruk. ROA menunjukkan efisiensi rendah.'))


    @Rule(Fact(underwriter_valued='bad'), Fact(roe_valued='high'))
    def financial2_rule_1896(self):
        self.declare(Fact(recommendation='Underwriter berkualitas buruk. ROE menunjukkan keuntungan yang tinggi.'))


    @Rule(Fact(warrant_valued='good'), Fact(net_income_valued='loss'))
    def financial2_rule_1897(self):
        self.declare(Fact(recommendation='Warrant menunjukkan kondisi baik. Laba bersih menunjukkan kerugian.'))


    @Rule(Fact(warrant_valued='good'), Fact(per_valued='low'))
    def financial2_rule_1898(self):
        self.declare(Fact(recommendation='Warrant menunjukkan kondisi baik. PER berada di tingkat yang rendah.'))


    @Rule(Fact(warrant_valued='good'), Fact(der_valued='high'))
    def financial2_rule_1899(self):
        self.declare(Fact(recommendation='Warrant menunjukkan kondisi baik. DER menunjukkan tingkat hutang yang tinggi.'))


    @Rule(Fact(warrant_valued='good'), Fact(roa_valued='low'))
    def financial2_rule_1900(self):
        self.declare(Fact(recommendation='Warrant menunjukkan kondisi baik. ROA menunjukkan efisiensi rendah.'))


    @Rule(Fact(warrant_valued='good'), Fact(roe_valued='high'))
    def financial2_rule_1901(self):
        self.declare(Fact(recommendation='Warrant menunjukkan kondisi baik. ROE menunjukkan keuntungan yang tinggi.'))


    @Rule(Fact(net_income_valued='loss'), Fact(per_valued='low'))
    def financial2_rule_1902(self):
        self.declare(Fact(recommendation='Laba bersih menunjukkan kerugian. PER berada di tingkat yang rendah.'))


    @Rule(Fact(net_income_valued='loss'), Fact(der_valued='high'))
    def financial2_rule_1903(self):
        self.declare(Fact(recommendation='Laba bersih menunjukkan kerugian. DER menunjukkan tingkat hutang yang tinggi.'))


    @Rule(Fact(net_income_valued='loss'), Fact(roa_valued='low'))
    def financial2_rule_1904(self):
        self.declare(Fact(recommendation='Laba bersih menunjukkan kerugian. ROA menunjukkan efisiensi rendah.'))


    @Rule(Fact(net_income_valued='loss'), Fact(roe_valued='high'))
    def financial2_rule_1905(self):
        self.declare(Fact(recommendation='Laba bersih menunjukkan kerugian. ROE menunjukkan keuntungan yang tinggi.'))


    @Rule(Fact(per_valued='low'), Fact(der_valued='high'))
    def financial2_rule_1906(self):
        self.declare(Fact(recommendation='PER berada di tingkat yang rendah. DER menunjukkan tingkat hutang yang tinggi.'))


    @Rule(Fact(per_valued='low'), Fact(roa_valued='low'))
    def financial2_rule_1907(self):
        self.declare(Fact(recommendation='PER berada di tingkat yang rendah. ROA menunjukkan efisiensi rendah.'))


    @Rule(Fact(per_valued='low'), Fact(roe_valued='high'))
    def financial2_rule_1908(self):
        self.declare(Fact(recommendation='PER berada di tingkat yang rendah. ROE menunjukkan keuntungan yang tinggi.'))


    @Rule(Fact(der_valued='high'), Fact(roa_valued='low'))
    def financial2_rule_1909(self):
        self.declare(Fact(recommendation='DER menunjukkan tingkat hutang yang tinggi. ROA menunjukkan efisiensi rendah.'))


    @Rule(Fact(der_valued='high'), Fact(roe_valued='high'))
    def financial2_rule_1910(self):
        self.declare(Fact(recommendation='DER menunjukkan tingkat hutang yang tinggi. ROE menunjukkan keuntungan yang tinggi.'))


    @Rule(Fact(roa_valued='low'), Fact(roe_valued='high'))
    def financial2_rule_1911(self):
        self.declare(Fact(recommendation='ROA menunjukkan efisiensi rendah. ROE menunjukkan keuntungan yang tinggi.'))


    @Rule(Fact(underwriter_valued='bad'), Fact(warrant_valued='good'))
    def financial2_rule_1912(self):
        self.declare(Fact(recommendation='Underwriter berkualitas buruk. Warrant menunjukkan kondisi baik.'))


    @Rule(Fact(underwriter_valued='bad'), Fact(net_income_valued='loss'))
    def financial2_rule_1913(self):
        self.declare(Fact(recommendation='Underwriter berkualitas buruk. Laba bersih menunjukkan kerugian.'))


    @Rule(Fact(underwriter_valued='bad'), Fact(per_valued='low'))
    def financial2_rule_1914(self):
        self.declare(Fact(recommendation='Underwriter berkualitas buruk. PER berada di tingkat yang rendah.'))


    @Rule(Fact(underwriter_valued='bad'), Fact(der_valued='high'))
    def financial2_rule_1915(self):
        self.declare(Fact(recommendation='Underwriter berkualitas buruk. DER menunjukkan tingkat hutang yang tinggi.'))


    @Rule(Fact(underwriter_valued='bad'), Fact(roa_valued='low'))
    def financial2_rule_1916(self):
        self.declare(Fact(recommendation='Underwriter berkualitas buruk. ROA menunjukkan efisiensi rendah.'))


    @Rule(Fact(underwriter_valued='bad'), Fact(roe_valued='low'))
    def financial2_rule_1917(self):
        self.declare(Fact(recommendation='Underwriter berkualitas buruk. ROE menunjukkan keuntungan yang rendah.'))


    @Rule(Fact(warrant_valued='good'), Fact(net_income_valued='loss'))
    def financial2_rule_1918(self):
        self.declare(Fact(recommendation='Warrant menunjukkan kondisi baik. Laba bersih menunjukkan kerugian.'))


    @Rule(Fact(warrant_valued='good'), Fact(per_valued='low'))
    def financial2_rule_1919(self):
        self.declare(Fact(recommendation='Warrant menunjukkan kondisi baik. PER berada di tingkat yang rendah.'))


    @Rule(Fact(warrant_valued='good'), Fact(der_valued='high'))
    def financial2_rule_1920(self):
        self.declare(Fact(recommendation='Warrant menunjukkan kondisi baik. DER menunjukkan tingkat hutang yang tinggi.'))


    @Rule(Fact(warrant_valued='good'), Fact(roa_valued='low'))
    def financial2_rule_1921(self):
        self.declare(Fact(recommendation='Warrant menunjukkan kondisi baik. ROA menunjukkan efisiensi rendah.'))


    @Rule(Fact(warrant_valued='good'), Fact(roe_valued='low'))
    def financial2_rule_1922(self):
        self.declare(Fact(recommendation='Warrant menunjukkan kondisi baik. ROE menunjukkan keuntungan yang rendah.'))


    @Rule(Fact(net_income_valued='loss'), Fact(per_valued='low'))
    def financial2_rule_1923(self):
        self.declare(Fact(recommendation='Laba bersih menunjukkan kerugian. PER berada di tingkat yang rendah.'))


    @Rule(Fact(net_income_valued='loss'), Fact(der_valued='high'))
    def financial2_rule_1924(self):
        self.declare(Fact(recommendation='Laba bersih menunjukkan kerugian. DER menunjukkan tingkat hutang yang tinggi.'))


    @Rule(Fact(net_income_valued='loss'), Fact(roa_valued='low'))
    def financial2_rule_1925(self):
        self.declare(Fact(recommendation='Laba bersih menunjukkan kerugian. ROA menunjukkan efisiensi rendah.'))


    @Rule(Fact(net_income_valued='loss'), Fact(roe_valued='low'))
    def financial2_rule_1926(self):
        self.declare(Fact(recommendation='Laba bersih menunjukkan kerugian. ROE menunjukkan keuntungan yang rendah.'))


    @Rule(Fact(per_valued='low'), Fact(der_valued='high'))
    def financial2_rule_1927(self):
        self.declare(Fact(recommendation='PER berada di tingkat yang rendah. DER menunjukkan tingkat hutang yang tinggi.'))


    @Rule(Fact(per_valued='low'), Fact(roa_valued='low'))
    def financial2_rule_1928(self):
        self.declare(Fact(recommendation='PER berada di tingkat yang rendah. ROA menunjukkan efisiensi rendah.'))


    @Rule(Fact(per_valued='low'), Fact(roe_valued='low'))
    def financial2_rule_1929(self):
        self.declare(Fact(recommendation='PER berada di tingkat yang rendah. ROE menunjukkan keuntungan yang rendah.'))


    @Rule(Fact(der_valued='high'), Fact(roa_valued='low'))
    def financial2_rule_1930(self):
        self.declare(Fact(recommendation='DER menunjukkan tingkat hutang yang tinggi. ROA menunjukkan efisiensi rendah.'))


    @Rule(Fact(der_valued='high'), Fact(roe_valued='low'))
    def financial2_rule_1931(self):
        self.declare(Fact(recommendation='DER menunjukkan tingkat hutang yang tinggi. ROE menunjukkan keuntungan yang rendah.'))


    @Rule(Fact(roa_valued='low'), Fact(roe_valued='low'))
    def financial2_rule_1932(self):
        self.declare(Fact(recommendation='ROA menunjukkan efisiensi rendah. ROE menunjukkan keuntungan yang rendah.'))


    @Rule(Fact(underwriter_valued='bad'), Fact(warrant_valued='good'))
    def financial2_rule_1933(self):
        self.declare(Fact(recommendation='Underwriter berkualitas buruk. Warrant menunjukkan kondisi baik.'))


    @Rule(Fact(underwriter_valued='bad'), Fact(net_income_valued='loss'))
    def financial2_rule_1934(self):
        self.declare(Fact(recommendation='Underwriter berkualitas buruk. Laba bersih menunjukkan kerugian.'))


    @Rule(Fact(underwriter_valued='bad'), Fact(per_valued='low'))
    def financial2_rule_1935(self):
        self.declare(Fact(recommendation='Underwriter berkualitas buruk. PER berada di tingkat yang rendah.'))


    @Rule(Fact(underwriter_valued='bad'), Fact(der_valued='low'))
    def financial2_rule_1936(self):
        self.declare(Fact(recommendation='Underwriter berkualitas buruk. DER menunjukkan tingkat hutang yang rendah.'))


    @Rule(Fact(underwriter_valued='bad'), Fact(roa_valued='high'))
    def financial2_rule_1937(self):
        self.declare(Fact(recommendation='Underwriter berkualitas buruk. ROA menunjukkan efisiensi tinggi.'))


    @Rule(Fact(underwriter_valued='bad'), Fact(roe_valued='high'))
    def financial2_rule_1938(self):
        self.declare(Fact(recommendation='Underwriter berkualitas buruk. ROE menunjukkan keuntungan yang tinggi.'))


    @Rule(Fact(warrant_valued='good'), Fact(net_income_valued='loss'))
    def financial2_rule_1939(self):
        self.declare(Fact(recommendation='Warrant menunjukkan kondisi baik. Laba bersih menunjukkan kerugian.'))


    @Rule(Fact(warrant_valued='good'), Fact(per_valued='low'))
    def financial2_rule_1940(self):
        self.declare(Fact(recommendation='Warrant menunjukkan kondisi baik. PER berada di tingkat yang rendah.'))


    @Rule(Fact(warrant_valued='good'), Fact(der_valued='low'))
    def financial2_rule_1941(self):
        self.declare(Fact(recommendation='Warrant menunjukkan kondisi baik. DER menunjukkan tingkat hutang yang rendah.'))


    @Rule(Fact(warrant_valued='good'), Fact(roa_valued='high'))
    def financial2_rule_1942(self):
        self.declare(Fact(recommendation='Warrant menunjukkan kondisi baik. ROA menunjukkan efisiensi tinggi.'))


    @Rule(Fact(warrant_valued='good'), Fact(roe_valued='high'))
    def financial2_rule_1943(self):
        self.declare(Fact(recommendation='Warrant menunjukkan kondisi baik. ROE menunjukkan keuntungan yang tinggi.'))


    @Rule(Fact(net_income_valued='loss'), Fact(per_valued='low'))
    def financial2_rule_1944(self):
        self.declare(Fact(recommendation='Laba bersih menunjukkan kerugian. PER berada di tingkat yang rendah.'))


    @Rule(Fact(net_income_valued='loss'), Fact(der_valued='low'))
    def financial2_rule_1945(self):
        self.declare(Fact(recommendation='Laba bersih menunjukkan kerugian. DER menunjukkan tingkat hutang yang rendah.'))


    @Rule(Fact(net_income_valued='loss'), Fact(roa_valued='high'))
    def financial2_rule_1946(self):
        self.declare(Fact(recommendation='Laba bersih menunjukkan kerugian. ROA menunjukkan efisiensi tinggi.'))


    @Rule(Fact(net_income_valued='loss'), Fact(roe_valued='high'))
    def financial2_rule_1947(self):
        self.declare(Fact(recommendation='Laba bersih menunjukkan kerugian. ROE menunjukkan keuntungan yang tinggi.'))


    @Rule(Fact(per_valued='low'), Fact(der_valued='low'))
    def financial2_rule_1948(self):
        self.declare(Fact(recommendation='PER berada di tingkat yang rendah. DER menunjukkan tingkat hutang yang rendah.'))


    @Rule(Fact(per_valued='low'), Fact(roa_valued='high'))
    def financial2_rule_1949(self):
        self.declare(Fact(recommendation='PER berada di tingkat yang rendah. ROA menunjukkan efisiensi tinggi.'))


    @Rule(Fact(per_valued='low'), Fact(roe_valued='high'))
    def financial2_rule_1950(self):
        self.declare(Fact(recommendation='PER berada di tingkat yang rendah. ROE menunjukkan keuntungan yang tinggi.'))


    @Rule(Fact(der_valued='low'), Fact(roa_valued='high'))
    def financial2_rule_1951(self):
        self.declare(Fact(recommendation='DER menunjukkan tingkat hutang yang rendah. ROA menunjukkan efisiensi tinggi.'))


    @Rule(Fact(der_valued='low'), Fact(roe_valued='high'))
    def financial2_rule_1952(self):
        self.declare(Fact(recommendation='DER menunjukkan tingkat hutang yang rendah. ROE menunjukkan keuntungan yang tinggi.'))


    @Rule(Fact(roa_valued='high'), Fact(roe_valued='high'))
    def financial2_rule_1953(self):
        self.declare(Fact(recommendation='ROA menunjukkan efisiensi tinggi. ROE menunjukkan keuntungan yang tinggi.'))


    @Rule(Fact(underwriter_valued='bad'), Fact(warrant_valued='good'))
    def financial2_rule_1954(self):
        self.declare(Fact(recommendation='Underwriter berkualitas buruk. Warrant menunjukkan kondisi baik.'))


    @Rule(Fact(underwriter_valued='bad'), Fact(net_income_valued='loss'))
    def financial2_rule_1955(self):
        self.declare(Fact(recommendation='Underwriter berkualitas buruk. Laba bersih menunjukkan kerugian.'))


    @Rule(Fact(underwriter_valued='bad'), Fact(per_valued='low'))
    def financial2_rule_1956(self):
        self.declare(Fact(recommendation='Underwriter berkualitas buruk. PER berada di tingkat yang rendah.'))


    @Rule(Fact(underwriter_valued='bad'), Fact(der_valued='low'))
    def financial2_rule_1957(self):
        self.declare(Fact(recommendation='Underwriter berkualitas buruk. DER menunjukkan tingkat hutang yang rendah.'))


    @Rule(Fact(underwriter_valued='bad'), Fact(roa_valued='high'))
    def financial2_rule_1958(self):
        self.declare(Fact(recommendation='Underwriter berkualitas buruk. ROA menunjukkan efisiensi tinggi.'))


    @Rule(Fact(underwriter_valued='bad'), Fact(roe_valued='low'))
    def financial2_rule_1959(self):
        self.declare(Fact(recommendation='Underwriter berkualitas buruk. ROE menunjukkan keuntungan yang rendah.'))


    @Rule(Fact(warrant_valued='good'), Fact(net_income_valued='loss'))
    def financial2_rule_1960(self):
        self.declare(Fact(recommendation='Warrant menunjukkan kondisi baik. Laba bersih menunjukkan kerugian.'))


    @Rule(Fact(warrant_valued='good'), Fact(per_valued='low'))
    def financial2_rule_1961(self):
        self.declare(Fact(recommendation='Warrant menunjukkan kondisi baik. PER berada di tingkat yang rendah.'))


    @Rule(Fact(warrant_valued='good'), Fact(der_valued='low'))
    def financial2_rule_1962(self):
        self.declare(Fact(recommendation='Warrant menunjukkan kondisi baik. DER menunjukkan tingkat hutang yang rendah.'))


    @Rule(Fact(warrant_valued='good'), Fact(roa_valued='high'))
    def financial2_rule_1963(self):
        self.declare(Fact(recommendation='Warrant menunjukkan kondisi baik. ROA menunjukkan efisiensi tinggi.'))


    @Rule(Fact(warrant_valued='good'), Fact(roe_valued='low'))
    def financial2_rule_1964(self):
        self.declare(Fact(recommendation='Warrant menunjukkan kondisi baik. ROE menunjukkan keuntungan yang rendah.'))


    @Rule(Fact(net_income_valued='loss'), Fact(per_valued='low'))
    def financial2_rule_1965(self):
        self.declare(Fact(recommendation='Laba bersih menunjukkan kerugian. PER berada di tingkat yang rendah.'))


    @Rule(Fact(net_income_valued='loss'), Fact(der_valued='low'))
    def financial2_rule_1966(self):
        self.declare(Fact(recommendation='Laba bersih menunjukkan kerugian. DER menunjukkan tingkat hutang yang rendah.'))


    @Rule(Fact(net_income_valued='loss'), Fact(roa_valued='high'))
    def financial2_rule_1967(self):
        self.declare(Fact(recommendation='Laba bersih menunjukkan kerugian. ROA menunjukkan efisiensi tinggi.'))


    @Rule(Fact(net_income_valued='loss'), Fact(roe_valued='low'))
    def financial2_rule_1968(self):
        self.declare(Fact(recommendation='Laba bersih menunjukkan kerugian. ROE menunjukkan keuntungan yang rendah.'))


    @Rule(Fact(per_valued='low'), Fact(der_valued='low'))
    def financial2_rule_1969(self):
        self.declare(Fact(recommendation='PER berada di tingkat yang rendah. DER menunjukkan tingkat hutang yang rendah.'))


    @Rule(Fact(per_valued='low'), Fact(roa_valued='high'))
    def financial2_rule_1970(self):
        self.declare(Fact(recommendation='PER berada di tingkat yang rendah. ROA menunjukkan efisiensi tinggi.'))


    @Rule(Fact(per_valued='low'), Fact(roe_valued='low'))
    def financial2_rule_1971(self):
        self.declare(Fact(recommendation='PER berada di tingkat yang rendah. ROE menunjukkan keuntungan yang rendah.'))


    @Rule(Fact(der_valued='low'), Fact(roa_valued='high'))
    def financial2_rule_1972(self):
        self.declare(Fact(recommendation='DER menunjukkan tingkat hutang yang rendah. ROA menunjukkan efisiensi tinggi.'))


    @Rule(Fact(der_valued='low'), Fact(roe_valued='low'))
    def financial2_rule_1973(self):
        self.declare(Fact(recommendation='DER menunjukkan tingkat hutang yang rendah. ROE menunjukkan keuntungan yang rendah.'))


    @Rule(Fact(roa_valued='high'), Fact(roe_valued='low'))
    def financial2_rule_1974(self):
        self.declare(Fact(recommendation='ROA menunjukkan efisiensi tinggi. ROE menunjukkan keuntungan yang rendah.'))


    @Rule(Fact(underwriter_valued='bad'), Fact(warrant_valued='good'))
    def financial2_rule_1975(self):
        self.declare(Fact(recommendation='Underwriter berkualitas buruk. Warrant menunjukkan kondisi baik.'))


    @Rule(Fact(underwriter_valued='bad'), Fact(net_income_valued='loss'))
    def financial2_rule_1976(self):
        self.declare(Fact(recommendation='Underwriter berkualitas buruk. Laba bersih menunjukkan kerugian.'))


    @Rule(Fact(underwriter_valued='bad'), Fact(per_valued='low'))
    def financial2_rule_1977(self):
        self.declare(Fact(recommendation='Underwriter berkualitas buruk. PER berada di tingkat yang rendah.'))


    @Rule(Fact(underwriter_valued='bad'), Fact(der_valued='low'))
    def financial2_rule_1978(self):
        self.declare(Fact(recommendation='Underwriter berkualitas buruk. DER menunjukkan tingkat hutang yang rendah.'))


    @Rule(Fact(underwriter_valued='bad'), Fact(roa_valued='low'))
    def financial2_rule_1979(self):
        self.declare(Fact(recommendation='Underwriter berkualitas buruk. ROA menunjukkan efisiensi rendah.'))


    @Rule(Fact(underwriter_valued='bad'), Fact(roe_valued='high'))
    def financial2_rule_1980(self):
        self.declare(Fact(recommendation='Underwriter berkualitas buruk. ROE menunjukkan keuntungan yang tinggi.'))


    @Rule(Fact(warrant_valued='good'), Fact(net_income_valued='loss'))
    def financial2_rule_1981(self):
        self.declare(Fact(recommendation='Warrant menunjukkan kondisi baik. Laba bersih menunjukkan kerugian.'))


    @Rule(Fact(warrant_valued='good'), Fact(per_valued='low'))
    def financial2_rule_1982(self):
        self.declare(Fact(recommendation='Warrant menunjukkan kondisi baik. PER berada di tingkat yang rendah.'))


    @Rule(Fact(warrant_valued='good'), Fact(der_valued='low'))
    def financial2_rule_1983(self):
        self.declare(Fact(recommendation='Warrant menunjukkan kondisi baik. DER menunjukkan tingkat hutang yang rendah.'))


    @Rule(Fact(warrant_valued='good'), Fact(roa_valued='low'))
    def financial2_rule_1984(self):
        self.declare(Fact(recommendation='Warrant menunjukkan kondisi baik. ROA menunjukkan efisiensi rendah.'))


    @Rule(Fact(warrant_valued='good'), Fact(roe_valued='high'))
    def financial2_rule_1985(self):
        self.declare(Fact(recommendation='Warrant menunjukkan kondisi baik. ROE menunjukkan keuntungan yang tinggi.'))


    @Rule(Fact(net_income_valued='loss'), Fact(per_valued='low'))
    def financial2_rule_1986(self):
        self.declare(Fact(recommendation='Laba bersih menunjukkan kerugian. PER berada di tingkat yang rendah.'))


    @Rule(Fact(net_income_valued='loss'), Fact(der_valued='low'))
    def financial2_rule_1987(self):
        self.declare(Fact(recommendation='Laba bersih menunjukkan kerugian. DER menunjukkan tingkat hutang yang rendah.'))


    @Rule(Fact(net_income_valued='loss'), Fact(roa_valued='low'))
    def financial2_rule_1988(self):
        self.declare(Fact(recommendation='Laba bersih menunjukkan kerugian. ROA menunjukkan efisiensi rendah.'))


    @Rule(Fact(net_income_valued='loss'), Fact(roe_valued='high'))
    def financial2_rule_1989(self):
        self.declare(Fact(recommendation='Laba bersih menunjukkan kerugian. ROE menunjukkan keuntungan yang tinggi.'))


    @Rule(Fact(per_valued='low'), Fact(der_valued='low'))
    def financial2_rule_1990(self):
        self.declare(Fact(recommendation='PER berada di tingkat yang rendah. DER menunjukkan tingkat hutang yang rendah.'))


    @Rule(Fact(per_valued='low'), Fact(roa_valued='low'))
    def financial2_rule_1991(self):
        self.declare(Fact(recommendation='PER berada di tingkat yang rendah. ROA menunjukkan efisiensi rendah.'))


    @Rule(Fact(per_valued='low'), Fact(roe_valued='high'))
    def financial2_rule_1992(self):
        self.declare(Fact(recommendation='PER berada di tingkat yang rendah. ROE menunjukkan keuntungan yang tinggi.'))


    @Rule(Fact(der_valued='low'), Fact(roa_valued='low'))
    def financial2_rule_1993(self):
        self.declare(Fact(recommendation='DER menunjukkan tingkat hutang yang rendah. ROA menunjukkan efisiensi rendah.'))


    @Rule(Fact(der_valued='low'), Fact(roe_valued='high'))
    def financial2_rule_1994(self):
        self.declare(Fact(recommendation='DER menunjukkan tingkat hutang yang rendah. ROE menunjukkan keuntungan yang tinggi.'))


    @Rule(Fact(roa_valued='low'), Fact(roe_valued='high'))
    def financial2_rule_1995(self):
        self.declare(Fact(recommendation='ROA menunjukkan efisiensi rendah. ROE menunjukkan keuntungan yang tinggi.'))


    @Rule(Fact(underwriter_valued='bad'), Fact(warrant_valued='good'))
    def financial2_rule_1996(self):
        self.declare(Fact(recommendation='Underwriter berkualitas buruk. Warrant menunjukkan kondisi baik.'))


    @Rule(Fact(underwriter_valued='bad'), Fact(net_income_valued='loss'))
    def financial2_rule_1997(self):
        self.declare(Fact(recommendation='Underwriter berkualitas buruk. Laba bersih menunjukkan kerugian.'))


    @Rule(Fact(underwriter_valued='bad'), Fact(per_valued='low'))
    def financial2_rule_1998(self):
        self.declare(Fact(recommendation='Underwriter berkualitas buruk. PER berada di tingkat yang rendah.'))


    @Rule(Fact(underwriter_valued='bad'), Fact(der_valued='low'))
    def financial2_rule_1999(self):
        self.declare(Fact(recommendation='Underwriter berkualitas buruk. DER menunjukkan tingkat hutang yang rendah.'))


    @Rule(Fact(underwriter_valued='bad'), Fact(roa_valued='low'))
    def financial2_rule_2000(self):
        self.declare(Fact(recommendation='Underwriter berkualitas buruk. ROA menunjukkan efisiensi rendah.'))


    @Rule(Fact(underwriter_valued='bad'), Fact(roe_valued='low'))
    def financial2_rule_2001(self):
        self.declare(Fact(recommendation='Underwriter berkualitas buruk. ROE menunjukkan keuntungan yang rendah.'))


    @Rule(Fact(warrant_valued='good'), Fact(net_income_valued='loss'))
    def financial2_rule_2002(self):
        self.declare(Fact(recommendation='Warrant menunjukkan kondisi baik. Laba bersih menunjukkan kerugian.'))


    @Rule(Fact(warrant_valued='good'), Fact(per_valued='low'))
    def financial2_rule_2003(self):
        self.declare(Fact(recommendation='Warrant menunjukkan kondisi baik. PER berada di tingkat yang rendah.'))


    @Rule(Fact(warrant_valued='good'), Fact(der_valued='low'))
    def financial2_rule_2004(self):
        self.declare(Fact(recommendation='Warrant menunjukkan kondisi baik. DER menunjukkan tingkat hutang yang rendah.'))


    @Rule(Fact(warrant_valued='good'), Fact(roa_valued='low'))
    def financial2_rule_2005(self):
        self.declare(Fact(recommendation='Warrant menunjukkan kondisi baik. ROA menunjukkan efisiensi rendah.'))


    @Rule(Fact(warrant_valued='good'), Fact(roe_valued='low'))
    def financial2_rule_2006(self):
        self.declare(Fact(recommendation='Warrant menunjukkan kondisi baik. ROE menunjukkan keuntungan yang rendah.'))


    @Rule(Fact(net_income_valued='loss'), Fact(per_valued='low'))
    def financial2_rule_2007(self):
        self.declare(Fact(recommendation='Laba bersih menunjukkan kerugian. PER berada di tingkat yang rendah.'))


    @Rule(Fact(net_income_valued='loss'), Fact(der_valued='low'))
    def financial2_rule_2008(self):
        self.declare(Fact(recommendation='Laba bersih menunjukkan kerugian. DER menunjukkan tingkat hutang yang rendah.'))


    @Rule(Fact(net_income_valued='loss'), Fact(roa_valued='low'))
    def financial2_rule_2009(self):
        self.declare(Fact(recommendation='Laba bersih menunjukkan kerugian. ROA menunjukkan efisiensi rendah.'))


    @Rule(Fact(net_income_valued='loss'), Fact(roe_valued='low'))
    def financial2_rule_2010(self):
        self.declare(Fact(recommendation='Laba bersih menunjukkan kerugian. ROE menunjukkan keuntungan yang rendah.'))


    @Rule(Fact(per_valued='low'), Fact(der_valued='low'))
    def financial2_rule_2011(self):
        self.declare(Fact(recommendation='PER berada di tingkat yang rendah. DER menunjukkan tingkat hutang yang rendah.'))


    @Rule(Fact(per_valued='low'), Fact(roa_valued='low'))
    def financial2_rule_2012(self):
        self.declare(Fact(recommendation='PER berada di tingkat yang rendah. ROA menunjukkan efisiensi rendah.'))


    @Rule(Fact(per_valued='low'), Fact(roe_valued='low'))
    def financial2_rule_2013(self):
        self.declare(Fact(recommendation='PER berada di tingkat yang rendah. ROE menunjukkan keuntungan yang rendah.'))


    @Rule(Fact(der_valued='low'), Fact(roa_valued='low'))
    def financial2_rule_2014(self):
        self.declare(Fact(recommendation='DER menunjukkan tingkat hutang yang rendah. ROA menunjukkan efisiensi rendah.'))


    @Rule(Fact(der_valued='low'), Fact(roe_valued='low'))
    def financial2_rule_2015(self):
        self.declare(Fact(recommendation='DER menunjukkan tingkat hutang yang rendah. ROE menunjukkan keuntungan yang rendah.'))


    @Rule(Fact(roa_valued='low'), Fact(roe_valued='low'))
    def financial2_rule_2016(self):
        self.declare(Fact(recommendation='ROA menunjukkan efisiensi rendah. ROE menunjukkan keuntungan yang rendah.'))


    @Rule(Fact(underwriter_valued='bad'), Fact(warrant_valued='bad'))
    def financial2_rule_2017(self):
        self.declare(Fact(recommendation='Underwriter berkualitas buruk. Warrant menunjukkan kondisi buruk.'))


    @Rule(Fact(underwriter_valued='bad'), Fact(net_income_valued='profit'))
    def financial2_rule_2018(self):
        self.declare(Fact(recommendation='Underwriter berkualitas buruk. Laba bersih menunjukkan keuntungan.'))


    @Rule(Fact(underwriter_valued='bad'), Fact(per_valued='high'))
    def financial2_rule_2019(self):
        self.declare(Fact(recommendation='Underwriter berkualitas buruk. PER berada di tingkat yang tinggi.'))


    @Rule(Fact(underwriter_valued='bad'), Fact(der_valued='high'))
    def financial2_rule_2020(self):
        self.declare(Fact(recommendation='Underwriter berkualitas buruk. DER menunjukkan tingkat hutang yang tinggi.'))


    @Rule(Fact(underwriter_valued='bad'), Fact(roa_valued='high'))
    def financial2_rule_2021(self):
        self.declare(Fact(recommendation='Underwriter berkualitas buruk. ROA menunjukkan efisiensi tinggi.'))


    @Rule(Fact(underwriter_valued='bad'), Fact(roe_valued='high'))
    def financial2_rule_2022(self):
        self.declare(Fact(recommendation='Underwriter berkualitas buruk. ROE menunjukkan keuntungan yang tinggi.'))


    @Rule(Fact(warrant_valued='bad'), Fact(net_income_valued='profit'))
    def financial2_rule_2023(self):
        self.declare(Fact(recommendation='Warrant menunjukkan kondisi buruk. Laba bersih menunjukkan keuntungan.'))


    @Rule(Fact(warrant_valued='bad'), Fact(per_valued='high'))
    def financial2_rule_2024(self):
        self.declare(Fact(recommendation='Warrant menunjukkan kondisi buruk. PER berada di tingkat yang tinggi.'))


    @Rule(Fact(warrant_valued='bad'), Fact(der_valued='high'))
    def financial2_rule_2025(self):
        self.declare(Fact(recommendation='Warrant menunjukkan kondisi buruk. DER menunjukkan tingkat hutang yang tinggi.'))


    @Rule(Fact(warrant_valued='bad'), Fact(roa_valued='high'))
    def financial2_rule_2026(self):
        self.declare(Fact(recommendation='Warrant menunjukkan kondisi buruk. ROA menunjukkan efisiensi tinggi.'))


    @Rule(Fact(warrant_valued='bad'), Fact(roe_valued='high'))
    def financial2_rule_2027(self):
        self.declare(Fact(recommendation='Warrant menunjukkan kondisi buruk. ROE menunjukkan keuntungan yang tinggi.'))


    @Rule(Fact(net_income_valued='profit'), Fact(per_valued='high'))
    def financial2_rule_2028(self):
        self.declare(Fact(recommendation='Laba bersih menunjukkan keuntungan. PER berada di tingkat yang tinggi.'))


    @Rule(Fact(net_income_valued='profit'), Fact(der_valued='high'))
    def financial2_rule_2029(self):
        self.declare(Fact(recommendation='Laba bersih menunjukkan keuntungan. DER menunjukkan tingkat hutang yang tinggi.'))


    @Rule(Fact(net_income_valued='profit'), Fact(roa_valued='high'))
    def financial2_rule_2030(self):
        self.declare(Fact(recommendation='Laba bersih menunjukkan keuntungan. ROA menunjukkan efisiensi tinggi.'))


    @Rule(Fact(net_income_valued='profit'), Fact(roe_valued='high'))
    def financial2_rule_2031(self):
        self.declare(Fact(recommendation='Laba bersih menunjukkan keuntungan. ROE menunjukkan keuntungan yang tinggi.'))


    @Rule(Fact(per_valued='high'), Fact(der_valued='high'))
    def financial2_rule_2032(self):
        self.declare(Fact(recommendation='PER berada di tingkat yang tinggi. DER menunjukkan tingkat hutang yang tinggi.'))


    @Rule(Fact(per_valued='high'), Fact(roa_valued='high'))
    def financial2_rule_2033(self):
        self.declare(Fact(recommendation='PER berada di tingkat yang tinggi. ROA menunjukkan efisiensi tinggi.'))


    @Rule(Fact(per_valued='high'), Fact(roe_valued='high'))
    def financial2_rule_2034(self):
        self.declare(Fact(recommendation='PER berada di tingkat yang tinggi. ROE menunjukkan keuntungan yang tinggi.'))


    @Rule(Fact(der_valued='high'), Fact(roa_valued='high'))
    def financial2_rule_2035(self):
        self.declare(Fact(recommendation='DER menunjukkan tingkat hutang yang tinggi. ROA menunjukkan efisiensi tinggi.'))


    @Rule(Fact(der_valued='high'), Fact(roe_valued='high'))
    def financial2_rule_2036(self):
        self.declare(Fact(recommendation='DER menunjukkan tingkat hutang yang tinggi. ROE menunjukkan keuntungan yang tinggi.'))


    @Rule(Fact(roa_valued='high'), Fact(roe_valued='high'))
    def financial2_rule_2037(self):
        self.declare(Fact(recommendation='ROA menunjukkan efisiensi tinggi. ROE menunjukkan keuntungan yang tinggi.'))


    @Rule(Fact(underwriter_valued='bad'), Fact(warrant_valued='bad'))
    def financial2_rule_2038(self):
        self.declare(Fact(recommendation='Underwriter berkualitas buruk. Warrant menunjukkan kondisi buruk.'))


    @Rule(Fact(underwriter_valued='bad'), Fact(net_income_valued='profit'))
    def financial2_rule_2039(self):
        self.declare(Fact(recommendation='Underwriter berkualitas buruk. Laba bersih menunjukkan keuntungan.'))


    @Rule(Fact(underwriter_valued='bad'), Fact(per_valued='high'))
    def financial2_rule_2040(self):
        self.declare(Fact(recommendation='Underwriter berkualitas buruk. PER berada di tingkat yang tinggi.'))


    @Rule(Fact(underwriter_valued='bad'), Fact(der_valued='high'))
    def financial2_rule_2041(self):
        self.declare(Fact(recommendation='Underwriter berkualitas buruk. DER menunjukkan tingkat hutang yang tinggi.'))


    @Rule(Fact(underwriter_valued='bad'), Fact(roa_valued='high'))
    def financial2_rule_2042(self):
        self.declare(Fact(recommendation='Underwriter berkualitas buruk. ROA menunjukkan efisiensi tinggi.'))


    @Rule(Fact(underwriter_valued='bad'), Fact(roe_valued='low'))
    def financial2_rule_2043(self):
        self.declare(Fact(recommendation='Underwriter berkualitas buruk. ROE menunjukkan keuntungan yang rendah.'))


    @Rule(Fact(warrant_valued='bad'), Fact(net_income_valued='profit'))
    def financial2_rule_2044(self):
        self.declare(Fact(recommendation='Warrant menunjukkan kondisi buruk. Laba bersih menunjukkan keuntungan.'))


    @Rule(Fact(warrant_valued='bad'), Fact(per_valued='high'))
    def financial2_rule_2045(self):
        self.declare(Fact(recommendation='Warrant menunjukkan kondisi buruk. PER berada di tingkat yang tinggi.'))


    @Rule(Fact(warrant_valued='bad'), Fact(der_valued='high'))
    def financial2_rule_2046(self):
        self.declare(Fact(recommendation='Warrant menunjukkan kondisi buruk. DER menunjukkan tingkat hutang yang tinggi.'))


    @Rule(Fact(warrant_valued='bad'), Fact(roa_valued='high'))
    def financial2_rule_2047(self):
        self.declare(Fact(recommendation='Warrant menunjukkan kondisi buruk. ROA menunjukkan efisiensi tinggi.'))


    @Rule(Fact(warrant_valued='bad'), Fact(roe_valued='low'))
    def financial2_rule_2048(self):
        self.declare(Fact(recommendation='Warrant menunjukkan kondisi buruk. ROE menunjukkan keuntungan yang rendah.'))


    @Rule(Fact(net_income_valued='profit'), Fact(per_valued='high'))
    def financial2_rule_2049(self):
        self.declare(Fact(recommendation='Laba bersih menunjukkan keuntungan. PER berada di tingkat yang tinggi.'))


    @Rule(Fact(net_income_valued='profit'), Fact(der_valued='high'))
    def financial2_rule_2050(self):
        self.declare(Fact(recommendation='Laba bersih menunjukkan keuntungan. DER menunjukkan tingkat hutang yang tinggi.'))


    @Rule(Fact(net_income_valued='profit'), Fact(roa_valued='high'))
    def financial2_rule_2051(self):
        self.declare(Fact(recommendation='Laba bersih menunjukkan keuntungan. ROA menunjukkan efisiensi tinggi.'))


    @Rule(Fact(net_income_valued='profit'), Fact(roe_valued='low'))
    def financial2_rule_2052(self):
        self.declare(Fact(recommendation='Laba bersih menunjukkan keuntungan. ROE menunjukkan keuntungan yang rendah.'))


    @Rule(Fact(per_valued='high'), Fact(der_valued='high'))
    def financial2_rule_2053(self):
        self.declare(Fact(recommendation='PER berada di tingkat yang tinggi. DER menunjukkan tingkat hutang yang tinggi.'))


    @Rule(Fact(per_valued='high'), Fact(roa_valued='high'))
    def financial2_rule_2054(self):
        self.declare(Fact(recommendation='PER berada di tingkat yang tinggi. ROA menunjukkan efisiensi tinggi.'))


    @Rule(Fact(per_valued='high'), Fact(roe_valued='low'))
    def financial2_rule_2055(self):
        self.declare(Fact(recommendation='PER berada di tingkat yang tinggi. ROE menunjukkan keuntungan yang rendah.'))


    @Rule(Fact(der_valued='high'), Fact(roa_valued='high'))
    def financial2_rule_2056(self):
        self.declare(Fact(recommendation='DER menunjukkan tingkat hutang yang tinggi. ROA menunjukkan efisiensi tinggi.'))


    @Rule(Fact(der_valued='high'), Fact(roe_valued='low'))
    def financial2_rule_2057(self):
        self.declare(Fact(recommendation='DER menunjukkan tingkat hutang yang tinggi. ROE menunjukkan keuntungan yang rendah.'))


    @Rule(Fact(roa_valued='high'), Fact(roe_valued='low'))
    def financial2_rule_2058(self):
        self.declare(Fact(recommendation='ROA menunjukkan efisiensi tinggi. ROE menunjukkan keuntungan yang rendah.'))


    @Rule(Fact(underwriter_valued='bad'), Fact(warrant_valued='bad'))
    def financial2_rule_2059(self):
        self.declare(Fact(recommendation='Underwriter berkualitas buruk. Warrant menunjukkan kondisi buruk.'))


    @Rule(Fact(underwriter_valued='bad'), Fact(net_income_valued='profit'))
    def financial2_rule_2060(self):
        self.declare(Fact(recommendation='Underwriter berkualitas buruk. Laba bersih menunjukkan keuntungan.'))


    @Rule(Fact(underwriter_valued='bad'), Fact(per_valued='high'))
    def financial2_rule_2061(self):
        self.declare(Fact(recommendation='Underwriter berkualitas buruk. PER berada di tingkat yang tinggi.'))


    @Rule(Fact(underwriter_valued='bad'), Fact(der_valued='high'))
    def financial2_rule_2062(self):
        self.declare(Fact(recommendation='Underwriter berkualitas buruk. DER menunjukkan tingkat hutang yang tinggi.'))


    @Rule(Fact(underwriter_valued='bad'), Fact(roa_valued='low'))
    def financial2_rule_2063(self):
        self.declare(Fact(recommendation='Underwriter berkualitas buruk. ROA menunjukkan efisiensi rendah.'))


    @Rule(Fact(underwriter_valued='bad'), Fact(roe_valued='high'))
    def financial2_rule_2064(self):
        self.declare(Fact(recommendation='Underwriter berkualitas buruk. ROE menunjukkan keuntungan yang tinggi.'))


    @Rule(Fact(warrant_valued='bad'), Fact(net_income_valued='profit'))
    def financial2_rule_2065(self):
        self.declare(Fact(recommendation='Warrant menunjukkan kondisi buruk. Laba bersih menunjukkan keuntungan.'))


    @Rule(Fact(warrant_valued='bad'), Fact(per_valued='high'))
    def financial2_rule_2066(self):
        self.declare(Fact(recommendation='Warrant menunjukkan kondisi buruk. PER berada di tingkat yang tinggi.'))


    @Rule(Fact(warrant_valued='bad'), Fact(der_valued='high'))
    def financial2_rule_2067(self):
        self.declare(Fact(recommendation='Warrant menunjukkan kondisi buruk. DER menunjukkan tingkat hutang yang tinggi.'))


    @Rule(Fact(warrant_valued='bad'), Fact(roa_valued='low'))
    def financial2_rule_2068(self):
        self.declare(Fact(recommendation='Warrant menunjukkan kondisi buruk. ROA menunjukkan efisiensi rendah.'))


    @Rule(Fact(warrant_valued='bad'), Fact(roe_valued='high'))
    def financial2_rule_2069(self):
        self.declare(Fact(recommendation='Warrant menunjukkan kondisi buruk. ROE menunjukkan keuntungan yang tinggi.'))


    @Rule(Fact(net_income_valued='profit'), Fact(per_valued='high'))
    def financial2_rule_2070(self):
        self.declare(Fact(recommendation='Laba bersih menunjukkan keuntungan. PER berada di tingkat yang tinggi.'))


    @Rule(Fact(net_income_valued='profit'), Fact(der_valued='high'))
    def financial2_rule_2071(self):
        self.declare(Fact(recommendation='Laba bersih menunjukkan keuntungan. DER menunjukkan tingkat hutang yang tinggi.'))


    @Rule(Fact(net_income_valued='profit'), Fact(roa_valued='low'))
    def financial2_rule_2072(self):
        self.declare(Fact(recommendation='Laba bersih menunjukkan keuntungan. ROA menunjukkan efisiensi rendah.'))


    @Rule(Fact(net_income_valued='profit'), Fact(roe_valued='high'))
    def financial2_rule_2073(self):
        self.declare(Fact(recommendation='Laba bersih menunjukkan keuntungan. ROE menunjukkan keuntungan yang tinggi.'))


    @Rule(Fact(per_valued='high'), Fact(der_valued='high'))
    def financial2_rule_2074(self):
        self.declare(Fact(recommendation='PER berada di tingkat yang tinggi. DER menunjukkan tingkat hutang yang tinggi.'))


    @Rule(Fact(per_valued='high'), Fact(roa_valued='low'))
    def financial2_rule_2075(self):
        self.declare(Fact(recommendation='PER berada di tingkat yang tinggi. ROA menunjukkan efisiensi rendah.'))


    @Rule(Fact(per_valued='high'), Fact(roe_valued='high'))
    def financial2_rule_2076(self):
        self.declare(Fact(recommendation='PER berada di tingkat yang tinggi. ROE menunjukkan keuntungan yang tinggi.'))


    @Rule(Fact(der_valued='high'), Fact(roa_valued='low'))
    def financial2_rule_2077(self):
        self.declare(Fact(recommendation='DER menunjukkan tingkat hutang yang tinggi. ROA menunjukkan efisiensi rendah.'))


    @Rule(Fact(der_valued='high'), Fact(roe_valued='high'))
    def financial2_rule_2078(self):
        self.declare(Fact(recommendation='DER menunjukkan tingkat hutang yang tinggi. ROE menunjukkan keuntungan yang tinggi.'))


    @Rule(Fact(roa_valued='low'), Fact(roe_valued='high'))
    def financial2_rule_2079(self):
        self.declare(Fact(recommendation='ROA menunjukkan efisiensi rendah. ROE menunjukkan keuntungan yang tinggi.'))


    @Rule(Fact(underwriter_valued='bad'), Fact(warrant_valued='bad'))
    def financial2_rule_2080(self):
        self.declare(Fact(recommendation='Underwriter berkualitas buruk. Warrant menunjukkan kondisi buruk.'))


    @Rule(Fact(underwriter_valued='bad'), Fact(net_income_valued='profit'))
    def financial2_rule_2081(self):
        self.declare(Fact(recommendation='Underwriter berkualitas buruk. Laba bersih menunjukkan keuntungan.'))


    @Rule(Fact(underwriter_valued='bad'), Fact(per_valued='high'))
    def financial2_rule_2082(self):
        self.declare(Fact(recommendation='Underwriter berkualitas buruk. PER berada di tingkat yang tinggi.'))


    @Rule(Fact(underwriter_valued='bad'), Fact(der_valued='high'))
    def financial2_rule_2083(self):
        self.declare(Fact(recommendation='Underwriter berkualitas buruk. DER menunjukkan tingkat hutang yang tinggi.'))


    @Rule(Fact(underwriter_valued='bad'), Fact(roa_valued='low'))
    def financial2_rule_2084(self):
        self.declare(Fact(recommendation='Underwriter berkualitas buruk. ROA menunjukkan efisiensi rendah.'))


    @Rule(Fact(underwriter_valued='bad'), Fact(roe_valued='low'))
    def financial2_rule_2085(self):
        self.declare(Fact(recommendation='Underwriter berkualitas buruk. ROE menunjukkan keuntungan yang rendah.'))


    @Rule(Fact(warrant_valued='bad'), Fact(net_income_valued='profit'))
    def financial2_rule_2086(self):
        self.declare(Fact(recommendation='Warrant menunjukkan kondisi buruk. Laba bersih menunjukkan keuntungan.'))


    @Rule(Fact(warrant_valued='bad'), Fact(per_valued='high'))
    def financial2_rule_2087(self):
        self.declare(Fact(recommendation='Warrant menunjukkan kondisi buruk. PER berada di tingkat yang tinggi.'))


    @Rule(Fact(warrant_valued='bad'), Fact(der_valued='high'))
    def financial2_rule_2088(self):
        self.declare(Fact(recommendation='Warrant menunjukkan kondisi buruk. DER menunjukkan tingkat hutang yang tinggi.'))


    @Rule(Fact(warrant_valued='bad'), Fact(roa_valued='low'))
    def financial2_rule_2089(self):
        self.declare(Fact(recommendation='Warrant menunjukkan kondisi buruk. ROA menunjukkan efisiensi rendah.'))


    @Rule(Fact(warrant_valued='bad'), Fact(roe_valued='low'))
    def financial2_rule_2090(self):
        self.declare(Fact(recommendation='Warrant menunjukkan kondisi buruk. ROE menunjukkan keuntungan yang rendah.'))


    @Rule(Fact(net_income_valued='profit'), Fact(per_valued='high'))
    def financial2_rule_2091(self):
        self.declare(Fact(recommendation='Laba bersih menunjukkan keuntungan. PER berada di tingkat yang tinggi.'))


    @Rule(Fact(net_income_valued='profit'), Fact(der_valued='high'))
    def financial2_rule_2092(self):
        self.declare(Fact(recommendation='Laba bersih menunjukkan keuntungan. DER menunjukkan tingkat hutang yang tinggi.'))


    @Rule(Fact(net_income_valued='profit'), Fact(roa_valued='low'))
    def financial2_rule_2093(self):
        self.declare(Fact(recommendation='Laba bersih menunjukkan keuntungan. ROA menunjukkan efisiensi rendah.'))


    @Rule(Fact(net_income_valued='profit'), Fact(roe_valued='low'))
    def financial2_rule_2094(self):
        self.declare(Fact(recommendation='Laba bersih menunjukkan keuntungan. ROE menunjukkan keuntungan yang rendah.'))


    @Rule(Fact(per_valued='high'), Fact(der_valued='high'))
    def financial2_rule_2095(self):
        self.declare(Fact(recommendation='PER berada di tingkat yang tinggi. DER menunjukkan tingkat hutang yang tinggi.'))


    @Rule(Fact(per_valued='high'), Fact(roa_valued='low'))
    def financial2_rule_2096(self):
        self.declare(Fact(recommendation='PER berada di tingkat yang tinggi. ROA menunjukkan efisiensi rendah.'))


    @Rule(Fact(per_valued='high'), Fact(roe_valued='low'))
    def financial2_rule_2097(self):
        self.declare(Fact(recommendation='PER berada di tingkat yang tinggi. ROE menunjukkan keuntungan yang rendah.'))


    @Rule(Fact(der_valued='high'), Fact(roa_valued='low'))
    def financial2_rule_2098(self):
        self.declare(Fact(recommendation='DER menunjukkan tingkat hutang yang tinggi. ROA menunjukkan efisiensi rendah.'))


    @Rule(Fact(der_valued='high'), Fact(roe_valued='low'))
    def financial2_rule_2099(self):
        self.declare(Fact(recommendation='DER menunjukkan tingkat hutang yang tinggi. ROE menunjukkan keuntungan yang rendah.'))


    @Rule(Fact(roa_valued='low'), Fact(roe_valued='low'))
    def financial2_rule_2100(self):
        self.declare(Fact(recommendation='ROA menunjukkan efisiensi rendah. ROE menunjukkan keuntungan yang rendah.'))


    @Rule(Fact(underwriter_valued='bad'), Fact(warrant_valued='bad'))
    def financial2_rule_2101(self):
        self.declare(Fact(recommendation='Underwriter berkualitas buruk. Warrant menunjukkan kondisi buruk.'))


    @Rule(Fact(underwriter_valued='bad'), Fact(net_income_valued='profit'))
    def financial2_rule_2102(self):
        self.declare(Fact(recommendation='Underwriter berkualitas buruk. Laba bersih menunjukkan keuntungan.'))


    @Rule(Fact(underwriter_valued='bad'), Fact(per_valued='high'))
    def financial2_rule_2103(self):
        self.declare(Fact(recommendation='Underwriter berkualitas buruk. PER berada di tingkat yang tinggi.'))


    @Rule(Fact(underwriter_valued='bad'), Fact(der_valued='low'))
    def financial2_rule_2104(self):
        self.declare(Fact(recommendation='Underwriter berkualitas buruk. DER menunjukkan tingkat hutang yang rendah.'))


    @Rule(Fact(underwriter_valued='bad'), Fact(roa_valued='high'))
    def financial2_rule_2105(self):
        self.declare(Fact(recommendation='Underwriter berkualitas buruk. ROA menunjukkan efisiensi tinggi.'))


    @Rule(Fact(underwriter_valued='bad'), Fact(roe_valued='high'))
    def financial2_rule_2106(self):
        self.declare(Fact(recommendation='Underwriter berkualitas buruk. ROE menunjukkan keuntungan yang tinggi.'))


    @Rule(Fact(warrant_valued='bad'), Fact(net_income_valued='profit'))
    def financial2_rule_2107(self):
        self.declare(Fact(recommendation='Warrant menunjukkan kondisi buruk. Laba bersih menunjukkan keuntungan.'))


    @Rule(Fact(warrant_valued='bad'), Fact(per_valued='high'))
    def financial2_rule_2108(self):
        self.declare(Fact(recommendation='Warrant menunjukkan kondisi buruk. PER berada di tingkat yang tinggi.'))


    @Rule(Fact(warrant_valued='bad'), Fact(der_valued='low'))
    def financial2_rule_2109(self):
        self.declare(Fact(recommendation='Warrant menunjukkan kondisi buruk. DER menunjukkan tingkat hutang yang rendah.'))


    @Rule(Fact(warrant_valued='bad'), Fact(roa_valued='high'))
    def financial2_rule_2110(self):
        self.declare(Fact(recommendation='Warrant menunjukkan kondisi buruk. ROA menunjukkan efisiensi tinggi.'))


    @Rule(Fact(warrant_valued='bad'), Fact(roe_valued='high'))
    def financial2_rule_2111(self):
        self.declare(Fact(recommendation='Warrant menunjukkan kondisi buruk. ROE menunjukkan keuntungan yang tinggi.'))


    @Rule(Fact(net_income_valued='profit'), Fact(per_valued='high'))
    def financial2_rule_2112(self):
        self.declare(Fact(recommendation='Laba bersih menunjukkan keuntungan. PER berada di tingkat yang tinggi.'))


    @Rule(Fact(net_income_valued='profit'), Fact(der_valued='low'))
    def financial2_rule_2113(self):
        self.declare(Fact(recommendation='Laba bersih menunjukkan keuntungan. DER menunjukkan tingkat hutang yang rendah.'))


    @Rule(Fact(net_income_valued='profit'), Fact(roa_valued='high'))
    def financial2_rule_2114(self):
        self.declare(Fact(recommendation='Laba bersih menunjukkan keuntungan. ROA menunjukkan efisiensi tinggi.'))


    @Rule(Fact(net_income_valued='profit'), Fact(roe_valued='high'))
    def financial2_rule_2115(self):
        self.declare(Fact(recommendation='Laba bersih menunjukkan keuntungan. ROE menunjukkan keuntungan yang tinggi.'))


    @Rule(Fact(per_valued='high'), Fact(der_valued='low'))
    def financial2_rule_2116(self):
        self.declare(Fact(recommendation='PER berada di tingkat yang tinggi. DER menunjukkan tingkat hutang yang rendah.'))


    @Rule(Fact(per_valued='high'), Fact(roa_valued='high'))
    def financial2_rule_2117(self):
        self.declare(Fact(recommendation='PER berada di tingkat yang tinggi. ROA menunjukkan efisiensi tinggi.'))


    @Rule(Fact(per_valued='high'), Fact(roe_valued='high'))
    def financial2_rule_2118(self):
        self.declare(Fact(recommendation='PER berada di tingkat yang tinggi. ROE menunjukkan keuntungan yang tinggi.'))


    @Rule(Fact(der_valued='low'), Fact(roa_valued='high'))
    def financial2_rule_2119(self):
        self.declare(Fact(recommendation='DER menunjukkan tingkat hutang yang rendah. ROA menunjukkan efisiensi tinggi.'))


    @Rule(Fact(der_valued='low'), Fact(roe_valued='high'))
    def financial2_rule_2120(self):
        self.declare(Fact(recommendation='DER menunjukkan tingkat hutang yang rendah. ROE menunjukkan keuntungan yang tinggi.'))


    @Rule(Fact(roa_valued='high'), Fact(roe_valued='high'))
    def financial2_rule_2121(self):
        self.declare(Fact(recommendation='ROA menunjukkan efisiensi tinggi. ROE menunjukkan keuntungan yang tinggi.'))


    @Rule(Fact(underwriter_valued='bad'), Fact(warrant_valued='bad'))
    def financial2_rule_2122(self):
        self.declare(Fact(recommendation='Underwriter berkualitas buruk. Warrant menunjukkan kondisi buruk.'))


    @Rule(Fact(underwriter_valued='bad'), Fact(net_income_valued='profit'))
    def financial2_rule_2123(self):
        self.declare(Fact(recommendation='Underwriter berkualitas buruk. Laba bersih menunjukkan keuntungan.'))


    @Rule(Fact(underwriter_valued='bad'), Fact(per_valued='high'))
    def financial2_rule_2124(self):
        self.declare(Fact(recommendation='Underwriter berkualitas buruk. PER berada di tingkat yang tinggi.'))


    @Rule(Fact(underwriter_valued='bad'), Fact(der_valued='low'))
    def financial2_rule_2125(self):
        self.declare(Fact(recommendation='Underwriter berkualitas buruk. DER menunjukkan tingkat hutang yang rendah.'))


    @Rule(Fact(underwriter_valued='bad'), Fact(roa_valued='high'))
    def financial2_rule_2126(self):
        self.declare(Fact(recommendation='Underwriter berkualitas buruk. ROA menunjukkan efisiensi tinggi.'))


    @Rule(Fact(underwriter_valued='bad'), Fact(roe_valued='low'))
    def financial2_rule_2127(self):
        self.declare(Fact(recommendation='Underwriter berkualitas buruk. ROE menunjukkan keuntungan yang rendah.'))


    @Rule(Fact(warrant_valued='bad'), Fact(net_income_valued='profit'))
    def financial2_rule_2128(self):
        self.declare(Fact(recommendation='Warrant menunjukkan kondisi buruk. Laba bersih menunjukkan keuntungan.'))


    @Rule(Fact(warrant_valued='bad'), Fact(per_valued='high'))
    def financial2_rule_2129(self):
        self.declare(Fact(recommendation='Warrant menunjukkan kondisi buruk. PER berada di tingkat yang tinggi.'))


    @Rule(Fact(warrant_valued='bad'), Fact(der_valued='low'))
    def financial2_rule_2130(self):
        self.declare(Fact(recommendation='Warrant menunjukkan kondisi buruk. DER menunjukkan tingkat hutang yang rendah.'))


    @Rule(Fact(warrant_valued='bad'), Fact(roa_valued='high'))
    def financial2_rule_2131(self):
        self.declare(Fact(recommendation='Warrant menunjukkan kondisi buruk. ROA menunjukkan efisiensi tinggi.'))


    @Rule(Fact(warrant_valued='bad'), Fact(roe_valued='low'))
    def financial2_rule_2132(self):
        self.declare(Fact(recommendation='Warrant menunjukkan kondisi buruk. ROE menunjukkan keuntungan yang rendah.'))


    @Rule(Fact(net_income_valued='profit'), Fact(per_valued='high'))
    def financial2_rule_2133(self):
        self.declare(Fact(recommendation='Laba bersih menunjukkan keuntungan. PER berada di tingkat yang tinggi.'))


    @Rule(Fact(net_income_valued='profit'), Fact(der_valued='low'))
    def financial2_rule_2134(self):
        self.declare(Fact(recommendation='Laba bersih menunjukkan keuntungan. DER menunjukkan tingkat hutang yang rendah.'))


    @Rule(Fact(net_income_valued='profit'), Fact(roa_valued='high'))
    def financial2_rule_2135(self):
        self.declare(Fact(recommendation='Laba bersih menunjukkan keuntungan. ROA menunjukkan efisiensi tinggi.'))


    @Rule(Fact(net_income_valued='profit'), Fact(roe_valued='low'))
    def financial2_rule_2136(self):
        self.declare(Fact(recommendation='Laba bersih menunjukkan keuntungan. ROE menunjukkan keuntungan yang rendah.'))


    @Rule(Fact(per_valued='high'), Fact(der_valued='low'))
    def financial2_rule_2137(self):
        self.declare(Fact(recommendation='PER berada di tingkat yang tinggi. DER menunjukkan tingkat hutang yang rendah.'))


    @Rule(Fact(per_valued='high'), Fact(roa_valued='high'))
    def financial2_rule_2138(self):
        self.declare(Fact(recommendation='PER berada di tingkat yang tinggi. ROA menunjukkan efisiensi tinggi.'))


    @Rule(Fact(per_valued='high'), Fact(roe_valued='low'))
    def financial2_rule_2139(self):
        self.declare(Fact(recommendation='PER berada di tingkat yang tinggi. ROE menunjukkan keuntungan yang rendah.'))


    @Rule(Fact(der_valued='low'), Fact(roa_valued='high'))
    def financial2_rule_2140(self):
        self.declare(Fact(recommendation='DER menunjukkan tingkat hutang yang rendah. ROA menunjukkan efisiensi tinggi.'))


    @Rule(Fact(der_valued='low'), Fact(roe_valued='low'))
    def financial2_rule_2141(self):
        self.declare(Fact(recommendation='DER menunjukkan tingkat hutang yang rendah. ROE menunjukkan keuntungan yang rendah.'))


    @Rule(Fact(roa_valued='high'), Fact(roe_valued='low'))
    def financial2_rule_2142(self):
        self.declare(Fact(recommendation='ROA menunjukkan efisiensi tinggi. ROE menunjukkan keuntungan yang rendah.'))


    @Rule(Fact(underwriter_valued='bad'), Fact(warrant_valued='bad'))
    def financial2_rule_2143(self):
        self.declare(Fact(recommendation='Underwriter berkualitas buruk. Warrant menunjukkan kondisi buruk.'))


    @Rule(Fact(underwriter_valued='bad'), Fact(net_income_valued='profit'))
    def financial2_rule_2144(self):
        self.declare(Fact(recommendation='Underwriter berkualitas buruk. Laba bersih menunjukkan keuntungan.'))


    @Rule(Fact(underwriter_valued='bad'), Fact(per_valued='high'))
    def financial2_rule_2145(self):
        self.declare(Fact(recommendation='Underwriter berkualitas buruk. PER berada di tingkat yang tinggi.'))


    @Rule(Fact(underwriter_valued='bad'), Fact(der_valued='low'))
    def financial2_rule_2146(self):
        self.declare(Fact(recommendation='Underwriter berkualitas buruk. DER menunjukkan tingkat hutang yang rendah.'))


    @Rule(Fact(underwriter_valued='bad'), Fact(roa_valued='low'))
    def financial2_rule_2147(self):
        self.declare(Fact(recommendation='Underwriter berkualitas buruk. ROA menunjukkan efisiensi rendah.'))


    @Rule(Fact(underwriter_valued='bad'), Fact(roe_valued='high'))
    def financial2_rule_2148(self):
        self.declare(Fact(recommendation='Underwriter berkualitas buruk. ROE menunjukkan keuntungan yang tinggi.'))


    @Rule(Fact(warrant_valued='bad'), Fact(net_income_valued='profit'))
    def financial2_rule_2149(self):
        self.declare(Fact(recommendation='Warrant menunjukkan kondisi buruk. Laba bersih menunjukkan keuntungan.'))


    @Rule(Fact(warrant_valued='bad'), Fact(per_valued='high'))
    def financial2_rule_2150(self):
        self.declare(Fact(recommendation='Warrant menunjukkan kondisi buruk. PER berada di tingkat yang tinggi.'))


    @Rule(Fact(warrant_valued='bad'), Fact(der_valued='low'))
    def financial2_rule_2151(self):
        self.declare(Fact(recommendation='Warrant menunjukkan kondisi buruk. DER menunjukkan tingkat hutang yang rendah.'))


    @Rule(Fact(warrant_valued='bad'), Fact(roa_valued='low'))
    def financial2_rule_2152(self):
        self.declare(Fact(recommendation='Warrant menunjukkan kondisi buruk. ROA menunjukkan efisiensi rendah.'))


    @Rule(Fact(warrant_valued='bad'), Fact(roe_valued='high'))
    def financial2_rule_2153(self):
        self.declare(Fact(recommendation='Warrant menunjukkan kondisi buruk. ROE menunjukkan keuntungan yang tinggi.'))


    @Rule(Fact(net_income_valued='profit'), Fact(per_valued='high'))
    def financial2_rule_2154(self):
        self.declare(Fact(recommendation='Laba bersih menunjukkan keuntungan. PER berada di tingkat yang tinggi.'))


    @Rule(Fact(net_income_valued='profit'), Fact(der_valued='low'))
    def financial2_rule_2155(self):
        self.declare(Fact(recommendation='Laba bersih menunjukkan keuntungan. DER menunjukkan tingkat hutang yang rendah.'))


    @Rule(Fact(net_income_valued='profit'), Fact(roa_valued='low'))
    def financial2_rule_2156(self):
        self.declare(Fact(recommendation='Laba bersih menunjukkan keuntungan. ROA menunjukkan efisiensi rendah.'))


    @Rule(Fact(net_income_valued='profit'), Fact(roe_valued='high'))
    def financial2_rule_2157(self):
        self.declare(Fact(recommendation='Laba bersih menunjukkan keuntungan. ROE menunjukkan keuntungan yang tinggi.'))


    @Rule(Fact(per_valued='high'), Fact(der_valued='low'))
    def financial2_rule_2158(self):
        self.declare(Fact(recommendation='PER berada di tingkat yang tinggi. DER menunjukkan tingkat hutang yang rendah.'))


    @Rule(Fact(per_valued='high'), Fact(roa_valued='low'))
    def financial2_rule_2159(self):
        self.declare(Fact(recommendation='PER berada di tingkat yang tinggi. ROA menunjukkan efisiensi rendah.'))


    @Rule(Fact(per_valued='high'), Fact(roe_valued='high'))
    def financial2_rule_2160(self):
        self.declare(Fact(recommendation='PER berada di tingkat yang tinggi. ROE menunjukkan keuntungan yang tinggi.'))


    @Rule(Fact(der_valued='low'), Fact(roa_valued='low'))
    def financial2_rule_2161(self):
        self.declare(Fact(recommendation='DER menunjukkan tingkat hutang yang rendah. ROA menunjukkan efisiensi rendah.'))


    @Rule(Fact(der_valued='low'), Fact(roe_valued='high'))
    def financial2_rule_2162(self):
        self.declare(Fact(recommendation='DER menunjukkan tingkat hutang yang rendah. ROE menunjukkan keuntungan yang tinggi.'))


    @Rule(Fact(roa_valued='low'), Fact(roe_valued='high'))
    def financial2_rule_2163(self):
        self.declare(Fact(recommendation='ROA menunjukkan efisiensi rendah. ROE menunjukkan keuntungan yang tinggi.'))


    @Rule(Fact(underwriter_valued='bad'), Fact(warrant_valued='bad'))
    def financial2_rule_2164(self):
        self.declare(Fact(recommendation='Underwriter berkualitas buruk. Warrant menunjukkan kondisi buruk.'))


    @Rule(Fact(underwriter_valued='bad'), Fact(net_income_valued='profit'))
    def financial2_rule_2165(self):
        self.declare(Fact(recommendation='Underwriter berkualitas buruk. Laba bersih menunjukkan keuntungan.'))


    @Rule(Fact(underwriter_valued='bad'), Fact(per_valued='high'))
    def financial2_rule_2166(self):
        self.declare(Fact(recommendation='Underwriter berkualitas buruk. PER berada di tingkat yang tinggi.'))


    @Rule(Fact(underwriter_valued='bad'), Fact(der_valued='low'))
    def financial2_rule_2167(self):
        self.declare(Fact(recommendation='Underwriter berkualitas buruk. DER menunjukkan tingkat hutang yang rendah.'))


    @Rule(Fact(underwriter_valued='bad'), Fact(roa_valued='low'))
    def financial2_rule_2168(self):
        self.declare(Fact(recommendation='Underwriter berkualitas buruk. ROA menunjukkan efisiensi rendah.'))


    @Rule(Fact(underwriter_valued='bad'), Fact(roe_valued='low'))
    def financial2_rule_2169(self):
        self.declare(Fact(recommendation='Underwriter berkualitas buruk. ROE menunjukkan keuntungan yang rendah.'))


    @Rule(Fact(warrant_valued='bad'), Fact(net_income_valued='profit'))
    def financial2_rule_2170(self):
        self.declare(Fact(recommendation='Warrant menunjukkan kondisi buruk. Laba bersih menunjukkan keuntungan.'))


    @Rule(Fact(warrant_valued='bad'), Fact(per_valued='high'))
    def financial2_rule_2171(self):
        self.declare(Fact(recommendation='Warrant menunjukkan kondisi buruk. PER berada di tingkat yang tinggi.'))


    @Rule(Fact(warrant_valued='bad'), Fact(der_valued='low'))
    def financial2_rule_2172(self):
        self.declare(Fact(recommendation='Warrant menunjukkan kondisi buruk. DER menunjukkan tingkat hutang yang rendah.'))


    @Rule(Fact(warrant_valued='bad'), Fact(roa_valued='low'))
    def financial2_rule_2173(self):
        self.declare(Fact(recommendation='Warrant menunjukkan kondisi buruk. ROA menunjukkan efisiensi rendah.'))


    @Rule(Fact(warrant_valued='bad'), Fact(roe_valued='low'))
    def financial2_rule_2174(self):
        self.declare(Fact(recommendation='Warrant menunjukkan kondisi buruk. ROE menunjukkan keuntungan yang rendah.'))


    @Rule(Fact(net_income_valued='profit'), Fact(per_valued='high'))
    def financial2_rule_2175(self):
        self.declare(Fact(recommendation='Laba bersih menunjukkan keuntungan. PER berada di tingkat yang tinggi.'))


    @Rule(Fact(net_income_valued='profit'), Fact(der_valued='low'))
    def financial2_rule_2176(self):
        self.declare(Fact(recommendation='Laba bersih menunjukkan keuntungan. DER menunjukkan tingkat hutang yang rendah.'))


    @Rule(Fact(net_income_valued='profit'), Fact(roa_valued='low'))
    def financial2_rule_2177(self):
        self.declare(Fact(recommendation='Laba bersih menunjukkan keuntungan. ROA menunjukkan efisiensi rendah.'))


    @Rule(Fact(net_income_valued='profit'), Fact(roe_valued='low'))
    def financial2_rule_2178(self):
        self.declare(Fact(recommendation='Laba bersih menunjukkan keuntungan. ROE menunjukkan keuntungan yang rendah.'))


    @Rule(Fact(per_valued='high'), Fact(der_valued='low'))
    def financial2_rule_2179(self):
        self.declare(Fact(recommendation='PER berada di tingkat yang tinggi. DER menunjukkan tingkat hutang yang rendah.'))


    @Rule(Fact(per_valued='high'), Fact(roa_valued='low'))
    def financial2_rule_2180(self):
        self.declare(Fact(recommendation='PER berada di tingkat yang tinggi. ROA menunjukkan efisiensi rendah.'))


    @Rule(Fact(per_valued='high'), Fact(roe_valued='low'))
    def financial2_rule_2181(self):
        self.declare(Fact(recommendation='PER berada di tingkat yang tinggi. ROE menunjukkan keuntungan yang rendah.'))


    @Rule(Fact(der_valued='low'), Fact(roa_valued='low'))
    def financial2_rule_2182(self):
        self.declare(Fact(recommendation='DER menunjukkan tingkat hutang yang rendah. ROA menunjukkan efisiensi rendah.'))


    @Rule(Fact(der_valued='low'), Fact(roe_valued='low'))
    def financial2_rule_2183(self):
        self.declare(Fact(recommendation='DER menunjukkan tingkat hutang yang rendah. ROE menunjukkan keuntungan yang rendah.'))


    @Rule(Fact(roa_valued='low'), Fact(roe_valued='low'))
    def financial2_rule_2184(self):
        self.declare(Fact(recommendation='ROA menunjukkan efisiensi rendah. ROE menunjukkan keuntungan yang rendah.'))


    @Rule(Fact(underwriter_valued='bad'), Fact(warrant_valued='bad'))
    def financial2_rule_2185(self):
        self.declare(Fact(recommendation='Underwriter berkualitas buruk. Warrant menunjukkan kondisi buruk.'))


    @Rule(Fact(underwriter_valued='bad'), Fact(net_income_valued='profit'))
    def financial2_rule_2186(self):
        self.declare(Fact(recommendation='Underwriter berkualitas buruk. Laba bersih menunjukkan keuntungan.'))


    @Rule(Fact(underwriter_valued='bad'), Fact(per_valued='low'))
    def financial2_rule_2187(self):
        self.declare(Fact(recommendation='Underwriter berkualitas buruk. PER berada di tingkat yang rendah.'))


    @Rule(Fact(underwriter_valued='bad'), Fact(der_valued='high'))
    def financial2_rule_2188(self):
        self.declare(Fact(recommendation='Underwriter berkualitas buruk. DER menunjukkan tingkat hutang yang tinggi.'))


    @Rule(Fact(underwriter_valued='bad'), Fact(roa_valued='high'))
    def financial2_rule_2189(self):
        self.declare(Fact(recommendation='Underwriter berkualitas buruk. ROA menunjukkan efisiensi tinggi.'))


    @Rule(Fact(underwriter_valued='bad'), Fact(roe_valued='high'))
    def financial2_rule_2190(self):
        self.declare(Fact(recommendation='Underwriter berkualitas buruk. ROE menunjukkan keuntungan yang tinggi.'))


    @Rule(Fact(warrant_valued='bad'), Fact(net_income_valued='profit'))
    def financial2_rule_2191(self):
        self.declare(Fact(recommendation='Warrant menunjukkan kondisi buruk. Laba bersih menunjukkan keuntungan.'))


    @Rule(Fact(warrant_valued='bad'), Fact(per_valued='low'))
    def financial2_rule_2192(self):
        self.declare(Fact(recommendation='Warrant menunjukkan kondisi buruk. PER berada di tingkat yang rendah.'))


    @Rule(Fact(warrant_valued='bad'), Fact(der_valued='high'))
    def financial2_rule_2193(self):
        self.declare(Fact(recommendation='Warrant menunjukkan kondisi buruk. DER menunjukkan tingkat hutang yang tinggi.'))


    @Rule(Fact(warrant_valued='bad'), Fact(roa_valued='high'))
    def financial2_rule_2194(self):
        self.declare(Fact(recommendation='Warrant menunjukkan kondisi buruk. ROA menunjukkan efisiensi tinggi.'))


    @Rule(Fact(warrant_valued='bad'), Fact(roe_valued='high'))
    def financial2_rule_2195(self):
        self.declare(Fact(recommendation='Warrant menunjukkan kondisi buruk. ROE menunjukkan keuntungan yang tinggi.'))


    @Rule(Fact(net_income_valued='profit'), Fact(per_valued='low'))
    def financial2_rule_2196(self):
        self.declare(Fact(recommendation='Laba bersih menunjukkan keuntungan. PER berada di tingkat yang rendah.'))


    @Rule(Fact(net_income_valued='profit'), Fact(der_valued='high'))
    def financial2_rule_2197(self):
        self.declare(Fact(recommendation='Laba bersih menunjukkan keuntungan. DER menunjukkan tingkat hutang yang tinggi.'))


    @Rule(Fact(net_income_valued='profit'), Fact(roa_valued='high'))
    def financial2_rule_2198(self):
        self.declare(Fact(recommendation='Laba bersih menunjukkan keuntungan. ROA menunjukkan efisiensi tinggi.'))


    @Rule(Fact(net_income_valued='profit'), Fact(roe_valued='high'))
    def financial2_rule_2199(self):
        self.declare(Fact(recommendation='Laba bersih menunjukkan keuntungan. ROE menunjukkan keuntungan yang tinggi.'))


    @Rule(Fact(per_valued='low'), Fact(der_valued='high'))
    def financial2_rule_2200(self):
        self.declare(Fact(recommendation='PER berada di tingkat yang rendah. DER menunjukkan tingkat hutang yang tinggi.'))


    @Rule(Fact(per_valued='low'), Fact(roa_valued='high'))
    def financial2_rule_2201(self):
        self.declare(Fact(recommendation='PER berada di tingkat yang rendah. ROA menunjukkan efisiensi tinggi.'))


    @Rule(Fact(per_valued='low'), Fact(roe_valued='high'))
    def financial2_rule_2202(self):
        self.declare(Fact(recommendation='PER berada di tingkat yang rendah. ROE menunjukkan keuntungan yang tinggi.'))


    @Rule(Fact(der_valued='high'), Fact(roa_valued='high'))
    def financial2_rule_2203(self):
        self.declare(Fact(recommendation='DER menunjukkan tingkat hutang yang tinggi. ROA menunjukkan efisiensi tinggi.'))


    @Rule(Fact(der_valued='high'), Fact(roe_valued='high'))
    def financial2_rule_2204(self):
        self.declare(Fact(recommendation='DER menunjukkan tingkat hutang yang tinggi. ROE menunjukkan keuntungan yang tinggi.'))


    @Rule(Fact(roa_valued='high'), Fact(roe_valued='high'))
    def financial2_rule_2205(self):
        self.declare(Fact(recommendation='ROA menunjukkan efisiensi tinggi. ROE menunjukkan keuntungan yang tinggi.'))


    @Rule(Fact(underwriter_valued='bad'), Fact(warrant_valued='bad'))
    def financial2_rule_2206(self):
        self.declare(Fact(recommendation='Underwriter berkualitas buruk. Warrant menunjukkan kondisi buruk.'))


    @Rule(Fact(underwriter_valued='bad'), Fact(net_income_valued='profit'))
    def financial2_rule_2207(self):
        self.declare(Fact(recommendation='Underwriter berkualitas buruk. Laba bersih menunjukkan keuntungan.'))


    @Rule(Fact(underwriter_valued='bad'), Fact(per_valued='low'))
    def financial2_rule_2208(self):
        self.declare(Fact(recommendation='Underwriter berkualitas buruk. PER berada di tingkat yang rendah.'))


    @Rule(Fact(underwriter_valued='bad'), Fact(der_valued='high'))
    def financial2_rule_2209(self):
        self.declare(Fact(recommendation='Underwriter berkualitas buruk. DER menunjukkan tingkat hutang yang tinggi.'))


    @Rule(Fact(underwriter_valued='bad'), Fact(roa_valued='high'))
    def financial2_rule_2210(self):
        self.declare(Fact(recommendation='Underwriter berkualitas buruk. ROA menunjukkan efisiensi tinggi.'))


    @Rule(Fact(underwriter_valued='bad'), Fact(roe_valued='low'))
    def financial2_rule_2211(self):
        self.declare(Fact(recommendation='Underwriter berkualitas buruk. ROE menunjukkan keuntungan yang rendah.'))


    @Rule(Fact(warrant_valued='bad'), Fact(net_income_valued='profit'))
    def financial2_rule_2212(self):
        self.declare(Fact(recommendation='Warrant menunjukkan kondisi buruk. Laba bersih menunjukkan keuntungan.'))


    @Rule(Fact(warrant_valued='bad'), Fact(per_valued='low'))
    def financial2_rule_2213(self):
        self.declare(Fact(recommendation='Warrant menunjukkan kondisi buruk. PER berada di tingkat yang rendah.'))


    @Rule(Fact(warrant_valued='bad'), Fact(der_valued='high'))
    def financial2_rule_2214(self):
        self.declare(Fact(recommendation='Warrant menunjukkan kondisi buruk. DER menunjukkan tingkat hutang yang tinggi.'))


    @Rule(Fact(warrant_valued='bad'), Fact(roa_valued='high'))
    def financial2_rule_2215(self):
        self.declare(Fact(recommendation='Warrant menunjukkan kondisi buruk. ROA menunjukkan efisiensi tinggi.'))


    @Rule(Fact(warrant_valued='bad'), Fact(roe_valued='low'))
    def financial2_rule_2216(self):
        self.declare(Fact(recommendation='Warrant menunjukkan kondisi buruk. ROE menunjukkan keuntungan yang rendah.'))


    @Rule(Fact(net_income_valued='profit'), Fact(per_valued='low'))
    def financial2_rule_2217(self):
        self.declare(Fact(recommendation='Laba bersih menunjukkan keuntungan. PER berada di tingkat yang rendah.'))


    @Rule(Fact(net_income_valued='profit'), Fact(der_valued='high'))
    def financial2_rule_2218(self):
        self.declare(Fact(recommendation='Laba bersih menunjukkan keuntungan. DER menunjukkan tingkat hutang yang tinggi.'))


    @Rule(Fact(net_income_valued='profit'), Fact(roa_valued='high'))
    def financial2_rule_2219(self):
        self.declare(Fact(recommendation='Laba bersih menunjukkan keuntungan. ROA menunjukkan efisiensi tinggi.'))


    @Rule(Fact(net_income_valued='profit'), Fact(roe_valued='low'))
    def financial2_rule_2220(self):
        self.declare(Fact(recommendation='Laba bersih menunjukkan keuntungan. ROE menunjukkan keuntungan yang rendah.'))


    @Rule(Fact(per_valued='low'), Fact(der_valued='high'))
    def financial2_rule_2221(self):
        self.declare(Fact(recommendation='PER berada di tingkat yang rendah. DER menunjukkan tingkat hutang yang tinggi.'))


    @Rule(Fact(per_valued='low'), Fact(roa_valued='high'))
    def financial2_rule_2222(self):
        self.declare(Fact(recommendation='PER berada di tingkat yang rendah. ROA menunjukkan efisiensi tinggi.'))


    @Rule(Fact(per_valued='low'), Fact(roe_valued='low'))
    def financial2_rule_2223(self):
        self.declare(Fact(recommendation='PER berada di tingkat yang rendah. ROE menunjukkan keuntungan yang rendah.'))


    @Rule(Fact(der_valued='high'), Fact(roa_valued='high'))
    def financial2_rule_2224(self):
        self.declare(Fact(recommendation='DER menunjukkan tingkat hutang yang tinggi. ROA menunjukkan efisiensi tinggi.'))


    @Rule(Fact(der_valued='high'), Fact(roe_valued='low'))
    def financial2_rule_2225(self):
        self.declare(Fact(recommendation='DER menunjukkan tingkat hutang yang tinggi. ROE menunjukkan keuntungan yang rendah.'))


    @Rule(Fact(roa_valued='high'), Fact(roe_valued='low'))
    def financial2_rule_2226(self):
        self.declare(Fact(recommendation='ROA menunjukkan efisiensi tinggi. ROE menunjukkan keuntungan yang rendah.'))


    @Rule(Fact(underwriter_valued='bad'), Fact(warrant_valued='bad'))
    def financial2_rule_2227(self):
        self.declare(Fact(recommendation='Underwriter berkualitas buruk. Warrant menunjukkan kondisi buruk.'))


    @Rule(Fact(underwriter_valued='bad'), Fact(net_income_valued='profit'))
    def financial2_rule_2228(self):
        self.declare(Fact(recommendation='Underwriter berkualitas buruk. Laba bersih menunjukkan keuntungan.'))


    @Rule(Fact(underwriter_valued='bad'), Fact(per_valued='low'))
    def financial2_rule_2229(self):
        self.declare(Fact(recommendation='Underwriter berkualitas buruk. PER berada di tingkat yang rendah.'))


    @Rule(Fact(underwriter_valued='bad'), Fact(der_valued='high'))
    def financial2_rule_2230(self):
        self.declare(Fact(recommendation='Underwriter berkualitas buruk. DER menunjukkan tingkat hutang yang tinggi.'))


    @Rule(Fact(underwriter_valued='bad'), Fact(roa_valued='low'))
    def financial2_rule_2231(self):
        self.declare(Fact(recommendation='Underwriter berkualitas buruk. ROA menunjukkan efisiensi rendah.'))


    @Rule(Fact(underwriter_valued='bad'), Fact(roe_valued='high'))
    def financial2_rule_2232(self):
        self.declare(Fact(recommendation='Underwriter berkualitas buruk. ROE menunjukkan keuntungan yang tinggi.'))


    @Rule(Fact(warrant_valued='bad'), Fact(net_income_valued='profit'))
    def financial2_rule_2233(self):
        self.declare(Fact(recommendation='Warrant menunjukkan kondisi buruk. Laba bersih menunjukkan keuntungan.'))


    @Rule(Fact(warrant_valued='bad'), Fact(per_valued='low'))
    def financial2_rule_2234(self):
        self.declare(Fact(recommendation='Warrant menunjukkan kondisi buruk. PER berada di tingkat yang rendah.'))


    @Rule(Fact(warrant_valued='bad'), Fact(der_valued='high'))
    def financial2_rule_2235(self):
        self.declare(Fact(recommendation='Warrant menunjukkan kondisi buruk. DER menunjukkan tingkat hutang yang tinggi.'))


    @Rule(Fact(warrant_valued='bad'), Fact(roa_valued='low'))
    def financial2_rule_2236(self):
        self.declare(Fact(recommendation='Warrant menunjukkan kondisi buruk. ROA menunjukkan efisiensi rendah.'))


    @Rule(Fact(warrant_valued='bad'), Fact(roe_valued='high'))
    def financial2_rule_2237(self):
        self.declare(Fact(recommendation='Warrant menunjukkan kondisi buruk. ROE menunjukkan keuntungan yang tinggi.'))


    @Rule(Fact(net_income_valued='profit'), Fact(per_valued='low'))
    def financial2_rule_2238(self):
        self.declare(Fact(recommendation='Laba bersih menunjukkan keuntungan. PER berada di tingkat yang rendah.'))


    @Rule(Fact(net_income_valued='profit'), Fact(der_valued='high'))
    def financial2_rule_2239(self):
        self.declare(Fact(recommendation='Laba bersih menunjukkan keuntungan. DER menunjukkan tingkat hutang yang tinggi.'))


    @Rule(Fact(net_income_valued='profit'), Fact(roa_valued='low'))
    def financial2_rule_2240(self):
        self.declare(Fact(recommendation='Laba bersih menunjukkan keuntungan. ROA menunjukkan efisiensi rendah.'))


    @Rule(Fact(net_income_valued='profit'), Fact(roe_valued='high'))
    def financial2_rule_2241(self):
        self.declare(Fact(recommendation='Laba bersih menunjukkan keuntungan. ROE menunjukkan keuntungan yang tinggi.'))


    @Rule(Fact(per_valued='low'), Fact(der_valued='high'))
    def financial2_rule_2242(self):
        self.declare(Fact(recommendation='PER berada di tingkat yang rendah. DER menunjukkan tingkat hutang yang tinggi.'))


    @Rule(Fact(per_valued='low'), Fact(roa_valued='low'))
    def financial2_rule_2243(self):
        self.declare(Fact(recommendation='PER berada di tingkat yang rendah. ROA menunjukkan efisiensi rendah.'))


    @Rule(Fact(per_valued='low'), Fact(roe_valued='high'))
    def financial2_rule_2244(self):
        self.declare(Fact(recommendation='PER berada di tingkat yang rendah. ROE menunjukkan keuntungan yang tinggi.'))


    @Rule(Fact(der_valued='high'), Fact(roa_valued='low'))
    def financial2_rule_2245(self):
        self.declare(Fact(recommendation='DER menunjukkan tingkat hutang yang tinggi. ROA menunjukkan efisiensi rendah.'))


    @Rule(Fact(der_valued='high'), Fact(roe_valued='high'))
    def financial2_rule_2246(self):
        self.declare(Fact(recommendation='DER menunjukkan tingkat hutang yang tinggi. ROE menunjukkan keuntungan yang tinggi.'))


    @Rule(Fact(roa_valued='low'), Fact(roe_valued='high'))
    def financial2_rule_2247(self):
        self.declare(Fact(recommendation='ROA menunjukkan efisiensi rendah. ROE menunjukkan keuntungan yang tinggi.'))


    @Rule(Fact(underwriter_valued='bad'), Fact(warrant_valued='bad'))
    def financial2_rule_2248(self):
        self.declare(Fact(recommendation='Underwriter berkualitas buruk. Warrant menunjukkan kondisi buruk.'))


    @Rule(Fact(underwriter_valued='bad'), Fact(net_income_valued='profit'))
    def financial2_rule_2249(self):
        self.declare(Fact(recommendation='Underwriter berkualitas buruk. Laba bersih menunjukkan keuntungan.'))


    @Rule(Fact(underwriter_valued='bad'), Fact(per_valued='low'))
    def financial2_rule_2250(self):
        self.declare(Fact(recommendation='Underwriter berkualitas buruk. PER berada di tingkat yang rendah.'))


    @Rule(Fact(underwriter_valued='bad'), Fact(der_valued='high'))
    def financial2_rule_2251(self):
        self.declare(Fact(recommendation='Underwriter berkualitas buruk. DER menunjukkan tingkat hutang yang tinggi.'))


    @Rule(Fact(underwriter_valued='bad'), Fact(roa_valued='low'))
    def financial2_rule_2252(self):
        self.declare(Fact(recommendation='Underwriter berkualitas buruk. ROA menunjukkan efisiensi rendah.'))


    @Rule(Fact(underwriter_valued='bad'), Fact(roe_valued='low'))
    def financial2_rule_2253(self):
        self.declare(Fact(recommendation='Underwriter berkualitas buruk. ROE menunjukkan keuntungan yang rendah.'))


    @Rule(Fact(warrant_valued='bad'), Fact(net_income_valued='profit'))
    def financial2_rule_2254(self):
        self.declare(Fact(recommendation='Warrant menunjukkan kondisi buruk. Laba bersih menunjukkan keuntungan.'))


    @Rule(Fact(warrant_valued='bad'), Fact(per_valued='low'))
    def financial2_rule_2255(self):
        self.declare(Fact(recommendation='Warrant menunjukkan kondisi buruk. PER berada di tingkat yang rendah.'))


    @Rule(Fact(warrant_valued='bad'), Fact(der_valued='high'))
    def financial2_rule_2256(self):
        self.declare(Fact(recommendation='Warrant menunjukkan kondisi buruk. DER menunjukkan tingkat hutang yang tinggi.'))


    @Rule(Fact(warrant_valued='bad'), Fact(roa_valued='low'))
    def financial2_rule_2257(self):
        self.declare(Fact(recommendation='Warrant menunjukkan kondisi buruk. ROA menunjukkan efisiensi rendah.'))


    @Rule(Fact(warrant_valued='bad'), Fact(roe_valued='low'))
    def financial2_rule_2258(self):
        self.declare(Fact(recommendation='Warrant menunjukkan kondisi buruk. ROE menunjukkan keuntungan yang rendah.'))


    @Rule(Fact(net_income_valued='profit'), Fact(per_valued='low'))
    def financial2_rule_2259(self):
        self.declare(Fact(recommendation='Laba bersih menunjukkan keuntungan. PER berada di tingkat yang rendah.'))


    @Rule(Fact(net_income_valued='profit'), Fact(der_valued='high'))
    def financial2_rule_2260(self):
        self.declare(Fact(recommendation='Laba bersih menunjukkan keuntungan. DER menunjukkan tingkat hutang yang tinggi.'))


    @Rule(Fact(net_income_valued='profit'), Fact(roa_valued='low'))
    def financial2_rule_2261(self):
        self.declare(Fact(recommendation='Laba bersih menunjukkan keuntungan. ROA menunjukkan efisiensi rendah.'))


    @Rule(Fact(net_income_valued='profit'), Fact(roe_valued='low'))
    def financial2_rule_2262(self):
        self.declare(Fact(recommendation='Laba bersih menunjukkan keuntungan. ROE menunjukkan keuntungan yang rendah.'))


    @Rule(Fact(per_valued='low'), Fact(der_valued='high'))
    def financial2_rule_2263(self):
        self.declare(Fact(recommendation='PER berada di tingkat yang rendah. DER menunjukkan tingkat hutang yang tinggi.'))


    @Rule(Fact(per_valued='low'), Fact(roa_valued='low'))
    def financial2_rule_2264(self):
        self.declare(Fact(recommendation='PER berada di tingkat yang rendah. ROA menunjukkan efisiensi rendah.'))


    @Rule(Fact(per_valued='low'), Fact(roe_valued='low'))
    def financial2_rule_2265(self):
        self.declare(Fact(recommendation='PER berada di tingkat yang rendah. ROE menunjukkan keuntungan yang rendah.'))


    @Rule(Fact(der_valued='high'), Fact(roa_valued='low'))
    def financial2_rule_2266(self):
        self.declare(Fact(recommendation='DER menunjukkan tingkat hutang yang tinggi. ROA menunjukkan efisiensi rendah.'))


    @Rule(Fact(der_valued='high'), Fact(roe_valued='low'))
    def financial2_rule_2267(self):
        self.declare(Fact(recommendation='DER menunjukkan tingkat hutang yang tinggi. ROE menunjukkan keuntungan yang rendah.'))


    @Rule(Fact(roa_valued='low'), Fact(roe_valued='low'))
    def financial2_rule_2268(self):
        self.declare(Fact(recommendation='ROA menunjukkan efisiensi rendah. ROE menunjukkan keuntungan yang rendah.'))


    @Rule(Fact(underwriter_valued='bad'), Fact(warrant_valued='bad'))
    def financial2_rule_2269(self):
        self.declare(Fact(recommendation='Underwriter berkualitas buruk. Warrant menunjukkan kondisi buruk.'))


    @Rule(Fact(underwriter_valued='bad'), Fact(net_income_valued='profit'))
    def financial2_rule_2270(self):
        self.declare(Fact(recommendation='Underwriter berkualitas buruk. Laba bersih menunjukkan keuntungan.'))


    @Rule(Fact(underwriter_valued='bad'), Fact(per_valued='low'))
    def financial2_rule_2271(self):
        self.declare(Fact(recommendation='Underwriter berkualitas buruk. PER berada di tingkat yang rendah.'))


    @Rule(Fact(underwriter_valued='bad'), Fact(der_valued='low'))
    def financial2_rule_2272(self):
        self.declare(Fact(recommendation='Underwriter berkualitas buruk. DER menunjukkan tingkat hutang yang rendah.'))


    @Rule(Fact(underwriter_valued='bad'), Fact(roa_valued='high'))
    def financial2_rule_2273(self):
        self.declare(Fact(recommendation='Underwriter berkualitas buruk. ROA menunjukkan efisiensi tinggi.'))


    @Rule(Fact(underwriter_valued='bad'), Fact(roe_valued='high'))
    def financial2_rule_2274(self):
        self.declare(Fact(recommendation='Underwriter berkualitas buruk. ROE menunjukkan keuntungan yang tinggi.'))


    @Rule(Fact(warrant_valued='bad'), Fact(net_income_valued='profit'))
    def financial2_rule_2275(self):
        self.declare(Fact(recommendation='Warrant menunjukkan kondisi buruk. Laba bersih menunjukkan keuntungan.'))


    @Rule(Fact(warrant_valued='bad'), Fact(per_valued='low'))
    def financial2_rule_2276(self):
        self.declare(Fact(recommendation='Warrant menunjukkan kondisi buruk. PER berada di tingkat yang rendah.'))


    @Rule(Fact(warrant_valued='bad'), Fact(der_valued='low'))
    def financial2_rule_2277(self):
        self.declare(Fact(recommendation='Warrant menunjukkan kondisi buruk. DER menunjukkan tingkat hutang yang rendah.'))


    @Rule(Fact(warrant_valued='bad'), Fact(roa_valued='high'))
    def financial2_rule_2278(self):
        self.declare(Fact(recommendation='Warrant menunjukkan kondisi buruk. ROA menunjukkan efisiensi tinggi.'))


    @Rule(Fact(warrant_valued='bad'), Fact(roe_valued='high'))
    def financial2_rule_2279(self):
        self.declare(Fact(recommendation='Warrant menunjukkan kondisi buruk. ROE menunjukkan keuntungan yang tinggi.'))


    @Rule(Fact(net_income_valued='profit'), Fact(per_valued='low'))
    def financial2_rule_2280(self):
        self.declare(Fact(recommendation='Laba bersih menunjukkan keuntungan. PER berada di tingkat yang rendah.'))


    @Rule(Fact(net_income_valued='profit'), Fact(der_valued='low'))
    def financial2_rule_2281(self):
        self.declare(Fact(recommendation='Laba bersih menunjukkan keuntungan. DER menunjukkan tingkat hutang yang rendah.'))


    @Rule(Fact(net_income_valued='profit'), Fact(roa_valued='high'))
    def financial2_rule_2282(self):
        self.declare(Fact(recommendation='Laba bersih menunjukkan keuntungan. ROA menunjukkan efisiensi tinggi.'))


    @Rule(Fact(net_income_valued='profit'), Fact(roe_valued='high'))
    def financial2_rule_2283(self):
        self.declare(Fact(recommendation='Laba bersih menunjukkan keuntungan. ROE menunjukkan keuntungan yang tinggi.'))


    @Rule(Fact(per_valued='low'), Fact(der_valued='low'))
    def financial2_rule_2284(self):
        self.declare(Fact(recommendation='PER berada di tingkat yang rendah. DER menunjukkan tingkat hutang yang rendah.'))


    @Rule(Fact(per_valued='low'), Fact(roa_valued='high'))
    def financial2_rule_2285(self):
        self.declare(Fact(recommendation='PER berada di tingkat yang rendah. ROA menunjukkan efisiensi tinggi.'))


    @Rule(Fact(per_valued='low'), Fact(roe_valued='high'))
    def financial2_rule_2286(self):
        self.declare(Fact(recommendation='PER berada di tingkat yang rendah. ROE menunjukkan keuntungan yang tinggi.'))


    @Rule(Fact(der_valued='low'), Fact(roa_valued='high'))
    def financial2_rule_2287(self):
        self.declare(Fact(recommendation='DER menunjukkan tingkat hutang yang rendah. ROA menunjukkan efisiensi tinggi.'))


    @Rule(Fact(der_valued='low'), Fact(roe_valued='high'))
    def financial2_rule_2288(self):
        self.declare(Fact(recommendation='DER menunjukkan tingkat hutang yang rendah. ROE menunjukkan keuntungan yang tinggi.'))


    @Rule(Fact(roa_valued='high'), Fact(roe_valued='high'))
    def financial2_rule_2289(self):
        self.declare(Fact(recommendation='ROA menunjukkan efisiensi tinggi. ROE menunjukkan keuntungan yang tinggi.'))


    @Rule(Fact(underwriter_valued='bad'), Fact(warrant_valued='bad'))
    def financial2_rule_2290(self):
        self.declare(Fact(recommendation='Underwriter berkualitas buruk. Warrant menunjukkan kondisi buruk.'))


    @Rule(Fact(underwriter_valued='bad'), Fact(net_income_valued='profit'))
    def financial2_rule_2291(self):
        self.declare(Fact(recommendation='Underwriter berkualitas buruk. Laba bersih menunjukkan keuntungan.'))


    @Rule(Fact(underwriter_valued='bad'), Fact(per_valued='low'))
    def financial2_rule_2292(self):
        self.declare(Fact(recommendation='Underwriter berkualitas buruk. PER berada di tingkat yang rendah.'))


    @Rule(Fact(underwriter_valued='bad'), Fact(der_valued='low'))
    def financial2_rule_2293(self):
        self.declare(Fact(recommendation='Underwriter berkualitas buruk. DER menunjukkan tingkat hutang yang rendah.'))


    @Rule(Fact(underwriter_valued='bad'), Fact(roa_valued='high'))
    def financial2_rule_2294(self):
        self.declare(Fact(recommendation='Underwriter berkualitas buruk. ROA menunjukkan efisiensi tinggi.'))


    @Rule(Fact(underwriter_valued='bad'), Fact(roe_valued='low'))
    def financial2_rule_2295(self):
        self.declare(Fact(recommendation='Underwriter berkualitas buruk. ROE menunjukkan keuntungan yang rendah.'))


    @Rule(Fact(warrant_valued='bad'), Fact(net_income_valued='profit'))
    def financial2_rule_2296(self):
        self.declare(Fact(recommendation='Warrant menunjukkan kondisi buruk. Laba bersih menunjukkan keuntungan.'))


    @Rule(Fact(warrant_valued='bad'), Fact(per_valued='low'))
    def financial2_rule_2297(self):
        self.declare(Fact(recommendation='Warrant menunjukkan kondisi buruk. PER berada di tingkat yang rendah.'))


    @Rule(Fact(warrant_valued='bad'), Fact(der_valued='low'))
    def financial2_rule_2298(self):
        self.declare(Fact(recommendation='Warrant menunjukkan kondisi buruk. DER menunjukkan tingkat hutang yang rendah.'))


    @Rule(Fact(warrant_valued='bad'), Fact(roa_valued='high'))
    def financial2_rule_2299(self):
        self.declare(Fact(recommendation='Warrant menunjukkan kondisi buruk. ROA menunjukkan efisiensi tinggi.'))


    @Rule(Fact(warrant_valued='bad'), Fact(roe_valued='low'))
    def financial2_rule_2300(self):
        self.declare(Fact(recommendation='Warrant menunjukkan kondisi buruk. ROE menunjukkan keuntungan yang rendah.'))


    @Rule(Fact(net_income_valued='profit'), Fact(per_valued='low'))
    def financial2_rule_2301(self):
        self.declare(Fact(recommendation='Laba bersih menunjukkan keuntungan. PER berada di tingkat yang rendah.'))


    @Rule(Fact(net_income_valued='profit'), Fact(der_valued='low'))
    def financial2_rule_2302(self):
        self.declare(Fact(recommendation='Laba bersih menunjukkan keuntungan. DER menunjukkan tingkat hutang yang rendah.'))


    @Rule(Fact(net_income_valued='profit'), Fact(roa_valued='high'))
    def financial2_rule_2303(self):
        self.declare(Fact(recommendation='Laba bersih menunjukkan keuntungan. ROA menunjukkan efisiensi tinggi.'))


    @Rule(Fact(net_income_valued='profit'), Fact(roe_valued='low'))
    def financial2_rule_2304(self):
        self.declare(Fact(recommendation='Laba bersih menunjukkan keuntungan. ROE menunjukkan keuntungan yang rendah.'))


    @Rule(Fact(per_valued='low'), Fact(der_valued='low'))
    def financial2_rule_2305(self):
        self.declare(Fact(recommendation='PER berada di tingkat yang rendah. DER menunjukkan tingkat hutang yang rendah.'))


    @Rule(Fact(per_valued='low'), Fact(roa_valued='high'))
    def financial2_rule_2306(self):
        self.declare(Fact(recommendation='PER berada di tingkat yang rendah. ROA menunjukkan efisiensi tinggi.'))


    @Rule(Fact(per_valued='low'), Fact(roe_valued='low'))
    def financial2_rule_2307(self):
        self.declare(Fact(recommendation='PER berada di tingkat yang rendah. ROE menunjukkan keuntungan yang rendah.'))


    @Rule(Fact(der_valued='low'), Fact(roa_valued='high'))
    def financial2_rule_2308(self):
        self.declare(Fact(recommendation='DER menunjukkan tingkat hutang yang rendah. ROA menunjukkan efisiensi tinggi.'))


    @Rule(Fact(der_valued='low'), Fact(roe_valued='low'))
    def financial2_rule_2309(self):
        self.declare(Fact(recommendation='DER menunjukkan tingkat hutang yang rendah. ROE menunjukkan keuntungan yang rendah.'))


    @Rule(Fact(roa_valued='high'), Fact(roe_valued='low'))
    def financial2_rule_2310(self):
        self.declare(Fact(recommendation='ROA menunjukkan efisiensi tinggi. ROE menunjukkan keuntungan yang rendah.'))


    @Rule(Fact(underwriter_valued='bad'), Fact(warrant_valued='bad'))
    def financial2_rule_2311(self):
        self.declare(Fact(recommendation='Underwriter berkualitas buruk. Warrant menunjukkan kondisi buruk.'))


    @Rule(Fact(underwriter_valued='bad'), Fact(net_income_valued='profit'))
    def financial2_rule_2312(self):
        self.declare(Fact(recommendation='Underwriter berkualitas buruk. Laba bersih menunjukkan keuntungan.'))


    @Rule(Fact(underwriter_valued='bad'), Fact(per_valued='low'))
    def financial2_rule_2313(self):
        self.declare(Fact(recommendation='Underwriter berkualitas buruk. PER berada di tingkat yang rendah.'))


    @Rule(Fact(underwriter_valued='bad'), Fact(der_valued='low'))
    def financial2_rule_2314(self):
        self.declare(Fact(recommendation='Underwriter berkualitas buruk. DER menunjukkan tingkat hutang yang rendah.'))


    @Rule(Fact(underwriter_valued='bad'), Fact(roa_valued='low'))
    def financial2_rule_2315(self):
        self.declare(Fact(recommendation='Underwriter berkualitas buruk. ROA menunjukkan efisiensi rendah.'))


    @Rule(Fact(underwriter_valued='bad'), Fact(roe_valued='high'))
    def financial2_rule_2316(self):
        self.declare(Fact(recommendation='Underwriter berkualitas buruk. ROE menunjukkan keuntungan yang tinggi.'))


    @Rule(Fact(warrant_valued='bad'), Fact(net_income_valued='profit'))
    def financial2_rule_2317(self):
        self.declare(Fact(recommendation='Warrant menunjukkan kondisi buruk. Laba bersih menunjukkan keuntungan.'))


    @Rule(Fact(warrant_valued='bad'), Fact(per_valued='low'))
    def financial2_rule_2318(self):
        self.declare(Fact(recommendation='Warrant menunjukkan kondisi buruk. PER berada di tingkat yang rendah.'))


    @Rule(Fact(warrant_valued='bad'), Fact(der_valued='low'))
    def financial2_rule_2319(self):
        self.declare(Fact(recommendation='Warrant menunjukkan kondisi buruk. DER menunjukkan tingkat hutang yang rendah.'))


    @Rule(Fact(warrant_valued='bad'), Fact(roa_valued='low'))
    def financial2_rule_2320(self):
        self.declare(Fact(recommendation='Warrant menunjukkan kondisi buruk. ROA menunjukkan efisiensi rendah.'))


    @Rule(Fact(warrant_valued='bad'), Fact(roe_valued='high'))
    def financial2_rule_2321(self):
        self.declare(Fact(recommendation='Warrant menunjukkan kondisi buruk. ROE menunjukkan keuntungan yang tinggi.'))


    @Rule(Fact(net_income_valued='profit'), Fact(per_valued='low'))
    def financial2_rule_2322(self):
        self.declare(Fact(recommendation='Laba bersih menunjukkan keuntungan. PER berada di tingkat yang rendah.'))


    @Rule(Fact(net_income_valued='profit'), Fact(der_valued='low'))
    def financial2_rule_2323(self):
        self.declare(Fact(recommendation='Laba bersih menunjukkan keuntungan. DER menunjukkan tingkat hutang yang rendah.'))


    @Rule(Fact(net_income_valued='profit'), Fact(roa_valued='low'))
    def financial2_rule_2324(self):
        self.declare(Fact(recommendation='Laba bersih menunjukkan keuntungan. ROA menunjukkan efisiensi rendah.'))


    @Rule(Fact(net_income_valued='profit'), Fact(roe_valued='high'))
    def financial2_rule_2325(self):
        self.declare(Fact(recommendation='Laba bersih menunjukkan keuntungan. ROE menunjukkan keuntungan yang tinggi.'))


    @Rule(Fact(per_valued='low'), Fact(der_valued='low'))
    def financial2_rule_2326(self):
        self.declare(Fact(recommendation='PER berada di tingkat yang rendah. DER menunjukkan tingkat hutang yang rendah.'))


    @Rule(Fact(per_valued='low'), Fact(roa_valued='low'))
    def financial2_rule_2327(self):
        self.declare(Fact(recommendation='PER berada di tingkat yang rendah. ROA menunjukkan efisiensi rendah.'))


    @Rule(Fact(per_valued='low'), Fact(roe_valued='high'))
    def financial2_rule_2328(self):
        self.declare(Fact(recommendation='PER berada di tingkat yang rendah. ROE menunjukkan keuntungan yang tinggi.'))


    @Rule(Fact(der_valued='low'), Fact(roa_valued='low'))
    def financial2_rule_2329(self):
        self.declare(Fact(recommendation='DER menunjukkan tingkat hutang yang rendah. ROA menunjukkan efisiensi rendah.'))


    @Rule(Fact(der_valued='low'), Fact(roe_valued='high'))
    def financial2_rule_2330(self):
        self.declare(Fact(recommendation='DER menunjukkan tingkat hutang yang rendah. ROE menunjukkan keuntungan yang tinggi.'))


    @Rule(Fact(roa_valued='low'), Fact(roe_valued='high'))
    def financial2_rule_2331(self):
        self.declare(Fact(recommendation='ROA menunjukkan efisiensi rendah. ROE menunjukkan keuntungan yang tinggi.'))


    @Rule(Fact(underwriter_valued='bad'), Fact(warrant_valued='bad'))
    def financial2_rule_2332(self):
        self.declare(Fact(recommendation='Underwriter berkualitas buruk. Warrant menunjukkan kondisi buruk.'))


    @Rule(Fact(underwriter_valued='bad'), Fact(net_income_valued='profit'))
    def financial2_rule_2333(self):
        self.declare(Fact(recommendation='Underwriter berkualitas buruk. Laba bersih menunjukkan keuntungan.'))


    @Rule(Fact(underwriter_valued='bad'), Fact(per_valued='low'))
    def financial2_rule_2334(self):
        self.declare(Fact(recommendation='Underwriter berkualitas buruk. PER berada di tingkat yang rendah.'))


    @Rule(Fact(underwriter_valued='bad'), Fact(der_valued='low'))
    def financial2_rule_2335(self):
        self.declare(Fact(recommendation='Underwriter berkualitas buruk. DER menunjukkan tingkat hutang yang rendah.'))


    @Rule(Fact(underwriter_valued='bad'), Fact(roa_valued='low'))
    def financial2_rule_2336(self):
        self.declare(Fact(recommendation='Underwriter berkualitas buruk. ROA menunjukkan efisiensi rendah.'))


    @Rule(Fact(underwriter_valued='bad'), Fact(roe_valued='low'))
    def financial2_rule_2337(self):
        self.declare(Fact(recommendation='Underwriter berkualitas buruk. ROE menunjukkan keuntungan yang rendah.'))


    @Rule(Fact(warrant_valued='bad'), Fact(net_income_valued='profit'))
    def financial2_rule_2338(self):
        self.declare(Fact(recommendation='Warrant menunjukkan kondisi buruk. Laba bersih menunjukkan keuntungan.'))


    @Rule(Fact(warrant_valued='bad'), Fact(per_valued='low'))
    def financial2_rule_2339(self):
        self.declare(Fact(recommendation='Warrant menunjukkan kondisi buruk. PER berada di tingkat yang rendah.'))


    @Rule(Fact(warrant_valued='bad'), Fact(der_valued='low'))
    def financial2_rule_2340(self):
        self.declare(Fact(recommendation='Warrant menunjukkan kondisi buruk. DER menunjukkan tingkat hutang yang rendah.'))


    @Rule(Fact(warrant_valued='bad'), Fact(roa_valued='low'))
    def financial2_rule_2341(self):
        self.declare(Fact(recommendation='Warrant menunjukkan kondisi buruk. ROA menunjukkan efisiensi rendah.'))


    @Rule(Fact(warrant_valued='bad'), Fact(roe_valued='low'))
    def financial2_rule_2342(self):
        self.declare(Fact(recommendation='Warrant menunjukkan kondisi buruk. ROE menunjukkan keuntungan yang rendah.'))


    @Rule(Fact(net_income_valued='profit'), Fact(per_valued='low'))
    def financial2_rule_2343(self):
        self.declare(Fact(recommendation='Laba bersih menunjukkan keuntungan. PER berada di tingkat yang rendah.'))


    @Rule(Fact(net_income_valued='profit'), Fact(der_valued='low'))
    def financial2_rule_2344(self):
        self.declare(Fact(recommendation='Laba bersih menunjukkan keuntungan. DER menunjukkan tingkat hutang yang rendah.'))


    @Rule(Fact(net_income_valued='profit'), Fact(roa_valued='low'))
    def financial2_rule_2345(self):
        self.declare(Fact(recommendation='Laba bersih menunjukkan keuntungan. ROA menunjukkan efisiensi rendah.'))


    @Rule(Fact(net_income_valued='profit'), Fact(roe_valued='low'))
    def financial2_rule_2346(self):
        self.declare(Fact(recommendation='Laba bersih menunjukkan keuntungan. ROE menunjukkan keuntungan yang rendah.'))


    @Rule(Fact(per_valued='low'), Fact(der_valued='low'))
    def financial2_rule_2347(self):
        self.declare(Fact(recommendation='PER berada di tingkat yang rendah. DER menunjukkan tingkat hutang yang rendah.'))


    @Rule(Fact(per_valued='low'), Fact(roa_valued='low'))
    def financial2_rule_2348(self):
        self.declare(Fact(recommendation='PER berada di tingkat yang rendah. ROA menunjukkan efisiensi rendah.'))


    @Rule(Fact(per_valued='low'), Fact(roe_valued='low'))
    def financial2_rule_2349(self):
        self.declare(Fact(recommendation='PER berada di tingkat yang rendah. ROE menunjukkan keuntungan yang rendah.'))


    @Rule(Fact(der_valued='low'), Fact(roa_valued='low'))
    def financial2_rule_2350(self):
        self.declare(Fact(recommendation='DER menunjukkan tingkat hutang yang rendah. ROA menunjukkan efisiensi rendah.'))


    @Rule(Fact(der_valued='low'), Fact(roe_valued='low'))
    def financial2_rule_2351(self):
        self.declare(Fact(recommendation='DER menunjukkan tingkat hutang yang rendah. ROE menunjukkan keuntungan yang rendah.'))


    @Rule(Fact(roa_valued='low'), Fact(roe_valued='low'))
    def financial2_rule_2352(self):
        self.declare(Fact(recommendation='ROA menunjukkan efisiensi rendah. ROE menunjukkan keuntungan yang rendah.'))


    @Rule(Fact(underwriter_valued='bad'), Fact(warrant_valued='bad'))
    def financial2_rule_2353(self):
        self.declare(Fact(recommendation='Underwriter berkualitas buruk. Warrant menunjukkan kondisi buruk.'))


    @Rule(Fact(underwriter_valued='bad'), Fact(net_income_valued='loss'))
    def financial2_rule_2354(self):
        self.declare(Fact(recommendation='Underwriter berkualitas buruk. Laba bersih menunjukkan kerugian.'))


    @Rule(Fact(underwriter_valued='bad'), Fact(per_valued='high'))
    def financial2_rule_2355(self):
        self.declare(Fact(recommendation='Underwriter berkualitas buruk. PER berada di tingkat yang tinggi.'))


    @Rule(Fact(underwriter_valued='bad'), Fact(der_valued='high'))
    def financial2_rule_2356(self):
        self.declare(Fact(recommendation='Underwriter berkualitas buruk. DER menunjukkan tingkat hutang yang tinggi.'))


    @Rule(Fact(underwriter_valued='bad'), Fact(roa_valued='high'))
    def financial2_rule_2357(self):
        self.declare(Fact(recommendation='Underwriter berkualitas buruk. ROA menunjukkan efisiensi tinggi.'))


    @Rule(Fact(underwriter_valued='bad'), Fact(roe_valued='high'))
    def financial2_rule_2358(self):
        self.declare(Fact(recommendation='Underwriter berkualitas buruk. ROE menunjukkan keuntungan yang tinggi.'))


    @Rule(Fact(warrant_valued='bad'), Fact(net_income_valued='loss'))
    def financial2_rule_2359(self):
        self.declare(Fact(recommendation='Warrant menunjukkan kondisi buruk. Laba bersih menunjukkan kerugian.'))


    @Rule(Fact(warrant_valued='bad'), Fact(per_valued='high'))
    def financial2_rule_2360(self):
        self.declare(Fact(recommendation='Warrant menunjukkan kondisi buruk. PER berada di tingkat yang tinggi.'))


    @Rule(Fact(warrant_valued='bad'), Fact(der_valued='high'))
    def financial2_rule_2361(self):
        self.declare(Fact(recommendation='Warrant menunjukkan kondisi buruk. DER menunjukkan tingkat hutang yang tinggi.'))


    @Rule(Fact(warrant_valued='bad'), Fact(roa_valued='high'))
    def financial2_rule_2362(self):
        self.declare(Fact(recommendation='Warrant menunjukkan kondisi buruk. ROA menunjukkan efisiensi tinggi.'))


    @Rule(Fact(warrant_valued='bad'), Fact(roe_valued='high'))
    def financial2_rule_2363(self):
        self.declare(Fact(recommendation='Warrant menunjukkan kondisi buruk. ROE menunjukkan keuntungan yang tinggi.'))


    @Rule(Fact(net_income_valued='loss'), Fact(per_valued='high'))
    def financial2_rule_2364(self):
        self.declare(Fact(recommendation='Laba bersih menunjukkan kerugian. PER berada di tingkat yang tinggi.'))


    @Rule(Fact(net_income_valued='loss'), Fact(der_valued='high'))
    def financial2_rule_2365(self):
        self.declare(Fact(recommendation='Laba bersih menunjukkan kerugian. DER menunjukkan tingkat hutang yang tinggi.'))


    @Rule(Fact(net_income_valued='loss'), Fact(roa_valued='high'))
    def financial2_rule_2366(self):
        self.declare(Fact(recommendation='Laba bersih menunjukkan kerugian. ROA menunjukkan efisiensi tinggi.'))


    @Rule(Fact(net_income_valued='loss'), Fact(roe_valued='high'))
    def financial2_rule_2367(self):
        self.declare(Fact(recommendation='Laba bersih menunjukkan kerugian. ROE menunjukkan keuntungan yang tinggi.'))


    @Rule(Fact(per_valued='high'), Fact(der_valued='high'))
    def financial2_rule_2368(self):
        self.declare(Fact(recommendation='PER berada di tingkat yang tinggi. DER menunjukkan tingkat hutang yang tinggi.'))


    @Rule(Fact(per_valued='high'), Fact(roa_valued='high'))
    def financial2_rule_2369(self):
        self.declare(Fact(recommendation='PER berada di tingkat yang tinggi. ROA menunjukkan efisiensi tinggi.'))


    @Rule(Fact(per_valued='high'), Fact(roe_valued='high'))
    def financial2_rule_2370(self):
        self.declare(Fact(recommendation='PER berada di tingkat yang tinggi. ROE menunjukkan keuntungan yang tinggi.'))


    @Rule(Fact(der_valued='high'), Fact(roa_valued='high'))
    def financial2_rule_2371(self):
        self.declare(Fact(recommendation='DER menunjukkan tingkat hutang yang tinggi. ROA menunjukkan efisiensi tinggi.'))


    @Rule(Fact(der_valued='high'), Fact(roe_valued='high'))
    def financial2_rule_2372(self):
        self.declare(Fact(recommendation='DER menunjukkan tingkat hutang yang tinggi. ROE menunjukkan keuntungan yang tinggi.'))


    @Rule(Fact(roa_valued='high'), Fact(roe_valued='high'))
    def financial2_rule_2373(self):
        self.declare(Fact(recommendation='ROA menunjukkan efisiensi tinggi. ROE menunjukkan keuntungan yang tinggi.'))


    @Rule(Fact(underwriter_valued='bad'), Fact(warrant_valued='bad'))
    def financial2_rule_2374(self):
        self.declare(Fact(recommendation='Underwriter berkualitas buruk. Warrant menunjukkan kondisi buruk.'))


    @Rule(Fact(underwriter_valued='bad'), Fact(net_income_valued='loss'))
    def financial2_rule_2375(self):
        self.declare(Fact(recommendation='Underwriter berkualitas buruk. Laba bersih menunjukkan kerugian.'))


    @Rule(Fact(underwriter_valued='bad'), Fact(per_valued='high'))
    def financial2_rule_2376(self):
        self.declare(Fact(recommendation='Underwriter berkualitas buruk. PER berada di tingkat yang tinggi.'))


    @Rule(Fact(underwriter_valued='bad'), Fact(der_valued='high'))
    def financial2_rule_2377(self):
        self.declare(Fact(recommendation='Underwriter berkualitas buruk. DER menunjukkan tingkat hutang yang tinggi.'))


    @Rule(Fact(underwriter_valued='bad'), Fact(roa_valued='high'))
    def financial2_rule_2378(self):
        self.declare(Fact(recommendation='Underwriter berkualitas buruk. ROA menunjukkan efisiensi tinggi.'))


    @Rule(Fact(underwriter_valued='bad'), Fact(roe_valued='low'))
    def financial2_rule_2379(self):
        self.declare(Fact(recommendation='Underwriter berkualitas buruk. ROE menunjukkan keuntungan yang rendah.'))


    @Rule(Fact(warrant_valued='bad'), Fact(net_income_valued='loss'))
    def financial2_rule_2380(self):
        self.declare(Fact(recommendation='Warrant menunjukkan kondisi buruk. Laba bersih menunjukkan kerugian.'))


    @Rule(Fact(warrant_valued='bad'), Fact(per_valued='high'))
    def financial2_rule_2381(self):
        self.declare(Fact(recommendation='Warrant menunjukkan kondisi buruk. PER berada di tingkat yang tinggi.'))


    @Rule(Fact(warrant_valued='bad'), Fact(der_valued='high'))
    def financial2_rule_2382(self):
        self.declare(Fact(recommendation='Warrant menunjukkan kondisi buruk. DER menunjukkan tingkat hutang yang tinggi.'))


    @Rule(Fact(warrant_valued='bad'), Fact(roa_valued='high'))
    def financial2_rule_2383(self):
        self.declare(Fact(recommendation='Warrant menunjukkan kondisi buruk. ROA menunjukkan efisiensi tinggi.'))


    @Rule(Fact(warrant_valued='bad'), Fact(roe_valued='low'))
    def financial2_rule_2384(self):
        self.declare(Fact(recommendation='Warrant menunjukkan kondisi buruk. ROE menunjukkan keuntungan yang rendah.'))


    @Rule(Fact(net_income_valued='loss'), Fact(per_valued='high'))
    def financial2_rule_2385(self):
        self.declare(Fact(recommendation='Laba bersih menunjukkan kerugian. PER berada di tingkat yang tinggi.'))


    @Rule(Fact(net_income_valued='loss'), Fact(der_valued='high'))
    def financial2_rule_2386(self):
        self.declare(Fact(recommendation='Laba bersih menunjukkan kerugian. DER menunjukkan tingkat hutang yang tinggi.'))


    @Rule(Fact(net_income_valued='loss'), Fact(roa_valued='high'))
    def financial2_rule_2387(self):
        self.declare(Fact(recommendation='Laba bersih menunjukkan kerugian. ROA menunjukkan efisiensi tinggi.'))


    @Rule(Fact(net_income_valued='loss'), Fact(roe_valued='low'))
    def financial2_rule_2388(self):
        self.declare(Fact(recommendation='Laba bersih menunjukkan kerugian. ROE menunjukkan keuntungan yang rendah.'))


    @Rule(Fact(per_valued='high'), Fact(der_valued='high'))
    def financial2_rule_2389(self):
        self.declare(Fact(recommendation='PER berada di tingkat yang tinggi. DER menunjukkan tingkat hutang yang tinggi.'))


    @Rule(Fact(per_valued='high'), Fact(roa_valued='high'))
    def financial2_rule_2390(self):
        self.declare(Fact(recommendation='PER berada di tingkat yang tinggi. ROA menunjukkan efisiensi tinggi.'))


    @Rule(Fact(per_valued='high'), Fact(roe_valued='low'))
    def financial2_rule_2391(self):
        self.declare(Fact(recommendation='PER berada di tingkat yang tinggi. ROE menunjukkan keuntungan yang rendah.'))


    @Rule(Fact(der_valued='high'), Fact(roa_valued='high'))
    def financial2_rule_2392(self):
        self.declare(Fact(recommendation='DER menunjukkan tingkat hutang yang tinggi. ROA menunjukkan efisiensi tinggi.'))


    @Rule(Fact(der_valued='high'), Fact(roe_valued='low'))
    def financial2_rule_2393(self):
        self.declare(Fact(recommendation='DER menunjukkan tingkat hutang yang tinggi. ROE menunjukkan keuntungan yang rendah.'))


    @Rule(Fact(roa_valued='high'), Fact(roe_valued='low'))
    def financial2_rule_2394(self):
        self.declare(Fact(recommendation='ROA menunjukkan efisiensi tinggi. ROE menunjukkan keuntungan yang rendah.'))


    @Rule(Fact(underwriter_valued='bad'), Fact(warrant_valued='bad'))
    def financial2_rule_2395(self):
        self.declare(Fact(recommendation='Underwriter berkualitas buruk. Warrant menunjukkan kondisi buruk.'))


    @Rule(Fact(underwriter_valued='bad'), Fact(net_income_valued='loss'))
    def financial2_rule_2396(self):
        self.declare(Fact(recommendation='Underwriter berkualitas buruk. Laba bersih menunjukkan kerugian.'))


    @Rule(Fact(underwriter_valued='bad'), Fact(per_valued='high'))
    def financial2_rule_2397(self):
        self.declare(Fact(recommendation='Underwriter berkualitas buruk. PER berada di tingkat yang tinggi.'))


    @Rule(Fact(underwriter_valued='bad'), Fact(der_valued='high'))
    def financial2_rule_2398(self):
        self.declare(Fact(recommendation='Underwriter berkualitas buruk. DER menunjukkan tingkat hutang yang tinggi.'))


    @Rule(Fact(underwriter_valued='bad'), Fact(roa_valued='low'))
    def financial2_rule_2399(self):
        self.declare(Fact(recommendation='Underwriter berkualitas buruk. ROA menunjukkan efisiensi rendah.'))


    @Rule(Fact(underwriter_valued='bad'), Fact(roe_valued='high'))
    def financial2_rule_2400(self):
        self.declare(Fact(recommendation='Underwriter berkualitas buruk. ROE menunjukkan keuntungan yang tinggi.'))


    @Rule(Fact(warrant_valued='bad'), Fact(net_income_valued='loss'))
    def financial2_rule_2401(self):
        self.declare(Fact(recommendation='Warrant menunjukkan kondisi buruk. Laba bersih menunjukkan kerugian.'))


    @Rule(Fact(warrant_valued='bad'), Fact(per_valued='high'))
    def financial2_rule_2402(self):
        self.declare(Fact(recommendation='Warrant menunjukkan kondisi buruk. PER berada di tingkat yang tinggi.'))


    @Rule(Fact(warrant_valued='bad'), Fact(der_valued='high'))
    def financial2_rule_2403(self):
        self.declare(Fact(recommendation='Warrant menunjukkan kondisi buruk. DER menunjukkan tingkat hutang yang tinggi.'))


    @Rule(Fact(warrant_valued='bad'), Fact(roa_valued='low'))
    def financial2_rule_2404(self):
        self.declare(Fact(recommendation='Warrant menunjukkan kondisi buruk. ROA menunjukkan efisiensi rendah.'))


    @Rule(Fact(warrant_valued='bad'), Fact(roe_valued='high'))
    def financial2_rule_2405(self):
        self.declare(Fact(recommendation='Warrant menunjukkan kondisi buruk. ROE menunjukkan keuntungan yang tinggi.'))


    @Rule(Fact(net_income_valued='loss'), Fact(per_valued='high'))
    def financial2_rule_2406(self):
        self.declare(Fact(recommendation='Laba bersih menunjukkan kerugian. PER berada di tingkat yang tinggi.'))


    @Rule(Fact(net_income_valued='loss'), Fact(der_valued='high'))
    def financial2_rule_2407(self):
        self.declare(Fact(recommendation='Laba bersih menunjukkan kerugian. DER menunjukkan tingkat hutang yang tinggi.'))


    @Rule(Fact(net_income_valued='loss'), Fact(roa_valued='low'))
    def financial2_rule_2408(self):
        self.declare(Fact(recommendation='Laba bersih menunjukkan kerugian. ROA menunjukkan efisiensi rendah.'))


    @Rule(Fact(net_income_valued='loss'), Fact(roe_valued='high'))
    def financial2_rule_2409(self):
        self.declare(Fact(recommendation='Laba bersih menunjukkan kerugian. ROE menunjukkan keuntungan yang tinggi.'))


    @Rule(Fact(per_valued='high'), Fact(der_valued='high'))
    def financial2_rule_2410(self):
        self.declare(Fact(recommendation='PER berada di tingkat yang tinggi. DER menunjukkan tingkat hutang yang tinggi.'))


    @Rule(Fact(per_valued='high'), Fact(roa_valued='low'))
    def financial2_rule_2411(self):
        self.declare(Fact(recommendation='PER berada di tingkat yang tinggi. ROA menunjukkan efisiensi rendah.'))


    @Rule(Fact(per_valued='high'), Fact(roe_valued='high'))
    def financial2_rule_2412(self):
        self.declare(Fact(recommendation='PER berada di tingkat yang tinggi. ROE menunjukkan keuntungan yang tinggi.'))


    @Rule(Fact(der_valued='high'), Fact(roa_valued='low'))
    def financial2_rule_2413(self):
        self.declare(Fact(recommendation='DER menunjukkan tingkat hutang yang tinggi. ROA menunjukkan efisiensi rendah.'))


    @Rule(Fact(der_valued='high'), Fact(roe_valued='high'))
    def financial2_rule_2414(self):
        self.declare(Fact(recommendation='DER menunjukkan tingkat hutang yang tinggi. ROE menunjukkan keuntungan yang tinggi.'))


    @Rule(Fact(roa_valued='low'), Fact(roe_valued='high'))
    def financial2_rule_2415(self):
        self.declare(Fact(recommendation='ROA menunjukkan efisiensi rendah. ROE menunjukkan keuntungan yang tinggi.'))


    @Rule(Fact(underwriter_valued='bad'), Fact(warrant_valued='bad'))
    def financial2_rule_2416(self):
        self.declare(Fact(recommendation='Underwriter berkualitas buruk. Warrant menunjukkan kondisi buruk.'))


    @Rule(Fact(underwriter_valued='bad'), Fact(net_income_valued='loss'))
    def financial2_rule_2417(self):
        self.declare(Fact(recommendation='Underwriter berkualitas buruk. Laba bersih menunjukkan kerugian.'))


    @Rule(Fact(underwriter_valued='bad'), Fact(per_valued='high'))
    def financial2_rule_2418(self):
        self.declare(Fact(recommendation='Underwriter berkualitas buruk. PER berada di tingkat yang tinggi.'))


    @Rule(Fact(underwriter_valued='bad'), Fact(der_valued='high'))
    def financial2_rule_2419(self):
        self.declare(Fact(recommendation='Underwriter berkualitas buruk. DER menunjukkan tingkat hutang yang tinggi.'))


    @Rule(Fact(underwriter_valued='bad'), Fact(roa_valued='low'))
    def financial2_rule_2420(self):
        self.declare(Fact(recommendation='Underwriter berkualitas buruk. ROA menunjukkan efisiensi rendah.'))


    @Rule(Fact(underwriter_valued='bad'), Fact(roe_valued='low'))
    def financial2_rule_2421(self):
        self.declare(Fact(recommendation='Underwriter berkualitas buruk. ROE menunjukkan keuntungan yang rendah.'))


    @Rule(Fact(warrant_valued='bad'), Fact(net_income_valued='loss'))
    def financial2_rule_2422(self):
        self.declare(Fact(recommendation='Warrant menunjukkan kondisi buruk. Laba bersih menunjukkan kerugian.'))


    @Rule(Fact(warrant_valued='bad'), Fact(per_valued='high'))
    def financial2_rule_2423(self):
        self.declare(Fact(recommendation='Warrant menunjukkan kondisi buruk. PER berada di tingkat yang tinggi.'))


    @Rule(Fact(warrant_valued='bad'), Fact(der_valued='high'))
    def financial2_rule_2424(self):
        self.declare(Fact(recommendation='Warrant menunjukkan kondisi buruk. DER menunjukkan tingkat hutang yang tinggi.'))


    @Rule(Fact(warrant_valued='bad'), Fact(roa_valued='low'))
    def financial2_rule_2425(self):
        self.declare(Fact(recommendation='Warrant menunjukkan kondisi buruk. ROA menunjukkan efisiensi rendah.'))


    @Rule(Fact(warrant_valued='bad'), Fact(roe_valued='low'))
    def financial2_rule_2426(self):
        self.declare(Fact(recommendation='Warrant menunjukkan kondisi buruk. ROE menunjukkan keuntungan yang rendah.'))


    @Rule(Fact(net_income_valued='loss'), Fact(per_valued='high'))
    def financial2_rule_2427(self):
        self.declare(Fact(recommendation='Laba bersih menunjukkan kerugian. PER berada di tingkat yang tinggi.'))


    @Rule(Fact(net_income_valued='loss'), Fact(der_valued='high'))
    def financial2_rule_2428(self):
        self.declare(Fact(recommendation='Laba bersih menunjukkan kerugian. DER menunjukkan tingkat hutang yang tinggi.'))


    @Rule(Fact(net_income_valued='loss'), Fact(roa_valued='low'))
    def financial2_rule_2429(self):
        self.declare(Fact(recommendation='Laba bersih menunjukkan kerugian. ROA menunjukkan efisiensi rendah.'))


    @Rule(Fact(net_income_valued='loss'), Fact(roe_valued='low'))
    def financial2_rule_2430(self):
        self.declare(Fact(recommendation='Laba bersih menunjukkan kerugian. ROE menunjukkan keuntungan yang rendah.'))


    @Rule(Fact(per_valued='high'), Fact(der_valued='high'))
    def financial2_rule_2431(self):
        self.declare(Fact(recommendation='PER berada di tingkat yang tinggi. DER menunjukkan tingkat hutang yang tinggi.'))


    @Rule(Fact(per_valued='high'), Fact(roa_valued='low'))
    def financial2_rule_2432(self):
        self.declare(Fact(recommendation='PER berada di tingkat yang tinggi. ROA menunjukkan efisiensi rendah.'))


    @Rule(Fact(per_valued='high'), Fact(roe_valued='low'))
    def financial2_rule_2433(self):
        self.declare(Fact(recommendation='PER berada di tingkat yang tinggi. ROE menunjukkan keuntungan yang rendah.'))


    @Rule(Fact(der_valued='high'), Fact(roa_valued='low'))
    def financial2_rule_2434(self):
        self.declare(Fact(recommendation='DER menunjukkan tingkat hutang yang tinggi. ROA menunjukkan efisiensi rendah.'))


    @Rule(Fact(der_valued='high'), Fact(roe_valued='low'))
    def financial2_rule_2435(self):
        self.declare(Fact(recommendation='DER menunjukkan tingkat hutang yang tinggi. ROE menunjukkan keuntungan yang rendah.'))


    @Rule(Fact(roa_valued='low'), Fact(roe_valued='low'))
    def financial2_rule_2436(self):
        self.declare(Fact(recommendation='ROA menunjukkan efisiensi rendah. ROE menunjukkan keuntungan yang rendah.'))


    @Rule(Fact(underwriter_valued='bad'), Fact(warrant_valued='bad'))
    def financial2_rule_2437(self):
        self.declare(Fact(recommendation='Underwriter berkualitas buruk. Warrant menunjukkan kondisi buruk.'))


    @Rule(Fact(underwriter_valued='bad'), Fact(net_income_valued='loss'))
    def financial2_rule_2438(self):
        self.declare(Fact(recommendation='Underwriter berkualitas buruk. Laba bersih menunjukkan kerugian.'))


    @Rule(Fact(underwriter_valued='bad'), Fact(per_valued='high'))
    def financial2_rule_2439(self):
        self.declare(Fact(recommendation='Underwriter berkualitas buruk. PER berada di tingkat yang tinggi.'))


    @Rule(Fact(underwriter_valued='bad'), Fact(der_valued='low'))
    def financial2_rule_2440(self):
        self.declare(Fact(recommendation='Underwriter berkualitas buruk. DER menunjukkan tingkat hutang yang rendah.'))


    @Rule(Fact(underwriter_valued='bad'), Fact(roa_valued='high'))
    def financial2_rule_2441(self):
        self.declare(Fact(recommendation='Underwriter berkualitas buruk. ROA menunjukkan efisiensi tinggi.'))


    @Rule(Fact(underwriter_valued='bad'), Fact(roe_valued='high'))
    def financial2_rule_2442(self):
        self.declare(Fact(recommendation='Underwriter berkualitas buruk. ROE menunjukkan keuntungan yang tinggi.'))


    @Rule(Fact(warrant_valued='bad'), Fact(net_income_valued='loss'))
    def financial2_rule_2443(self):
        self.declare(Fact(recommendation='Warrant menunjukkan kondisi buruk. Laba bersih menunjukkan kerugian.'))


    @Rule(Fact(warrant_valued='bad'), Fact(per_valued='high'))
    def financial2_rule_2444(self):
        self.declare(Fact(recommendation='Warrant menunjukkan kondisi buruk. PER berada di tingkat yang tinggi.'))


    @Rule(Fact(warrant_valued='bad'), Fact(der_valued='low'))
    def financial2_rule_2445(self):
        self.declare(Fact(recommendation='Warrant menunjukkan kondisi buruk. DER menunjukkan tingkat hutang yang rendah.'))


    @Rule(Fact(warrant_valued='bad'), Fact(roa_valued='high'))
    def financial2_rule_2446(self):
        self.declare(Fact(recommendation='Warrant menunjukkan kondisi buruk. ROA menunjukkan efisiensi tinggi.'))


    @Rule(Fact(warrant_valued='bad'), Fact(roe_valued='high'))
    def financial2_rule_2447(self):
        self.declare(Fact(recommendation='Warrant menunjukkan kondisi buruk. ROE menunjukkan keuntungan yang tinggi.'))


    @Rule(Fact(net_income_valued='loss'), Fact(per_valued='high'))
    def financial2_rule_2448(self):
        self.declare(Fact(recommendation='Laba bersih menunjukkan kerugian. PER berada di tingkat yang tinggi.'))


    @Rule(Fact(net_income_valued='loss'), Fact(der_valued='low'))
    def financial2_rule_2449(self):
        self.declare(Fact(recommendation='Laba bersih menunjukkan kerugian. DER menunjukkan tingkat hutang yang rendah.'))


    @Rule(Fact(net_income_valued='loss'), Fact(roa_valued='high'))
    def financial2_rule_2450(self):
        self.declare(Fact(recommendation='Laba bersih menunjukkan kerugian. ROA menunjukkan efisiensi tinggi.'))


    @Rule(Fact(net_income_valued='loss'), Fact(roe_valued='high'))
    def financial2_rule_2451(self):
        self.declare(Fact(recommendation='Laba bersih menunjukkan kerugian. ROE menunjukkan keuntungan yang tinggi.'))


    @Rule(Fact(per_valued='high'), Fact(der_valued='low'))
    def financial2_rule_2452(self):
        self.declare(Fact(recommendation='PER berada di tingkat yang tinggi. DER menunjukkan tingkat hutang yang rendah.'))


    @Rule(Fact(per_valued='high'), Fact(roa_valued='high'))
    def financial2_rule_2453(self):
        self.declare(Fact(recommendation='PER berada di tingkat yang tinggi. ROA menunjukkan efisiensi tinggi.'))


    @Rule(Fact(per_valued='high'), Fact(roe_valued='high'))
    def financial2_rule_2454(self):
        self.declare(Fact(recommendation='PER berada di tingkat yang tinggi. ROE menunjukkan keuntungan yang tinggi.'))


    @Rule(Fact(der_valued='low'), Fact(roa_valued='high'))
    def financial2_rule_2455(self):
        self.declare(Fact(recommendation='DER menunjukkan tingkat hutang yang rendah. ROA menunjukkan efisiensi tinggi.'))


    @Rule(Fact(der_valued='low'), Fact(roe_valued='high'))
    def financial2_rule_2456(self):
        self.declare(Fact(recommendation='DER menunjukkan tingkat hutang yang rendah. ROE menunjukkan keuntungan yang tinggi.'))


    @Rule(Fact(roa_valued='high'), Fact(roe_valued='high'))
    def financial2_rule_2457(self):
        self.declare(Fact(recommendation='ROA menunjukkan efisiensi tinggi. ROE menunjukkan keuntungan yang tinggi.'))


    @Rule(Fact(underwriter_valued='bad'), Fact(warrant_valued='bad'))
    def financial2_rule_2458(self):
        self.declare(Fact(recommendation='Underwriter berkualitas buruk. Warrant menunjukkan kondisi buruk.'))


    @Rule(Fact(underwriter_valued='bad'), Fact(net_income_valued='loss'))
    def financial2_rule_2459(self):
        self.declare(Fact(recommendation='Underwriter berkualitas buruk. Laba bersih menunjukkan kerugian.'))


    @Rule(Fact(underwriter_valued='bad'), Fact(per_valued='high'))
    def financial2_rule_2460(self):
        self.declare(Fact(recommendation='Underwriter berkualitas buruk. PER berada di tingkat yang tinggi.'))


    @Rule(Fact(underwriter_valued='bad'), Fact(der_valued='low'))
    def financial2_rule_2461(self):
        self.declare(Fact(recommendation='Underwriter berkualitas buruk. DER menunjukkan tingkat hutang yang rendah.'))


    @Rule(Fact(underwriter_valued='bad'), Fact(roa_valued='high'))
    def financial2_rule_2462(self):
        self.declare(Fact(recommendation='Underwriter berkualitas buruk. ROA menunjukkan efisiensi tinggi.'))


    @Rule(Fact(underwriter_valued='bad'), Fact(roe_valued='low'))
    def financial2_rule_2463(self):
        self.declare(Fact(recommendation='Underwriter berkualitas buruk. ROE menunjukkan keuntungan yang rendah.'))


    @Rule(Fact(warrant_valued='bad'), Fact(net_income_valued='loss'))
    def financial2_rule_2464(self):
        self.declare(Fact(recommendation='Warrant menunjukkan kondisi buruk. Laba bersih menunjukkan kerugian.'))


    @Rule(Fact(warrant_valued='bad'), Fact(per_valued='high'))
    def financial2_rule_2465(self):
        self.declare(Fact(recommendation='Warrant menunjukkan kondisi buruk. PER berada di tingkat yang tinggi.'))


    @Rule(Fact(warrant_valued='bad'), Fact(der_valued='low'))
    def financial2_rule_2466(self):
        self.declare(Fact(recommendation='Warrant menunjukkan kondisi buruk. DER menunjukkan tingkat hutang yang rendah.'))


    @Rule(Fact(warrant_valued='bad'), Fact(roa_valued='high'))
    def financial2_rule_2467(self):
        self.declare(Fact(recommendation='Warrant menunjukkan kondisi buruk. ROA menunjukkan efisiensi tinggi.'))


    @Rule(Fact(warrant_valued='bad'), Fact(roe_valued='low'))
    def financial2_rule_2468(self):
        self.declare(Fact(recommendation='Warrant menunjukkan kondisi buruk. ROE menunjukkan keuntungan yang rendah.'))


    @Rule(Fact(net_income_valued='loss'), Fact(per_valued='high'))
    def financial2_rule_2469(self):
        self.declare(Fact(recommendation='Laba bersih menunjukkan kerugian. PER berada di tingkat yang tinggi.'))


    @Rule(Fact(net_income_valued='loss'), Fact(der_valued='low'))
    def financial2_rule_2470(self):
        self.declare(Fact(recommendation='Laba bersih menunjukkan kerugian. DER menunjukkan tingkat hutang yang rendah.'))


    @Rule(Fact(net_income_valued='loss'), Fact(roa_valued='high'))
    def financial2_rule_2471(self):
        self.declare(Fact(recommendation='Laba bersih menunjukkan kerugian. ROA menunjukkan efisiensi tinggi.'))


    @Rule(Fact(net_income_valued='loss'), Fact(roe_valued='low'))
    def financial2_rule_2472(self):
        self.declare(Fact(recommendation='Laba bersih menunjukkan kerugian. ROE menunjukkan keuntungan yang rendah.'))


    @Rule(Fact(per_valued='high'), Fact(der_valued='low'))
    def financial2_rule_2473(self):
        self.declare(Fact(recommendation='PER berada di tingkat yang tinggi. DER menunjukkan tingkat hutang yang rendah.'))


    @Rule(Fact(per_valued='high'), Fact(roa_valued='high'))
    def financial2_rule_2474(self):
        self.declare(Fact(recommendation='PER berada di tingkat yang tinggi. ROA menunjukkan efisiensi tinggi.'))


    @Rule(Fact(per_valued='high'), Fact(roe_valued='low'))
    def financial2_rule_2475(self):
        self.declare(Fact(recommendation='PER berada di tingkat yang tinggi. ROE menunjukkan keuntungan yang rendah.'))


    @Rule(Fact(der_valued='low'), Fact(roa_valued='high'))
    def financial2_rule_2476(self):
        self.declare(Fact(recommendation='DER menunjukkan tingkat hutang yang rendah. ROA menunjukkan efisiensi tinggi.'))


    @Rule(Fact(der_valued='low'), Fact(roe_valued='low'))
    def financial2_rule_2477(self):
        self.declare(Fact(recommendation='DER menunjukkan tingkat hutang yang rendah. ROE menunjukkan keuntungan yang rendah.'))


    @Rule(Fact(roa_valued='high'), Fact(roe_valued='low'))
    def financial2_rule_2478(self):
        self.declare(Fact(recommendation='ROA menunjukkan efisiensi tinggi. ROE menunjukkan keuntungan yang rendah.'))


    @Rule(Fact(underwriter_valued='bad'), Fact(warrant_valued='bad'))
    def financial2_rule_2479(self):
        self.declare(Fact(recommendation='Underwriter berkualitas buruk. Warrant menunjukkan kondisi buruk.'))


    @Rule(Fact(underwriter_valued='bad'), Fact(net_income_valued='loss'))
    def financial2_rule_2480(self):
        self.declare(Fact(recommendation='Underwriter berkualitas buruk. Laba bersih menunjukkan kerugian.'))


    @Rule(Fact(underwriter_valued='bad'), Fact(per_valued='high'))
    def financial2_rule_2481(self):
        self.declare(Fact(recommendation='Underwriter berkualitas buruk. PER berada di tingkat yang tinggi.'))


    @Rule(Fact(underwriter_valued='bad'), Fact(der_valued='low'))
    def financial2_rule_2482(self):
        self.declare(Fact(recommendation='Underwriter berkualitas buruk. DER menunjukkan tingkat hutang yang rendah.'))


    @Rule(Fact(underwriter_valued='bad'), Fact(roa_valued='low'))
    def financial2_rule_2483(self):
        self.declare(Fact(recommendation='Underwriter berkualitas buruk. ROA menunjukkan efisiensi rendah.'))


    @Rule(Fact(underwriter_valued='bad'), Fact(roe_valued='high'))
    def financial2_rule_2484(self):
        self.declare(Fact(recommendation='Underwriter berkualitas buruk. ROE menunjukkan keuntungan yang tinggi.'))


    @Rule(Fact(warrant_valued='bad'), Fact(net_income_valued='loss'))
    def financial2_rule_2485(self):
        self.declare(Fact(recommendation='Warrant menunjukkan kondisi buruk. Laba bersih menunjukkan kerugian.'))


    @Rule(Fact(warrant_valued='bad'), Fact(per_valued='high'))
    def financial2_rule_2486(self):
        self.declare(Fact(recommendation='Warrant menunjukkan kondisi buruk. PER berada di tingkat yang tinggi.'))


    @Rule(Fact(warrant_valued='bad'), Fact(der_valued='low'))
    def financial2_rule_2487(self):
        self.declare(Fact(recommendation='Warrant menunjukkan kondisi buruk. DER menunjukkan tingkat hutang yang rendah.'))


    @Rule(Fact(warrant_valued='bad'), Fact(roa_valued='low'))
    def financial2_rule_2488(self):
        self.declare(Fact(recommendation='Warrant menunjukkan kondisi buruk. ROA menunjukkan efisiensi rendah.'))


    @Rule(Fact(warrant_valued='bad'), Fact(roe_valued='high'))
    def financial2_rule_2489(self):
        self.declare(Fact(recommendation='Warrant menunjukkan kondisi buruk. ROE menunjukkan keuntungan yang tinggi.'))


    @Rule(Fact(net_income_valued='loss'), Fact(per_valued='high'))
    def financial2_rule_2490(self):
        self.declare(Fact(recommendation='Laba bersih menunjukkan kerugian. PER berada di tingkat yang tinggi.'))


    @Rule(Fact(net_income_valued='loss'), Fact(der_valued='low'))
    def financial2_rule_2491(self):
        self.declare(Fact(recommendation='Laba bersih menunjukkan kerugian. DER menunjukkan tingkat hutang yang rendah.'))


    @Rule(Fact(net_income_valued='loss'), Fact(roa_valued='low'))
    def financial2_rule_2492(self):
        self.declare(Fact(recommendation='Laba bersih menunjukkan kerugian. ROA menunjukkan efisiensi rendah.'))


    @Rule(Fact(net_income_valued='loss'), Fact(roe_valued='high'))
    def financial2_rule_2493(self):
        self.declare(Fact(recommendation='Laba bersih menunjukkan kerugian. ROE menunjukkan keuntungan yang tinggi.'))


    @Rule(Fact(per_valued='high'), Fact(der_valued='low'))
    def financial2_rule_2494(self):
        self.declare(Fact(recommendation='PER berada di tingkat yang tinggi. DER menunjukkan tingkat hutang yang rendah.'))


    @Rule(Fact(per_valued='high'), Fact(roa_valued='low'))
    def financial2_rule_2495(self):
        self.declare(Fact(recommendation='PER berada di tingkat yang tinggi. ROA menunjukkan efisiensi rendah.'))


    @Rule(Fact(per_valued='high'), Fact(roe_valued='high'))
    def financial2_rule_2496(self):
        self.declare(Fact(recommendation='PER berada di tingkat yang tinggi. ROE menunjukkan keuntungan yang tinggi.'))


    @Rule(Fact(der_valued='low'), Fact(roa_valued='low'))
    def financial2_rule_2497(self):
        self.declare(Fact(recommendation='DER menunjukkan tingkat hutang yang rendah. ROA menunjukkan efisiensi rendah.'))


    @Rule(Fact(der_valued='low'), Fact(roe_valued='high'))
    def financial2_rule_2498(self):
        self.declare(Fact(recommendation='DER menunjukkan tingkat hutang yang rendah. ROE menunjukkan keuntungan yang tinggi.'))


    @Rule(Fact(roa_valued='low'), Fact(roe_valued='high'))
    def financial2_rule_2499(self):
        self.declare(Fact(recommendation='ROA menunjukkan efisiensi rendah. ROE menunjukkan keuntungan yang tinggi.'))


    @Rule(Fact(underwriter_valued='bad'), Fact(warrant_valued='bad'))
    def financial2_rule_2500(self):
        self.declare(Fact(recommendation='Underwriter berkualitas buruk. Warrant menunjukkan kondisi buruk.'))


    @Rule(Fact(underwriter_valued='bad'), Fact(net_income_valued='loss'))
    def financial2_rule_2501(self):
        self.declare(Fact(recommendation='Underwriter berkualitas buruk. Laba bersih menunjukkan kerugian.'))


    @Rule(Fact(underwriter_valued='bad'), Fact(per_valued='high'))
    def financial2_rule_2502(self):
        self.declare(Fact(recommendation='Underwriter berkualitas buruk. PER berada di tingkat yang tinggi.'))


    @Rule(Fact(underwriter_valued='bad'), Fact(der_valued='low'))
    def financial2_rule_2503(self):
        self.declare(Fact(recommendation='Underwriter berkualitas buruk. DER menunjukkan tingkat hutang yang rendah.'))


    @Rule(Fact(underwriter_valued='bad'), Fact(roa_valued='low'))
    def financial2_rule_2504(self):
        self.declare(Fact(recommendation='Underwriter berkualitas buruk. ROA menunjukkan efisiensi rendah.'))


    @Rule(Fact(underwriter_valued='bad'), Fact(roe_valued='low'))
    def financial2_rule_2505(self):
        self.declare(Fact(recommendation='Underwriter berkualitas buruk. ROE menunjukkan keuntungan yang rendah.'))


    @Rule(Fact(warrant_valued='bad'), Fact(net_income_valued='loss'))
    def financial2_rule_2506(self):
        self.declare(Fact(recommendation='Warrant menunjukkan kondisi buruk. Laba bersih menunjukkan kerugian.'))


    @Rule(Fact(warrant_valued='bad'), Fact(per_valued='high'))
    def financial2_rule_2507(self):
        self.declare(Fact(recommendation='Warrant menunjukkan kondisi buruk. PER berada di tingkat yang tinggi.'))


    @Rule(Fact(warrant_valued='bad'), Fact(der_valued='low'))
    def financial2_rule_2508(self):
        self.declare(Fact(recommendation='Warrant menunjukkan kondisi buruk. DER menunjukkan tingkat hutang yang rendah.'))


    @Rule(Fact(warrant_valued='bad'), Fact(roa_valued='low'))
    def financial2_rule_2509(self):
        self.declare(Fact(recommendation='Warrant menunjukkan kondisi buruk. ROA menunjukkan efisiensi rendah.'))


    @Rule(Fact(warrant_valued='bad'), Fact(roe_valued='low'))
    def financial2_rule_2510(self):
        self.declare(Fact(recommendation='Warrant menunjukkan kondisi buruk. ROE menunjukkan keuntungan yang rendah.'))


    @Rule(Fact(net_income_valued='loss'), Fact(per_valued='high'))
    def financial2_rule_2511(self):
        self.declare(Fact(recommendation='Laba bersih menunjukkan kerugian. PER berada di tingkat yang tinggi.'))


    @Rule(Fact(net_income_valued='loss'), Fact(der_valued='low'))
    def financial2_rule_2512(self):
        self.declare(Fact(recommendation='Laba bersih menunjukkan kerugian. DER menunjukkan tingkat hutang yang rendah.'))


    @Rule(Fact(net_income_valued='loss'), Fact(roa_valued='low'))
    def financial2_rule_2513(self):
        self.declare(Fact(recommendation='Laba bersih menunjukkan kerugian. ROA menunjukkan efisiensi rendah.'))


    @Rule(Fact(net_income_valued='loss'), Fact(roe_valued='low'))
    def financial2_rule_2514(self):
        self.declare(Fact(recommendation='Laba bersih menunjukkan kerugian. ROE menunjukkan keuntungan yang rendah.'))


    @Rule(Fact(per_valued='high'), Fact(der_valued='low'))
    def financial2_rule_2515(self):
        self.declare(Fact(recommendation='PER berada di tingkat yang tinggi. DER menunjukkan tingkat hutang yang rendah.'))


    @Rule(Fact(per_valued='high'), Fact(roa_valued='low'))
    def financial2_rule_2516(self):
        self.declare(Fact(recommendation='PER berada di tingkat yang tinggi. ROA menunjukkan efisiensi rendah.'))


    @Rule(Fact(per_valued='high'), Fact(roe_valued='low'))
    def financial2_rule_2517(self):
        self.declare(Fact(recommendation='PER berada di tingkat yang tinggi. ROE menunjukkan keuntungan yang rendah.'))


    @Rule(Fact(der_valued='low'), Fact(roa_valued='low'))
    def financial2_rule_2518(self):
        self.declare(Fact(recommendation='DER menunjukkan tingkat hutang yang rendah. ROA menunjukkan efisiensi rendah.'))


    @Rule(Fact(der_valued='low'), Fact(roe_valued='low'))
    def financial2_rule_2519(self):
        self.declare(Fact(recommendation='DER menunjukkan tingkat hutang yang rendah. ROE menunjukkan keuntungan yang rendah.'))


    @Rule(Fact(roa_valued='low'), Fact(roe_valued='low'))
    def financial2_rule_2520(self):
        self.declare(Fact(recommendation='ROA menunjukkan efisiensi rendah. ROE menunjukkan keuntungan yang rendah.'))


    @Rule(Fact(underwriter_valued='bad'), Fact(warrant_valued='bad'))
    def financial2_rule_2521(self):
        self.declare(Fact(recommendation='Underwriter berkualitas buruk. Warrant menunjukkan kondisi buruk.'))


    @Rule(Fact(underwriter_valued='bad'), Fact(net_income_valued='loss'))
    def financial2_rule_2522(self):
        self.declare(Fact(recommendation='Underwriter berkualitas buruk. Laba bersih menunjukkan kerugian.'))


    @Rule(Fact(underwriter_valued='bad'), Fact(per_valued='low'))
    def financial2_rule_2523(self):
        self.declare(Fact(recommendation='Underwriter berkualitas buruk. PER berada di tingkat yang rendah.'))


    @Rule(Fact(underwriter_valued='bad'), Fact(der_valued='high'))
    def financial2_rule_2524(self):
        self.declare(Fact(recommendation='Underwriter berkualitas buruk. DER menunjukkan tingkat hutang yang tinggi.'))


    @Rule(Fact(underwriter_valued='bad'), Fact(roa_valued='high'))
    def financial2_rule_2525(self):
        self.declare(Fact(recommendation='Underwriter berkualitas buruk. ROA menunjukkan efisiensi tinggi.'))


    @Rule(Fact(underwriter_valued='bad'), Fact(roe_valued='high'))
    def financial2_rule_2526(self):
        self.declare(Fact(recommendation='Underwriter berkualitas buruk. ROE menunjukkan keuntungan yang tinggi.'))


    @Rule(Fact(warrant_valued='bad'), Fact(net_income_valued='loss'))
    def financial2_rule_2527(self):
        self.declare(Fact(recommendation='Warrant menunjukkan kondisi buruk. Laba bersih menunjukkan kerugian.'))


    @Rule(Fact(warrant_valued='bad'), Fact(per_valued='low'))
    def financial2_rule_2528(self):
        self.declare(Fact(recommendation='Warrant menunjukkan kondisi buruk. PER berada di tingkat yang rendah.'))


    @Rule(Fact(warrant_valued='bad'), Fact(der_valued='high'))
    def financial2_rule_2529(self):
        self.declare(Fact(recommendation='Warrant menunjukkan kondisi buruk. DER menunjukkan tingkat hutang yang tinggi.'))


    @Rule(Fact(warrant_valued='bad'), Fact(roa_valued='high'))
    def financial2_rule_2530(self):
        self.declare(Fact(recommendation='Warrant menunjukkan kondisi buruk. ROA menunjukkan efisiensi tinggi.'))


    @Rule(Fact(warrant_valued='bad'), Fact(roe_valued='high'))
    def financial2_rule_2531(self):
        self.declare(Fact(recommendation='Warrant menunjukkan kondisi buruk. ROE menunjukkan keuntungan yang tinggi.'))


    @Rule(Fact(net_income_valued='loss'), Fact(per_valued='low'))
    def financial2_rule_2532(self):
        self.declare(Fact(recommendation='Laba bersih menunjukkan kerugian. PER berada di tingkat yang rendah.'))


    @Rule(Fact(net_income_valued='loss'), Fact(der_valued='high'))
    def financial2_rule_2533(self):
        self.declare(Fact(recommendation='Laba bersih menunjukkan kerugian. DER menunjukkan tingkat hutang yang tinggi.'))


    @Rule(Fact(net_income_valued='loss'), Fact(roa_valued='high'))
    def financial2_rule_2534(self):
        self.declare(Fact(recommendation='Laba bersih menunjukkan kerugian. ROA menunjukkan efisiensi tinggi.'))


    @Rule(Fact(net_income_valued='loss'), Fact(roe_valued='high'))
    def financial2_rule_2535(self):
        self.declare(Fact(recommendation='Laba bersih menunjukkan kerugian. ROE menunjukkan keuntungan yang tinggi.'))


    @Rule(Fact(per_valued='low'), Fact(der_valued='high'))
    def financial2_rule_2536(self):
        self.declare(Fact(recommendation='PER berada di tingkat yang rendah. DER menunjukkan tingkat hutang yang tinggi.'))


    @Rule(Fact(per_valued='low'), Fact(roa_valued='high'))
    def financial2_rule_2537(self):
        self.declare(Fact(recommendation='PER berada di tingkat yang rendah. ROA menunjukkan efisiensi tinggi.'))


    @Rule(Fact(per_valued='low'), Fact(roe_valued='high'))
    def financial2_rule_2538(self):
        self.declare(Fact(recommendation='PER berada di tingkat yang rendah. ROE menunjukkan keuntungan yang tinggi.'))


    @Rule(Fact(der_valued='high'), Fact(roa_valued='high'))
    def financial2_rule_2539(self):
        self.declare(Fact(recommendation='DER menunjukkan tingkat hutang yang tinggi. ROA menunjukkan efisiensi tinggi.'))


    @Rule(Fact(der_valued='high'), Fact(roe_valued='high'))
    def financial2_rule_2540(self):
        self.declare(Fact(recommendation='DER menunjukkan tingkat hutang yang tinggi. ROE menunjukkan keuntungan yang tinggi.'))


    @Rule(Fact(roa_valued='high'), Fact(roe_valued='high'))
    def financial2_rule_2541(self):
        self.declare(Fact(recommendation='ROA menunjukkan efisiensi tinggi. ROE menunjukkan keuntungan yang tinggi.'))


    @Rule(Fact(underwriter_valued='bad'), Fact(warrant_valued='bad'))
    def financial2_rule_2542(self):
        self.declare(Fact(recommendation='Underwriter berkualitas buruk. Warrant menunjukkan kondisi buruk.'))


    @Rule(Fact(underwriter_valued='bad'), Fact(net_income_valued='loss'))
    def financial2_rule_2543(self):
        self.declare(Fact(recommendation='Underwriter berkualitas buruk. Laba bersih menunjukkan kerugian.'))


    @Rule(Fact(underwriter_valued='bad'), Fact(per_valued='low'))
    def financial2_rule_2544(self):
        self.declare(Fact(recommendation='Underwriter berkualitas buruk. PER berada di tingkat yang rendah.'))


    @Rule(Fact(underwriter_valued='bad'), Fact(der_valued='high'))
    def financial2_rule_2545(self):
        self.declare(Fact(recommendation='Underwriter berkualitas buruk. DER menunjukkan tingkat hutang yang tinggi.'))


    @Rule(Fact(underwriter_valued='bad'), Fact(roa_valued='high'))
    def financial2_rule_2546(self):
        self.declare(Fact(recommendation='Underwriter berkualitas buruk. ROA menunjukkan efisiensi tinggi.'))


    @Rule(Fact(underwriter_valued='bad'), Fact(roe_valued='low'))
    def financial2_rule_2547(self):
        self.declare(Fact(recommendation='Underwriter berkualitas buruk. ROE menunjukkan keuntungan yang rendah.'))


    @Rule(Fact(warrant_valued='bad'), Fact(net_income_valued='loss'))
    def financial2_rule_2548(self):
        self.declare(Fact(recommendation='Warrant menunjukkan kondisi buruk. Laba bersih menunjukkan kerugian.'))


    @Rule(Fact(warrant_valued='bad'), Fact(per_valued='low'))
    def financial2_rule_2549(self):
        self.declare(Fact(recommendation='Warrant menunjukkan kondisi buruk. PER berada di tingkat yang rendah.'))


    @Rule(Fact(warrant_valued='bad'), Fact(der_valued='high'))
    def financial2_rule_2550(self):
        self.declare(Fact(recommendation='Warrant menunjukkan kondisi buruk. DER menunjukkan tingkat hutang yang tinggi.'))


    @Rule(Fact(warrant_valued='bad'), Fact(roa_valued='high'))
    def financial2_rule_2551(self):
        self.declare(Fact(recommendation='Warrant menunjukkan kondisi buruk. ROA menunjukkan efisiensi tinggi.'))


    @Rule(Fact(warrant_valued='bad'), Fact(roe_valued='low'))
    def financial2_rule_2552(self):
        self.declare(Fact(recommendation='Warrant menunjukkan kondisi buruk. ROE menunjukkan keuntungan yang rendah.'))


    @Rule(Fact(net_income_valued='loss'), Fact(per_valued='low'))
    def financial2_rule_2553(self):
        self.declare(Fact(recommendation='Laba bersih menunjukkan kerugian. PER berada di tingkat yang rendah.'))


    @Rule(Fact(net_income_valued='loss'), Fact(der_valued='high'))
    def financial2_rule_2554(self):
        self.declare(Fact(recommendation='Laba bersih menunjukkan kerugian. DER menunjukkan tingkat hutang yang tinggi.'))


    @Rule(Fact(net_income_valued='loss'), Fact(roa_valued='high'))
    def financial2_rule_2555(self):
        self.declare(Fact(recommendation='Laba bersih menunjukkan kerugian. ROA menunjukkan efisiensi tinggi.'))


    @Rule(Fact(net_income_valued='loss'), Fact(roe_valued='low'))
    def financial2_rule_2556(self):
        self.declare(Fact(recommendation='Laba bersih menunjukkan kerugian. ROE menunjukkan keuntungan yang rendah.'))


    @Rule(Fact(per_valued='low'), Fact(der_valued='high'))
    def financial2_rule_2557(self):
        self.declare(Fact(recommendation='PER berada di tingkat yang rendah. DER menunjukkan tingkat hutang yang tinggi.'))


    @Rule(Fact(per_valued='low'), Fact(roa_valued='high'))
    def financial2_rule_2558(self):
        self.declare(Fact(recommendation='PER berada di tingkat yang rendah. ROA menunjukkan efisiensi tinggi.'))


    @Rule(Fact(per_valued='low'), Fact(roe_valued='low'))
    def financial2_rule_2559(self):
        self.declare(Fact(recommendation='PER berada di tingkat yang rendah. ROE menunjukkan keuntungan yang rendah.'))


    @Rule(Fact(der_valued='high'), Fact(roa_valued='high'))
    def financial2_rule_2560(self):
        self.declare(Fact(recommendation='DER menunjukkan tingkat hutang yang tinggi. ROA menunjukkan efisiensi tinggi.'))


    @Rule(Fact(der_valued='high'), Fact(roe_valued='low'))
    def financial2_rule_2561(self):
        self.declare(Fact(recommendation='DER menunjukkan tingkat hutang yang tinggi. ROE menunjukkan keuntungan yang rendah.'))


    @Rule(Fact(roa_valued='high'), Fact(roe_valued='low'))
    def financial2_rule_2562(self):
        self.declare(Fact(recommendation='ROA menunjukkan efisiensi tinggi. ROE menunjukkan keuntungan yang rendah.'))


    @Rule(Fact(underwriter_valued='bad'), Fact(warrant_valued='bad'))
    def financial2_rule_2563(self):
        self.declare(Fact(recommendation='Underwriter berkualitas buruk. Warrant menunjukkan kondisi buruk.'))


    @Rule(Fact(underwriter_valued='bad'), Fact(net_income_valued='loss'))
    def financial2_rule_2564(self):
        self.declare(Fact(recommendation='Underwriter berkualitas buruk. Laba bersih menunjukkan kerugian.'))


    @Rule(Fact(underwriter_valued='bad'), Fact(per_valued='low'))
    def financial2_rule_2565(self):
        self.declare(Fact(recommendation='Underwriter berkualitas buruk. PER berada di tingkat yang rendah.'))


    @Rule(Fact(underwriter_valued='bad'), Fact(der_valued='high'))
    def financial2_rule_2566(self):
        self.declare(Fact(recommendation='Underwriter berkualitas buruk. DER menunjukkan tingkat hutang yang tinggi.'))


    @Rule(Fact(underwriter_valued='bad'), Fact(roa_valued='low'))
    def financial2_rule_2567(self):
        self.declare(Fact(recommendation='Underwriter berkualitas buruk. ROA menunjukkan efisiensi rendah.'))


    @Rule(Fact(underwriter_valued='bad'), Fact(roe_valued='high'))
    def financial2_rule_2568(self):
        self.declare(Fact(recommendation='Underwriter berkualitas buruk. ROE menunjukkan keuntungan yang tinggi.'))


    @Rule(Fact(warrant_valued='bad'), Fact(net_income_valued='loss'))
    def financial2_rule_2569(self):
        self.declare(Fact(recommendation='Warrant menunjukkan kondisi buruk. Laba bersih menunjukkan kerugian.'))


    @Rule(Fact(warrant_valued='bad'), Fact(per_valued='low'))
    def financial2_rule_2570(self):
        self.declare(Fact(recommendation='Warrant menunjukkan kondisi buruk. PER berada di tingkat yang rendah.'))


    @Rule(Fact(warrant_valued='bad'), Fact(der_valued='high'))
    def financial2_rule_2571(self):
        self.declare(Fact(recommendation='Warrant menunjukkan kondisi buruk. DER menunjukkan tingkat hutang yang tinggi.'))


    @Rule(Fact(warrant_valued='bad'), Fact(roa_valued='low'))
    def financial2_rule_2572(self):
        self.declare(Fact(recommendation='Warrant menunjukkan kondisi buruk. ROA menunjukkan efisiensi rendah.'))


    @Rule(Fact(warrant_valued='bad'), Fact(roe_valued='high'))
    def financial2_rule_2573(self):
        self.declare(Fact(recommendation='Warrant menunjukkan kondisi buruk. ROE menunjukkan keuntungan yang tinggi.'))


    @Rule(Fact(net_income_valued='loss'), Fact(per_valued='low'))
    def financial2_rule_2574(self):
        self.declare(Fact(recommendation='Laba bersih menunjukkan kerugian. PER berada di tingkat yang rendah.'))


    @Rule(Fact(net_income_valued='loss'), Fact(der_valued='high'))
    def financial2_rule_2575(self):
        self.declare(Fact(recommendation='Laba bersih menunjukkan kerugian. DER menunjukkan tingkat hutang yang tinggi.'))


    @Rule(Fact(net_income_valued='loss'), Fact(roa_valued='low'))
    def financial2_rule_2576(self):
        self.declare(Fact(recommendation='Laba bersih menunjukkan kerugian. ROA menunjukkan efisiensi rendah.'))


    @Rule(Fact(net_income_valued='loss'), Fact(roe_valued='high'))
    def financial2_rule_2577(self):
        self.declare(Fact(recommendation='Laba bersih menunjukkan kerugian. ROE menunjukkan keuntungan yang tinggi.'))


    @Rule(Fact(per_valued='low'), Fact(der_valued='high'))
    def financial2_rule_2578(self):
        self.declare(Fact(recommendation='PER berada di tingkat yang rendah. DER menunjukkan tingkat hutang yang tinggi.'))


    @Rule(Fact(per_valued='low'), Fact(roa_valued='low'))
    def financial2_rule_2579(self):
        self.declare(Fact(recommendation='PER berada di tingkat yang rendah. ROA menunjukkan efisiensi rendah.'))


    @Rule(Fact(per_valued='low'), Fact(roe_valued='high'))
    def financial2_rule_2580(self):
        self.declare(Fact(recommendation='PER berada di tingkat yang rendah. ROE menunjukkan keuntungan yang tinggi.'))


    @Rule(Fact(der_valued='high'), Fact(roa_valued='low'))
    def financial2_rule_2581(self):
        self.declare(Fact(recommendation='DER menunjukkan tingkat hutang yang tinggi. ROA menunjukkan efisiensi rendah.'))


    @Rule(Fact(der_valued='high'), Fact(roe_valued='high'))
    def financial2_rule_2582(self):
        self.declare(Fact(recommendation='DER menunjukkan tingkat hutang yang tinggi. ROE menunjukkan keuntungan yang tinggi.'))


    @Rule(Fact(roa_valued='low'), Fact(roe_valued='high'))
    def financial2_rule_2583(self):
        self.declare(Fact(recommendation='ROA menunjukkan efisiensi rendah. ROE menunjukkan keuntungan yang tinggi.'))


    @Rule(Fact(underwriter_valued='bad'), Fact(warrant_valued='bad'))
    def financial2_rule_2584(self):
        self.declare(Fact(recommendation='Underwriter berkualitas buruk. Warrant menunjukkan kondisi buruk.'))


    @Rule(Fact(underwriter_valued='bad'), Fact(net_income_valued='loss'))
    def financial2_rule_2585(self):
        self.declare(Fact(recommendation='Underwriter berkualitas buruk. Laba bersih menunjukkan kerugian.'))


    @Rule(Fact(underwriter_valued='bad'), Fact(per_valued='low'))
    def financial2_rule_2586(self):
        self.declare(Fact(recommendation='Underwriter berkualitas buruk. PER berada di tingkat yang rendah.'))


    @Rule(Fact(underwriter_valued='bad'), Fact(der_valued='high'))
    def financial2_rule_2587(self):
        self.declare(Fact(recommendation='Underwriter berkualitas buruk. DER menunjukkan tingkat hutang yang tinggi.'))


    @Rule(Fact(underwriter_valued='bad'), Fact(roa_valued='low'))
    def financial2_rule_2588(self):
        self.declare(Fact(recommendation='Underwriter berkualitas buruk. ROA menunjukkan efisiensi rendah.'))


    @Rule(Fact(underwriter_valued='bad'), Fact(roe_valued='low'))
    def financial2_rule_2589(self):
        self.declare(Fact(recommendation='Underwriter berkualitas buruk. ROE menunjukkan keuntungan yang rendah.'))


    @Rule(Fact(warrant_valued='bad'), Fact(net_income_valued='loss'))
    def financial2_rule_2590(self):
        self.declare(Fact(recommendation='Warrant menunjukkan kondisi buruk. Laba bersih menunjukkan kerugian.'))


    @Rule(Fact(warrant_valued='bad'), Fact(per_valued='low'))
    def financial2_rule_2591(self):
        self.declare(Fact(recommendation='Warrant menunjukkan kondisi buruk. PER berada di tingkat yang rendah.'))


    @Rule(Fact(warrant_valued='bad'), Fact(der_valued='high'))
    def financial2_rule_2592(self):
        self.declare(Fact(recommendation='Warrant menunjukkan kondisi buruk. DER menunjukkan tingkat hutang yang tinggi.'))


    @Rule(Fact(warrant_valued='bad'), Fact(roa_valued='low'))
    def financial2_rule_2593(self):
        self.declare(Fact(recommendation='Warrant menunjukkan kondisi buruk. ROA menunjukkan efisiensi rendah.'))


    @Rule(Fact(warrant_valued='bad'), Fact(roe_valued='low'))
    def financial2_rule_2594(self):
        self.declare(Fact(recommendation='Warrant menunjukkan kondisi buruk. ROE menunjukkan keuntungan yang rendah.'))


    @Rule(Fact(net_income_valued='loss'), Fact(per_valued='low'))
    def financial2_rule_2595(self):
        self.declare(Fact(recommendation='Laba bersih menunjukkan kerugian. PER berada di tingkat yang rendah.'))


    @Rule(Fact(net_income_valued='loss'), Fact(der_valued='high'))
    def financial2_rule_2596(self):
        self.declare(Fact(recommendation='Laba bersih menunjukkan kerugian. DER menunjukkan tingkat hutang yang tinggi.'))


    @Rule(Fact(net_income_valued='loss'), Fact(roa_valued='low'))
    def financial2_rule_2597(self):
        self.declare(Fact(recommendation='Laba bersih menunjukkan kerugian. ROA menunjukkan efisiensi rendah.'))


    @Rule(Fact(net_income_valued='loss'), Fact(roe_valued='low'))
    def financial2_rule_2598(self):
        self.declare(Fact(recommendation='Laba bersih menunjukkan kerugian. ROE menunjukkan keuntungan yang rendah.'))


    @Rule(Fact(per_valued='low'), Fact(der_valued='high'))
    def financial2_rule_2599(self):
        self.declare(Fact(recommendation='PER berada di tingkat yang rendah. DER menunjukkan tingkat hutang yang tinggi.'))


    @Rule(Fact(per_valued='low'), Fact(roa_valued='low'))
    def financial2_rule_2600(self):
        self.declare(Fact(recommendation='PER berada di tingkat yang rendah. ROA menunjukkan efisiensi rendah.'))


    @Rule(Fact(per_valued='low'), Fact(roe_valued='low'))
    def financial2_rule_2601(self):
        self.declare(Fact(recommendation='PER berada di tingkat yang rendah. ROE menunjukkan keuntungan yang rendah.'))


    @Rule(Fact(der_valued='high'), Fact(roa_valued='low'))
    def financial2_rule_2602(self):
        self.declare(Fact(recommendation='DER menunjukkan tingkat hutang yang tinggi. ROA menunjukkan efisiensi rendah.'))


    @Rule(Fact(der_valued='high'), Fact(roe_valued='low'))
    def financial2_rule_2603(self):
        self.declare(Fact(recommendation='DER menunjukkan tingkat hutang yang tinggi. ROE menunjukkan keuntungan yang rendah.'))


    @Rule(Fact(roa_valued='low'), Fact(roe_valued='low'))
    def financial2_rule_2604(self):
        self.declare(Fact(recommendation='ROA menunjukkan efisiensi rendah. ROE menunjukkan keuntungan yang rendah.'))


    @Rule(Fact(underwriter_valued='bad'), Fact(warrant_valued='bad'))
    def financial2_rule_2605(self):
        self.declare(Fact(recommendation='Underwriter berkualitas buruk. Warrant menunjukkan kondisi buruk.'))


    @Rule(Fact(underwriter_valued='bad'), Fact(net_income_valued='loss'))
    def financial2_rule_2606(self):
        self.declare(Fact(recommendation='Underwriter berkualitas buruk. Laba bersih menunjukkan kerugian.'))


    @Rule(Fact(underwriter_valued='bad'), Fact(per_valued='low'))
    def financial2_rule_2607(self):
        self.declare(Fact(recommendation='Underwriter berkualitas buruk. PER berada di tingkat yang rendah.'))


    @Rule(Fact(underwriter_valued='bad'), Fact(der_valued='low'))
    def financial2_rule_2608(self):
        self.declare(Fact(recommendation='Underwriter berkualitas buruk. DER menunjukkan tingkat hutang yang rendah.'))


    @Rule(Fact(underwriter_valued='bad'), Fact(roa_valued='high'))
    def financial2_rule_2609(self):
        self.declare(Fact(recommendation='Underwriter berkualitas buruk. ROA menunjukkan efisiensi tinggi.'))


    @Rule(Fact(underwriter_valued='bad'), Fact(roe_valued='high'))
    def financial2_rule_2610(self):
        self.declare(Fact(recommendation='Underwriter berkualitas buruk. ROE menunjukkan keuntungan yang tinggi.'))


    @Rule(Fact(warrant_valued='bad'), Fact(net_income_valued='loss'))
    def financial2_rule_2611(self):
        self.declare(Fact(recommendation='Warrant menunjukkan kondisi buruk. Laba bersih menunjukkan kerugian.'))


    @Rule(Fact(warrant_valued='bad'), Fact(per_valued='low'))
    def financial2_rule_2612(self):
        self.declare(Fact(recommendation='Warrant menunjukkan kondisi buruk. PER berada di tingkat yang rendah.'))


    @Rule(Fact(warrant_valued='bad'), Fact(der_valued='low'))
    def financial2_rule_2613(self):
        self.declare(Fact(recommendation='Warrant menunjukkan kondisi buruk. DER menunjukkan tingkat hutang yang rendah.'))


    @Rule(Fact(warrant_valued='bad'), Fact(roa_valued='high'))
    def financial2_rule_2614(self):
        self.declare(Fact(recommendation='Warrant menunjukkan kondisi buruk. ROA menunjukkan efisiensi tinggi.'))


    @Rule(Fact(warrant_valued='bad'), Fact(roe_valued='high'))
    def financial2_rule_2615(self):
        self.declare(Fact(recommendation='Warrant menunjukkan kondisi buruk. ROE menunjukkan keuntungan yang tinggi.'))


    @Rule(Fact(net_income_valued='loss'), Fact(per_valued='low'))
    def financial2_rule_2616(self):
        self.declare(Fact(recommendation='Laba bersih menunjukkan kerugian. PER berada di tingkat yang rendah.'))


    @Rule(Fact(net_income_valued='loss'), Fact(der_valued='low'))
    def financial2_rule_2617(self):
        self.declare(Fact(recommendation='Laba bersih menunjukkan kerugian. DER menunjukkan tingkat hutang yang rendah.'))


    @Rule(Fact(net_income_valued='loss'), Fact(roa_valued='high'))
    def financial2_rule_2618(self):
        self.declare(Fact(recommendation='Laba bersih menunjukkan kerugian. ROA menunjukkan efisiensi tinggi.'))


    @Rule(Fact(net_income_valued='loss'), Fact(roe_valued='high'))
    def financial2_rule_2619(self):
        self.declare(Fact(recommendation='Laba bersih menunjukkan kerugian. ROE menunjukkan keuntungan yang tinggi.'))


    @Rule(Fact(per_valued='low'), Fact(der_valued='low'))
    def financial2_rule_2620(self):
        self.declare(Fact(recommendation='PER berada di tingkat yang rendah. DER menunjukkan tingkat hutang yang rendah.'))


    @Rule(Fact(per_valued='low'), Fact(roa_valued='high'))
    def financial2_rule_2621(self):
        self.declare(Fact(recommendation='PER berada di tingkat yang rendah. ROA menunjukkan efisiensi tinggi.'))


    @Rule(Fact(per_valued='low'), Fact(roe_valued='high'))
    def financial2_rule_2622(self):
        self.declare(Fact(recommendation='PER berada di tingkat yang rendah. ROE menunjukkan keuntungan yang tinggi.'))


    @Rule(Fact(der_valued='low'), Fact(roa_valued='high'))
    def financial2_rule_2623(self):
        self.declare(Fact(recommendation='DER menunjukkan tingkat hutang yang rendah. ROA menunjukkan efisiensi tinggi.'))


    @Rule(Fact(der_valued='low'), Fact(roe_valued='high'))
    def financial2_rule_2624(self):
        self.declare(Fact(recommendation='DER menunjukkan tingkat hutang yang rendah. ROE menunjukkan keuntungan yang tinggi.'))


    @Rule(Fact(roa_valued='high'), Fact(roe_valued='high'))
    def financial2_rule_2625(self):
        self.declare(Fact(recommendation='ROA menunjukkan efisiensi tinggi. ROE menunjukkan keuntungan yang tinggi.'))


    @Rule(Fact(underwriter_valued='bad'), Fact(warrant_valued='bad'))
    def financial2_rule_2626(self):
        self.declare(Fact(recommendation='Underwriter berkualitas buruk. Warrant menunjukkan kondisi buruk.'))


    @Rule(Fact(underwriter_valued='bad'), Fact(net_income_valued='loss'))
    def financial2_rule_2627(self):
        self.declare(Fact(recommendation='Underwriter berkualitas buruk. Laba bersih menunjukkan kerugian.'))


    @Rule(Fact(underwriter_valued='bad'), Fact(per_valued='low'))
    def financial2_rule_2628(self):
        self.declare(Fact(recommendation='Underwriter berkualitas buruk. PER berada di tingkat yang rendah.'))


    @Rule(Fact(underwriter_valued='bad'), Fact(der_valued='low'))
    def financial2_rule_2629(self):
        self.declare(Fact(recommendation='Underwriter berkualitas buruk. DER menunjukkan tingkat hutang yang rendah.'))


    @Rule(Fact(underwriter_valued='bad'), Fact(roa_valued='high'))
    def financial2_rule_2630(self):
        self.declare(Fact(recommendation='Underwriter berkualitas buruk. ROA menunjukkan efisiensi tinggi.'))


    @Rule(Fact(underwriter_valued='bad'), Fact(roe_valued='low'))
    def financial2_rule_2631(self):
        self.declare(Fact(recommendation='Underwriter berkualitas buruk. ROE menunjukkan keuntungan yang rendah.'))


    @Rule(Fact(warrant_valued='bad'), Fact(net_income_valued='loss'))
    def financial2_rule_2632(self):
        self.declare(Fact(recommendation='Warrant menunjukkan kondisi buruk. Laba bersih menunjukkan kerugian.'))


    @Rule(Fact(warrant_valued='bad'), Fact(per_valued='low'))
    def financial2_rule_2633(self):
        self.declare(Fact(recommendation='Warrant menunjukkan kondisi buruk. PER berada di tingkat yang rendah.'))


    @Rule(Fact(warrant_valued='bad'), Fact(der_valued='low'))
    def financial2_rule_2634(self):
        self.declare(Fact(recommendation='Warrant menunjukkan kondisi buruk. DER menunjukkan tingkat hutang yang rendah.'))


    @Rule(Fact(warrant_valued='bad'), Fact(roa_valued='high'))
    def financial2_rule_2635(self):
        self.declare(Fact(recommendation='Warrant menunjukkan kondisi buruk. ROA menunjukkan efisiensi tinggi.'))


    @Rule(Fact(warrant_valued='bad'), Fact(roe_valued='low'))
    def financial2_rule_2636(self):
        self.declare(Fact(recommendation='Warrant menunjukkan kondisi buruk. ROE menunjukkan keuntungan yang rendah.'))


    @Rule(Fact(net_income_valued='loss'), Fact(per_valued='low'))
    def financial2_rule_2637(self):
        self.declare(Fact(recommendation='Laba bersih menunjukkan kerugian. PER berada di tingkat yang rendah.'))


    @Rule(Fact(net_income_valued='loss'), Fact(der_valued='low'))
    def financial2_rule_2638(self):
        self.declare(Fact(recommendation='Laba bersih menunjukkan kerugian. DER menunjukkan tingkat hutang yang rendah.'))


    @Rule(Fact(net_income_valued='loss'), Fact(roa_valued='high'))
    def financial2_rule_2639(self):
        self.declare(Fact(recommendation='Laba bersih menunjukkan kerugian. ROA menunjukkan efisiensi tinggi.'))


    @Rule(Fact(net_income_valued='loss'), Fact(roe_valued='low'))
    def financial2_rule_2640(self):
        self.declare(Fact(recommendation='Laba bersih menunjukkan kerugian. ROE menunjukkan keuntungan yang rendah.'))


    @Rule(Fact(per_valued='low'), Fact(der_valued='low'))
    def financial2_rule_2641(self):
        self.declare(Fact(recommendation='PER berada di tingkat yang rendah. DER menunjukkan tingkat hutang yang rendah.'))


    @Rule(Fact(per_valued='low'), Fact(roa_valued='high'))
    def financial2_rule_2642(self):
        self.declare(Fact(recommendation='PER berada di tingkat yang rendah. ROA menunjukkan efisiensi tinggi.'))


    @Rule(Fact(per_valued='low'), Fact(roe_valued='low'))
    def financial2_rule_2643(self):
        self.declare(Fact(recommendation='PER berada di tingkat yang rendah. ROE menunjukkan keuntungan yang rendah.'))


    @Rule(Fact(der_valued='low'), Fact(roa_valued='high'))
    def financial2_rule_2644(self):
        self.declare(Fact(recommendation='DER menunjukkan tingkat hutang yang rendah. ROA menunjukkan efisiensi tinggi.'))


    @Rule(Fact(der_valued='low'), Fact(roe_valued='low'))
    def financial2_rule_2645(self):
        self.declare(Fact(recommendation='DER menunjukkan tingkat hutang yang rendah. ROE menunjukkan keuntungan yang rendah.'))


    @Rule(Fact(roa_valued='high'), Fact(roe_valued='low'))
    def financial2_rule_2646(self):
        self.declare(Fact(recommendation='ROA menunjukkan efisiensi tinggi. ROE menunjukkan keuntungan yang rendah.'))


    @Rule(Fact(underwriter_valued='bad'), Fact(warrant_valued='bad'))
    def financial2_rule_2647(self):
        self.declare(Fact(recommendation='Underwriter berkualitas buruk. Warrant menunjukkan kondisi buruk.'))


    @Rule(Fact(underwriter_valued='bad'), Fact(net_income_valued='loss'))
    def financial2_rule_2648(self):
        self.declare(Fact(recommendation='Underwriter berkualitas buruk. Laba bersih menunjukkan kerugian.'))


    @Rule(Fact(underwriter_valued='bad'), Fact(per_valued='low'))
    def financial2_rule_2649(self):
        self.declare(Fact(recommendation='Underwriter berkualitas buruk. PER berada di tingkat yang rendah.'))


    @Rule(Fact(underwriter_valued='bad'), Fact(der_valued='low'))
    def financial2_rule_2650(self):
        self.declare(Fact(recommendation='Underwriter berkualitas buruk. DER menunjukkan tingkat hutang yang rendah.'))


    @Rule(Fact(underwriter_valued='bad'), Fact(roa_valued='low'))
    def financial2_rule_2651(self):
        self.declare(Fact(recommendation='Underwriter berkualitas buruk. ROA menunjukkan efisiensi rendah.'))


    @Rule(Fact(underwriter_valued='bad'), Fact(roe_valued='high'))
    def financial2_rule_2652(self):
        self.declare(Fact(recommendation='Underwriter berkualitas buruk. ROE menunjukkan keuntungan yang tinggi.'))


    @Rule(Fact(warrant_valued='bad'), Fact(net_income_valued='loss'))
    def financial2_rule_2653(self):
        self.declare(Fact(recommendation='Warrant menunjukkan kondisi buruk. Laba bersih menunjukkan kerugian.'))


    @Rule(Fact(warrant_valued='bad'), Fact(per_valued='low'))
    def financial2_rule_2654(self):
        self.declare(Fact(recommendation='Warrant menunjukkan kondisi buruk. PER berada di tingkat yang rendah.'))


    @Rule(Fact(warrant_valued='bad'), Fact(der_valued='low'))
    def financial2_rule_2655(self):
        self.declare(Fact(recommendation='Warrant menunjukkan kondisi buruk. DER menunjukkan tingkat hutang yang rendah.'))


    @Rule(Fact(warrant_valued='bad'), Fact(roa_valued='low'))
    def financial2_rule_2656(self):
        self.declare(Fact(recommendation='Warrant menunjukkan kondisi buruk. ROA menunjukkan efisiensi rendah.'))


    @Rule(Fact(warrant_valued='bad'), Fact(roe_valued='high'))
    def financial2_rule_2657(self):
        self.declare(Fact(recommendation='Warrant menunjukkan kondisi buruk. ROE menunjukkan keuntungan yang tinggi.'))


    @Rule(Fact(net_income_valued='loss'), Fact(per_valued='low'))
    def financial2_rule_2658(self):
        self.declare(Fact(recommendation='Laba bersih menunjukkan kerugian. PER berada di tingkat yang rendah.'))


    @Rule(Fact(net_income_valued='loss'), Fact(der_valued='low'))
    def financial2_rule_2659(self):
        self.declare(Fact(recommendation='Laba bersih menunjukkan kerugian. DER menunjukkan tingkat hutang yang rendah.'))


    @Rule(Fact(net_income_valued='loss'), Fact(roa_valued='low'))
    def financial2_rule_2660(self):
        self.declare(Fact(recommendation='Laba bersih menunjukkan kerugian. ROA menunjukkan efisiensi rendah.'))


    @Rule(Fact(net_income_valued='loss'), Fact(roe_valued='high'))
    def financial2_rule_2661(self):
        self.declare(Fact(recommendation='Laba bersih menunjukkan kerugian. ROE menunjukkan keuntungan yang tinggi.'))


    @Rule(Fact(per_valued='low'), Fact(der_valued='low'))
    def financial2_rule_2662(self):
        self.declare(Fact(recommendation='PER berada di tingkat yang rendah. DER menunjukkan tingkat hutang yang rendah.'))


    @Rule(Fact(per_valued='low'), Fact(roa_valued='low'))
    def financial2_rule_2663(self):
        self.declare(Fact(recommendation='PER berada di tingkat yang rendah. ROA menunjukkan efisiensi rendah.'))


    @Rule(Fact(per_valued='low'), Fact(roe_valued='high'))
    def financial2_rule_2664(self):
        self.declare(Fact(recommendation='PER berada di tingkat yang rendah. ROE menunjukkan keuntungan yang tinggi.'))


    @Rule(Fact(der_valued='low'), Fact(roa_valued='low'))
    def financial2_rule_2665(self):
        self.declare(Fact(recommendation='DER menunjukkan tingkat hutang yang rendah. ROA menunjukkan efisiensi rendah.'))


    @Rule(Fact(der_valued='low'), Fact(roe_valued='high'))
    def financial2_rule_2666(self):
        self.declare(Fact(recommendation='DER menunjukkan tingkat hutang yang rendah. ROE menunjukkan keuntungan yang tinggi.'))


    @Rule(Fact(roa_valued='low'), Fact(roe_valued='high'))
    def financial2_rule_2667(self):
        self.declare(Fact(recommendation='ROA menunjukkan efisiensi rendah. ROE menunjukkan keuntungan yang tinggi.'))


    @Rule(Fact(underwriter_valued='bad'), Fact(warrant_valued='bad'))
    def financial2_rule_2668(self):
        self.declare(Fact(recommendation='Underwriter berkualitas buruk. Warrant menunjukkan kondisi buruk.'))


    @Rule(Fact(underwriter_valued='bad'), Fact(net_income_valued='loss'))
    def financial2_rule_2669(self):
        self.declare(Fact(recommendation='Underwriter berkualitas buruk. Laba bersih menunjukkan kerugian.'))


    @Rule(Fact(underwriter_valued='bad'), Fact(per_valued='low'))
    def financial2_rule_2670(self):
        self.declare(Fact(recommendation='Underwriter berkualitas buruk. PER berada di tingkat yang rendah.'))


    @Rule(Fact(underwriter_valued='bad'), Fact(der_valued='low'))
    def financial2_rule_2671(self):
        self.declare(Fact(recommendation='Underwriter berkualitas buruk. DER menunjukkan tingkat hutang yang rendah.'))


    @Rule(Fact(underwriter_valued='bad'), Fact(roa_valued='low'))
    def financial2_rule_2672(self):
        self.declare(Fact(recommendation='Underwriter berkualitas buruk. ROA menunjukkan efisiensi rendah.'))


    @Rule(Fact(underwriter_valued='bad'), Fact(roe_valued='low'))
    def financial2_rule_2673(self):
        self.declare(Fact(recommendation='Underwriter berkualitas buruk. ROE menunjukkan keuntungan yang rendah.'))


    @Rule(Fact(warrant_valued='bad'), Fact(net_income_valued='loss'))
    def financial2_rule_2674(self):
        self.declare(Fact(recommendation='Warrant menunjukkan kondisi buruk. Laba bersih menunjukkan kerugian.'))


    @Rule(Fact(warrant_valued='bad'), Fact(per_valued='low'))
    def financial2_rule_2675(self):
        self.declare(Fact(recommendation='Warrant menunjukkan kondisi buruk. PER berada di tingkat yang rendah.'))


    @Rule(Fact(warrant_valued='bad'), Fact(der_valued='low'))
    def financial2_rule_2676(self):
        self.declare(Fact(recommendation='Warrant menunjukkan kondisi buruk. DER menunjukkan tingkat hutang yang rendah.'))


    @Rule(Fact(warrant_valued='bad'), Fact(roa_valued='low'))
    def financial2_rule_2677(self):
        self.declare(Fact(recommendation='Warrant menunjukkan kondisi buruk. ROA menunjukkan efisiensi rendah.'))


    @Rule(Fact(warrant_valued='bad'), Fact(roe_valued='low'))
    def financial2_rule_2678(self):
        self.declare(Fact(recommendation='Warrant menunjukkan kondisi buruk. ROE menunjukkan keuntungan yang rendah.'))


    @Rule(Fact(net_income_valued='loss'), Fact(per_valued='low'))
    def financial2_rule_2679(self):
        self.declare(Fact(recommendation='Laba bersih menunjukkan kerugian. PER berada di tingkat yang rendah.'))


    @Rule(Fact(net_income_valued='loss'), Fact(der_valued='low'))
    def financial2_rule_2680(self):
        self.declare(Fact(recommendation='Laba bersih menunjukkan kerugian. DER menunjukkan tingkat hutang yang rendah.'))


    @Rule(Fact(net_income_valued='loss'), Fact(roa_valued='low'))
    def financial2_rule_2681(self):
        self.declare(Fact(recommendation='Laba bersih menunjukkan kerugian. ROA menunjukkan efisiensi rendah.'))


    @Rule(Fact(net_income_valued='loss'), Fact(roe_valued='low'))
    def financial2_rule_2682(self):
        self.declare(Fact(recommendation='Laba bersih menunjukkan kerugian. ROE menunjukkan keuntungan yang rendah.'))


    @Rule(Fact(per_valued='low'), Fact(der_valued='low'))
    def financial2_rule_2683(self):
        self.declare(Fact(recommendation='PER berada di tingkat yang rendah. DER menunjukkan tingkat hutang yang rendah.'))


    @Rule(Fact(per_valued='low'), Fact(roa_valued='low'))
    def financial2_rule_2684(self):
        self.declare(Fact(recommendation='PER berada di tingkat yang rendah. ROA menunjukkan efisiensi rendah.'))


    @Rule(Fact(per_valued='low'), Fact(roe_valued='low'))
    def financial2_rule_2685(self):
        self.declare(Fact(recommendation='PER berada di tingkat yang rendah. ROE menunjukkan keuntungan yang rendah.'))


    @Rule(Fact(der_valued='low'), Fact(roa_valued='low'))
    def financial2_rule_2686(self):
        self.declare(Fact(recommendation='DER menunjukkan tingkat hutang yang rendah. ROA menunjukkan efisiensi rendah.'))


    @Rule(Fact(der_valued='low'), Fact(roe_valued='low'))
    def financial2_rule_2687(self):
        self.declare(Fact(recommendation='DER menunjukkan tingkat hutang yang rendah. ROE menunjukkan keuntungan yang rendah.'))


    @Rule(Fact(roa_valued='low'), Fact(roe_valued='low'))
    def financial2_rule_2688(self):
        self.declare(Fact(recommendation='ROA menunjukkan efisiensi rendah. ROE menunjukkan keuntungan yang rendah.'))



    #Rule IPO 3 Parameter
    @Rule(Fact(underwriter_valued='good'), Fact(warrant_valued='good'), Fact(net_income_valued='profit'))
    def ipo_rule_1(self):
        self.declare(Fact(recommendation='Underwriter berkualitas baik. Warrant menunjukkan kondisi baik. Laba bersih menunjukkan keuntungan.'))


    @Rule(Fact(underwriter_valued='good'), Fact(warrant_valued='good'), Fact(per_valued='high'))
    def ipo_rule_2(self):
        self.declare(Fact(recommendation='Underwriter berkualitas baik. Warrant menunjukkan kondisi baik. PER berada di tingkat yang tinggi.'))


    @Rule(Fact(underwriter_valued='good'), Fact(warrant_valued='good'), Fact(der_valued='high'))
    def ipo_rule_3(self):
        self.declare(Fact(recommendation='Underwriter berkualitas baik. Warrant menunjukkan kondisi baik. DER menunjukkan tingkat hutang yang tinggi.'))


    @Rule(Fact(underwriter_valued='good'), Fact(warrant_valued='good'), Fact(roa_valued='high'))
    def ipo_rule_4(self):
        self.declare(Fact(recommendation='Underwriter berkualitas baik. Warrant menunjukkan kondisi baik. ROA menunjukkan efisiensi tinggi.'))


    @Rule(Fact(underwriter_valued='good'), Fact(warrant_valued='good'), Fact(roe_valued='high'))
    def ipo_rule_5(self):
        self.declare(Fact(recommendation='Underwriter berkualitas baik. Warrant menunjukkan kondisi baik. ROE menunjukkan keuntungan yang tinggi.'))


    @Rule(Fact(underwriter_valued='good'), Fact(net_income_valued='profit'), Fact(per_valued='high'))
    def ipo_rule_6(self):
        self.declare(Fact(recommendation='Underwriter berkualitas baik. Laba bersih menunjukkan keuntungan. PER berada di tingkat yang tinggi.'))


    @Rule(Fact(underwriter_valued='good'), Fact(net_income_valued='profit'), Fact(der_valued='high'))
    def ipo_rule_7(self):
        self.declare(Fact(recommendation='Underwriter berkualitas baik. Laba bersih menunjukkan keuntungan. DER menunjukkan tingkat hutang yang tinggi.'))


    @Rule(Fact(underwriter_valued='good'), Fact(net_income_valued='profit'), Fact(roa_valued='high'))
    def ipo_rule_8(self):
        self.declare(Fact(recommendation='Underwriter berkualitas baik. Laba bersih menunjukkan keuntungan. ROA menunjukkan efisiensi tinggi.'))


    @Rule(Fact(underwriter_valued='good'), Fact(net_income_valued='profit'), Fact(roe_valued='high'))
    def ipo_rule_9(self):
        self.declare(Fact(recommendation='Underwriter berkualitas baik. Laba bersih menunjukkan keuntungan. ROE menunjukkan keuntungan yang tinggi.'))


    @Rule(Fact(underwriter_valued='good'), Fact(per_valued='high'), Fact(der_valued='high'))
    def ipo_rule_10(self):
        self.declare(Fact(recommendation='Underwriter berkualitas baik. PER berada di tingkat yang tinggi. DER menunjukkan tingkat hutang yang tinggi.'))


    @Rule(Fact(underwriter_valued='good'), Fact(per_valued='high'), Fact(roa_valued='high'))
    def ipo_rule_11(self):
        self.declare(Fact(recommendation='Underwriter berkualitas baik. PER berada di tingkat yang tinggi. ROA menunjukkan efisiensi tinggi.'))


    @Rule(Fact(underwriter_valued='good'), Fact(per_valued='high'), Fact(roe_valued='high'))
    def ipo_rule_12(self):
        self.declare(Fact(recommendation='Underwriter berkualitas baik. PER berada di tingkat yang tinggi. ROE menunjukkan keuntungan yang tinggi.'))


    @Rule(Fact(underwriter_valued='good'), Fact(der_valued='high'), Fact(roa_valued='high'))
    def ipo_rule_13(self):
        self.declare(Fact(recommendation='Underwriter berkualitas baik. DER menunjukkan tingkat hutang yang tinggi. ROA menunjukkan efisiensi tinggi.'))


    @Rule(Fact(underwriter_valued='good'), Fact(der_valued='high'), Fact(roe_valued='high'))
    def ipo_rule_14(self):
        self.declare(Fact(recommendation='Underwriter berkualitas baik. DER menunjukkan tingkat hutang yang tinggi. ROE menunjukkan keuntungan yang tinggi.'))


    @Rule(Fact(underwriter_valued='good'), Fact(roa_valued='high'), Fact(roe_valued='high'))
    def ipo_rule_15(self):
        self.declare(Fact(recommendation='Underwriter berkualitas baik. ROA menunjukkan efisiensi tinggi. ROE menunjukkan keuntungan yang tinggi.'))


    @Rule(Fact(warrant_valued='good'), Fact(net_income_valued='profit'), Fact(per_valued='high'))
    def ipo_rule_16(self):
        self.declare(Fact(recommendation='Warrant menunjukkan kondisi baik. Laba bersih menunjukkan keuntungan. PER berada di tingkat yang tinggi.'))


    @Rule(Fact(warrant_valued='good'), Fact(net_income_valued='profit'), Fact(der_valued='high'))
    def ipo_rule_17(self):
        self.declare(Fact(recommendation='Warrant menunjukkan kondisi baik. Laba bersih menunjukkan keuntungan. DER menunjukkan tingkat hutang yang tinggi.'))


    @Rule(Fact(warrant_valued='good'), Fact(net_income_valued='profit'), Fact(roa_valued='high'))
    def ipo_rule_18(self):
        self.declare(Fact(recommendation='Warrant menunjukkan kondisi baik. Laba bersih menunjukkan keuntungan. ROA menunjukkan efisiensi tinggi.'))


    @Rule(Fact(warrant_valued='good'), Fact(net_income_valued='profit'), Fact(roe_valued='high'))
    def ipo_rule_19(self):
        self.declare(Fact(recommendation='Warrant menunjukkan kondisi baik. Laba bersih menunjukkan keuntungan. ROE menunjukkan keuntungan yang tinggi.'))


    @Rule(Fact(warrant_valued='good'), Fact(per_valued='high'), Fact(der_valued='high'))
    def ipo_rule_20(self):
        self.declare(Fact(recommendation='Warrant menunjukkan kondisi baik. PER berada di tingkat yang tinggi. DER menunjukkan tingkat hutang yang tinggi.'))


    @Rule(Fact(warrant_valued='good'), Fact(per_valued='high'), Fact(roa_valued='high'))
    def ipo_rule_21(self):
        self.declare(Fact(recommendation='Warrant menunjukkan kondisi baik. PER berada di tingkat yang tinggi. ROA menunjukkan efisiensi tinggi.'))


    @Rule(Fact(warrant_valued='good'), Fact(per_valued='high'), Fact(roe_valued='high'))
    def ipo_rule_22(self):
        self.declare(Fact(recommendation='Warrant menunjukkan kondisi baik. PER berada di tingkat yang tinggi. ROE menunjukkan keuntungan yang tinggi.'))


    @Rule(Fact(warrant_valued='good'), Fact(der_valued='high'), Fact(roa_valued='high'))
    def ipo_rule_23(self):
        self.declare(Fact(recommendation='Warrant menunjukkan kondisi baik. DER menunjukkan tingkat hutang yang tinggi. ROA menunjukkan efisiensi tinggi.'))


    @Rule(Fact(warrant_valued='good'), Fact(der_valued='high'), Fact(roe_valued='high'))
    def ipo_rule_24(self):
        self.declare(Fact(recommendation='Warrant menunjukkan kondisi baik. DER menunjukkan tingkat hutang yang tinggi. ROE menunjukkan keuntungan yang tinggi.'))


    @Rule(Fact(warrant_valued='good'), Fact(roa_valued='high'), Fact(roe_valued='high'))
    def ipo_rule_25(self):
        self.declare(Fact(recommendation='Warrant menunjukkan kondisi baik. ROA menunjukkan efisiensi tinggi. ROE menunjukkan keuntungan yang tinggi.'))


    @Rule(Fact(net_income_valued='profit'), Fact(per_valued='high'), Fact(der_valued='high'))
    def ipo_rule_26(self):
        self.declare(Fact(recommendation='Laba bersih menunjukkan keuntungan. PER berada di tingkat yang tinggi. DER menunjukkan tingkat hutang yang tinggi.'))


    @Rule(Fact(net_income_valued='profit'), Fact(per_valued='high'), Fact(roa_valued='high'))
    def ipo_rule_27(self):
        self.declare(Fact(recommendation='Laba bersih menunjukkan keuntungan. PER berada di tingkat yang tinggi. ROA menunjukkan efisiensi tinggi.'))


    @Rule(Fact(net_income_valued='profit'), Fact(per_valued='high'), Fact(roe_valued='high'))
    def ipo_rule_28(self):
        self.declare(Fact(recommendation='Laba bersih menunjukkan keuntungan. PER berada di tingkat yang tinggi. ROE menunjukkan keuntungan yang tinggi.'))


    @Rule(Fact(net_income_valued='profit'), Fact(der_valued='high'), Fact(roa_valued='high'))
    def ipo_rule_29(self):
        self.declare(Fact(recommendation='Laba bersih menunjukkan keuntungan. DER menunjukkan tingkat hutang yang tinggi. ROA menunjukkan efisiensi tinggi.'))


    @Rule(Fact(net_income_valued='profit'), Fact(der_valued='high'), Fact(roe_valued='high'))
    def ipo_rule_30(self):
        self.declare(Fact(recommendation='Laba bersih menunjukkan keuntungan. DER menunjukkan tingkat hutang yang tinggi. ROE menunjukkan keuntungan yang tinggi.'))


    @Rule(Fact(net_income_valued='profit'), Fact(roa_valued='high'), Fact(roe_valued='high'))
    def ipo_rule_31(self):
        self.declare(Fact(recommendation='Laba bersih menunjukkan keuntungan. ROA menunjukkan efisiensi tinggi. ROE menunjukkan keuntungan yang tinggi.'))


    @Rule(Fact(per_valued='high'), Fact(der_valued='high'), Fact(roa_valued='high'))
    def ipo_rule_32(self):
        self.declare(Fact(recommendation='PER berada di tingkat yang tinggi. DER menunjukkan tingkat hutang yang tinggi. ROA menunjukkan efisiensi tinggi.'))


    @Rule(Fact(per_valued='high'), Fact(der_valued='high'), Fact(roe_valued='high'))
    def ipo_rule_33(self):
        self.declare(Fact(recommendation='PER berada di tingkat yang tinggi. DER menunjukkan tingkat hutang yang tinggi. ROE menunjukkan keuntungan yang tinggi.'))


    @Rule(Fact(per_valued='high'), Fact(roa_valued='high'), Fact(roe_valued='high'))
    def ipo_rule_34(self):
        self.declare(Fact(recommendation='PER berada di tingkat yang tinggi. ROA menunjukkan efisiensi tinggi. ROE menunjukkan keuntungan yang tinggi.'))


    @Rule(Fact(der_valued='high'), Fact(roa_valued='high'), Fact(roe_valued='high'))
    def ipo_rule_35(self):
        self.declare(Fact(recommendation='DER menunjukkan tingkat hutang yang tinggi. ROA menunjukkan efisiensi tinggi. ROE menunjukkan keuntungan yang tinggi.'))


    @Rule(Fact(underwriter_valued='good'), Fact(warrant_valued='good'), Fact(net_income_valued='profit'))
    def ipo_rule_36(self):
        self.declare(Fact(recommendation='Underwriter berkualitas baik. Warrant menunjukkan kondisi baik. Laba bersih menunjukkan keuntungan.'))


    @Rule(Fact(underwriter_valued='good'), Fact(warrant_valued='good'), Fact(per_valued='high'))
    def ipo_rule_37(self):
        self.declare(Fact(recommendation='Underwriter berkualitas baik. Warrant menunjukkan kondisi baik. PER berada di tingkat yang tinggi.'))


    @Rule(Fact(underwriter_valued='good'), Fact(warrant_valued='good'), Fact(der_valued='high'))
    def ipo_rule_38(self):
        self.declare(Fact(recommendation='Underwriter berkualitas baik. Warrant menunjukkan kondisi baik. DER menunjukkan tingkat hutang yang tinggi.'))


    @Rule(Fact(underwriter_valued='good'), Fact(warrant_valued='good'), Fact(roa_valued='high'))
    def ipo_rule_39(self):
        self.declare(Fact(recommendation='Underwriter berkualitas baik. Warrant menunjukkan kondisi baik. ROA menunjukkan efisiensi tinggi.'))


    @Rule(Fact(underwriter_valued='good'), Fact(warrant_valued='good'), Fact(roe_valued='low'))
    def ipo_rule_40(self):
        self.declare(Fact(recommendation='Underwriter berkualitas baik. Warrant menunjukkan kondisi baik. ROE menunjukkan keuntungan yang rendah.'))


    @Rule(Fact(underwriter_valued='good'), Fact(net_income_valued='profit'), Fact(per_valued='high'))
    def ipo_rule_41(self):
        self.declare(Fact(recommendation='Underwriter berkualitas baik. Laba bersih menunjukkan keuntungan. PER berada di tingkat yang tinggi.'))


    @Rule(Fact(underwriter_valued='good'), Fact(net_income_valued='profit'), Fact(der_valued='high'))
    def ipo_rule_42(self):
        self.declare(Fact(recommendation='Underwriter berkualitas baik. Laba bersih menunjukkan keuntungan. DER menunjukkan tingkat hutang yang tinggi.'))


    @Rule(Fact(underwriter_valued='good'), Fact(net_income_valued='profit'), Fact(roa_valued='high'))
    def ipo_rule_43(self):
        self.declare(Fact(recommendation='Underwriter berkualitas baik. Laba bersih menunjukkan keuntungan. ROA menunjukkan efisiensi tinggi.'))


    @Rule(Fact(underwriter_valued='good'), Fact(net_income_valued='profit'), Fact(roe_valued='low'))
    def ipo_rule_44(self):
        self.declare(Fact(recommendation='Underwriter berkualitas baik. Laba bersih menunjukkan keuntungan. ROE menunjukkan keuntungan yang rendah.'))


    @Rule(Fact(underwriter_valued='good'), Fact(per_valued='high'), Fact(der_valued='high'))
    def ipo_rule_45(self):
        self.declare(Fact(recommendation='Underwriter berkualitas baik. PER berada di tingkat yang tinggi. DER menunjukkan tingkat hutang yang tinggi.'))


    @Rule(Fact(underwriter_valued='good'), Fact(per_valued='high'), Fact(roa_valued='high'))
    def ipo_rule_46(self):
        self.declare(Fact(recommendation='Underwriter berkualitas baik. PER berada di tingkat yang tinggi. ROA menunjukkan efisiensi tinggi.'))


    @Rule(Fact(underwriter_valued='good'), Fact(per_valued='high'), Fact(roe_valued='low'))
    def ipo_rule_47(self):
        self.declare(Fact(recommendation='Underwriter berkualitas baik. PER berada di tingkat yang tinggi. ROE menunjukkan keuntungan yang rendah.'))


    @Rule(Fact(underwriter_valued='good'), Fact(der_valued='high'), Fact(roa_valued='high'))
    def ipo_rule_48(self):
        self.declare(Fact(recommendation='Underwriter berkualitas baik. DER menunjukkan tingkat hutang yang tinggi. ROA menunjukkan efisiensi tinggi.'))


    @Rule(Fact(underwriter_valued='good'), Fact(der_valued='high'), Fact(roe_valued='low'))
    def ipo_rule_49(self):
        self.declare(Fact(recommendation='Underwriter berkualitas baik. DER menunjukkan tingkat hutang yang tinggi. ROE menunjukkan keuntungan yang rendah.'))


    @Rule(Fact(underwriter_valued='good'), Fact(roa_valued='high'), Fact(roe_valued='low'))
    def ipo_rule_50(self):
        self.declare(Fact(recommendation='Underwriter berkualitas baik. ROA menunjukkan efisiensi tinggi. ROE menunjukkan keuntungan yang rendah.'))


    @Rule(Fact(warrant_valued='good'), Fact(net_income_valued='profit'), Fact(per_valued='high'))
    def ipo_rule_51(self):
        self.declare(Fact(recommendation='Warrant menunjukkan kondisi baik. Laba bersih menunjukkan keuntungan. PER berada di tingkat yang tinggi.'))


    @Rule(Fact(warrant_valued='good'), Fact(net_income_valued='profit'), Fact(der_valued='high'))
    def ipo_rule_52(self):
        self.declare(Fact(recommendation='Warrant menunjukkan kondisi baik. Laba bersih menunjukkan keuntungan. DER menunjukkan tingkat hutang yang tinggi.'))


    @Rule(Fact(warrant_valued='good'), Fact(net_income_valued='profit'), Fact(roa_valued='high'))
    def ipo_rule_53(self):
        self.declare(Fact(recommendation='Warrant menunjukkan kondisi baik. Laba bersih menunjukkan keuntungan. ROA menunjukkan efisiensi tinggi.'))


    @Rule(Fact(warrant_valued='good'), Fact(net_income_valued='profit'), Fact(roe_valued='low'))
    def ipo_rule_54(self):
        self.declare(Fact(recommendation='Warrant menunjukkan kondisi baik. Laba bersih menunjukkan keuntungan. ROE menunjukkan keuntungan yang rendah.'))


    @Rule(Fact(warrant_valued='good'), Fact(per_valued='high'), Fact(der_valued='high'))
    def ipo_rule_55(self):
        self.declare(Fact(recommendation='Warrant menunjukkan kondisi baik. PER berada di tingkat yang tinggi. DER menunjukkan tingkat hutang yang tinggi.'))


    @Rule(Fact(warrant_valued='good'), Fact(per_valued='high'), Fact(roa_valued='high'))
    def ipo_rule_56(self):
        self.declare(Fact(recommendation='Warrant menunjukkan kondisi baik. PER berada di tingkat yang tinggi. ROA menunjukkan efisiensi tinggi.'))


    @Rule(Fact(warrant_valued='good'), Fact(per_valued='high'), Fact(roe_valued='low'))
    def ipo_rule_57(self):
        self.declare(Fact(recommendation='Warrant menunjukkan kondisi baik. PER berada di tingkat yang tinggi. ROE menunjukkan keuntungan yang rendah.'))


    @Rule(Fact(warrant_valued='good'), Fact(der_valued='high'), Fact(roa_valued='high'))
    def ipo_rule_58(self):
        self.declare(Fact(recommendation='Warrant menunjukkan kondisi baik. DER menunjukkan tingkat hutang yang tinggi. ROA menunjukkan efisiensi tinggi.'))


    @Rule(Fact(warrant_valued='good'), Fact(der_valued='high'), Fact(roe_valued='low'))
    def ipo_rule_59(self):
        self.declare(Fact(recommendation='Warrant menunjukkan kondisi baik. DER menunjukkan tingkat hutang yang tinggi. ROE menunjukkan keuntungan yang rendah.'))


    @Rule(Fact(warrant_valued='good'), Fact(roa_valued='high'), Fact(roe_valued='low'))
    def ipo_rule_60(self):
        self.declare(Fact(recommendation='Warrant menunjukkan kondisi baik. ROA menunjukkan efisiensi tinggi. ROE menunjukkan keuntungan yang rendah.'))


    @Rule(Fact(net_income_valued='profit'), Fact(per_valued='high'), Fact(der_valued='high'))
    def ipo_rule_61(self):
        self.declare(Fact(recommendation='Laba bersih menunjukkan keuntungan. PER berada di tingkat yang tinggi. DER menunjukkan tingkat hutang yang tinggi.'))


    @Rule(Fact(net_income_valued='profit'), Fact(per_valued='high'), Fact(roa_valued='high'))
    def ipo_rule_62(self):
        self.declare(Fact(recommendation='Laba bersih menunjukkan keuntungan. PER berada di tingkat yang tinggi. ROA menunjukkan efisiensi tinggi.'))


    @Rule(Fact(net_income_valued='profit'), Fact(per_valued='high'), Fact(roe_valued='low'))
    def ipo_rule_63(self):
        self.declare(Fact(recommendation='Laba bersih menunjukkan keuntungan. PER berada di tingkat yang tinggi. ROE menunjukkan keuntungan yang rendah.'))


    @Rule(Fact(net_income_valued='profit'), Fact(der_valued='high'), Fact(roa_valued='high'))
    def ipo_rule_64(self):
        self.declare(Fact(recommendation='Laba bersih menunjukkan keuntungan. DER menunjukkan tingkat hutang yang tinggi. ROA menunjukkan efisiensi tinggi.'))


    @Rule(Fact(net_income_valued='profit'), Fact(der_valued='high'), Fact(roe_valued='low'))
    def ipo_rule_65(self):
        self.declare(Fact(recommendation='Laba bersih menunjukkan keuntungan. DER menunjukkan tingkat hutang yang tinggi. ROE menunjukkan keuntungan yang rendah.'))


    @Rule(Fact(net_income_valued='profit'), Fact(roa_valued='high'), Fact(roe_valued='low'))
    def ipo_rule_66(self):
        self.declare(Fact(recommendation='Laba bersih menunjukkan keuntungan. ROA menunjukkan efisiensi tinggi. ROE menunjukkan keuntungan yang rendah.'))


    @Rule(Fact(per_valued='high'), Fact(der_valued='high'), Fact(roa_valued='high'))
    def ipo_rule_67(self):
        self.declare(Fact(recommendation='PER berada di tingkat yang tinggi. DER menunjukkan tingkat hutang yang tinggi. ROA menunjukkan efisiensi tinggi.'))


    @Rule(Fact(per_valued='high'), Fact(der_valued='high'), Fact(roe_valued='low'))
    def ipo_rule_68(self):
        self.declare(Fact(recommendation='PER berada di tingkat yang tinggi. DER menunjukkan tingkat hutang yang tinggi. ROE menunjukkan keuntungan yang rendah.'))


    @Rule(Fact(per_valued='high'), Fact(roa_valued='high'), Fact(roe_valued='low'))
    def ipo_rule_69(self):
        self.declare(Fact(recommendation='PER berada di tingkat yang tinggi. ROA menunjukkan efisiensi tinggi. ROE menunjukkan keuntungan yang rendah.'))


    @Rule(Fact(der_valued='high'), Fact(roa_valued='high'), Fact(roe_valued='low'))
    def ipo_rule_70(self):
        self.declare(Fact(recommendation='DER menunjukkan tingkat hutang yang tinggi. ROA menunjukkan efisiensi tinggi. ROE menunjukkan keuntungan yang rendah.'))


    @Rule(Fact(underwriter_valued='good'), Fact(warrant_valued='good'), Fact(net_income_valued='profit'))
    def ipo_rule_71(self):
        self.declare(Fact(recommendation='Underwriter berkualitas baik. Warrant menunjukkan kondisi baik. Laba bersih menunjukkan keuntungan.'))


    @Rule(Fact(underwriter_valued='good'), Fact(warrant_valued='good'), Fact(per_valued='high'))
    def ipo_rule_72(self):
        self.declare(Fact(recommendation='Underwriter berkualitas baik. Warrant menunjukkan kondisi baik. PER berada di tingkat yang tinggi.'))


    @Rule(Fact(underwriter_valued='good'), Fact(warrant_valued='good'), Fact(der_valued='high'))
    def ipo_rule_73(self):
        self.declare(Fact(recommendation='Underwriter berkualitas baik. Warrant menunjukkan kondisi baik. DER menunjukkan tingkat hutang yang tinggi.'))


    @Rule(Fact(underwriter_valued='good'), Fact(warrant_valued='good'), Fact(roa_valued='low'))
    def ipo_rule_74(self):
        self.declare(Fact(recommendation='Underwriter berkualitas baik. Warrant menunjukkan kondisi baik. ROA menunjukkan efisiensi rendah.'))


    @Rule(Fact(underwriter_valued='good'), Fact(warrant_valued='good'), Fact(roe_valued='high'))
    def ipo_rule_75(self):
        self.declare(Fact(recommendation='Underwriter berkualitas baik. Warrant menunjukkan kondisi baik. ROE menunjukkan keuntungan yang tinggi.'))


    @Rule(Fact(underwriter_valued='good'), Fact(net_income_valued='profit'), Fact(per_valued='high'))
    def ipo_rule_76(self):
        self.declare(Fact(recommendation='Underwriter berkualitas baik. Laba bersih menunjukkan keuntungan. PER berada di tingkat yang tinggi.'))


    @Rule(Fact(underwriter_valued='good'), Fact(net_income_valued='profit'), Fact(der_valued='high'))
    def ipo_rule_77(self):
        self.declare(Fact(recommendation='Underwriter berkualitas baik. Laba bersih menunjukkan keuntungan. DER menunjukkan tingkat hutang yang tinggi.'))


    @Rule(Fact(underwriter_valued='good'), Fact(net_income_valued='profit'), Fact(roa_valued='low'))
    def ipo_rule_78(self):
        self.declare(Fact(recommendation='Underwriter berkualitas baik. Laba bersih menunjukkan keuntungan. ROA menunjukkan efisiensi rendah.'))


    @Rule(Fact(underwriter_valued='good'), Fact(net_income_valued='profit'), Fact(roe_valued='high'))
    def ipo_rule_79(self):
        self.declare(Fact(recommendation='Underwriter berkualitas baik. Laba bersih menunjukkan keuntungan. ROE menunjukkan keuntungan yang tinggi.'))


    @Rule(Fact(underwriter_valued='good'), Fact(per_valued='high'), Fact(der_valued='high'))
    def ipo_rule_80(self):
        self.declare(Fact(recommendation='Underwriter berkualitas baik. PER berada di tingkat yang tinggi. DER menunjukkan tingkat hutang yang tinggi.'))


    @Rule(Fact(underwriter_valued='good'), Fact(per_valued='high'), Fact(roa_valued='low'))
    def ipo_rule_81(self):
        self.declare(Fact(recommendation='Underwriter berkualitas baik. PER berada di tingkat yang tinggi. ROA menunjukkan efisiensi rendah.'))


    @Rule(Fact(underwriter_valued='good'), Fact(per_valued='high'), Fact(roe_valued='high'))
    def ipo_rule_82(self):
        self.declare(Fact(recommendation='Underwriter berkualitas baik. PER berada di tingkat yang tinggi. ROE menunjukkan keuntungan yang tinggi.'))


    @Rule(Fact(underwriter_valued='good'), Fact(der_valued='high'), Fact(roa_valued='low'))
    def ipo_rule_83(self):
        self.declare(Fact(recommendation='Underwriter berkualitas baik. DER menunjukkan tingkat hutang yang tinggi. ROA menunjukkan efisiensi rendah.'))


    @Rule(Fact(underwriter_valued='good'), Fact(der_valued='high'), Fact(roe_valued='high'))
    def ipo_rule_84(self):
        self.declare(Fact(recommendation='Underwriter berkualitas baik. DER menunjukkan tingkat hutang yang tinggi. ROE menunjukkan keuntungan yang tinggi.'))


    @Rule(Fact(underwriter_valued='good'), Fact(roa_valued='low'), Fact(roe_valued='high'))
    def ipo_rule_85(self):
        self.declare(Fact(recommendation='Underwriter berkualitas baik. ROA menunjukkan efisiensi rendah. ROE menunjukkan keuntungan yang tinggi.'))


    @Rule(Fact(warrant_valued='good'), Fact(net_income_valued='profit'), Fact(per_valued='high'))
    def ipo_rule_86(self):
        self.declare(Fact(recommendation='Warrant menunjukkan kondisi baik. Laba bersih menunjukkan keuntungan. PER berada di tingkat yang tinggi.'))


    @Rule(Fact(warrant_valued='good'), Fact(net_income_valued='profit'), Fact(der_valued='high'))
    def ipo_rule_87(self):
        self.declare(Fact(recommendation='Warrant menunjukkan kondisi baik. Laba bersih menunjukkan keuntungan. DER menunjukkan tingkat hutang yang tinggi.'))


    @Rule(Fact(warrant_valued='good'), Fact(net_income_valued='profit'), Fact(roa_valued='low'))
    def ipo_rule_88(self):
        self.declare(Fact(recommendation='Warrant menunjukkan kondisi baik. Laba bersih menunjukkan keuntungan. ROA menunjukkan efisiensi rendah.'))


    @Rule(Fact(warrant_valued='good'), Fact(net_income_valued='profit'), Fact(roe_valued='high'))
    def ipo_rule_89(self):
        self.declare(Fact(recommendation='Warrant menunjukkan kondisi baik. Laba bersih menunjukkan keuntungan. ROE menunjukkan keuntungan yang tinggi.'))


    @Rule(Fact(warrant_valued='good'), Fact(per_valued='high'), Fact(der_valued='high'))
    def ipo_rule_90(self):
        self.declare(Fact(recommendation='Warrant menunjukkan kondisi baik. PER berada di tingkat yang tinggi. DER menunjukkan tingkat hutang yang tinggi.'))


    @Rule(Fact(warrant_valued='good'), Fact(per_valued='high'), Fact(roa_valued='low'))
    def ipo_rule_91(self):
        self.declare(Fact(recommendation='Warrant menunjukkan kondisi baik. PER berada di tingkat yang tinggi. ROA menunjukkan efisiensi rendah.'))


    @Rule(Fact(warrant_valued='good'), Fact(per_valued='high'), Fact(roe_valued='high'))
    def ipo_rule_92(self):
        self.declare(Fact(recommendation='Warrant menunjukkan kondisi baik. PER berada di tingkat yang tinggi. ROE menunjukkan keuntungan yang tinggi.'))


    @Rule(Fact(warrant_valued='good'), Fact(der_valued='high'), Fact(roa_valued='low'))
    def ipo_rule_93(self):
        self.declare(Fact(recommendation='Warrant menunjukkan kondisi baik. DER menunjukkan tingkat hutang yang tinggi. ROA menunjukkan efisiensi rendah.'))


    @Rule(Fact(warrant_valued='good'), Fact(der_valued='high'), Fact(roe_valued='high'))
    def ipo_rule_94(self):
        self.declare(Fact(recommendation='Warrant menunjukkan kondisi baik. DER menunjukkan tingkat hutang yang tinggi. ROE menunjukkan keuntungan yang tinggi.'))


    @Rule(Fact(warrant_valued='good'), Fact(roa_valued='low'), Fact(roe_valued='high'))
    def ipo_rule_95(self):
        self.declare(Fact(recommendation='Warrant menunjukkan kondisi baik. ROA menunjukkan efisiensi rendah. ROE menunjukkan keuntungan yang tinggi.'))


    @Rule(Fact(net_income_valued='profit'), Fact(per_valued='high'), Fact(der_valued='high'))
    def ipo_rule_96(self):
        self.declare(Fact(recommendation='Laba bersih menunjukkan keuntungan. PER berada di tingkat yang tinggi. DER menunjukkan tingkat hutang yang tinggi.'))


    @Rule(Fact(net_income_valued='profit'), Fact(per_valued='high'), Fact(roa_valued='low'))
    def ipo_rule_97(self):
        self.declare(Fact(recommendation='Laba bersih menunjukkan keuntungan. PER berada di tingkat yang tinggi. ROA menunjukkan efisiensi rendah.'))


    @Rule(Fact(net_income_valued='profit'), Fact(per_valued='high'), Fact(roe_valued='high'))
    def ipo_rule_98(self):
        self.declare(Fact(recommendation='Laba bersih menunjukkan keuntungan. PER berada di tingkat yang tinggi. ROE menunjukkan keuntungan yang tinggi.'))


    @Rule(Fact(net_income_valued='profit'), Fact(der_valued='high'), Fact(roa_valued='low'))
    def ipo_rule_99(self):
        self.declare(Fact(recommendation='Laba bersih menunjukkan keuntungan. DER menunjukkan tingkat hutang yang tinggi. ROA menunjukkan efisiensi rendah.'))


    @Rule(Fact(net_income_valued='profit'), Fact(der_valued='high'), Fact(roe_valued='high'))
    def ipo_rule_100(self):
        self.declare(Fact(recommendation='Laba bersih menunjukkan keuntungan. DER menunjukkan tingkat hutang yang tinggi. ROE menunjukkan keuntungan yang tinggi.'))


    @Rule(Fact(net_income_valued='profit'), Fact(roa_valued='low'), Fact(roe_valued='high'))
    def ipo_rule_101(self):
        self.declare(Fact(recommendation='Laba bersih menunjukkan keuntungan. ROA menunjukkan efisiensi rendah. ROE menunjukkan keuntungan yang tinggi.'))


    @Rule(Fact(per_valued='high'), Fact(der_valued='high'), Fact(roa_valued='low'))
    def ipo_rule_102(self):
        self.declare(Fact(recommendation='PER berada di tingkat yang tinggi. DER menunjukkan tingkat hutang yang tinggi. ROA menunjukkan efisiensi rendah.'))


    @Rule(Fact(per_valued='high'), Fact(der_valued='high'), Fact(roe_valued='high'))
    def ipo_rule_103(self):
        self.declare(Fact(recommendation='PER berada di tingkat yang tinggi. DER menunjukkan tingkat hutang yang tinggi. ROE menunjukkan keuntungan yang tinggi.'))


    @Rule(Fact(per_valued='high'), Fact(roa_valued='low'), Fact(roe_valued='high'))
    def ipo_rule_104(self):
        self.declare(Fact(recommendation='PER berada di tingkat yang tinggi. ROA menunjukkan efisiensi rendah. ROE menunjukkan keuntungan yang tinggi.'))


    @Rule(Fact(der_valued='high'), Fact(roa_valued='low'), Fact(roe_valued='high'))
    def ipo_rule_105(self):
        self.declare(Fact(recommendation='DER menunjukkan tingkat hutang yang tinggi. ROA menunjukkan efisiensi rendah. ROE menunjukkan keuntungan yang tinggi.'))


    @Rule(Fact(underwriter_valued='good'), Fact(warrant_valued='good'), Fact(net_income_valued='profit'))
    def ipo_rule_106(self):
        self.declare(Fact(recommendation='Underwriter berkualitas baik. Warrant menunjukkan kondisi baik. Laba bersih menunjukkan keuntungan.'))


    @Rule(Fact(underwriter_valued='good'), Fact(warrant_valued='good'), Fact(per_valued='high'))
    def ipo_rule_107(self):
        self.declare(Fact(recommendation='Underwriter berkualitas baik. Warrant menunjukkan kondisi baik. PER berada di tingkat yang tinggi.'))


    @Rule(Fact(underwriter_valued='good'), Fact(warrant_valued='good'), Fact(der_valued='high'))
    def ipo_rule_108(self):
        self.declare(Fact(recommendation='Underwriter berkualitas baik. Warrant menunjukkan kondisi baik. DER menunjukkan tingkat hutang yang tinggi.'))


    @Rule(Fact(underwriter_valued='good'), Fact(warrant_valued='good'), Fact(roa_valued='low'))
    def ipo_rule_109(self):
        self.declare(Fact(recommendation='Underwriter berkualitas baik. Warrant menunjukkan kondisi baik. ROA menunjukkan efisiensi rendah.'))


    @Rule(Fact(underwriter_valued='good'), Fact(warrant_valued='good'), Fact(roe_valued='low'))
    def ipo_rule_110(self):
        self.declare(Fact(recommendation='Underwriter berkualitas baik. Warrant menunjukkan kondisi baik. ROE menunjukkan keuntungan yang rendah.'))


    @Rule(Fact(underwriter_valued='good'), Fact(net_income_valued='profit'), Fact(per_valued='high'))
    def ipo_rule_111(self):
        self.declare(Fact(recommendation='Underwriter berkualitas baik. Laba bersih menunjukkan keuntungan. PER berada di tingkat yang tinggi.'))


    @Rule(Fact(underwriter_valued='good'), Fact(net_income_valued='profit'), Fact(der_valued='high'))
    def ipo_rule_112(self):
        self.declare(Fact(recommendation='Underwriter berkualitas baik. Laba bersih menunjukkan keuntungan. DER menunjukkan tingkat hutang yang tinggi.'))


    @Rule(Fact(underwriter_valued='good'), Fact(net_income_valued='profit'), Fact(roa_valued='low'))
    def ipo_rule_113(self):
        self.declare(Fact(recommendation='Underwriter berkualitas baik. Laba bersih menunjukkan keuntungan. ROA menunjukkan efisiensi rendah.'))


    @Rule(Fact(underwriter_valued='good'), Fact(net_income_valued='profit'), Fact(roe_valued='low'))
    def ipo_rule_114(self):
        self.declare(Fact(recommendation='Underwriter berkualitas baik. Laba bersih menunjukkan keuntungan. ROE menunjukkan keuntungan yang rendah.'))


    @Rule(Fact(underwriter_valued='good'), Fact(per_valued='high'), Fact(der_valued='high'))
    def ipo_rule_115(self):
        self.declare(Fact(recommendation='Underwriter berkualitas baik. PER berada di tingkat yang tinggi. DER menunjukkan tingkat hutang yang tinggi.'))


    @Rule(Fact(underwriter_valued='good'), Fact(per_valued='high'), Fact(roa_valued='low'))
    def ipo_rule_116(self):
        self.declare(Fact(recommendation='Underwriter berkualitas baik. PER berada di tingkat yang tinggi. ROA menunjukkan efisiensi rendah.'))


    @Rule(Fact(underwriter_valued='good'), Fact(per_valued='high'), Fact(roe_valued='low'))
    def ipo_rule_117(self):
        self.declare(Fact(recommendation='Underwriter berkualitas baik. PER berada di tingkat yang tinggi. ROE menunjukkan keuntungan yang rendah.'))


    @Rule(Fact(underwriter_valued='good'), Fact(der_valued='high'), Fact(roa_valued='low'))
    def ipo_rule_118(self):
        self.declare(Fact(recommendation='Underwriter berkualitas baik. DER menunjukkan tingkat hutang yang tinggi. ROA menunjukkan efisiensi rendah.'))


    @Rule(Fact(underwriter_valued='good'), Fact(der_valued='high'), Fact(roe_valued='low'))
    def ipo_rule_119(self):
        self.declare(Fact(recommendation='Underwriter berkualitas baik. DER menunjukkan tingkat hutang yang tinggi. ROE menunjukkan keuntungan yang rendah.'))


    @Rule(Fact(underwriter_valued='good'), Fact(roa_valued='low'), Fact(roe_valued='low'))
    def ipo_rule_120(self):
        self.declare(Fact(recommendation='Underwriter berkualitas baik. ROA menunjukkan efisiensi rendah. ROE menunjukkan keuntungan yang rendah.'))


    @Rule(Fact(warrant_valued='good'), Fact(net_income_valued='profit'), Fact(per_valued='high'))
    def ipo_rule_121(self):
        self.declare(Fact(recommendation='Warrant menunjukkan kondisi baik. Laba bersih menunjukkan keuntungan. PER berada di tingkat yang tinggi.'))


    @Rule(Fact(warrant_valued='good'), Fact(net_income_valued='profit'), Fact(der_valued='high'))
    def ipo_rule_122(self):
        self.declare(Fact(recommendation='Warrant menunjukkan kondisi baik. Laba bersih menunjukkan keuntungan. DER menunjukkan tingkat hutang yang tinggi.'))


    @Rule(Fact(warrant_valued='good'), Fact(net_income_valued='profit'), Fact(roa_valued='low'))
    def ipo_rule_123(self):
        self.declare(Fact(recommendation='Warrant menunjukkan kondisi baik. Laba bersih menunjukkan keuntungan. ROA menunjukkan efisiensi rendah.'))


    @Rule(Fact(warrant_valued='good'), Fact(net_income_valued='profit'), Fact(roe_valued='low'))
    def ipo_rule_124(self):
        self.declare(Fact(recommendation='Warrant menunjukkan kondisi baik. Laba bersih menunjukkan keuntungan. ROE menunjukkan keuntungan yang rendah.'))


    @Rule(Fact(warrant_valued='good'), Fact(per_valued='high'), Fact(der_valued='high'))
    def ipo_rule_125(self):
        self.declare(Fact(recommendation='Warrant menunjukkan kondisi baik. PER berada di tingkat yang tinggi. DER menunjukkan tingkat hutang yang tinggi.'))


    @Rule(Fact(warrant_valued='good'), Fact(per_valued='high'), Fact(roa_valued='low'))
    def ipo_rule_126(self):
        self.declare(Fact(recommendation='Warrant menunjukkan kondisi baik. PER berada di tingkat yang tinggi. ROA menunjukkan efisiensi rendah.'))


    @Rule(Fact(warrant_valued='good'), Fact(per_valued='high'), Fact(roe_valued='low'))
    def ipo_rule_127(self):
        self.declare(Fact(recommendation='Warrant menunjukkan kondisi baik. PER berada di tingkat yang tinggi. ROE menunjukkan keuntungan yang rendah.'))


    @Rule(Fact(warrant_valued='good'), Fact(der_valued='high'), Fact(roa_valued='low'))
    def ipo_rule_128(self):
        self.declare(Fact(recommendation='Warrant menunjukkan kondisi baik. DER menunjukkan tingkat hutang yang tinggi. ROA menunjukkan efisiensi rendah.'))


    @Rule(Fact(warrant_valued='good'), Fact(der_valued='high'), Fact(roe_valued='low'))
    def ipo_rule_129(self):
        self.declare(Fact(recommendation='Warrant menunjukkan kondisi baik. DER menunjukkan tingkat hutang yang tinggi. ROE menunjukkan keuntungan yang rendah.'))


    @Rule(Fact(warrant_valued='good'), Fact(roa_valued='low'), Fact(roe_valued='low'))
    def ipo_rule_130(self):
        self.declare(Fact(recommendation='Warrant menunjukkan kondisi baik. ROA menunjukkan efisiensi rendah. ROE menunjukkan keuntungan yang rendah.'))


    @Rule(Fact(net_income_valued='profit'), Fact(per_valued='high'), Fact(der_valued='high'))
    def ipo_rule_131(self):
        self.declare(Fact(recommendation='Laba bersih menunjukkan keuntungan. PER berada di tingkat yang tinggi. DER menunjukkan tingkat hutang yang tinggi.'))


    @Rule(Fact(net_income_valued='profit'), Fact(per_valued='high'), Fact(roa_valued='low'))
    def ipo_rule_132(self):
        self.declare(Fact(recommendation='Laba bersih menunjukkan keuntungan. PER berada di tingkat yang tinggi. ROA menunjukkan efisiensi rendah.'))


    @Rule(Fact(net_income_valued='profit'), Fact(per_valued='high'), Fact(roe_valued='low'))
    def ipo_rule_133(self):
        self.declare(Fact(recommendation='Laba bersih menunjukkan keuntungan. PER berada di tingkat yang tinggi. ROE menunjukkan keuntungan yang rendah.'))


    @Rule(Fact(net_income_valued='profit'), Fact(der_valued='high'), Fact(roa_valued='low'))
    def ipo_rule_134(self):
        self.declare(Fact(recommendation='Laba bersih menunjukkan keuntungan. DER menunjukkan tingkat hutang yang tinggi. ROA menunjukkan efisiensi rendah.'))


    @Rule(Fact(net_income_valued='profit'), Fact(der_valued='high'), Fact(roe_valued='low'))
    def ipo_rule_135(self):
        self.declare(Fact(recommendation='Laba bersih menunjukkan keuntungan. DER menunjukkan tingkat hutang yang tinggi. ROE menunjukkan keuntungan yang rendah.'))


    @Rule(Fact(net_income_valued='profit'), Fact(roa_valued='low'), Fact(roe_valued='low'))
    def ipo_rule_136(self):
        self.declare(Fact(recommendation='Laba bersih menunjukkan keuntungan. ROA menunjukkan efisiensi rendah. ROE menunjukkan keuntungan yang rendah.'))


    @Rule(Fact(per_valued='high'), Fact(der_valued='high'), Fact(roa_valued='low'))
    def ipo_rule_137(self):
        self.declare(Fact(recommendation='PER berada di tingkat yang tinggi. DER menunjukkan tingkat hutang yang tinggi. ROA menunjukkan efisiensi rendah.'))


    @Rule(Fact(per_valued='high'), Fact(der_valued='high'), Fact(roe_valued='low'))
    def ipo_rule_138(self):
        self.declare(Fact(recommendation='PER berada di tingkat yang tinggi. DER menunjukkan tingkat hutang yang tinggi. ROE menunjukkan keuntungan yang rendah.'))


    @Rule(Fact(per_valued='high'), Fact(roa_valued='low'), Fact(roe_valued='low'))
    def ipo_rule_139(self):
        self.declare(Fact(recommendation='PER berada di tingkat yang tinggi. ROA menunjukkan efisiensi rendah. ROE menunjukkan keuntungan yang rendah.'))


    @Rule(Fact(der_valued='high'), Fact(roa_valued='low'), Fact(roe_valued='low'))
    def ipo_rule_140(self):
        self.declare(Fact(recommendation='DER menunjukkan tingkat hutang yang tinggi. ROA menunjukkan efisiensi rendah. ROE menunjukkan keuntungan yang rendah.'))


    @Rule(Fact(underwriter_valued='good'), Fact(warrant_valued='good'), Fact(net_income_valued='profit'))
    def ipo_rule_141(self):
        self.declare(Fact(recommendation='Underwriter berkualitas baik. Warrant menunjukkan kondisi baik. Laba bersih menunjukkan keuntungan.'))


    @Rule(Fact(underwriter_valued='good'), Fact(warrant_valued='good'), Fact(per_valued='high'))
    def ipo_rule_142(self):
        self.declare(Fact(recommendation='Underwriter berkualitas baik. Warrant menunjukkan kondisi baik. PER berada di tingkat yang tinggi.'))


    @Rule(Fact(underwriter_valued='good'), Fact(warrant_valued='good'), Fact(der_valued='low'))
    def ipo_rule_143(self):
        self.declare(Fact(recommendation='Underwriter berkualitas baik. Warrant menunjukkan kondisi baik. DER menunjukkan tingkat hutang yang rendah.'))


    @Rule(Fact(underwriter_valued='good'), Fact(warrant_valued='good'), Fact(roa_valued='high'))
    def ipo_rule_144(self):
        self.declare(Fact(recommendation='Underwriter berkualitas baik. Warrant menunjukkan kondisi baik. ROA menunjukkan efisiensi tinggi.'))


    @Rule(Fact(underwriter_valued='good'), Fact(warrant_valued='good'), Fact(roe_valued='high'))
    def ipo_rule_145(self):
        self.declare(Fact(recommendation='Underwriter berkualitas baik. Warrant menunjukkan kondisi baik. ROE menunjukkan keuntungan yang tinggi.'))


    @Rule(Fact(underwriter_valued='good'), Fact(net_income_valued='profit'), Fact(per_valued='high'))
    def ipo_rule_146(self):
        self.declare(Fact(recommendation='Underwriter berkualitas baik. Laba bersih menunjukkan keuntungan. PER berada di tingkat yang tinggi.'))


    @Rule(Fact(underwriter_valued='good'), Fact(net_income_valued='profit'), Fact(der_valued='low'))
    def ipo_rule_147(self):
        self.declare(Fact(recommendation='Underwriter berkualitas baik. Laba bersih menunjukkan keuntungan. DER menunjukkan tingkat hutang yang rendah.'))


    @Rule(Fact(underwriter_valued='good'), Fact(net_income_valued='profit'), Fact(roa_valued='high'))
    def ipo_rule_148(self):
        self.declare(Fact(recommendation='Underwriter berkualitas baik. Laba bersih menunjukkan keuntungan. ROA menunjukkan efisiensi tinggi.'))


    @Rule(Fact(underwriter_valued='good'), Fact(net_income_valued='profit'), Fact(roe_valued='high'))
    def ipo_rule_149(self):
        self.declare(Fact(recommendation='Underwriter berkualitas baik. Laba bersih menunjukkan keuntungan. ROE menunjukkan keuntungan yang tinggi.'))


    @Rule(Fact(underwriter_valued='good'), Fact(per_valued='high'), Fact(der_valued='low'))
    def ipo_rule_150(self):
        self.declare(Fact(recommendation='Underwriter berkualitas baik. PER berada di tingkat yang tinggi. DER menunjukkan tingkat hutang yang rendah.'))


    @Rule(Fact(underwriter_valued='good'), Fact(per_valued='high'), Fact(roa_valued='high'))
    def ipo_rule_151(self):
        self.declare(Fact(recommendation='Underwriter berkualitas baik. PER berada di tingkat yang tinggi. ROA menunjukkan efisiensi tinggi.'))


    @Rule(Fact(underwriter_valued='good'), Fact(per_valued='high'), Fact(roe_valued='high'))
    def ipo_rule_152(self):
        self.declare(Fact(recommendation='Underwriter berkualitas baik. PER berada di tingkat yang tinggi. ROE menunjukkan keuntungan yang tinggi.'))


    @Rule(Fact(underwriter_valued='good'), Fact(der_valued='low'), Fact(roa_valued='high'))
    def ipo_rule_153(self):
        self.declare(Fact(recommendation='Underwriter berkualitas baik. DER menunjukkan tingkat hutang yang rendah. ROA menunjukkan efisiensi tinggi.'))


    @Rule(Fact(underwriter_valued='good'), Fact(der_valued='low'), Fact(roe_valued='high'))
    def ipo_rule_154(self):
        self.declare(Fact(recommendation='Underwriter berkualitas baik. DER menunjukkan tingkat hutang yang rendah. ROE menunjukkan keuntungan yang tinggi.'))


    @Rule(Fact(underwriter_valued='good'), Fact(roa_valued='high'), Fact(roe_valued='high'))
    def ipo_rule_155(self):
        self.declare(Fact(recommendation='Underwriter berkualitas baik. ROA menunjukkan efisiensi tinggi. ROE menunjukkan keuntungan yang tinggi.'))


    @Rule(Fact(warrant_valued='good'), Fact(net_income_valued='profit'), Fact(per_valued='high'))
    def ipo_rule_156(self):
        self.declare(Fact(recommendation='Warrant menunjukkan kondisi baik. Laba bersih menunjukkan keuntungan. PER berada di tingkat yang tinggi.'))


    @Rule(Fact(warrant_valued='good'), Fact(net_income_valued='profit'), Fact(der_valued='low'))
    def ipo_rule_157(self):
        self.declare(Fact(recommendation='Warrant menunjukkan kondisi baik. Laba bersih menunjukkan keuntungan. DER menunjukkan tingkat hutang yang rendah.'))


    @Rule(Fact(warrant_valued='good'), Fact(net_income_valued='profit'), Fact(roa_valued='high'))
    def ipo_rule_158(self):
        self.declare(Fact(recommendation='Warrant menunjukkan kondisi baik. Laba bersih menunjukkan keuntungan. ROA menunjukkan efisiensi tinggi.'))


    @Rule(Fact(warrant_valued='good'), Fact(net_income_valued='profit'), Fact(roe_valued='high'))
    def ipo_rule_159(self):
        self.declare(Fact(recommendation='Warrant menunjukkan kondisi baik. Laba bersih menunjukkan keuntungan. ROE menunjukkan keuntungan yang tinggi.'))


    @Rule(Fact(warrant_valued='good'), Fact(per_valued='high'), Fact(der_valued='low'))
    def ipo_rule_160(self):
        self.declare(Fact(recommendation='Warrant menunjukkan kondisi baik. PER berada di tingkat yang tinggi. DER menunjukkan tingkat hutang yang rendah.'))


    @Rule(Fact(warrant_valued='good'), Fact(per_valued='high'), Fact(roa_valued='high'))
    def ipo_rule_161(self):
        self.declare(Fact(recommendation='Warrant menunjukkan kondisi baik. PER berada di tingkat yang tinggi. ROA menunjukkan efisiensi tinggi.'))


    @Rule(Fact(warrant_valued='good'), Fact(per_valued='high'), Fact(roe_valued='high'))
    def ipo_rule_162(self):
        self.declare(Fact(recommendation='Warrant menunjukkan kondisi baik. PER berada di tingkat yang tinggi. ROE menunjukkan keuntungan yang tinggi.'))


    @Rule(Fact(warrant_valued='good'), Fact(der_valued='low'), Fact(roa_valued='high'))
    def ipo_rule_163(self):
        self.declare(Fact(recommendation='Warrant menunjukkan kondisi baik. DER menunjukkan tingkat hutang yang rendah. ROA menunjukkan efisiensi tinggi.'))


    @Rule(Fact(warrant_valued='good'), Fact(der_valued='low'), Fact(roe_valued='high'))
    def ipo_rule_164(self):
        self.declare(Fact(recommendation='Warrant menunjukkan kondisi baik. DER menunjukkan tingkat hutang yang rendah. ROE menunjukkan keuntungan yang tinggi.'))


    @Rule(Fact(warrant_valued='good'), Fact(roa_valued='high'), Fact(roe_valued='high'))
    def ipo_rule_165(self):
        self.declare(Fact(recommendation='Warrant menunjukkan kondisi baik. ROA menunjukkan efisiensi tinggi. ROE menunjukkan keuntungan yang tinggi.'))


    @Rule(Fact(net_income_valued='profit'), Fact(per_valued='high'), Fact(der_valued='low'))
    def ipo_rule_166(self):
        self.declare(Fact(recommendation='Laba bersih menunjukkan keuntungan. PER berada di tingkat yang tinggi. DER menunjukkan tingkat hutang yang rendah.'))


    @Rule(Fact(net_income_valued='profit'), Fact(per_valued='high'), Fact(roa_valued='high'))
    def ipo_rule_167(self):
        self.declare(Fact(recommendation='Laba bersih menunjukkan keuntungan. PER berada di tingkat yang tinggi. ROA menunjukkan efisiensi tinggi.'))


    @Rule(Fact(net_income_valued='profit'), Fact(per_valued='high'), Fact(roe_valued='high'))
    def ipo_rule_168(self):
        self.declare(Fact(recommendation='Laba bersih menunjukkan keuntungan. PER berada di tingkat yang tinggi. ROE menunjukkan keuntungan yang tinggi.'))


    @Rule(Fact(net_income_valued='profit'), Fact(der_valued='low'), Fact(roa_valued='high'))
    def ipo_rule_169(self):
        self.declare(Fact(recommendation='Laba bersih menunjukkan keuntungan. DER menunjukkan tingkat hutang yang rendah. ROA menunjukkan efisiensi tinggi.'))


    @Rule(Fact(net_income_valued='profit'), Fact(der_valued='low'), Fact(roe_valued='high'))
    def ipo_rule_170(self):
        self.declare(Fact(recommendation='Laba bersih menunjukkan keuntungan. DER menunjukkan tingkat hutang yang rendah. ROE menunjukkan keuntungan yang tinggi.'))


    @Rule(Fact(net_income_valued='profit'), Fact(roa_valued='high'), Fact(roe_valued='high'))
    def ipo_rule_171(self):
        self.declare(Fact(recommendation='Laba bersih menunjukkan keuntungan. ROA menunjukkan efisiensi tinggi. ROE menunjukkan keuntungan yang tinggi.'))


    @Rule(Fact(per_valued='high'), Fact(der_valued='low'), Fact(roa_valued='high'))
    def ipo_rule_172(self):
        self.declare(Fact(recommendation='PER berada di tingkat yang tinggi. DER menunjukkan tingkat hutang yang rendah. ROA menunjukkan efisiensi tinggi.'))


    @Rule(Fact(per_valued='high'), Fact(der_valued='low'), Fact(roe_valued='high'))
    def ipo_rule_173(self):
        self.declare(Fact(recommendation='PER berada di tingkat yang tinggi. DER menunjukkan tingkat hutang yang rendah. ROE menunjukkan keuntungan yang tinggi.'))


    @Rule(Fact(per_valued='high'), Fact(roa_valued='high'), Fact(roe_valued='high'))
    def ipo_rule_174(self):
        self.declare(Fact(recommendation='PER berada di tingkat yang tinggi. ROA menunjukkan efisiensi tinggi. ROE menunjukkan keuntungan yang tinggi.'))


    @Rule(Fact(der_valued='low'), Fact(roa_valued='high'), Fact(roe_valued='high'))
    def ipo_rule_175(self):
        self.declare(Fact(recommendation='DER menunjukkan tingkat hutang yang rendah. ROA menunjukkan efisiensi tinggi. ROE menunjukkan keuntungan yang tinggi.'))


    @Rule(Fact(underwriter_valued='good'), Fact(warrant_valued='good'), Fact(net_income_valued='profit'))
    def ipo_rule_176(self):
        self.declare(Fact(recommendation='Underwriter berkualitas baik. Warrant menunjukkan kondisi baik. Laba bersih menunjukkan keuntungan.'))


    @Rule(Fact(underwriter_valued='good'), Fact(warrant_valued='good'), Fact(per_valued='high'))
    def ipo_rule_177(self):
        self.declare(Fact(recommendation='Underwriter berkualitas baik. Warrant menunjukkan kondisi baik. PER berada di tingkat yang tinggi.'))


    @Rule(Fact(underwriter_valued='good'), Fact(warrant_valued='good'), Fact(der_valued='low'))
    def ipo_rule_178(self):
        self.declare(Fact(recommendation='Underwriter berkualitas baik. Warrant menunjukkan kondisi baik. DER menunjukkan tingkat hutang yang rendah.'))


    @Rule(Fact(underwriter_valued='good'), Fact(warrant_valued='good'), Fact(roa_valued='high'))
    def ipo_rule_179(self):
        self.declare(Fact(recommendation='Underwriter berkualitas baik. Warrant menunjukkan kondisi baik. ROA menunjukkan efisiensi tinggi.'))


    @Rule(Fact(underwriter_valued='good'), Fact(warrant_valued='good'), Fact(roe_valued='low'))
    def ipo_rule_180(self):
        self.declare(Fact(recommendation='Underwriter berkualitas baik. Warrant menunjukkan kondisi baik. ROE menunjukkan keuntungan yang rendah.'))


    @Rule(Fact(underwriter_valued='good'), Fact(net_income_valued='profit'), Fact(per_valued='high'))
    def ipo_rule_181(self):
        self.declare(Fact(recommendation='Underwriter berkualitas baik. Laba bersih menunjukkan keuntungan. PER berada di tingkat yang tinggi.'))


    @Rule(Fact(underwriter_valued='good'), Fact(net_income_valued='profit'), Fact(der_valued='low'))
    def ipo_rule_182(self):
        self.declare(Fact(recommendation='Underwriter berkualitas baik. Laba bersih menunjukkan keuntungan. DER menunjukkan tingkat hutang yang rendah.'))


    @Rule(Fact(underwriter_valued='good'), Fact(net_income_valued='profit'), Fact(roa_valued='high'))
    def ipo_rule_183(self):
        self.declare(Fact(recommendation='Underwriter berkualitas baik. Laba bersih menunjukkan keuntungan. ROA menunjukkan efisiensi tinggi.'))


    @Rule(Fact(underwriter_valued='good'), Fact(net_income_valued='profit'), Fact(roe_valued='low'))
    def ipo_rule_184(self):
        self.declare(Fact(recommendation='Underwriter berkualitas baik. Laba bersih menunjukkan keuntungan. ROE menunjukkan keuntungan yang rendah.'))


    @Rule(Fact(underwriter_valued='good'), Fact(per_valued='high'), Fact(der_valued='low'))
    def ipo_rule_185(self):
        self.declare(Fact(recommendation='Underwriter berkualitas baik. PER berada di tingkat yang tinggi. DER menunjukkan tingkat hutang yang rendah.'))


    @Rule(Fact(underwriter_valued='good'), Fact(per_valued='high'), Fact(roa_valued='high'))
    def ipo_rule_186(self):
        self.declare(Fact(recommendation='Underwriter berkualitas baik. PER berada di tingkat yang tinggi. ROA menunjukkan efisiensi tinggi.'))


    @Rule(Fact(underwriter_valued='good'), Fact(per_valued='high'), Fact(roe_valued='low'))
    def ipo_rule_187(self):
        self.declare(Fact(recommendation='Underwriter berkualitas baik. PER berada di tingkat yang tinggi. ROE menunjukkan keuntungan yang rendah.'))


    @Rule(Fact(underwriter_valued='good'), Fact(der_valued='low'), Fact(roa_valued='high'))
    def ipo_rule_188(self):
        self.declare(Fact(recommendation='Underwriter berkualitas baik. DER menunjukkan tingkat hutang yang rendah. ROA menunjukkan efisiensi tinggi.'))


    @Rule(Fact(underwriter_valued='good'), Fact(der_valued='low'), Fact(roe_valued='low'))
    def ipo_rule_189(self):
        self.declare(Fact(recommendation='Underwriter berkualitas baik. DER menunjukkan tingkat hutang yang rendah. ROE menunjukkan keuntungan yang rendah.'))


    @Rule(Fact(underwriter_valued='good'), Fact(roa_valued='high'), Fact(roe_valued='low'))
    def ipo_rule_190(self):
        self.declare(Fact(recommendation='Underwriter berkualitas baik. ROA menunjukkan efisiensi tinggi. ROE menunjukkan keuntungan yang rendah.'))


    @Rule(Fact(warrant_valued='good'), Fact(net_income_valued='profit'), Fact(per_valued='high'))
    def ipo_rule_191(self):
        self.declare(Fact(recommendation='Warrant menunjukkan kondisi baik. Laba bersih menunjukkan keuntungan. PER berada di tingkat yang tinggi.'))


    @Rule(Fact(warrant_valued='good'), Fact(net_income_valued='profit'), Fact(der_valued='low'))
    def ipo_rule_192(self):
        self.declare(Fact(recommendation='Warrant menunjukkan kondisi baik. Laba bersih menunjukkan keuntungan. DER menunjukkan tingkat hutang yang rendah.'))


    @Rule(Fact(warrant_valued='good'), Fact(net_income_valued='profit'), Fact(roa_valued='high'))
    def ipo_rule_193(self):
        self.declare(Fact(recommendation='Warrant menunjukkan kondisi baik. Laba bersih menunjukkan keuntungan. ROA menunjukkan efisiensi tinggi.'))


    @Rule(Fact(warrant_valued='good'), Fact(net_income_valued='profit'), Fact(roe_valued='low'))
    def ipo_rule_194(self):
        self.declare(Fact(recommendation='Warrant menunjukkan kondisi baik. Laba bersih menunjukkan keuntungan. ROE menunjukkan keuntungan yang rendah.'))


    @Rule(Fact(warrant_valued='good'), Fact(per_valued='high'), Fact(der_valued='low'))
    def ipo_rule_195(self):
        self.declare(Fact(recommendation='Warrant menunjukkan kondisi baik. PER berada di tingkat yang tinggi. DER menunjukkan tingkat hutang yang rendah.'))


    @Rule(Fact(warrant_valued='good'), Fact(per_valued='high'), Fact(roa_valued='high'))
    def ipo_rule_196(self):
        self.declare(Fact(recommendation='Warrant menunjukkan kondisi baik. PER berada di tingkat yang tinggi. ROA menunjukkan efisiensi tinggi.'))


    @Rule(Fact(warrant_valued='good'), Fact(per_valued='high'), Fact(roe_valued='low'))
    def ipo_rule_197(self):
        self.declare(Fact(recommendation='Warrant menunjukkan kondisi baik. PER berada di tingkat yang tinggi. ROE menunjukkan keuntungan yang rendah.'))


    @Rule(Fact(warrant_valued='good'), Fact(der_valued='low'), Fact(roa_valued='high'))
    def ipo_rule_198(self):
        self.declare(Fact(recommendation='Warrant menunjukkan kondisi baik. DER menunjukkan tingkat hutang yang rendah. ROA menunjukkan efisiensi tinggi.'))


    @Rule(Fact(warrant_valued='good'), Fact(der_valued='low'), Fact(roe_valued='low'))
    def ipo_rule_199(self):
        self.declare(Fact(recommendation='Warrant menunjukkan kondisi baik. DER menunjukkan tingkat hutang yang rendah. ROE menunjukkan keuntungan yang rendah.'))


    @Rule(Fact(warrant_valued='good'), Fact(roa_valued='high'), Fact(roe_valued='low'))
    def ipo_rule_200(self):
        self.declare(Fact(recommendation='Warrant menunjukkan kondisi baik. ROA menunjukkan efisiensi tinggi. ROE menunjukkan keuntungan yang rendah.'))


    @Rule(Fact(net_income_valued='profit'), Fact(per_valued='high'), Fact(der_valued='low'))
    def ipo_rule_201(self):
        self.declare(Fact(recommendation='Laba bersih menunjukkan keuntungan. PER berada di tingkat yang tinggi. DER menunjukkan tingkat hutang yang rendah.'))


    @Rule(Fact(net_income_valued='profit'), Fact(per_valued='high'), Fact(roa_valued='high'))
    def ipo_rule_202(self):
        self.declare(Fact(recommendation='Laba bersih menunjukkan keuntungan. PER berada di tingkat yang tinggi. ROA menunjukkan efisiensi tinggi.'))


    @Rule(Fact(net_income_valued='profit'), Fact(per_valued='high'), Fact(roe_valued='low'))
    def ipo_rule_203(self):
        self.declare(Fact(recommendation='Laba bersih menunjukkan keuntungan. PER berada di tingkat yang tinggi. ROE menunjukkan keuntungan yang rendah.'))


    @Rule(Fact(net_income_valued='profit'), Fact(der_valued='low'), Fact(roa_valued='high'))
    def ipo_rule_204(self):
        self.declare(Fact(recommendation='Laba bersih menunjukkan keuntungan. DER menunjukkan tingkat hutang yang rendah. ROA menunjukkan efisiensi tinggi.'))


    @Rule(Fact(net_income_valued='profit'), Fact(der_valued='low'), Fact(roe_valued='low'))
    def ipo_rule_205(self):
        self.declare(Fact(recommendation='Laba bersih menunjukkan keuntungan. DER menunjukkan tingkat hutang yang rendah. ROE menunjukkan keuntungan yang rendah.'))


    @Rule(Fact(net_income_valued='profit'), Fact(roa_valued='high'), Fact(roe_valued='low'))
    def ipo_rule_206(self):
        self.declare(Fact(recommendation='Laba bersih menunjukkan keuntungan. ROA menunjukkan efisiensi tinggi. ROE menunjukkan keuntungan yang rendah.'))


    @Rule(Fact(per_valued='high'), Fact(der_valued='low'), Fact(roa_valued='high'))
    def ipo_rule_207(self):
        self.declare(Fact(recommendation='PER berada di tingkat yang tinggi. DER menunjukkan tingkat hutang yang rendah. ROA menunjukkan efisiensi tinggi.'))


    @Rule(Fact(per_valued='high'), Fact(der_valued='low'), Fact(roe_valued='low'))
    def ipo_rule_208(self):
        self.declare(Fact(recommendation='PER berada di tingkat yang tinggi. DER menunjukkan tingkat hutang yang rendah. ROE menunjukkan keuntungan yang rendah.'))


    @Rule(Fact(per_valued='high'), Fact(roa_valued='high'), Fact(roe_valued='low'))
    def ipo_rule_209(self):
        self.declare(Fact(recommendation='PER berada di tingkat yang tinggi. ROA menunjukkan efisiensi tinggi. ROE menunjukkan keuntungan yang rendah.'))


    @Rule(Fact(der_valued='low'), Fact(roa_valued='high'), Fact(roe_valued='low'))
    def ipo_rule_210(self):
        self.declare(Fact(recommendation='DER menunjukkan tingkat hutang yang rendah. ROA menunjukkan efisiensi tinggi. ROE menunjukkan keuntungan yang rendah.'))


    @Rule(Fact(underwriter_valued='good'), Fact(warrant_valued='good'), Fact(net_income_valued='profit'))
    def ipo_rule_211(self):
        self.declare(Fact(recommendation='Underwriter berkualitas baik. Warrant menunjukkan kondisi baik. Laba bersih menunjukkan keuntungan.'))


    @Rule(Fact(underwriter_valued='good'), Fact(warrant_valued='good'), Fact(per_valued='high'))
    def ipo_rule_212(self):
        self.declare(Fact(recommendation='Underwriter berkualitas baik. Warrant menunjukkan kondisi baik. PER berada di tingkat yang tinggi.'))


    @Rule(Fact(underwriter_valued='good'), Fact(warrant_valued='good'), Fact(der_valued='low'))
    def ipo_rule_213(self):
        self.declare(Fact(recommendation='Underwriter berkualitas baik. Warrant menunjukkan kondisi baik. DER menunjukkan tingkat hutang yang rendah.'))


    @Rule(Fact(underwriter_valued='good'), Fact(warrant_valued='good'), Fact(roa_valued='low'))
    def ipo_rule_214(self):
        self.declare(Fact(recommendation='Underwriter berkualitas baik. Warrant menunjukkan kondisi baik. ROA menunjukkan efisiensi rendah.'))


    @Rule(Fact(underwriter_valued='good'), Fact(warrant_valued='good'), Fact(roe_valued='high'))
    def ipo_rule_215(self):
        self.declare(Fact(recommendation='Underwriter berkualitas baik. Warrant menunjukkan kondisi baik. ROE menunjukkan keuntungan yang tinggi.'))


    @Rule(Fact(underwriter_valued='good'), Fact(net_income_valued='profit'), Fact(per_valued='high'))
    def ipo_rule_216(self):
        self.declare(Fact(recommendation='Underwriter berkualitas baik. Laba bersih menunjukkan keuntungan. PER berada di tingkat yang tinggi.'))


    @Rule(Fact(underwriter_valued='good'), Fact(net_income_valued='profit'), Fact(der_valued='low'))
    def ipo_rule_217(self):
        self.declare(Fact(recommendation='Underwriter berkualitas baik. Laba bersih menunjukkan keuntungan. DER menunjukkan tingkat hutang yang rendah.'))


    @Rule(Fact(underwriter_valued='good'), Fact(net_income_valued='profit'), Fact(roa_valued='low'))
    def ipo_rule_218(self):
        self.declare(Fact(recommendation='Underwriter berkualitas baik. Laba bersih menunjukkan keuntungan. ROA menunjukkan efisiensi rendah.'))


    @Rule(Fact(underwriter_valued='good'), Fact(net_income_valued='profit'), Fact(roe_valued='high'))
    def ipo_rule_219(self):
        self.declare(Fact(recommendation='Underwriter berkualitas baik. Laba bersih menunjukkan keuntungan. ROE menunjukkan keuntungan yang tinggi.'))


    @Rule(Fact(underwriter_valued='good'), Fact(per_valued='high'), Fact(der_valued='low'))
    def ipo_rule_220(self):
        self.declare(Fact(recommendation='Underwriter berkualitas baik. PER berada di tingkat yang tinggi. DER menunjukkan tingkat hutang yang rendah.'))


    @Rule(Fact(underwriter_valued='good'), Fact(per_valued='high'), Fact(roa_valued='low'))
    def ipo_rule_221(self):
        self.declare(Fact(recommendation='Underwriter berkualitas baik. PER berada di tingkat yang tinggi. ROA menunjukkan efisiensi rendah.'))


    @Rule(Fact(underwriter_valued='good'), Fact(per_valued='high'), Fact(roe_valued='high'))
    def ipo_rule_222(self):
        self.declare(Fact(recommendation='Underwriter berkualitas baik. PER berada di tingkat yang tinggi. ROE menunjukkan keuntungan yang tinggi.'))


    @Rule(Fact(underwriter_valued='good'), Fact(der_valued='low'), Fact(roa_valued='low'))
    def ipo_rule_223(self):
        self.declare(Fact(recommendation='Underwriter berkualitas baik. DER menunjukkan tingkat hutang yang rendah. ROA menunjukkan efisiensi rendah.'))


    @Rule(Fact(underwriter_valued='good'), Fact(der_valued='low'), Fact(roe_valued='high'))
    def ipo_rule_224(self):
        self.declare(Fact(recommendation='Underwriter berkualitas baik. DER menunjukkan tingkat hutang yang rendah. ROE menunjukkan keuntungan yang tinggi.'))


    @Rule(Fact(underwriter_valued='good'), Fact(roa_valued='low'), Fact(roe_valued='high'))
    def ipo_rule_225(self):
        self.declare(Fact(recommendation='Underwriter berkualitas baik. ROA menunjukkan efisiensi rendah. ROE menunjukkan keuntungan yang tinggi.'))


    @Rule(Fact(warrant_valued='good'), Fact(net_income_valued='profit'), Fact(per_valued='high'))
    def ipo_rule_226(self):
        self.declare(Fact(recommendation='Warrant menunjukkan kondisi baik. Laba bersih menunjukkan keuntungan. PER berada di tingkat yang tinggi.'))


    @Rule(Fact(warrant_valued='good'), Fact(net_income_valued='profit'), Fact(der_valued='low'))
    def ipo_rule_227(self):
        self.declare(Fact(recommendation='Warrant menunjukkan kondisi baik. Laba bersih menunjukkan keuntungan. DER menunjukkan tingkat hutang yang rendah.'))


    @Rule(Fact(warrant_valued='good'), Fact(net_income_valued='profit'), Fact(roa_valued='low'))
    def ipo_rule_228(self):
        self.declare(Fact(recommendation='Warrant menunjukkan kondisi baik. Laba bersih menunjukkan keuntungan. ROA menunjukkan efisiensi rendah.'))


    @Rule(Fact(warrant_valued='good'), Fact(net_income_valued='profit'), Fact(roe_valued='high'))
    def ipo_rule_229(self):
        self.declare(Fact(recommendation='Warrant menunjukkan kondisi baik. Laba bersih menunjukkan keuntungan. ROE menunjukkan keuntungan yang tinggi.'))


    @Rule(Fact(warrant_valued='good'), Fact(per_valued='high'), Fact(der_valued='low'))
    def ipo_rule_230(self):
        self.declare(Fact(recommendation='Warrant menunjukkan kondisi baik. PER berada di tingkat yang tinggi. DER menunjukkan tingkat hutang yang rendah.'))


    @Rule(Fact(warrant_valued='good'), Fact(per_valued='high'), Fact(roa_valued='low'))
    def ipo_rule_231(self):
        self.declare(Fact(recommendation='Warrant menunjukkan kondisi baik. PER berada di tingkat yang tinggi. ROA menunjukkan efisiensi rendah.'))


    @Rule(Fact(warrant_valued='good'), Fact(per_valued='high'), Fact(roe_valued='high'))
    def ipo_rule_232(self):
        self.declare(Fact(recommendation='Warrant menunjukkan kondisi baik. PER berada di tingkat yang tinggi. ROE menunjukkan keuntungan yang tinggi.'))


    @Rule(Fact(warrant_valued='good'), Fact(der_valued='low'), Fact(roa_valued='low'))
    def ipo_rule_233(self):
        self.declare(Fact(recommendation='Warrant menunjukkan kondisi baik. DER menunjukkan tingkat hutang yang rendah. ROA menunjukkan efisiensi rendah.'))


    @Rule(Fact(warrant_valued='good'), Fact(der_valued='low'), Fact(roe_valued='high'))
    def ipo_rule_234(self):
        self.declare(Fact(recommendation='Warrant menunjukkan kondisi baik. DER menunjukkan tingkat hutang yang rendah. ROE menunjukkan keuntungan yang tinggi.'))


    @Rule(Fact(warrant_valued='good'), Fact(roa_valued='low'), Fact(roe_valued='high'))
    def ipo_rule_235(self):
        self.declare(Fact(recommendation='Warrant menunjukkan kondisi baik. ROA menunjukkan efisiensi rendah. ROE menunjukkan keuntungan yang tinggi.'))


    @Rule(Fact(net_income_valued='profit'), Fact(per_valued='high'), Fact(der_valued='low'))
    def ipo_rule_236(self):
        self.declare(Fact(recommendation='Laba bersih menunjukkan keuntungan. PER berada di tingkat yang tinggi. DER menunjukkan tingkat hutang yang rendah.'))


    @Rule(Fact(net_income_valued='profit'), Fact(per_valued='high'), Fact(roa_valued='low'))
    def ipo_rule_237(self):
        self.declare(Fact(recommendation='Laba bersih menunjukkan keuntungan. PER berada di tingkat yang tinggi. ROA menunjukkan efisiensi rendah.'))


    @Rule(Fact(net_income_valued='profit'), Fact(per_valued='high'), Fact(roe_valued='high'))
    def ipo_rule_238(self):
        self.declare(Fact(recommendation='Laba bersih menunjukkan keuntungan. PER berada di tingkat yang tinggi. ROE menunjukkan keuntungan yang tinggi.'))


    @Rule(Fact(net_income_valued='profit'), Fact(der_valued='low'), Fact(roa_valued='low'))
    def ipo_rule_239(self):
        self.declare(Fact(recommendation='Laba bersih menunjukkan keuntungan. DER menunjukkan tingkat hutang yang rendah. ROA menunjukkan efisiensi rendah.'))


    @Rule(Fact(net_income_valued='profit'), Fact(der_valued='low'), Fact(roe_valued='high'))
    def ipo_rule_240(self):
        self.declare(Fact(recommendation='Laba bersih menunjukkan keuntungan. DER menunjukkan tingkat hutang yang rendah. ROE menunjukkan keuntungan yang tinggi.'))


    @Rule(Fact(net_income_valued='profit'), Fact(roa_valued='low'), Fact(roe_valued='high'))
    def ipo_rule_241(self):
        self.declare(Fact(recommendation='Laba bersih menunjukkan keuntungan. ROA menunjukkan efisiensi rendah. ROE menunjukkan keuntungan yang tinggi.'))


    @Rule(Fact(per_valued='high'), Fact(der_valued='low'), Fact(roa_valued='low'))
    def ipo_rule_242(self):
        self.declare(Fact(recommendation='PER berada di tingkat yang tinggi. DER menunjukkan tingkat hutang yang rendah. ROA menunjukkan efisiensi rendah.'))


    @Rule(Fact(per_valued='high'), Fact(der_valued='low'), Fact(roe_valued='high'))
    def ipo_rule_243(self):
        self.declare(Fact(recommendation='PER berada di tingkat yang tinggi. DER menunjukkan tingkat hutang yang rendah. ROE menunjukkan keuntungan yang tinggi.'))


    @Rule(Fact(per_valued='high'), Fact(roa_valued='low'), Fact(roe_valued='high'))
    def ipo_rule_244(self):
        self.declare(Fact(recommendation='PER berada di tingkat yang tinggi. ROA menunjukkan efisiensi rendah. ROE menunjukkan keuntungan yang tinggi.'))


    @Rule(Fact(der_valued='low'), Fact(roa_valued='low'), Fact(roe_valued='high'))
    def ipo_rule_245(self):
        self.declare(Fact(recommendation='DER menunjukkan tingkat hutang yang rendah. ROA menunjukkan efisiensi rendah. ROE menunjukkan keuntungan yang tinggi.'))


    @Rule(Fact(underwriter_valued='good'), Fact(warrant_valued='good'), Fact(net_income_valued='profit'))
    def ipo_rule_246(self):
        self.declare(Fact(recommendation='Underwriter berkualitas baik. Warrant menunjukkan kondisi baik. Laba bersih menunjukkan keuntungan.'))


    @Rule(Fact(underwriter_valued='good'), Fact(warrant_valued='good'), Fact(per_valued='high'))
    def ipo_rule_247(self):
        self.declare(Fact(recommendation='Underwriter berkualitas baik. Warrant menunjukkan kondisi baik. PER berada di tingkat yang tinggi.'))


    @Rule(Fact(underwriter_valued='good'), Fact(warrant_valued='good'), Fact(der_valued='low'))
    def ipo_rule_248(self):
        self.declare(Fact(recommendation='Underwriter berkualitas baik. Warrant menunjukkan kondisi baik. DER menunjukkan tingkat hutang yang rendah.'))


    @Rule(Fact(underwriter_valued='good'), Fact(warrant_valued='good'), Fact(roa_valued='low'))
    def ipo_rule_249(self):
        self.declare(Fact(recommendation='Underwriter berkualitas baik. Warrant menunjukkan kondisi baik. ROA menunjukkan efisiensi rendah.'))


    @Rule(Fact(underwriter_valued='good'), Fact(warrant_valued='good'), Fact(roe_valued='low'))
    def ipo_rule_250(self):
        self.declare(Fact(recommendation='Underwriter berkualitas baik. Warrant menunjukkan kondisi baik. ROE menunjukkan keuntungan yang rendah.'))


    @Rule(Fact(underwriter_valued='good'), Fact(net_income_valued='profit'), Fact(per_valued='high'))
    def ipo_rule_251(self):
        self.declare(Fact(recommendation='Underwriter berkualitas baik. Laba bersih menunjukkan keuntungan. PER berada di tingkat yang tinggi.'))


    @Rule(Fact(underwriter_valued='good'), Fact(net_income_valued='profit'), Fact(der_valued='low'))
    def ipo_rule_252(self):
        self.declare(Fact(recommendation='Underwriter berkualitas baik. Laba bersih menunjukkan keuntungan. DER menunjukkan tingkat hutang yang rendah.'))


    @Rule(Fact(underwriter_valued='good'), Fact(net_income_valued='profit'), Fact(roa_valued='low'))
    def ipo_rule_253(self):
        self.declare(Fact(recommendation='Underwriter berkualitas baik. Laba bersih menunjukkan keuntungan. ROA menunjukkan efisiensi rendah.'))


    @Rule(Fact(underwriter_valued='good'), Fact(net_income_valued='profit'), Fact(roe_valued='low'))
    def ipo_rule_254(self):
        self.declare(Fact(recommendation='Underwriter berkualitas baik. Laba bersih menunjukkan keuntungan. ROE menunjukkan keuntungan yang rendah.'))


    @Rule(Fact(underwriter_valued='good'), Fact(per_valued='high'), Fact(der_valued='low'))
    def ipo_rule_255(self):
        self.declare(Fact(recommendation='Underwriter berkualitas baik. PER berada di tingkat yang tinggi. DER menunjukkan tingkat hutang yang rendah.'))


    @Rule(Fact(underwriter_valued='good'), Fact(per_valued='high'), Fact(roa_valued='low'))
    def ipo_rule_256(self):
        self.declare(Fact(recommendation='Underwriter berkualitas baik. PER berada di tingkat yang tinggi. ROA menunjukkan efisiensi rendah.'))


    @Rule(Fact(underwriter_valued='good'), Fact(per_valued='high'), Fact(roe_valued='low'))
    def ipo_rule_257(self):
        self.declare(Fact(recommendation='Underwriter berkualitas baik. PER berada di tingkat yang tinggi. ROE menunjukkan keuntungan yang rendah.'))


    @Rule(Fact(underwriter_valued='good'), Fact(der_valued='low'), Fact(roa_valued='low'))
    def ipo_rule_258(self):
        self.declare(Fact(recommendation='Underwriter berkualitas baik. DER menunjukkan tingkat hutang yang rendah. ROA menunjukkan efisiensi rendah.'))


    @Rule(Fact(underwriter_valued='good'), Fact(der_valued='low'), Fact(roe_valued='low'))
    def ipo_rule_259(self):
        self.declare(Fact(recommendation='Underwriter berkualitas baik. DER menunjukkan tingkat hutang yang rendah. ROE menunjukkan keuntungan yang rendah.'))


    @Rule(Fact(underwriter_valued='good'), Fact(roa_valued='low'), Fact(roe_valued='low'))
    def ipo_rule_260(self):
        self.declare(Fact(recommendation='Underwriter berkualitas baik. ROA menunjukkan efisiensi rendah. ROE menunjukkan keuntungan yang rendah.'))


    @Rule(Fact(warrant_valued='good'), Fact(net_income_valued='profit'), Fact(per_valued='high'))
    def ipo_rule_261(self):
        self.declare(Fact(recommendation='Warrant menunjukkan kondisi baik. Laba bersih menunjukkan keuntungan. PER berada di tingkat yang tinggi.'))


    @Rule(Fact(warrant_valued='good'), Fact(net_income_valued='profit'), Fact(der_valued='low'))
    def ipo_rule_262(self):
        self.declare(Fact(recommendation='Warrant menunjukkan kondisi baik. Laba bersih menunjukkan keuntungan. DER menunjukkan tingkat hutang yang rendah.'))


    @Rule(Fact(warrant_valued='good'), Fact(net_income_valued='profit'), Fact(roa_valued='low'))
    def ipo_rule_263(self):
        self.declare(Fact(recommendation='Warrant menunjukkan kondisi baik. Laba bersih menunjukkan keuntungan. ROA menunjukkan efisiensi rendah.'))


    @Rule(Fact(warrant_valued='good'), Fact(net_income_valued='profit'), Fact(roe_valued='low'))
    def ipo_rule_264(self):
        self.declare(Fact(recommendation='Warrant menunjukkan kondisi baik. Laba bersih menunjukkan keuntungan. ROE menunjukkan keuntungan yang rendah.'))


    @Rule(Fact(warrant_valued='good'), Fact(per_valued='high'), Fact(der_valued='low'))
    def ipo_rule_265(self):
        self.declare(Fact(recommendation='Warrant menunjukkan kondisi baik. PER berada di tingkat yang tinggi. DER menunjukkan tingkat hutang yang rendah.'))


    @Rule(Fact(warrant_valued='good'), Fact(per_valued='high'), Fact(roa_valued='low'))
    def ipo_rule_266(self):
        self.declare(Fact(recommendation='Warrant menunjukkan kondisi baik. PER berada di tingkat yang tinggi. ROA menunjukkan efisiensi rendah.'))


    @Rule(Fact(warrant_valued='good'), Fact(per_valued='high'), Fact(roe_valued='low'))
    def ipo_rule_267(self):
        self.declare(Fact(recommendation='Warrant menunjukkan kondisi baik. PER berada di tingkat yang tinggi. ROE menunjukkan keuntungan yang rendah.'))


    @Rule(Fact(warrant_valued='good'), Fact(der_valued='low'), Fact(roa_valued='low'))
    def ipo_rule_268(self):
        self.declare(Fact(recommendation='Warrant menunjukkan kondisi baik. DER menunjukkan tingkat hutang yang rendah. ROA menunjukkan efisiensi rendah.'))


    @Rule(Fact(warrant_valued='good'), Fact(der_valued='low'), Fact(roe_valued='low'))
    def ipo_rule_269(self):
        self.declare(Fact(recommendation='Warrant menunjukkan kondisi baik. DER menunjukkan tingkat hutang yang rendah. ROE menunjukkan keuntungan yang rendah.'))


    @Rule(Fact(warrant_valued='good'), Fact(roa_valued='low'), Fact(roe_valued='low'))
    def ipo_rule_270(self):
        self.declare(Fact(recommendation='Warrant menunjukkan kondisi baik. ROA menunjukkan efisiensi rendah. ROE menunjukkan keuntungan yang rendah.'))


    @Rule(Fact(net_income_valued='profit'), Fact(per_valued='high'), Fact(der_valued='low'))
    def ipo_rule_271(self):
        self.declare(Fact(recommendation='Laba bersih menunjukkan keuntungan. PER berada di tingkat yang tinggi. DER menunjukkan tingkat hutang yang rendah.'))


    @Rule(Fact(net_income_valued='profit'), Fact(per_valued='high'), Fact(roa_valued='low'))
    def ipo_rule_272(self):
        self.declare(Fact(recommendation='Laba bersih menunjukkan keuntungan. PER berada di tingkat yang tinggi. ROA menunjukkan efisiensi rendah.'))


    @Rule(Fact(net_income_valued='profit'), Fact(per_valued='high'), Fact(roe_valued='low'))
    def ipo_rule_273(self):
        self.declare(Fact(recommendation='Laba bersih menunjukkan keuntungan. PER berada di tingkat yang tinggi. ROE menunjukkan keuntungan yang rendah.'))


    @Rule(Fact(net_income_valued='profit'), Fact(der_valued='low'), Fact(roa_valued='low'))
    def ipo_rule_274(self):
        self.declare(Fact(recommendation='Laba bersih menunjukkan keuntungan. DER menunjukkan tingkat hutang yang rendah. ROA menunjukkan efisiensi rendah.'))


    @Rule(Fact(net_income_valued='profit'), Fact(der_valued='low'), Fact(roe_valued='low'))
    def ipo_rule_275(self):
        self.declare(Fact(recommendation='Laba bersih menunjukkan keuntungan. DER menunjukkan tingkat hutang yang rendah. ROE menunjukkan keuntungan yang rendah.'))


    @Rule(Fact(net_income_valued='profit'), Fact(roa_valued='low'), Fact(roe_valued='low'))
    def ipo_rule_276(self):
        self.declare(Fact(recommendation='Laba bersih menunjukkan keuntungan. ROA menunjukkan efisiensi rendah. ROE menunjukkan keuntungan yang rendah.'))


    @Rule(Fact(per_valued='high'), Fact(der_valued='low'), Fact(roa_valued='low'))
    def ipo_rule_277(self):
        self.declare(Fact(recommendation='PER berada di tingkat yang tinggi. DER menunjukkan tingkat hutang yang rendah. ROA menunjukkan efisiensi rendah.'))


    @Rule(Fact(per_valued='high'), Fact(der_valued='low'), Fact(roe_valued='low'))
    def ipo_rule_278(self):
        self.declare(Fact(recommendation='PER berada di tingkat yang tinggi. DER menunjukkan tingkat hutang yang rendah. ROE menunjukkan keuntungan yang rendah.'))


    @Rule(Fact(per_valued='high'), Fact(roa_valued='low'), Fact(roe_valued='low'))
    def ipo_rule_279(self):
        self.declare(Fact(recommendation='PER berada di tingkat yang tinggi. ROA menunjukkan efisiensi rendah. ROE menunjukkan keuntungan yang rendah.'))


    @Rule(Fact(der_valued='low'), Fact(roa_valued='low'), Fact(roe_valued='low'))
    def ipo_rule_280(self):
        self.declare(Fact(recommendation='DER menunjukkan tingkat hutang yang rendah. ROA menunjukkan efisiensi rendah. ROE menunjukkan keuntungan yang rendah.'))


    @Rule(Fact(underwriter_valued='good'), Fact(warrant_valued='good'), Fact(net_income_valued='profit'))
    def ipo_rule_281(self):
        self.declare(Fact(recommendation='Underwriter berkualitas baik. Warrant menunjukkan kondisi baik. Laba bersih menunjukkan keuntungan.'))


    @Rule(Fact(underwriter_valued='good'), Fact(warrant_valued='good'), Fact(per_valued='low'))
    def ipo_rule_282(self):
        self.declare(Fact(recommendation='Underwriter berkualitas baik. Warrant menunjukkan kondisi baik. PER berada di tingkat yang rendah.'))


    @Rule(Fact(underwriter_valued='good'), Fact(warrant_valued='good'), Fact(der_valued='high'))
    def ipo_rule_283(self):
        self.declare(Fact(recommendation='Underwriter berkualitas baik. Warrant menunjukkan kondisi baik. DER menunjukkan tingkat hutang yang tinggi.'))


    @Rule(Fact(underwriter_valued='good'), Fact(warrant_valued='good'), Fact(roa_valued='high'))
    def ipo_rule_284(self):
        self.declare(Fact(recommendation='Underwriter berkualitas baik. Warrant menunjukkan kondisi baik. ROA menunjukkan efisiensi tinggi.'))


    @Rule(Fact(underwriter_valued='good'), Fact(warrant_valued='good'), Fact(roe_valued='high'))
    def ipo_rule_285(self):
        self.declare(Fact(recommendation='Underwriter berkualitas baik. Warrant menunjukkan kondisi baik. ROE menunjukkan keuntungan yang tinggi.'))


    @Rule(Fact(underwriter_valued='good'), Fact(net_income_valued='profit'), Fact(per_valued='low'))
    def ipo_rule_286(self):
        self.declare(Fact(recommendation='Underwriter berkualitas baik. Laba bersih menunjukkan keuntungan. PER berada di tingkat yang rendah.'))


    @Rule(Fact(underwriter_valued='good'), Fact(net_income_valued='profit'), Fact(der_valued='high'))
    def ipo_rule_287(self):
        self.declare(Fact(recommendation='Underwriter berkualitas baik. Laba bersih menunjukkan keuntungan. DER menunjukkan tingkat hutang yang tinggi.'))


    @Rule(Fact(underwriter_valued='good'), Fact(net_income_valued='profit'), Fact(roa_valued='high'))
    def ipo_rule_288(self):
        self.declare(Fact(recommendation='Underwriter berkualitas baik. Laba bersih menunjukkan keuntungan. ROA menunjukkan efisiensi tinggi.'))


    @Rule(Fact(underwriter_valued='good'), Fact(net_income_valued='profit'), Fact(roe_valued='high'))
    def ipo_rule_289(self):
        self.declare(Fact(recommendation='Underwriter berkualitas baik. Laba bersih menunjukkan keuntungan. ROE menunjukkan keuntungan yang tinggi.'))


    @Rule(Fact(underwriter_valued='good'), Fact(per_valued='low'), Fact(der_valued='high'))
    def ipo_rule_290(self):
        self.declare(Fact(recommendation='Underwriter berkualitas baik. PER berada di tingkat yang rendah. DER menunjukkan tingkat hutang yang tinggi.'))


    @Rule(Fact(underwriter_valued='good'), Fact(per_valued='low'), Fact(roa_valued='high'))
    def ipo_rule_291(self):
        self.declare(Fact(recommendation='Underwriter berkualitas baik. PER berada di tingkat yang rendah. ROA menunjukkan efisiensi tinggi.'))


    @Rule(Fact(underwriter_valued='good'), Fact(per_valued='low'), Fact(roe_valued='high'))
    def ipo_rule_292(self):
        self.declare(Fact(recommendation='Underwriter berkualitas baik. PER berada di tingkat yang rendah. ROE menunjukkan keuntungan yang tinggi.'))


    @Rule(Fact(underwriter_valued='good'), Fact(der_valued='high'), Fact(roa_valued='high'))
    def ipo_rule_293(self):
        self.declare(Fact(recommendation='Underwriter berkualitas baik. DER menunjukkan tingkat hutang yang tinggi. ROA menunjukkan efisiensi tinggi.'))


    @Rule(Fact(underwriter_valued='good'), Fact(der_valued='high'), Fact(roe_valued='high'))
    def ipo_rule_294(self):
        self.declare(Fact(recommendation='Underwriter berkualitas baik. DER menunjukkan tingkat hutang yang tinggi. ROE menunjukkan keuntungan yang tinggi.'))


    @Rule(Fact(underwriter_valued='good'), Fact(roa_valued='high'), Fact(roe_valued='high'))
    def ipo_rule_295(self):
        self.declare(Fact(recommendation='Underwriter berkualitas baik. ROA menunjukkan efisiensi tinggi. ROE menunjukkan keuntungan yang tinggi.'))


    @Rule(Fact(warrant_valued='good'), Fact(net_income_valued='profit'), Fact(per_valued='low'))
    def ipo_rule_296(self):
        self.declare(Fact(recommendation='Warrant menunjukkan kondisi baik. Laba bersih menunjukkan keuntungan. PER berada di tingkat yang rendah.'))


    @Rule(Fact(warrant_valued='good'), Fact(net_income_valued='profit'), Fact(der_valued='high'))
    def ipo_rule_297(self):
        self.declare(Fact(recommendation='Warrant menunjukkan kondisi baik. Laba bersih menunjukkan keuntungan. DER menunjukkan tingkat hutang yang tinggi.'))


    @Rule(Fact(warrant_valued='good'), Fact(net_income_valued='profit'), Fact(roa_valued='high'))
    def ipo_rule_298(self):
        self.declare(Fact(recommendation='Warrant menunjukkan kondisi baik. Laba bersih menunjukkan keuntungan. ROA menunjukkan efisiensi tinggi.'))


    @Rule(Fact(warrant_valued='good'), Fact(net_income_valued='profit'), Fact(roe_valued='high'))
    def ipo_rule_299(self):
        self.declare(Fact(recommendation='Warrant menunjukkan kondisi baik. Laba bersih menunjukkan keuntungan. ROE menunjukkan keuntungan yang tinggi.'))


    @Rule(Fact(warrant_valued='good'), Fact(per_valued='low'), Fact(der_valued='high'))
    def ipo_rule_300(self):
        self.declare(Fact(recommendation='Warrant menunjukkan kondisi baik. PER berada di tingkat yang rendah. DER menunjukkan tingkat hutang yang tinggi.'))


    @Rule(Fact(warrant_valued='good'), Fact(per_valued='low'), Fact(roa_valued='high'))
    def ipo_rule_301(self):
        self.declare(Fact(recommendation='Warrant menunjukkan kondisi baik. PER berada di tingkat yang rendah. ROA menunjukkan efisiensi tinggi.'))


    @Rule(Fact(warrant_valued='good'), Fact(per_valued='low'), Fact(roe_valued='high'))
    def ipo_rule_302(self):
        self.declare(Fact(recommendation='Warrant menunjukkan kondisi baik. PER berada di tingkat yang rendah. ROE menunjukkan keuntungan yang tinggi.'))


    @Rule(Fact(warrant_valued='good'), Fact(der_valued='high'), Fact(roa_valued='high'))
    def ipo_rule_303(self):
        self.declare(Fact(recommendation='Warrant menunjukkan kondisi baik. DER menunjukkan tingkat hutang yang tinggi. ROA menunjukkan efisiensi tinggi.'))


    @Rule(Fact(warrant_valued='good'), Fact(der_valued='high'), Fact(roe_valued='high'))
    def ipo_rule_304(self):
        self.declare(Fact(recommendation='Warrant menunjukkan kondisi baik. DER menunjukkan tingkat hutang yang tinggi. ROE menunjukkan keuntungan yang tinggi.'))


    @Rule(Fact(warrant_valued='good'), Fact(roa_valued='high'), Fact(roe_valued='high'))
    def ipo_rule_305(self):
        self.declare(Fact(recommendation='Warrant menunjukkan kondisi baik. ROA menunjukkan efisiensi tinggi. ROE menunjukkan keuntungan yang tinggi.'))


    @Rule(Fact(net_income_valued='profit'), Fact(per_valued='low'), Fact(der_valued='high'))
    def ipo_rule_306(self):
        self.declare(Fact(recommendation='Laba bersih menunjukkan keuntungan. PER berada di tingkat yang rendah. DER menunjukkan tingkat hutang yang tinggi.'))


    @Rule(Fact(net_income_valued='profit'), Fact(per_valued='low'), Fact(roa_valued='high'))
    def ipo_rule_307(self):
        self.declare(Fact(recommendation='Laba bersih menunjukkan keuntungan. PER berada di tingkat yang rendah. ROA menunjukkan efisiensi tinggi.'))


    @Rule(Fact(net_income_valued='profit'), Fact(per_valued='low'), Fact(roe_valued='high'))
    def ipo_rule_308(self):
        self.declare(Fact(recommendation='Laba bersih menunjukkan keuntungan. PER berada di tingkat yang rendah. ROE menunjukkan keuntungan yang tinggi.'))


    @Rule(Fact(net_income_valued='profit'), Fact(der_valued='high'), Fact(roa_valued='high'))
    def ipo_rule_309(self):
        self.declare(Fact(recommendation='Laba bersih menunjukkan keuntungan. DER menunjukkan tingkat hutang yang tinggi. ROA menunjukkan efisiensi tinggi.'))


    @Rule(Fact(net_income_valued='profit'), Fact(der_valued='high'), Fact(roe_valued='high'))
    def ipo_rule_310(self):
        self.declare(Fact(recommendation='Laba bersih menunjukkan keuntungan. DER menunjukkan tingkat hutang yang tinggi. ROE menunjukkan keuntungan yang tinggi.'))


    @Rule(Fact(net_income_valued='profit'), Fact(roa_valued='high'), Fact(roe_valued='high'))
    def ipo_rule_311(self):
        self.declare(Fact(recommendation='Laba bersih menunjukkan keuntungan. ROA menunjukkan efisiensi tinggi. ROE menunjukkan keuntungan yang tinggi.'))


    @Rule(Fact(per_valued='low'), Fact(der_valued='high'), Fact(roa_valued='high'))
    def ipo_rule_312(self):
        self.declare(Fact(recommendation='PER berada di tingkat yang rendah. DER menunjukkan tingkat hutang yang tinggi. ROA menunjukkan efisiensi tinggi.'))


    @Rule(Fact(per_valued='low'), Fact(der_valued='high'), Fact(roe_valued='high'))
    def ipo_rule_313(self):
        self.declare(Fact(recommendation='PER berada di tingkat yang rendah. DER menunjukkan tingkat hutang yang tinggi. ROE menunjukkan keuntungan yang tinggi.'))


    @Rule(Fact(per_valued='low'), Fact(roa_valued='high'), Fact(roe_valued='high'))
    def ipo_rule_314(self):
        self.declare(Fact(recommendation='PER berada di tingkat yang rendah. ROA menunjukkan efisiensi tinggi. ROE menunjukkan keuntungan yang tinggi.'))


    @Rule(Fact(der_valued='high'), Fact(roa_valued='high'), Fact(roe_valued='high'))
    def ipo_rule_315(self):
        self.declare(Fact(recommendation='DER menunjukkan tingkat hutang yang tinggi. ROA menunjukkan efisiensi tinggi. ROE menunjukkan keuntungan yang tinggi.'))


    @Rule(Fact(underwriter_valued='good'), Fact(warrant_valued='good'), Fact(net_income_valued='profit'))
    def ipo_rule_316(self):
        self.declare(Fact(recommendation='Underwriter berkualitas baik. Warrant menunjukkan kondisi baik. Laba bersih menunjukkan keuntungan.'))


    @Rule(Fact(underwriter_valued='good'), Fact(warrant_valued='good'), Fact(per_valued='low'))
    def ipo_rule_317(self):
        self.declare(Fact(recommendation='Underwriter berkualitas baik. Warrant menunjukkan kondisi baik. PER berada di tingkat yang rendah.'))


    @Rule(Fact(underwriter_valued='good'), Fact(warrant_valued='good'), Fact(der_valued='high'))
    def ipo_rule_318(self):
        self.declare(Fact(recommendation='Underwriter berkualitas baik. Warrant menunjukkan kondisi baik. DER menunjukkan tingkat hutang yang tinggi.'))


    @Rule(Fact(underwriter_valued='good'), Fact(warrant_valued='good'), Fact(roa_valued='high'))
    def ipo_rule_319(self):
        self.declare(Fact(recommendation='Underwriter berkualitas baik. Warrant menunjukkan kondisi baik. ROA menunjukkan efisiensi tinggi.'))


    @Rule(Fact(underwriter_valued='good'), Fact(warrant_valued='good'), Fact(roe_valued='low'))
    def ipo_rule_320(self):
        self.declare(Fact(recommendation='Underwriter berkualitas baik. Warrant menunjukkan kondisi baik. ROE menunjukkan keuntungan yang rendah.'))


    @Rule(Fact(underwriter_valued='good'), Fact(net_income_valued='profit'), Fact(per_valued='low'))
    def ipo_rule_321(self):
        self.declare(Fact(recommendation='Underwriter berkualitas baik. Laba bersih menunjukkan keuntungan. PER berada di tingkat yang rendah.'))


    @Rule(Fact(underwriter_valued='good'), Fact(net_income_valued='profit'), Fact(der_valued='high'))
    def ipo_rule_322(self):
        self.declare(Fact(recommendation='Underwriter berkualitas baik. Laba bersih menunjukkan keuntungan. DER menunjukkan tingkat hutang yang tinggi.'))


    @Rule(Fact(underwriter_valued='good'), Fact(net_income_valued='profit'), Fact(roa_valued='high'))
    def ipo_rule_323(self):
        self.declare(Fact(recommendation='Underwriter berkualitas baik. Laba bersih menunjukkan keuntungan. ROA menunjukkan efisiensi tinggi.'))


    @Rule(Fact(underwriter_valued='good'), Fact(net_income_valued='profit'), Fact(roe_valued='low'))
    def ipo_rule_324(self):
        self.declare(Fact(recommendation='Underwriter berkualitas baik. Laba bersih menunjukkan keuntungan. ROE menunjukkan keuntungan yang rendah.'))


    @Rule(Fact(underwriter_valued='good'), Fact(per_valued='low'), Fact(der_valued='high'))
    def ipo_rule_325(self):
        self.declare(Fact(recommendation='Underwriter berkualitas baik. PER berada di tingkat yang rendah. DER menunjukkan tingkat hutang yang tinggi.'))


    @Rule(Fact(underwriter_valued='good'), Fact(per_valued='low'), Fact(roa_valued='high'))
    def ipo_rule_326(self):
        self.declare(Fact(recommendation='Underwriter berkualitas baik. PER berada di tingkat yang rendah. ROA menunjukkan efisiensi tinggi.'))


    @Rule(Fact(underwriter_valued='good'), Fact(per_valued='low'), Fact(roe_valued='low'))
    def ipo_rule_327(self):
        self.declare(Fact(recommendation='Underwriter berkualitas baik. PER berada di tingkat yang rendah. ROE menunjukkan keuntungan yang rendah.'))


    @Rule(Fact(underwriter_valued='good'), Fact(der_valued='high'), Fact(roa_valued='high'))
    def ipo_rule_328(self):
        self.declare(Fact(recommendation='Underwriter berkualitas baik. DER menunjukkan tingkat hutang yang tinggi. ROA menunjukkan efisiensi tinggi.'))


    @Rule(Fact(underwriter_valued='good'), Fact(der_valued='high'), Fact(roe_valued='low'))
    def ipo_rule_329(self):
        self.declare(Fact(recommendation='Underwriter berkualitas baik. DER menunjukkan tingkat hutang yang tinggi. ROE menunjukkan keuntungan yang rendah.'))


    @Rule(Fact(underwriter_valued='good'), Fact(roa_valued='high'), Fact(roe_valued='low'))
    def ipo_rule_330(self):
        self.declare(Fact(recommendation='Underwriter berkualitas baik. ROA menunjukkan efisiensi tinggi. ROE menunjukkan keuntungan yang rendah.'))


    @Rule(Fact(warrant_valued='good'), Fact(net_income_valued='profit'), Fact(per_valued='low'))
    def ipo_rule_331(self):
        self.declare(Fact(recommendation='Warrant menunjukkan kondisi baik. Laba bersih menunjukkan keuntungan. PER berada di tingkat yang rendah.'))


    @Rule(Fact(warrant_valued='good'), Fact(net_income_valued='profit'), Fact(der_valued='high'))
    def ipo_rule_332(self):
        self.declare(Fact(recommendation='Warrant menunjukkan kondisi baik. Laba bersih menunjukkan keuntungan. DER menunjukkan tingkat hutang yang tinggi.'))


    @Rule(Fact(warrant_valued='good'), Fact(net_income_valued='profit'), Fact(roa_valued='high'))
    def ipo_rule_333(self):
        self.declare(Fact(recommendation='Warrant menunjukkan kondisi baik. Laba bersih menunjukkan keuntungan. ROA menunjukkan efisiensi tinggi.'))


    @Rule(Fact(warrant_valued='good'), Fact(net_income_valued='profit'), Fact(roe_valued='low'))
    def ipo_rule_334(self):
        self.declare(Fact(recommendation='Warrant menunjukkan kondisi baik. Laba bersih menunjukkan keuntungan. ROE menunjukkan keuntungan yang rendah.'))


    @Rule(Fact(warrant_valued='good'), Fact(per_valued='low'), Fact(der_valued='high'))
    def ipo_rule_335(self):
        self.declare(Fact(recommendation='Warrant menunjukkan kondisi baik. PER berada di tingkat yang rendah. DER menunjukkan tingkat hutang yang tinggi.'))


    @Rule(Fact(warrant_valued='good'), Fact(per_valued='low'), Fact(roa_valued='high'))
    def ipo_rule_336(self):
        self.declare(Fact(recommendation='Warrant menunjukkan kondisi baik. PER berada di tingkat yang rendah. ROA menunjukkan efisiensi tinggi.'))


    @Rule(Fact(warrant_valued='good'), Fact(per_valued='low'), Fact(roe_valued='low'))
    def ipo_rule_337(self):
        self.declare(Fact(recommendation='Warrant menunjukkan kondisi baik. PER berada di tingkat yang rendah. ROE menunjukkan keuntungan yang rendah.'))


    @Rule(Fact(warrant_valued='good'), Fact(der_valued='high'), Fact(roa_valued='high'))
    def ipo_rule_338(self):
        self.declare(Fact(recommendation='Warrant menunjukkan kondisi baik. DER menunjukkan tingkat hutang yang tinggi. ROA menunjukkan efisiensi tinggi.'))


    @Rule(Fact(warrant_valued='good'), Fact(der_valued='high'), Fact(roe_valued='low'))
    def ipo_rule_339(self):
        self.declare(Fact(recommendation='Warrant menunjukkan kondisi baik. DER menunjukkan tingkat hutang yang tinggi. ROE menunjukkan keuntungan yang rendah.'))


    @Rule(Fact(warrant_valued='good'), Fact(roa_valued='high'), Fact(roe_valued='low'))
    def ipo_rule_340(self):
        self.declare(Fact(recommendation='Warrant menunjukkan kondisi baik. ROA menunjukkan efisiensi tinggi. ROE menunjukkan keuntungan yang rendah.'))


    @Rule(Fact(net_income_valued='profit'), Fact(per_valued='low'), Fact(der_valued='high'))
    def ipo_rule_341(self):
        self.declare(Fact(recommendation='Laba bersih menunjukkan keuntungan. PER berada di tingkat yang rendah. DER menunjukkan tingkat hutang yang tinggi.'))


    @Rule(Fact(net_income_valued='profit'), Fact(per_valued='low'), Fact(roa_valued='high'))
    def ipo_rule_342(self):
        self.declare(Fact(recommendation='Laba bersih menunjukkan keuntungan. PER berada di tingkat yang rendah. ROA menunjukkan efisiensi tinggi.'))


    @Rule(Fact(net_income_valued='profit'), Fact(per_valued='low'), Fact(roe_valued='low'))
    def ipo_rule_343(self):
        self.declare(Fact(recommendation='Laba bersih menunjukkan keuntungan. PER berada di tingkat yang rendah. ROE menunjukkan keuntungan yang rendah.'))


    @Rule(Fact(net_income_valued='profit'), Fact(der_valued='high'), Fact(roa_valued='high'))
    def ipo_rule_344(self):
        self.declare(Fact(recommendation='Laba bersih menunjukkan keuntungan. DER menunjukkan tingkat hutang yang tinggi. ROA menunjukkan efisiensi tinggi.'))


    @Rule(Fact(net_income_valued='profit'), Fact(der_valued='high'), Fact(roe_valued='low'))
    def ipo_rule_345(self):
        self.declare(Fact(recommendation='Laba bersih menunjukkan keuntungan. DER menunjukkan tingkat hutang yang tinggi. ROE menunjukkan keuntungan yang rendah.'))


    @Rule(Fact(net_income_valued='profit'), Fact(roa_valued='high'), Fact(roe_valued='low'))
    def ipo_rule_346(self):
        self.declare(Fact(recommendation='Laba bersih menunjukkan keuntungan. ROA menunjukkan efisiensi tinggi. ROE menunjukkan keuntungan yang rendah.'))


    @Rule(Fact(per_valued='low'), Fact(der_valued='high'), Fact(roa_valued='high'))
    def ipo_rule_347(self):
        self.declare(Fact(recommendation='PER berada di tingkat yang rendah. DER menunjukkan tingkat hutang yang tinggi. ROA menunjukkan efisiensi tinggi.'))


    @Rule(Fact(per_valued='low'), Fact(der_valued='high'), Fact(roe_valued='low'))
    def ipo_rule_348(self):
        self.declare(Fact(recommendation='PER berada di tingkat yang rendah. DER menunjukkan tingkat hutang yang tinggi. ROE menunjukkan keuntungan yang rendah.'))


    @Rule(Fact(per_valued='low'), Fact(roa_valued='high'), Fact(roe_valued='low'))
    def ipo_rule_349(self):
        self.declare(Fact(recommendation='PER berada di tingkat yang rendah. ROA menunjukkan efisiensi tinggi. ROE menunjukkan keuntungan yang rendah.'))


    @Rule(Fact(der_valued='high'), Fact(roa_valued='high'), Fact(roe_valued='low'))
    def ipo_rule_350(self):
        self.declare(Fact(recommendation='DER menunjukkan tingkat hutang yang tinggi. ROA menunjukkan efisiensi tinggi. ROE menunjukkan keuntungan yang rendah.'))


    @Rule(Fact(underwriter_valued='good'), Fact(warrant_valued='good'), Fact(net_income_valued='profit'))
    def ipo_rule_351(self):
        self.declare(Fact(recommendation='Underwriter berkualitas baik. Warrant menunjukkan kondisi baik. Laba bersih menunjukkan keuntungan.'))


    @Rule(Fact(underwriter_valued='good'), Fact(warrant_valued='good'), Fact(per_valued='low'))
    def ipo_rule_352(self):
        self.declare(Fact(recommendation='Underwriter berkualitas baik. Warrant menunjukkan kondisi baik. PER berada di tingkat yang rendah.'))


    @Rule(Fact(underwriter_valued='good'), Fact(warrant_valued='good'), Fact(der_valued='high'))
    def ipo_rule_353(self):
        self.declare(Fact(recommendation='Underwriter berkualitas baik. Warrant menunjukkan kondisi baik. DER menunjukkan tingkat hutang yang tinggi.'))


    @Rule(Fact(underwriter_valued='good'), Fact(warrant_valued='good'), Fact(roa_valued='low'))
    def ipo_rule_354(self):
        self.declare(Fact(recommendation='Underwriter berkualitas baik. Warrant menunjukkan kondisi baik. ROA menunjukkan efisiensi rendah.'))


    @Rule(Fact(underwriter_valued='good'), Fact(warrant_valued='good'), Fact(roe_valued='high'))
    def ipo_rule_355(self):
        self.declare(Fact(recommendation='Underwriter berkualitas baik. Warrant menunjukkan kondisi baik. ROE menunjukkan keuntungan yang tinggi.'))


    @Rule(Fact(underwriter_valued='good'), Fact(net_income_valued='profit'), Fact(per_valued='low'))
    def ipo_rule_356(self):
        self.declare(Fact(recommendation='Underwriter berkualitas baik. Laba bersih menunjukkan keuntungan. PER berada di tingkat yang rendah.'))


    @Rule(Fact(underwriter_valued='good'), Fact(net_income_valued='profit'), Fact(der_valued='high'))
    def ipo_rule_357(self):
        self.declare(Fact(recommendation='Underwriter berkualitas baik. Laba bersih menunjukkan keuntungan. DER menunjukkan tingkat hutang yang tinggi.'))


    @Rule(Fact(underwriter_valued='good'), Fact(net_income_valued='profit'), Fact(roa_valued='low'))
    def ipo_rule_358(self):
        self.declare(Fact(recommendation='Underwriter berkualitas baik. Laba bersih menunjukkan keuntungan. ROA menunjukkan efisiensi rendah.'))


    @Rule(Fact(underwriter_valued='good'), Fact(net_income_valued='profit'), Fact(roe_valued='high'))
    def ipo_rule_359(self):
        self.declare(Fact(recommendation='Underwriter berkualitas baik. Laba bersih menunjukkan keuntungan. ROE menunjukkan keuntungan yang tinggi.'))


    @Rule(Fact(underwriter_valued='good'), Fact(per_valued='low'), Fact(der_valued='high'))
    def ipo_rule_360(self):
        self.declare(Fact(recommendation='Underwriter berkualitas baik. PER berada di tingkat yang rendah. DER menunjukkan tingkat hutang yang tinggi.'))


    @Rule(Fact(underwriter_valued='good'), Fact(per_valued='low'), Fact(roa_valued='low'))
    def ipo_rule_361(self):
        self.declare(Fact(recommendation='Underwriter berkualitas baik. PER berada di tingkat yang rendah. ROA menunjukkan efisiensi rendah.'))


    @Rule(Fact(underwriter_valued='good'), Fact(per_valued='low'), Fact(roe_valued='high'))
    def ipo_rule_362(self):
        self.declare(Fact(recommendation='Underwriter berkualitas baik. PER berada di tingkat yang rendah. ROE menunjukkan keuntungan yang tinggi.'))


    @Rule(Fact(underwriter_valued='good'), Fact(der_valued='high'), Fact(roa_valued='low'))
    def ipo_rule_363(self):
        self.declare(Fact(recommendation='Underwriter berkualitas baik. DER menunjukkan tingkat hutang yang tinggi. ROA menunjukkan efisiensi rendah.'))


    @Rule(Fact(underwriter_valued='good'), Fact(der_valued='high'), Fact(roe_valued='high'))
    def ipo_rule_364(self):
        self.declare(Fact(recommendation='Underwriter berkualitas baik. DER menunjukkan tingkat hutang yang tinggi. ROE menunjukkan keuntungan yang tinggi.'))


    @Rule(Fact(underwriter_valued='good'), Fact(roa_valued='low'), Fact(roe_valued='high'))
    def ipo_rule_365(self):
        self.declare(Fact(recommendation='Underwriter berkualitas baik. ROA menunjukkan efisiensi rendah. ROE menunjukkan keuntungan yang tinggi.'))


    @Rule(Fact(warrant_valued='good'), Fact(net_income_valued='profit'), Fact(per_valued='low'))
    def ipo_rule_366(self):
        self.declare(Fact(recommendation='Warrant menunjukkan kondisi baik. Laba bersih menunjukkan keuntungan. PER berada di tingkat yang rendah.'))


    @Rule(Fact(warrant_valued='good'), Fact(net_income_valued='profit'), Fact(der_valued='high'))
    def ipo_rule_367(self):
        self.declare(Fact(recommendation='Warrant menunjukkan kondisi baik. Laba bersih menunjukkan keuntungan. DER menunjukkan tingkat hutang yang tinggi.'))


    @Rule(Fact(warrant_valued='good'), Fact(net_income_valued='profit'), Fact(roa_valued='low'))
    def ipo_rule_368(self):
        self.declare(Fact(recommendation='Warrant menunjukkan kondisi baik. Laba bersih menunjukkan keuntungan. ROA menunjukkan efisiensi rendah.'))


    @Rule(Fact(warrant_valued='good'), Fact(net_income_valued='profit'), Fact(roe_valued='high'))
    def ipo_rule_369(self):
        self.declare(Fact(recommendation='Warrant menunjukkan kondisi baik. Laba bersih menunjukkan keuntungan. ROE menunjukkan keuntungan yang tinggi.'))


    @Rule(Fact(warrant_valued='good'), Fact(per_valued='low'), Fact(der_valued='high'))
    def ipo_rule_370(self):
        self.declare(Fact(recommendation='Warrant menunjukkan kondisi baik. PER berada di tingkat yang rendah. DER menunjukkan tingkat hutang yang tinggi.'))


    @Rule(Fact(warrant_valued='good'), Fact(per_valued='low'), Fact(roa_valued='low'))
    def ipo_rule_371(self):
        self.declare(Fact(recommendation='Warrant menunjukkan kondisi baik. PER berada di tingkat yang rendah. ROA menunjukkan efisiensi rendah.'))


    @Rule(Fact(warrant_valued='good'), Fact(per_valued='low'), Fact(roe_valued='high'))
    def ipo_rule_372(self):
        self.declare(Fact(recommendation='Warrant menunjukkan kondisi baik. PER berada di tingkat yang rendah. ROE menunjukkan keuntungan yang tinggi.'))


    @Rule(Fact(warrant_valued='good'), Fact(der_valued='high'), Fact(roa_valued='low'))
    def ipo_rule_373(self):
        self.declare(Fact(recommendation='Warrant menunjukkan kondisi baik. DER menunjukkan tingkat hutang yang tinggi. ROA menunjukkan efisiensi rendah.'))


    @Rule(Fact(warrant_valued='good'), Fact(der_valued='high'), Fact(roe_valued='high'))
    def ipo_rule_374(self):
        self.declare(Fact(recommendation='Warrant menunjukkan kondisi baik. DER menunjukkan tingkat hutang yang tinggi. ROE menunjukkan keuntungan yang tinggi.'))


    @Rule(Fact(warrant_valued='good'), Fact(roa_valued='low'), Fact(roe_valued='high'))
    def ipo_rule_375(self):
        self.declare(Fact(recommendation='Warrant menunjukkan kondisi baik. ROA menunjukkan efisiensi rendah. ROE menunjukkan keuntungan yang tinggi.'))


    @Rule(Fact(net_income_valued='profit'), Fact(per_valued='low'), Fact(der_valued='high'))
    def ipo_rule_376(self):
        self.declare(Fact(recommendation='Laba bersih menunjukkan keuntungan. PER berada di tingkat yang rendah. DER menunjukkan tingkat hutang yang tinggi.'))


    @Rule(Fact(net_income_valued='profit'), Fact(per_valued='low'), Fact(roa_valued='low'))
    def ipo_rule_377(self):
        self.declare(Fact(recommendation='Laba bersih menunjukkan keuntungan. PER berada di tingkat yang rendah. ROA menunjukkan efisiensi rendah.'))


    @Rule(Fact(net_income_valued='profit'), Fact(per_valued='low'), Fact(roe_valued='high'))
    def ipo_rule_378(self):
        self.declare(Fact(recommendation='Laba bersih menunjukkan keuntungan. PER berada di tingkat yang rendah. ROE menunjukkan keuntungan yang tinggi.'))


    @Rule(Fact(net_income_valued='profit'), Fact(der_valued='high'), Fact(roa_valued='low'))
    def ipo_rule_379(self):
        self.declare(Fact(recommendation='Laba bersih menunjukkan keuntungan. DER menunjukkan tingkat hutang yang tinggi. ROA menunjukkan efisiensi rendah.'))


    @Rule(Fact(net_income_valued='profit'), Fact(der_valued='high'), Fact(roe_valued='high'))
    def ipo_rule_380(self):
        self.declare(Fact(recommendation='Laba bersih menunjukkan keuntungan. DER menunjukkan tingkat hutang yang tinggi. ROE menunjukkan keuntungan yang tinggi.'))


    @Rule(Fact(net_income_valued='profit'), Fact(roa_valued='low'), Fact(roe_valued='high'))
    def ipo_rule_381(self):
        self.declare(Fact(recommendation='Laba bersih menunjukkan keuntungan. ROA menunjukkan efisiensi rendah. ROE menunjukkan keuntungan yang tinggi.'))


    @Rule(Fact(per_valued='low'), Fact(der_valued='high'), Fact(roa_valued='low'))
    def ipo_rule_382(self):
        self.declare(Fact(recommendation='PER berada di tingkat yang rendah. DER menunjukkan tingkat hutang yang tinggi. ROA menunjukkan efisiensi rendah.'))


    @Rule(Fact(per_valued='low'), Fact(der_valued='high'), Fact(roe_valued='high'))
    def ipo_rule_383(self):
        self.declare(Fact(recommendation='PER berada di tingkat yang rendah. DER menunjukkan tingkat hutang yang tinggi. ROE menunjukkan keuntungan yang tinggi.'))


    @Rule(Fact(per_valued='low'), Fact(roa_valued='low'), Fact(roe_valued='high'))
    def ipo_rule_384(self):
        self.declare(Fact(recommendation='PER berada di tingkat yang rendah. ROA menunjukkan efisiensi rendah. ROE menunjukkan keuntungan yang tinggi.'))


    @Rule(Fact(der_valued='high'), Fact(roa_valued='low'), Fact(roe_valued='high'))
    def ipo_rule_385(self):
        self.declare(Fact(recommendation='DER menunjukkan tingkat hutang yang tinggi. ROA menunjukkan efisiensi rendah. ROE menunjukkan keuntungan yang tinggi.'))


    @Rule(Fact(underwriter_valued='good'), Fact(warrant_valued='good'), Fact(net_income_valued='profit'))
    def ipo_rule_386(self):
        self.declare(Fact(recommendation='Underwriter berkualitas baik. Warrant menunjukkan kondisi baik. Laba bersih menunjukkan keuntungan.'))


    @Rule(Fact(underwriter_valued='good'), Fact(warrant_valued='good'), Fact(per_valued='low'))
    def ipo_rule_387(self):
        self.declare(Fact(recommendation='Underwriter berkualitas baik. Warrant menunjukkan kondisi baik. PER berada di tingkat yang rendah.'))


    @Rule(Fact(underwriter_valued='good'), Fact(warrant_valued='good'), Fact(der_valued='high'))
    def ipo_rule_388(self):
        self.declare(Fact(recommendation='Underwriter berkualitas baik. Warrant menunjukkan kondisi baik. DER menunjukkan tingkat hutang yang tinggi.'))


    @Rule(Fact(underwriter_valued='good'), Fact(warrant_valued='good'), Fact(roa_valued='low'))
    def ipo_rule_389(self):
        self.declare(Fact(recommendation='Underwriter berkualitas baik. Warrant menunjukkan kondisi baik. ROA menunjukkan efisiensi rendah.'))


    @Rule(Fact(underwriter_valued='good'), Fact(warrant_valued='good'), Fact(roe_valued='low'))
    def ipo_rule_390(self):
        self.declare(Fact(recommendation='Underwriter berkualitas baik. Warrant menunjukkan kondisi baik. ROE menunjukkan keuntungan yang rendah.'))


    @Rule(Fact(underwriter_valued='good'), Fact(net_income_valued='profit'), Fact(per_valued='low'))
    def ipo_rule_391(self):
        self.declare(Fact(recommendation='Underwriter berkualitas baik. Laba bersih menunjukkan keuntungan. PER berada di tingkat yang rendah.'))


    @Rule(Fact(underwriter_valued='good'), Fact(net_income_valued='profit'), Fact(der_valued='high'))
    def ipo_rule_392(self):
        self.declare(Fact(recommendation='Underwriter berkualitas baik. Laba bersih menunjukkan keuntungan. DER menunjukkan tingkat hutang yang tinggi.'))


    @Rule(Fact(underwriter_valued='good'), Fact(net_income_valued='profit'), Fact(roa_valued='low'))
    def ipo_rule_393(self):
        self.declare(Fact(recommendation='Underwriter berkualitas baik. Laba bersih menunjukkan keuntungan. ROA menunjukkan efisiensi rendah.'))


    @Rule(Fact(underwriter_valued='good'), Fact(net_income_valued='profit'), Fact(roe_valued='low'))
    def ipo_rule_394(self):
        self.declare(Fact(recommendation='Underwriter berkualitas baik. Laba bersih menunjukkan keuntungan. ROE menunjukkan keuntungan yang rendah.'))


    @Rule(Fact(underwriter_valued='good'), Fact(per_valued='low'), Fact(der_valued='high'))
    def ipo_rule_395(self):
        self.declare(Fact(recommendation='Underwriter berkualitas baik. PER berada di tingkat yang rendah. DER menunjukkan tingkat hutang yang tinggi.'))


    @Rule(Fact(underwriter_valued='good'), Fact(per_valued='low'), Fact(roa_valued='low'))
    def ipo_rule_396(self):
        self.declare(Fact(recommendation='Underwriter berkualitas baik. PER berada di tingkat yang rendah. ROA menunjukkan efisiensi rendah.'))


    @Rule(Fact(underwriter_valued='good'), Fact(per_valued='low'), Fact(roe_valued='low'))
    def ipo_rule_397(self):
        self.declare(Fact(recommendation='Underwriter berkualitas baik. PER berada di tingkat yang rendah. ROE menunjukkan keuntungan yang rendah.'))


    @Rule(Fact(underwriter_valued='good'), Fact(der_valued='high'), Fact(roa_valued='low'))
    def ipo_rule_398(self):
        self.declare(Fact(recommendation='Underwriter berkualitas baik. DER menunjukkan tingkat hutang yang tinggi. ROA menunjukkan efisiensi rendah.'))


    @Rule(Fact(underwriter_valued='good'), Fact(der_valued='high'), Fact(roe_valued='low'))
    def ipo_rule_399(self):
        self.declare(Fact(recommendation='Underwriter berkualitas baik. DER menunjukkan tingkat hutang yang tinggi. ROE menunjukkan keuntungan yang rendah.'))


    @Rule(Fact(underwriter_valued='good'), Fact(roa_valued='low'), Fact(roe_valued='low'))
    def ipo_rule_400(self):
        self.declare(Fact(recommendation='Underwriter berkualitas baik. ROA menunjukkan efisiensi rendah. ROE menunjukkan keuntungan yang rendah.'))


    @Rule(Fact(warrant_valued='good'), Fact(net_income_valued='profit'), Fact(per_valued='low'))
    def ipo_rule_401(self):
        self.declare(Fact(recommendation='Warrant menunjukkan kondisi baik. Laba bersih menunjukkan keuntungan. PER berada di tingkat yang rendah.'))


    @Rule(Fact(warrant_valued='good'), Fact(net_income_valued='profit'), Fact(der_valued='high'))
    def ipo_rule_402(self):
        self.declare(Fact(recommendation='Warrant menunjukkan kondisi baik. Laba bersih menunjukkan keuntungan. DER menunjukkan tingkat hutang yang tinggi.'))


    @Rule(Fact(warrant_valued='good'), Fact(net_income_valued='profit'), Fact(roa_valued='low'))
    def ipo_rule_403(self):
        self.declare(Fact(recommendation='Warrant menunjukkan kondisi baik. Laba bersih menunjukkan keuntungan. ROA menunjukkan efisiensi rendah.'))


    @Rule(Fact(warrant_valued='good'), Fact(net_income_valued='profit'), Fact(roe_valued='low'))
    def ipo_rule_404(self):
        self.declare(Fact(recommendation='Warrant menunjukkan kondisi baik. Laba bersih menunjukkan keuntungan. ROE menunjukkan keuntungan yang rendah.'))


    @Rule(Fact(warrant_valued='good'), Fact(per_valued='low'), Fact(der_valued='high'))
    def ipo_rule_405(self):
        self.declare(Fact(recommendation='Warrant menunjukkan kondisi baik. PER berada di tingkat yang rendah. DER menunjukkan tingkat hutang yang tinggi.'))


    @Rule(Fact(warrant_valued='good'), Fact(per_valued='low'), Fact(roa_valued='low'))
    def ipo_rule_406(self):
        self.declare(Fact(recommendation='Warrant menunjukkan kondisi baik. PER berada di tingkat yang rendah. ROA menunjukkan efisiensi rendah.'))


    @Rule(Fact(warrant_valued='good'), Fact(per_valued='low'), Fact(roe_valued='low'))
    def ipo_rule_407(self):
        self.declare(Fact(recommendation='Warrant menunjukkan kondisi baik. PER berada di tingkat yang rendah. ROE menunjukkan keuntungan yang rendah.'))


    @Rule(Fact(warrant_valued='good'), Fact(der_valued='high'), Fact(roa_valued='low'))
    def ipo_rule_408(self):
        self.declare(Fact(recommendation='Warrant menunjukkan kondisi baik. DER menunjukkan tingkat hutang yang tinggi. ROA menunjukkan efisiensi rendah.'))


    @Rule(Fact(warrant_valued='good'), Fact(der_valued='high'), Fact(roe_valued='low'))
    def ipo_rule_409(self):
        self.declare(Fact(recommendation='Warrant menunjukkan kondisi baik. DER menunjukkan tingkat hutang yang tinggi. ROE menunjukkan keuntungan yang rendah.'))


    @Rule(Fact(warrant_valued='good'), Fact(roa_valued='low'), Fact(roe_valued='low'))
    def ipo_rule_410(self):
        self.declare(Fact(recommendation='Warrant menunjukkan kondisi baik. ROA menunjukkan efisiensi rendah. ROE menunjukkan keuntungan yang rendah.'))


    @Rule(Fact(net_income_valued='profit'), Fact(per_valued='low'), Fact(der_valued='high'))
    def ipo_rule_411(self):
        self.declare(Fact(recommendation='Laba bersih menunjukkan keuntungan. PER berada di tingkat yang rendah. DER menunjukkan tingkat hutang yang tinggi.'))


    @Rule(Fact(net_income_valued='profit'), Fact(per_valued='low'), Fact(roa_valued='low'))
    def ipo_rule_412(self):
        self.declare(Fact(recommendation='Laba bersih menunjukkan keuntungan. PER berada di tingkat yang rendah. ROA menunjukkan efisiensi rendah.'))


    @Rule(Fact(net_income_valued='profit'), Fact(per_valued='low'), Fact(roe_valued='low'))
    def ipo_rule_413(self):
        self.declare(Fact(recommendation='Laba bersih menunjukkan keuntungan. PER berada di tingkat yang rendah. ROE menunjukkan keuntungan yang rendah.'))


    @Rule(Fact(net_income_valued='profit'), Fact(der_valued='high'), Fact(roa_valued='low'))
    def ipo_rule_414(self):
        self.declare(Fact(recommendation='Laba bersih menunjukkan keuntungan. DER menunjukkan tingkat hutang yang tinggi. ROA menunjukkan efisiensi rendah.'))


    @Rule(Fact(net_income_valued='profit'), Fact(der_valued='high'), Fact(roe_valued='low'))
    def ipo_rule_415(self):
        self.declare(Fact(recommendation='Laba bersih menunjukkan keuntungan. DER menunjukkan tingkat hutang yang tinggi. ROE menunjukkan keuntungan yang rendah.'))


    @Rule(Fact(net_income_valued='profit'), Fact(roa_valued='low'), Fact(roe_valued='low'))
    def ipo_rule_416(self):
        self.declare(Fact(recommendation='Laba bersih menunjukkan keuntungan. ROA menunjukkan efisiensi rendah. ROE menunjukkan keuntungan yang rendah.'))


    @Rule(Fact(per_valued='low'), Fact(der_valued='high'), Fact(roa_valued='low'))
    def ipo_rule_417(self):
        self.declare(Fact(recommendation='PER berada di tingkat yang rendah. DER menunjukkan tingkat hutang yang tinggi. ROA menunjukkan efisiensi rendah.'))


    @Rule(Fact(per_valued='low'), Fact(der_valued='high'), Fact(roe_valued='low'))
    def ipo_rule_418(self):
        self.declare(Fact(recommendation='PER berada di tingkat yang rendah. DER menunjukkan tingkat hutang yang tinggi. ROE menunjukkan keuntungan yang rendah.'))


    @Rule(Fact(per_valued='low'), Fact(roa_valued='low'), Fact(roe_valued='low'))
    def ipo_rule_419(self):
        self.declare(Fact(recommendation='PER berada di tingkat yang rendah. ROA menunjukkan efisiensi rendah. ROE menunjukkan keuntungan yang rendah.'))


    @Rule(Fact(der_valued='high'), Fact(roa_valued='low'), Fact(roe_valued='low'))
    def ipo_rule_420(self):
        self.declare(Fact(recommendation='DER menunjukkan tingkat hutang yang tinggi. ROA menunjukkan efisiensi rendah. ROE menunjukkan keuntungan yang rendah.'))


    @Rule(Fact(underwriter_valued='good'), Fact(warrant_valued='good'), Fact(net_income_valued='profit'))
    def ipo_rule_421(self):
        self.declare(Fact(recommendation='Underwriter berkualitas baik. Warrant menunjukkan kondisi baik. Laba bersih menunjukkan keuntungan.'))


    @Rule(Fact(underwriter_valued='good'), Fact(warrant_valued='good'), Fact(per_valued='low'))
    def ipo_rule_422(self):
        self.declare(Fact(recommendation='Underwriter berkualitas baik. Warrant menunjukkan kondisi baik. PER berada di tingkat yang rendah.'))


    @Rule(Fact(underwriter_valued='good'), Fact(warrant_valued='good'), Fact(der_valued='low'))
    def ipo_rule_423(self):
        self.declare(Fact(recommendation='Underwriter berkualitas baik. Warrant menunjukkan kondisi baik. DER menunjukkan tingkat hutang yang rendah.'))


    @Rule(Fact(underwriter_valued='good'), Fact(warrant_valued='good'), Fact(roa_valued='high'))
    def ipo_rule_424(self):
        self.declare(Fact(recommendation='Underwriter berkualitas baik. Warrant menunjukkan kondisi baik. ROA menunjukkan efisiensi tinggi.'))


    @Rule(Fact(underwriter_valued='good'), Fact(warrant_valued='good'), Fact(roe_valued='high'))
    def ipo_rule_425(self):
        self.declare(Fact(recommendation='Underwriter berkualitas baik. Warrant menunjukkan kondisi baik. ROE menunjukkan keuntungan yang tinggi.'))


    @Rule(Fact(underwriter_valued='good'), Fact(net_income_valued='profit'), Fact(per_valued='low'))
    def ipo_rule_426(self):
        self.declare(Fact(recommendation='Underwriter berkualitas baik. Laba bersih menunjukkan keuntungan. PER berada di tingkat yang rendah.'))


    @Rule(Fact(underwriter_valued='good'), Fact(net_income_valued='profit'), Fact(der_valued='low'))
    def ipo_rule_427(self):
        self.declare(Fact(recommendation='Underwriter berkualitas baik. Laba bersih menunjukkan keuntungan. DER menunjukkan tingkat hutang yang rendah.'))


    @Rule(Fact(underwriter_valued='good'), Fact(net_income_valued='profit'), Fact(roa_valued='high'))
    def ipo_rule_428(self):
        self.declare(Fact(recommendation='Underwriter berkualitas baik. Laba bersih menunjukkan keuntungan. ROA menunjukkan efisiensi tinggi.'))


    @Rule(Fact(underwriter_valued='good'), Fact(net_income_valued='profit'), Fact(roe_valued='high'))
    def ipo_rule_429(self):
        self.declare(Fact(recommendation='Underwriter berkualitas baik. Laba bersih menunjukkan keuntungan. ROE menunjukkan keuntungan yang tinggi.'))


    @Rule(Fact(underwriter_valued='good'), Fact(per_valued='low'), Fact(der_valued='low'))
    def ipo_rule_430(self):
        self.declare(Fact(recommendation='Underwriter berkualitas baik. PER berada di tingkat yang rendah. DER menunjukkan tingkat hutang yang rendah.'))


    @Rule(Fact(underwriter_valued='good'), Fact(per_valued='low'), Fact(roa_valued='high'))
    def ipo_rule_431(self):
        self.declare(Fact(recommendation='Underwriter berkualitas baik. PER berada di tingkat yang rendah. ROA menunjukkan efisiensi tinggi.'))


    @Rule(Fact(underwriter_valued='good'), Fact(per_valued='low'), Fact(roe_valued='high'))
    def ipo_rule_432(self):
        self.declare(Fact(recommendation='Underwriter berkualitas baik. PER berada di tingkat yang rendah. ROE menunjukkan keuntungan yang tinggi.'))


    @Rule(Fact(underwriter_valued='good'), Fact(der_valued='low'), Fact(roa_valued='high'))
    def ipo_rule_433(self):
        self.declare(Fact(recommendation='Underwriter berkualitas baik. DER menunjukkan tingkat hutang yang rendah. ROA menunjukkan efisiensi tinggi.'))


    @Rule(Fact(underwriter_valued='good'), Fact(der_valued='low'), Fact(roe_valued='high'))
    def ipo_rule_434(self):
        self.declare(Fact(recommendation='Underwriter berkualitas baik. DER menunjukkan tingkat hutang yang rendah. ROE menunjukkan keuntungan yang tinggi.'))


    @Rule(Fact(underwriter_valued='good'), Fact(roa_valued='high'), Fact(roe_valued='high'))
    def ipo_rule_435(self):
        self.declare(Fact(recommendation='Underwriter berkualitas baik. ROA menunjukkan efisiensi tinggi. ROE menunjukkan keuntungan yang tinggi.'))


    @Rule(Fact(warrant_valued='good'), Fact(net_income_valued='profit'), Fact(per_valued='low'))
    def ipo_rule_436(self):
        self.declare(Fact(recommendation='Warrant menunjukkan kondisi baik. Laba bersih menunjukkan keuntungan. PER berada di tingkat yang rendah.'))


    @Rule(Fact(warrant_valued='good'), Fact(net_income_valued='profit'), Fact(der_valued='low'))
    def ipo_rule_437(self):
        self.declare(Fact(recommendation='Warrant menunjukkan kondisi baik. Laba bersih menunjukkan keuntungan. DER menunjukkan tingkat hutang yang rendah.'))


    @Rule(Fact(warrant_valued='good'), Fact(net_income_valued='profit'), Fact(roa_valued='high'))
    def ipo_rule_438(self):
        self.declare(Fact(recommendation='Warrant menunjukkan kondisi baik. Laba bersih menunjukkan keuntungan. ROA menunjukkan efisiensi tinggi.'))


    @Rule(Fact(warrant_valued='good'), Fact(net_income_valued='profit'), Fact(roe_valued='high'))
    def ipo_rule_439(self):
        self.declare(Fact(recommendation='Warrant menunjukkan kondisi baik. Laba bersih menunjukkan keuntungan. ROE menunjukkan keuntungan yang tinggi.'))


    @Rule(Fact(warrant_valued='good'), Fact(per_valued='low'), Fact(der_valued='low'))
    def ipo_rule_440(self):
        self.declare(Fact(recommendation='Warrant menunjukkan kondisi baik. PER berada di tingkat yang rendah. DER menunjukkan tingkat hutang yang rendah.'))


    @Rule(Fact(warrant_valued='good'), Fact(per_valued='low'), Fact(roa_valued='high'))
    def ipo_rule_441(self):
        self.declare(Fact(recommendation='Warrant menunjukkan kondisi baik. PER berada di tingkat yang rendah. ROA menunjukkan efisiensi tinggi.'))


    @Rule(Fact(warrant_valued='good'), Fact(per_valued='low'), Fact(roe_valued='high'))
    def ipo_rule_442(self):
        self.declare(Fact(recommendation='Warrant menunjukkan kondisi baik. PER berada di tingkat yang rendah. ROE menunjukkan keuntungan yang tinggi.'))


    @Rule(Fact(warrant_valued='good'), Fact(der_valued='low'), Fact(roa_valued='high'))
    def ipo_rule_443(self):
        self.declare(Fact(recommendation='Warrant menunjukkan kondisi baik. DER menunjukkan tingkat hutang yang rendah. ROA menunjukkan efisiensi tinggi.'))


    @Rule(Fact(warrant_valued='good'), Fact(der_valued='low'), Fact(roe_valued='high'))
    def ipo_rule_444(self):
        self.declare(Fact(recommendation='Warrant menunjukkan kondisi baik. DER menunjukkan tingkat hutang yang rendah. ROE menunjukkan keuntungan yang tinggi.'))


    @Rule(Fact(warrant_valued='good'), Fact(roa_valued='high'), Fact(roe_valued='high'))
    def ipo_rule_445(self):
        self.declare(Fact(recommendation='Warrant menunjukkan kondisi baik. ROA menunjukkan efisiensi tinggi. ROE menunjukkan keuntungan yang tinggi.'))


    @Rule(Fact(net_income_valued='profit'), Fact(per_valued='low'), Fact(der_valued='low'))
    def ipo_rule_446(self):
        self.declare(Fact(recommendation='Laba bersih menunjukkan keuntungan. PER berada di tingkat yang rendah. DER menunjukkan tingkat hutang yang rendah.'))


    @Rule(Fact(net_income_valued='profit'), Fact(per_valued='low'), Fact(roa_valued='high'))
    def ipo_rule_447(self):
        self.declare(Fact(recommendation='Laba bersih menunjukkan keuntungan. PER berada di tingkat yang rendah. ROA menunjukkan efisiensi tinggi.'))


    @Rule(Fact(net_income_valued='profit'), Fact(per_valued='low'), Fact(roe_valued='high'))
    def ipo_rule_448(self):
        self.declare(Fact(recommendation='Laba bersih menunjukkan keuntungan. PER berada di tingkat yang rendah. ROE menunjukkan keuntungan yang tinggi.'))


    @Rule(Fact(net_income_valued='profit'), Fact(der_valued='low'), Fact(roa_valued='high'))
    def ipo_rule_449(self):
        self.declare(Fact(recommendation='Laba bersih menunjukkan keuntungan. DER menunjukkan tingkat hutang yang rendah. ROA menunjukkan efisiensi tinggi.'))


    @Rule(Fact(net_income_valued='profit'), Fact(der_valued='low'), Fact(roe_valued='high'))
    def ipo_rule_450(self):
        self.declare(Fact(recommendation='Laba bersih menunjukkan keuntungan. DER menunjukkan tingkat hutang yang rendah. ROE menunjukkan keuntungan yang tinggi.'))


    @Rule(Fact(net_income_valued='profit'), Fact(roa_valued='high'), Fact(roe_valued='high'))
    def ipo_rule_451(self):
        self.declare(Fact(recommendation='Laba bersih menunjukkan keuntungan. ROA menunjukkan efisiensi tinggi. ROE menunjukkan keuntungan yang tinggi.'))


    @Rule(Fact(per_valued='low'), Fact(der_valued='low'), Fact(roa_valued='high'))
    def ipo_rule_452(self):
        self.declare(Fact(recommendation='PER berada di tingkat yang rendah. DER menunjukkan tingkat hutang yang rendah. ROA menunjukkan efisiensi tinggi.'))


    @Rule(Fact(per_valued='low'), Fact(der_valued='low'), Fact(roe_valued='high'))
    def ipo_rule_453(self):
        self.declare(Fact(recommendation='PER berada di tingkat yang rendah. DER menunjukkan tingkat hutang yang rendah. ROE menunjukkan keuntungan yang tinggi.'))


    @Rule(Fact(per_valued='low'), Fact(roa_valued='high'), Fact(roe_valued='high'))
    def ipo_rule_454(self):
        self.declare(Fact(recommendation='PER berada di tingkat yang rendah. ROA menunjukkan efisiensi tinggi. ROE menunjukkan keuntungan yang tinggi.'))


    @Rule(Fact(der_valued='low'), Fact(roa_valued='high'), Fact(roe_valued='high'))
    def ipo_rule_455(self):
        self.declare(Fact(recommendation='DER menunjukkan tingkat hutang yang rendah. ROA menunjukkan efisiensi tinggi. ROE menunjukkan keuntungan yang tinggi.'))


    @Rule(Fact(underwriter_valued='good'), Fact(warrant_valued='good'), Fact(net_income_valued='profit'))
    def ipo_rule_456(self):
        self.declare(Fact(recommendation='Underwriter berkualitas baik. Warrant menunjukkan kondisi baik. Laba bersih menunjukkan keuntungan.'))


    @Rule(Fact(underwriter_valued='good'), Fact(warrant_valued='good'), Fact(per_valued='low'))
    def ipo_rule_457(self):
        self.declare(Fact(recommendation='Underwriter berkualitas baik. Warrant menunjukkan kondisi baik. PER berada di tingkat yang rendah.'))


    @Rule(Fact(underwriter_valued='good'), Fact(warrant_valued='good'), Fact(der_valued='low'))
    def ipo_rule_458(self):
        self.declare(Fact(recommendation='Underwriter berkualitas baik. Warrant menunjukkan kondisi baik. DER menunjukkan tingkat hutang yang rendah.'))


    @Rule(Fact(underwriter_valued='good'), Fact(warrant_valued='good'), Fact(roa_valued='high'))
    def ipo_rule_459(self):
        self.declare(Fact(recommendation='Underwriter berkualitas baik. Warrant menunjukkan kondisi baik. ROA menunjukkan efisiensi tinggi.'))


    @Rule(Fact(underwriter_valued='good'), Fact(warrant_valued='good'), Fact(roe_valued='low'))
    def ipo_rule_460(self):
        self.declare(Fact(recommendation='Underwriter berkualitas baik. Warrant menunjukkan kondisi baik. ROE menunjukkan keuntungan yang rendah.'))


    @Rule(Fact(underwriter_valued='good'), Fact(net_income_valued='profit'), Fact(per_valued='low'))
    def ipo_rule_461(self):
        self.declare(Fact(recommendation='Underwriter berkualitas baik. Laba bersih menunjukkan keuntungan. PER berada di tingkat yang rendah.'))


    @Rule(Fact(underwriter_valued='good'), Fact(net_income_valued='profit'), Fact(der_valued='low'))
    def ipo_rule_462(self):
        self.declare(Fact(recommendation='Underwriter berkualitas baik. Laba bersih menunjukkan keuntungan. DER menunjukkan tingkat hutang yang rendah.'))


    @Rule(Fact(underwriter_valued='good'), Fact(net_income_valued='profit'), Fact(roa_valued='high'))
    def ipo_rule_463(self):
        self.declare(Fact(recommendation='Underwriter berkualitas baik. Laba bersih menunjukkan keuntungan. ROA menunjukkan efisiensi tinggi.'))


    @Rule(Fact(underwriter_valued='good'), Fact(net_income_valued='profit'), Fact(roe_valued='low'))
    def ipo_rule_464(self):
        self.declare(Fact(recommendation='Underwriter berkualitas baik. Laba bersih menunjukkan keuntungan. ROE menunjukkan keuntungan yang rendah.'))


    @Rule(Fact(underwriter_valued='good'), Fact(per_valued='low'), Fact(der_valued='low'))
    def ipo_rule_465(self):
        self.declare(Fact(recommendation='Underwriter berkualitas baik. PER berada di tingkat yang rendah. DER menunjukkan tingkat hutang yang rendah.'))


    @Rule(Fact(underwriter_valued='good'), Fact(per_valued='low'), Fact(roa_valued='high'))
    def ipo_rule_466(self):
        self.declare(Fact(recommendation='Underwriter berkualitas baik. PER berada di tingkat yang rendah. ROA menunjukkan efisiensi tinggi.'))


    @Rule(Fact(underwriter_valued='good'), Fact(per_valued='low'), Fact(roe_valued='low'))
    def ipo_rule_467(self):
        self.declare(Fact(recommendation='Underwriter berkualitas baik. PER berada di tingkat yang rendah. ROE menunjukkan keuntungan yang rendah.'))


    @Rule(Fact(underwriter_valued='good'), Fact(der_valued='low'), Fact(roa_valued='high'))
    def ipo_rule_468(self):
        self.declare(Fact(recommendation='Underwriter berkualitas baik. DER menunjukkan tingkat hutang yang rendah. ROA menunjukkan efisiensi tinggi.'))


    @Rule(Fact(underwriter_valued='good'), Fact(der_valued='low'), Fact(roe_valued='low'))
    def ipo_rule_469(self):
        self.declare(Fact(recommendation='Underwriter berkualitas baik. DER menunjukkan tingkat hutang yang rendah. ROE menunjukkan keuntungan yang rendah.'))


    @Rule(Fact(underwriter_valued='good'), Fact(roa_valued='high'), Fact(roe_valued='low'))
    def ipo_rule_470(self):
        self.declare(Fact(recommendation='Underwriter berkualitas baik. ROA menunjukkan efisiensi tinggi. ROE menunjukkan keuntungan yang rendah.'))


    @Rule(Fact(warrant_valued='good'), Fact(net_income_valued='profit'), Fact(per_valued='low'))
    def ipo_rule_471(self):
        self.declare(Fact(recommendation='Warrant menunjukkan kondisi baik. Laba bersih menunjukkan keuntungan. PER berada di tingkat yang rendah.'))


    @Rule(Fact(warrant_valued='good'), Fact(net_income_valued='profit'), Fact(der_valued='low'))
    def ipo_rule_472(self):
        self.declare(Fact(recommendation='Warrant menunjukkan kondisi baik. Laba bersih menunjukkan keuntungan. DER menunjukkan tingkat hutang yang rendah.'))


    @Rule(Fact(warrant_valued='good'), Fact(net_income_valued='profit'), Fact(roa_valued='high'))
    def ipo_rule_473(self):
        self.declare(Fact(recommendation='Warrant menunjukkan kondisi baik. Laba bersih menunjukkan keuntungan. ROA menunjukkan efisiensi tinggi.'))


    @Rule(Fact(warrant_valued='good'), Fact(net_income_valued='profit'), Fact(roe_valued='low'))
    def ipo_rule_474(self):
        self.declare(Fact(recommendation='Warrant menunjukkan kondisi baik. Laba bersih menunjukkan keuntungan. ROE menunjukkan keuntungan yang rendah.'))


    @Rule(Fact(warrant_valued='good'), Fact(per_valued='low'), Fact(der_valued='low'))
    def ipo_rule_475(self):
        self.declare(Fact(recommendation='Warrant menunjukkan kondisi baik. PER berada di tingkat yang rendah. DER menunjukkan tingkat hutang yang rendah.'))


    @Rule(Fact(warrant_valued='good'), Fact(per_valued='low'), Fact(roa_valued='high'))
    def ipo_rule_476(self):
        self.declare(Fact(recommendation='Warrant menunjukkan kondisi baik. PER berada di tingkat yang rendah. ROA menunjukkan efisiensi tinggi.'))


    @Rule(Fact(warrant_valued='good'), Fact(per_valued='low'), Fact(roe_valued='low'))
    def ipo_rule_477(self):
        self.declare(Fact(recommendation='Warrant menunjukkan kondisi baik. PER berada di tingkat yang rendah. ROE menunjukkan keuntungan yang rendah.'))


    @Rule(Fact(warrant_valued='good'), Fact(der_valued='low'), Fact(roa_valued='high'))
    def ipo_rule_478(self):
        self.declare(Fact(recommendation='Warrant menunjukkan kondisi baik. DER menunjukkan tingkat hutang yang rendah. ROA menunjukkan efisiensi tinggi.'))


    @Rule(Fact(warrant_valued='good'), Fact(der_valued='low'), Fact(roe_valued='low'))
    def ipo_rule_479(self):
        self.declare(Fact(recommendation='Warrant menunjukkan kondisi baik. DER menunjukkan tingkat hutang yang rendah. ROE menunjukkan keuntungan yang rendah.'))


    @Rule(Fact(warrant_valued='good'), Fact(roa_valued='high'), Fact(roe_valued='low'))
    def ipo_rule_480(self):
        self.declare(Fact(recommendation='Warrant menunjukkan kondisi baik. ROA menunjukkan efisiensi tinggi. ROE menunjukkan keuntungan yang rendah.'))


    @Rule(Fact(net_income_valued='profit'), Fact(per_valued='low'), Fact(der_valued='low'))
    def ipo_rule_481(self):
        self.declare(Fact(recommendation='Laba bersih menunjukkan keuntungan. PER berada di tingkat yang rendah. DER menunjukkan tingkat hutang yang rendah.'))


    @Rule(Fact(net_income_valued='profit'), Fact(per_valued='low'), Fact(roa_valued='high'))
    def ipo_rule_482(self):
        self.declare(Fact(recommendation='Laba bersih menunjukkan keuntungan. PER berada di tingkat yang rendah. ROA menunjukkan efisiensi tinggi.'))


    @Rule(Fact(net_income_valued='profit'), Fact(per_valued='low'), Fact(roe_valued='low'))
    def ipo_rule_483(self):
        self.declare(Fact(recommendation='Laba bersih menunjukkan keuntungan. PER berada di tingkat yang rendah. ROE menunjukkan keuntungan yang rendah.'))


    @Rule(Fact(net_income_valued='profit'), Fact(der_valued='low'), Fact(roa_valued='high'))
    def ipo_rule_484(self):
        self.declare(Fact(recommendation='Laba bersih menunjukkan keuntungan. DER menunjukkan tingkat hutang yang rendah. ROA menunjukkan efisiensi tinggi.'))


    @Rule(Fact(net_income_valued='profit'), Fact(der_valued='low'), Fact(roe_valued='low'))
    def ipo_rule_485(self):
        self.declare(Fact(recommendation='Laba bersih menunjukkan keuntungan. DER menunjukkan tingkat hutang yang rendah. ROE menunjukkan keuntungan yang rendah.'))


    @Rule(Fact(net_income_valued='profit'), Fact(roa_valued='high'), Fact(roe_valued='low'))
    def ipo_rule_486(self):
        self.declare(Fact(recommendation='Laba bersih menunjukkan keuntungan. ROA menunjukkan efisiensi tinggi. ROE menunjukkan keuntungan yang rendah.'))


    @Rule(Fact(per_valued='low'), Fact(der_valued='low'), Fact(roa_valued='high'))
    def ipo_rule_487(self):
        self.declare(Fact(recommendation='PER berada di tingkat yang rendah. DER menunjukkan tingkat hutang yang rendah. ROA menunjukkan efisiensi tinggi.'))


    @Rule(Fact(per_valued='low'), Fact(der_valued='low'), Fact(roe_valued='low'))
    def ipo_rule_488(self):
        self.declare(Fact(recommendation='PER berada di tingkat yang rendah. DER menunjukkan tingkat hutang yang rendah. ROE menunjukkan keuntungan yang rendah.'))


    @Rule(Fact(per_valued='low'), Fact(roa_valued='high'), Fact(roe_valued='low'))
    def ipo_rule_489(self):
        self.declare(Fact(recommendation='PER berada di tingkat yang rendah. ROA menunjukkan efisiensi tinggi. ROE menunjukkan keuntungan yang rendah.'))


    @Rule(Fact(der_valued='low'), Fact(roa_valued='high'), Fact(roe_valued='low'))
    def ipo_rule_490(self):
        self.declare(Fact(recommendation='DER menunjukkan tingkat hutang yang rendah. ROA menunjukkan efisiensi tinggi. ROE menunjukkan keuntungan yang rendah.'))


    @Rule(Fact(underwriter_valued='good'), Fact(warrant_valued='good'), Fact(net_income_valued='profit'))
    def ipo_rule_491(self):
        self.declare(Fact(recommendation='Underwriter berkualitas baik. Warrant menunjukkan kondisi baik. Laba bersih menunjukkan keuntungan.'))


    @Rule(Fact(underwriter_valued='good'), Fact(warrant_valued='good'), Fact(per_valued='low'))
    def ipo_rule_492(self):
        self.declare(Fact(recommendation='Underwriter berkualitas baik. Warrant menunjukkan kondisi baik. PER berada di tingkat yang rendah.'))


    @Rule(Fact(underwriter_valued='good'), Fact(warrant_valued='good'), Fact(der_valued='low'))
    def ipo_rule_493(self):
        self.declare(Fact(recommendation='Underwriter berkualitas baik. Warrant menunjukkan kondisi baik. DER menunjukkan tingkat hutang yang rendah.'))


    @Rule(Fact(underwriter_valued='good'), Fact(warrant_valued='good'), Fact(roa_valued='low'))
    def ipo_rule_494(self):
        self.declare(Fact(recommendation='Underwriter berkualitas baik. Warrant menunjukkan kondisi baik. ROA menunjukkan efisiensi rendah.'))


    @Rule(Fact(underwriter_valued='good'), Fact(warrant_valued='good'), Fact(roe_valued='high'))
    def ipo_rule_495(self):
        self.declare(Fact(recommendation='Underwriter berkualitas baik. Warrant menunjukkan kondisi baik. ROE menunjukkan keuntungan yang tinggi.'))


    @Rule(Fact(underwriter_valued='good'), Fact(net_income_valued='profit'), Fact(per_valued='low'))
    def ipo_rule_496(self):
        self.declare(Fact(recommendation='Underwriter berkualitas baik. Laba bersih menunjukkan keuntungan. PER berada di tingkat yang rendah.'))


    @Rule(Fact(underwriter_valued='good'), Fact(net_income_valued='profit'), Fact(der_valued='low'))
    def ipo_rule_497(self):
        self.declare(Fact(recommendation='Underwriter berkualitas baik. Laba bersih menunjukkan keuntungan. DER menunjukkan tingkat hutang yang rendah.'))


    @Rule(Fact(underwriter_valued='good'), Fact(net_income_valued='profit'), Fact(roa_valued='low'))
    def ipo_rule_498(self):
        self.declare(Fact(recommendation='Underwriter berkualitas baik. Laba bersih menunjukkan keuntungan. ROA menunjukkan efisiensi rendah.'))


    @Rule(Fact(underwriter_valued='good'), Fact(net_income_valued='profit'), Fact(roe_valued='high'))
    def ipo_rule_499(self):
        self.declare(Fact(recommendation='Underwriter berkualitas baik. Laba bersih menunjukkan keuntungan. ROE menunjukkan keuntungan yang tinggi.'))


    @Rule(Fact(underwriter_valued='good'), Fact(per_valued='low'), Fact(der_valued='low'))
    def ipo_rule_500(self):
        self.declare(Fact(recommendation='Underwriter berkualitas baik. PER berada di tingkat yang rendah. DER menunjukkan tingkat hutang yang rendah.'))


    @Rule(Fact(underwriter_valued='good'), Fact(per_valued='low'), Fact(roa_valued='low'))
    def ipo_rule_501(self):
        self.declare(Fact(recommendation='Underwriter berkualitas baik. PER berada di tingkat yang rendah. ROA menunjukkan efisiensi rendah.'))


    @Rule(Fact(underwriter_valued='good'), Fact(per_valued='low'), Fact(roe_valued='high'))
    def ipo_rule_502(self):
        self.declare(Fact(recommendation='Underwriter berkualitas baik. PER berada di tingkat yang rendah. ROE menunjukkan keuntungan yang tinggi.'))


    @Rule(Fact(underwriter_valued='good'), Fact(der_valued='low'), Fact(roa_valued='low'))
    def ipo_rule_503(self):
        self.declare(Fact(recommendation='Underwriter berkualitas baik. DER menunjukkan tingkat hutang yang rendah. ROA menunjukkan efisiensi rendah.'))


    @Rule(Fact(underwriter_valued='good'), Fact(der_valued='low'), Fact(roe_valued='high'))
    def ipo_rule_504(self):
        self.declare(Fact(recommendation='Underwriter berkualitas baik. DER menunjukkan tingkat hutang yang rendah. ROE menunjukkan keuntungan yang tinggi.'))


    @Rule(Fact(underwriter_valued='good'), Fact(roa_valued='low'), Fact(roe_valued='high'))
    def ipo_rule_505(self):
        self.declare(Fact(recommendation='Underwriter berkualitas baik. ROA menunjukkan efisiensi rendah. ROE menunjukkan keuntungan yang tinggi.'))


    @Rule(Fact(warrant_valued='good'), Fact(net_income_valued='profit'), Fact(per_valued='low'))
    def ipo_rule_506(self):
        self.declare(Fact(recommendation='Warrant menunjukkan kondisi baik. Laba bersih menunjukkan keuntungan. PER berada di tingkat yang rendah.'))


    @Rule(Fact(warrant_valued='good'), Fact(net_income_valued='profit'), Fact(der_valued='low'))
    def ipo_rule_507(self):
        self.declare(Fact(recommendation='Warrant menunjukkan kondisi baik. Laba bersih menunjukkan keuntungan. DER menunjukkan tingkat hutang yang rendah.'))


    @Rule(Fact(warrant_valued='good'), Fact(net_income_valued='profit'), Fact(roa_valued='low'))
    def ipo_rule_508(self):
        self.declare(Fact(recommendation='Warrant menunjukkan kondisi baik. Laba bersih menunjukkan keuntungan. ROA menunjukkan efisiensi rendah.'))


    @Rule(Fact(warrant_valued='good'), Fact(net_income_valued='profit'), Fact(roe_valued='high'))
    def ipo_rule_509(self):
        self.declare(Fact(recommendation='Warrant menunjukkan kondisi baik. Laba bersih menunjukkan keuntungan. ROE menunjukkan keuntungan yang tinggi.'))


    @Rule(Fact(warrant_valued='good'), Fact(per_valued='low'), Fact(der_valued='low'))
    def ipo_rule_510(self):
        self.declare(Fact(recommendation='Warrant menunjukkan kondisi baik. PER berada di tingkat yang rendah. DER menunjukkan tingkat hutang yang rendah.'))


    @Rule(Fact(warrant_valued='good'), Fact(per_valued='low'), Fact(roa_valued='low'))
    def ipo_rule_511(self):
        self.declare(Fact(recommendation='Warrant menunjukkan kondisi baik. PER berada di tingkat yang rendah. ROA menunjukkan efisiensi rendah.'))


    @Rule(Fact(warrant_valued='good'), Fact(per_valued='low'), Fact(roe_valued='high'))
    def ipo_rule_512(self):
        self.declare(Fact(recommendation='Warrant menunjukkan kondisi baik. PER berada di tingkat yang rendah. ROE menunjukkan keuntungan yang tinggi.'))


    @Rule(Fact(warrant_valued='good'), Fact(der_valued='low'), Fact(roa_valued='low'))
    def ipo_rule_513(self):
        self.declare(Fact(recommendation='Warrant menunjukkan kondisi baik. DER menunjukkan tingkat hutang yang rendah. ROA menunjukkan efisiensi rendah.'))


    @Rule(Fact(warrant_valued='good'), Fact(der_valued='low'), Fact(roe_valued='high'))
    def ipo_rule_514(self):
        self.declare(Fact(recommendation='Warrant menunjukkan kondisi baik. DER menunjukkan tingkat hutang yang rendah. ROE menunjukkan keuntungan yang tinggi.'))


    @Rule(Fact(warrant_valued='good'), Fact(roa_valued='low'), Fact(roe_valued='high'))
    def ipo_rule_515(self):
        self.declare(Fact(recommendation='Warrant menunjukkan kondisi baik. ROA menunjukkan efisiensi rendah. ROE menunjukkan keuntungan yang tinggi.'))


    @Rule(Fact(net_income_valued='profit'), Fact(per_valued='low'), Fact(der_valued='low'))
    def ipo_rule_516(self):
        self.declare(Fact(recommendation='Laba bersih menunjukkan keuntungan. PER berada di tingkat yang rendah. DER menunjukkan tingkat hutang yang rendah.'))


    @Rule(Fact(net_income_valued='profit'), Fact(per_valued='low'), Fact(roa_valued='low'))
    def ipo_rule_517(self):
        self.declare(Fact(recommendation='Laba bersih menunjukkan keuntungan. PER berada di tingkat yang rendah. ROA menunjukkan efisiensi rendah.'))


    @Rule(Fact(net_income_valued='profit'), Fact(per_valued='low'), Fact(roe_valued='high'))
    def ipo_rule_518(self):
        self.declare(Fact(recommendation='Laba bersih menunjukkan keuntungan. PER berada di tingkat yang rendah. ROE menunjukkan keuntungan yang tinggi.'))


    @Rule(Fact(net_income_valued='profit'), Fact(der_valued='low'), Fact(roa_valued='low'))
    def ipo_rule_519(self):
        self.declare(Fact(recommendation='Laba bersih menunjukkan keuntungan. DER menunjukkan tingkat hutang yang rendah. ROA menunjukkan efisiensi rendah.'))


    @Rule(Fact(net_income_valued='profit'), Fact(der_valued='low'), Fact(roe_valued='high'))
    def ipo_rule_520(self):
        self.declare(Fact(recommendation='Laba bersih menunjukkan keuntungan. DER menunjukkan tingkat hutang yang rendah. ROE menunjukkan keuntungan yang tinggi.'))


    @Rule(Fact(net_income_valued='profit'), Fact(roa_valued='low'), Fact(roe_valued='high'))
    def ipo_rule_521(self):
        self.declare(Fact(recommendation='Laba bersih menunjukkan keuntungan. ROA menunjukkan efisiensi rendah. ROE menunjukkan keuntungan yang tinggi.'))


    @Rule(Fact(per_valued='low'), Fact(der_valued='low'), Fact(roa_valued='low'))
    def ipo_rule_522(self):
        self.declare(Fact(recommendation='PER berada di tingkat yang rendah. DER menunjukkan tingkat hutang yang rendah. ROA menunjukkan efisiensi rendah.'))


    @Rule(Fact(per_valued='low'), Fact(der_valued='low'), Fact(roe_valued='high'))
    def ipo_rule_523(self):
        self.declare(Fact(recommendation='PER berada di tingkat yang rendah. DER menunjukkan tingkat hutang yang rendah. ROE menunjukkan keuntungan yang tinggi.'))


    @Rule(Fact(per_valued='low'), Fact(roa_valued='low'), Fact(roe_valued='high'))
    def ipo_rule_524(self):
        self.declare(Fact(recommendation='PER berada di tingkat yang rendah. ROA menunjukkan efisiensi rendah. ROE menunjukkan keuntungan yang tinggi.'))


    @Rule(Fact(der_valued='low'), Fact(roa_valued='low'), Fact(roe_valued='high'))
    def ipo_rule_525(self):
        self.declare(Fact(recommendation='DER menunjukkan tingkat hutang yang rendah. ROA menunjukkan efisiensi rendah. ROE menunjukkan keuntungan yang tinggi.'))


    @Rule(Fact(underwriter_valued='good'), Fact(warrant_valued='good'), Fact(net_income_valued='profit'))
    def ipo_rule_526(self):
        self.declare(Fact(recommendation='Underwriter berkualitas baik. Warrant menunjukkan kondisi baik. Laba bersih menunjukkan keuntungan.'))


    @Rule(Fact(underwriter_valued='good'), Fact(warrant_valued='good'), Fact(per_valued='low'))
    def ipo_rule_527(self):
        self.declare(Fact(recommendation='Underwriter berkualitas baik. Warrant menunjukkan kondisi baik. PER berada di tingkat yang rendah.'))


    @Rule(Fact(underwriter_valued='good'), Fact(warrant_valued='good'), Fact(der_valued='low'))
    def ipo_rule_528(self):
        self.declare(Fact(recommendation='Underwriter berkualitas baik. Warrant menunjukkan kondisi baik. DER menunjukkan tingkat hutang yang rendah.'))


    @Rule(Fact(underwriter_valued='good'), Fact(warrant_valued='good'), Fact(roa_valued='low'))
    def ipo_rule_529(self):
        self.declare(Fact(recommendation='Underwriter berkualitas baik. Warrant menunjukkan kondisi baik. ROA menunjukkan efisiensi rendah.'))


    @Rule(Fact(underwriter_valued='good'), Fact(warrant_valued='good'), Fact(roe_valued='low'))
    def ipo_rule_530(self):
        self.declare(Fact(recommendation='Underwriter berkualitas baik. Warrant menunjukkan kondisi baik. ROE menunjukkan keuntungan yang rendah.'))


    @Rule(Fact(underwriter_valued='good'), Fact(net_income_valued='profit'), Fact(per_valued='low'))
    def ipo_rule_531(self):
        self.declare(Fact(recommendation='Underwriter berkualitas baik. Laba bersih menunjukkan keuntungan. PER berada di tingkat yang rendah.'))


    @Rule(Fact(underwriter_valued='good'), Fact(net_income_valued='profit'), Fact(der_valued='low'))
    def ipo_rule_532(self):
        self.declare(Fact(recommendation='Underwriter berkualitas baik. Laba bersih menunjukkan keuntungan. DER menunjukkan tingkat hutang yang rendah.'))


    @Rule(Fact(underwriter_valued='good'), Fact(net_income_valued='profit'), Fact(roa_valued='low'))
    def ipo_rule_533(self):
        self.declare(Fact(recommendation='Underwriter berkualitas baik. Laba bersih menunjukkan keuntungan. ROA menunjukkan efisiensi rendah.'))


    @Rule(Fact(underwriter_valued='good'), Fact(net_income_valued='profit'), Fact(roe_valued='low'))
    def ipo_rule_534(self):
        self.declare(Fact(recommendation='Underwriter berkualitas baik. Laba bersih menunjukkan keuntungan. ROE menunjukkan keuntungan yang rendah.'))


    @Rule(Fact(underwriter_valued='good'), Fact(per_valued='low'), Fact(der_valued='low'))
    def ipo_rule_535(self):
        self.declare(Fact(recommendation='Underwriter berkualitas baik. PER berada di tingkat yang rendah. DER menunjukkan tingkat hutang yang rendah.'))


    @Rule(Fact(underwriter_valued='good'), Fact(per_valued='low'), Fact(roa_valued='low'))
    def ipo_rule_536(self):
        self.declare(Fact(recommendation='Underwriter berkualitas baik. PER berada di tingkat yang rendah. ROA menunjukkan efisiensi rendah.'))


    @Rule(Fact(underwriter_valued='good'), Fact(per_valued='low'), Fact(roe_valued='low'))
    def ipo_rule_537(self):
        self.declare(Fact(recommendation='Underwriter berkualitas baik. PER berada di tingkat yang rendah. ROE menunjukkan keuntungan yang rendah.'))


    @Rule(Fact(underwriter_valued='good'), Fact(der_valued='low'), Fact(roa_valued='low'))
    def ipo_rule_538(self):
        self.declare(Fact(recommendation='Underwriter berkualitas baik. DER menunjukkan tingkat hutang yang rendah. ROA menunjukkan efisiensi rendah.'))


    @Rule(Fact(underwriter_valued='good'), Fact(der_valued='low'), Fact(roe_valued='low'))
    def ipo_rule_539(self):
        self.declare(Fact(recommendation='Underwriter berkualitas baik. DER menunjukkan tingkat hutang yang rendah. ROE menunjukkan keuntungan yang rendah.'))


    @Rule(Fact(underwriter_valued='good'), Fact(roa_valued='low'), Fact(roe_valued='low'))
    def ipo_rule_540(self):
        self.declare(Fact(recommendation='Underwriter berkualitas baik. ROA menunjukkan efisiensi rendah. ROE menunjukkan keuntungan yang rendah.'))


    @Rule(Fact(warrant_valued='good'), Fact(net_income_valued='profit'), Fact(per_valued='low'))
    def ipo_rule_541(self):
        self.declare(Fact(recommendation='Warrant menunjukkan kondisi baik. Laba bersih menunjukkan keuntungan. PER berada di tingkat yang rendah.'))


    @Rule(Fact(warrant_valued='good'), Fact(net_income_valued='profit'), Fact(der_valued='low'))
    def ipo_rule_542(self):
        self.declare(Fact(recommendation='Warrant menunjukkan kondisi baik. Laba bersih menunjukkan keuntungan. DER menunjukkan tingkat hutang yang rendah.'))


    @Rule(Fact(warrant_valued='good'), Fact(net_income_valued='profit'), Fact(roa_valued='low'))
    def ipo_rule_543(self):
        self.declare(Fact(recommendation='Warrant menunjukkan kondisi baik. Laba bersih menunjukkan keuntungan. ROA menunjukkan efisiensi rendah.'))


    @Rule(Fact(warrant_valued='good'), Fact(net_income_valued='profit'), Fact(roe_valued='low'))
    def ipo_rule_544(self):
        self.declare(Fact(recommendation='Warrant menunjukkan kondisi baik. Laba bersih menunjukkan keuntungan. ROE menunjukkan keuntungan yang rendah.'))


    @Rule(Fact(warrant_valued='good'), Fact(per_valued='low'), Fact(der_valued='low'))
    def ipo_rule_545(self):
        self.declare(Fact(recommendation='Warrant menunjukkan kondisi baik. PER berada di tingkat yang rendah. DER menunjukkan tingkat hutang yang rendah.'))


    @Rule(Fact(warrant_valued='good'), Fact(per_valued='low'), Fact(roa_valued='low'))
    def ipo_rule_546(self):
        self.declare(Fact(recommendation='Warrant menunjukkan kondisi baik. PER berada di tingkat yang rendah. ROA menunjukkan efisiensi rendah.'))


    @Rule(Fact(warrant_valued='good'), Fact(per_valued='low'), Fact(roe_valued='low'))
    def ipo_rule_547(self):
        self.declare(Fact(recommendation='Warrant menunjukkan kondisi baik. PER berada di tingkat yang rendah. ROE menunjukkan keuntungan yang rendah.'))


    @Rule(Fact(warrant_valued='good'), Fact(der_valued='low'), Fact(roa_valued='low'))
    def ipo_rule_548(self):
        self.declare(Fact(recommendation='Warrant menunjukkan kondisi baik. DER menunjukkan tingkat hutang yang rendah. ROA menunjukkan efisiensi rendah.'))


    @Rule(Fact(warrant_valued='good'), Fact(der_valued='low'), Fact(roe_valued='low'))
    def ipo_rule_549(self):
        self.declare(Fact(recommendation='Warrant menunjukkan kondisi baik. DER menunjukkan tingkat hutang yang rendah. ROE menunjukkan keuntungan yang rendah.'))


    @Rule(Fact(warrant_valued='good'), Fact(roa_valued='low'), Fact(roe_valued='low'))
    def ipo_rule_550(self):
        self.declare(Fact(recommendation='Warrant menunjukkan kondisi baik. ROA menunjukkan efisiensi rendah. ROE menunjukkan keuntungan yang rendah.'))


    @Rule(Fact(net_income_valued='profit'), Fact(per_valued='low'), Fact(der_valued='low'))
    def ipo_rule_551(self):
        self.declare(Fact(recommendation='Laba bersih menunjukkan keuntungan. PER berada di tingkat yang rendah. DER menunjukkan tingkat hutang yang rendah.'))


    @Rule(Fact(net_income_valued='profit'), Fact(per_valued='low'), Fact(roa_valued='low'))
    def ipo_rule_552(self):
        self.declare(Fact(recommendation='Laba bersih menunjukkan keuntungan. PER berada di tingkat yang rendah. ROA menunjukkan efisiensi rendah.'))


    @Rule(Fact(net_income_valued='profit'), Fact(per_valued='low'), Fact(roe_valued='low'))
    def ipo_rule_553(self):
        self.declare(Fact(recommendation='Laba bersih menunjukkan keuntungan. PER berada di tingkat yang rendah. ROE menunjukkan keuntungan yang rendah.'))


    @Rule(Fact(net_income_valued='profit'), Fact(der_valued='low'), Fact(roa_valued='low'))
    def ipo_rule_554(self):
        self.declare(Fact(recommendation='Laba bersih menunjukkan keuntungan. DER menunjukkan tingkat hutang yang rendah. ROA menunjukkan efisiensi rendah.'))


    @Rule(Fact(net_income_valued='profit'), Fact(der_valued='low'), Fact(roe_valued='low'))
    def ipo_rule_555(self):
        self.declare(Fact(recommendation='Laba bersih menunjukkan keuntungan. DER menunjukkan tingkat hutang yang rendah. ROE menunjukkan keuntungan yang rendah.'))


    @Rule(Fact(net_income_valued='profit'), Fact(roa_valued='low'), Fact(roe_valued='low'))
    def ipo_rule_556(self):
        self.declare(Fact(recommendation='Laba bersih menunjukkan keuntungan. ROA menunjukkan efisiensi rendah. ROE menunjukkan keuntungan yang rendah.'))


    @Rule(Fact(per_valued='low'), Fact(der_valued='low'), Fact(roa_valued='low'))
    def ipo_rule_557(self):
        self.declare(Fact(recommendation='PER berada di tingkat yang rendah. DER menunjukkan tingkat hutang yang rendah. ROA menunjukkan efisiensi rendah.'))


    @Rule(Fact(per_valued='low'), Fact(der_valued='low'), Fact(roe_valued='low'))
    def ipo_rule_558(self):
        self.declare(Fact(recommendation='PER berada di tingkat yang rendah. DER menunjukkan tingkat hutang yang rendah. ROE menunjukkan keuntungan yang rendah.'))


    @Rule(Fact(per_valued='low'), Fact(roa_valued='low'), Fact(roe_valued='low'))
    def ipo_rule_559(self):
        self.declare(Fact(recommendation='PER berada di tingkat yang rendah. ROA menunjukkan efisiensi rendah. ROE menunjukkan keuntungan yang rendah.'))


    @Rule(Fact(der_valued='low'), Fact(roa_valued='low'), Fact(roe_valued='low'))
    def ipo_rule_560(self):
        self.declare(Fact(recommendation='DER menunjukkan tingkat hutang yang rendah. ROA menunjukkan efisiensi rendah. ROE menunjukkan keuntungan yang rendah.'))


    @Rule(Fact(underwriter_valued='good'), Fact(warrant_valued='good'), Fact(net_income_valued='loss'))
    def ipo_rule_561(self):
        self.declare(Fact(recommendation='Underwriter berkualitas baik. Warrant menunjukkan kondisi baik. Laba bersih menunjukkan kerugian.'))


    @Rule(Fact(underwriter_valued='good'), Fact(warrant_valued='good'), Fact(per_valued='high'))
    def ipo_rule_562(self):
        self.declare(Fact(recommendation='Underwriter berkualitas baik. Warrant menunjukkan kondisi baik. PER berada di tingkat yang tinggi.'))


    @Rule(Fact(underwriter_valued='good'), Fact(warrant_valued='good'), Fact(der_valued='high'))
    def ipo_rule_563(self):
        self.declare(Fact(recommendation='Underwriter berkualitas baik. Warrant menunjukkan kondisi baik. DER menunjukkan tingkat hutang yang tinggi.'))


    @Rule(Fact(underwriter_valued='good'), Fact(warrant_valued='good'), Fact(roa_valued='high'))
    def ipo_rule_564(self):
        self.declare(Fact(recommendation='Underwriter berkualitas baik. Warrant menunjukkan kondisi baik. ROA menunjukkan efisiensi tinggi.'))


    @Rule(Fact(underwriter_valued='good'), Fact(warrant_valued='good'), Fact(roe_valued='high'))
    def ipo_rule_565(self):
        self.declare(Fact(recommendation='Underwriter berkualitas baik. Warrant menunjukkan kondisi baik. ROE menunjukkan keuntungan yang tinggi.'))


    @Rule(Fact(underwriter_valued='good'), Fact(net_income_valued='loss'), Fact(per_valued='high'))
    def ipo_rule_566(self):
        self.declare(Fact(recommendation='Underwriter berkualitas baik. Laba bersih menunjukkan kerugian. PER berada di tingkat yang tinggi.'))


    @Rule(Fact(underwriter_valued='good'), Fact(net_income_valued='loss'), Fact(der_valued='high'))
    def ipo_rule_567(self):
        self.declare(Fact(recommendation='Underwriter berkualitas baik. Laba bersih menunjukkan kerugian. DER menunjukkan tingkat hutang yang tinggi.'))


    @Rule(Fact(underwriter_valued='good'), Fact(net_income_valued='loss'), Fact(roa_valued='high'))
    def ipo_rule_568(self):
        self.declare(Fact(recommendation='Underwriter berkualitas baik. Laba bersih menunjukkan kerugian. ROA menunjukkan efisiensi tinggi.'))


    @Rule(Fact(underwriter_valued='good'), Fact(net_income_valued='loss'), Fact(roe_valued='high'))
    def ipo_rule_569(self):
        self.declare(Fact(recommendation='Underwriter berkualitas baik. Laba bersih menunjukkan kerugian. ROE menunjukkan keuntungan yang tinggi.'))


    @Rule(Fact(underwriter_valued='good'), Fact(per_valued='high'), Fact(der_valued='high'))
    def ipo_rule_570(self):
        self.declare(Fact(recommendation='Underwriter berkualitas baik. PER berada di tingkat yang tinggi. DER menunjukkan tingkat hutang yang tinggi.'))


    @Rule(Fact(underwriter_valued='good'), Fact(per_valued='high'), Fact(roa_valued='high'))
    def ipo_rule_571(self):
        self.declare(Fact(recommendation='Underwriter berkualitas baik. PER berada di tingkat yang tinggi. ROA menunjukkan efisiensi tinggi.'))


    @Rule(Fact(underwriter_valued='good'), Fact(per_valued='high'), Fact(roe_valued='high'))
    def ipo_rule_572(self):
        self.declare(Fact(recommendation='Underwriter berkualitas baik. PER berada di tingkat yang tinggi. ROE menunjukkan keuntungan yang tinggi.'))


    @Rule(Fact(underwriter_valued='good'), Fact(der_valued='high'), Fact(roa_valued='high'))
    def ipo_rule_573(self):
        self.declare(Fact(recommendation='Underwriter berkualitas baik. DER menunjukkan tingkat hutang yang tinggi. ROA menunjukkan efisiensi tinggi.'))


    @Rule(Fact(underwriter_valued='good'), Fact(der_valued='high'), Fact(roe_valued='high'))
    def ipo_rule_574(self):
        self.declare(Fact(recommendation='Underwriter berkualitas baik. DER menunjukkan tingkat hutang yang tinggi. ROE menunjukkan keuntungan yang tinggi.'))


    @Rule(Fact(underwriter_valued='good'), Fact(roa_valued='high'), Fact(roe_valued='high'))
    def ipo_rule_575(self):
        self.declare(Fact(recommendation='Underwriter berkualitas baik. ROA menunjukkan efisiensi tinggi. ROE menunjukkan keuntungan yang tinggi.'))


    @Rule(Fact(warrant_valued='good'), Fact(net_income_valued='loss'), Fact(per_valued='high'))
    def ipo_rule_576(self):
        self.declare(Fact(recommendation='Warrant menunjukkan kondisi baik. Laba bersih menunjukkan kerugian. PER berada di tingkat yang tinggi.'))


    @Rule(Fact(warrant_valued='good'), Fact(net_income_valued='loss'), Fact(der_valued='high'))
    def ipo_rule_577(self):
        self.declare(Fact(recommendation='Warrant menunjukkan kondisi baik. Laba bersih menunjukkan kerugian. DER menunjukkan tingkat hutang yang tinggi.'))


    @Rule(Fact(warrant_valued='good'), Fact(net_income_valued='loss'), Fact(roa_valued='high'))
    def ipo_rule_578(self):
        self.declare(Fact(recommendation='Warrant menunjukkan kondisi baik. Laba bersih menunjukkan kerugian. ROA menunjukkan efisiensi tinggi.'))


    @Rule(Fact(warrant_valued='good'), Fact(net_income_valued='loss'), Fact(roe_valued='high'))
    def ipo_rule_579(self):
        self.declare(Fact(recommendation='Warrant menunjukkan kondisi baik. Laba bersih menunjukkan kerugian. ROE menunjukkan keuntungan yang tinggi.'))


    @Rule(Fact(warrant_valued='good'), Fact(per_valued='high'), Fact(der_valued='high'))
    def ipo_rule_580(self):
        self.declare(Fact(recommendation='Warrant menunjukkan kondisi baik. PER berada di tingkat yang tinggi. DER menunjukkan tingkat hutang yang tinggi.'))


    @Rule(Fact(warrant_valued='good'), Fact(per_valued='high'), Fact(roa_valued='high'))
    def ipo_rule_581(self):
        self.declare(Fact(recommendation='Warrant menunjukkan kondisi baik. PER berada di tingkat yang tinggi. ROA menunjukkan efisiensi tinggi.'))


    @Rule(Fact(warrant_valued='good'), Fact(per_valued='high'), Fact(roe_valued='high'))
    def ipo_rule_582(self):
        self.declare(Fact(recommendation='Warrant menunjukkan kondisi baik. PER berada di tingkat yang tinggi. ROE menunjukkan keuntungan yang tinggi.'))


    @Rule(Fact(warrant_valued='good'), Fact(der_valued='high'), Fact(roa_valued='high'))
    def ipo_rule_583(self):
        self.declare(Fact(recommendation='Warrant menunjukkan kondisi baik. DER menunjukkan tingkat hutang yang tinggi. ROA menunjukkan efisiensi tinggi.'))


    @Rule(Fact(warrant_valued='good'), Fact(der_valued='high'), Fact(roe_valued='high'))
    def ipo_rule_584(self):
        self.declare(Fact(recommendation='Warrant menunjukkan kondisi baik. DER menunjukkan tingkat hutang yang tinggi. ROE menunjukkan keuntungan yang tinggi.'))


    @Rule(Fact(warrant_valued='good'), Fact(roa_valued='high'), Fact(roe_valued='high'))
    def ipo_rule_585(self):
        self.declare(Fact(recommendation='Warrant menunjukkan kondisi baik. ROA menunjukkan efisiensi tinggi. ROE menunjukkan keuntungan yang tinggi.'))


    @Rule(Fact(net_income_valued='loss'), Fact(per_valued='high'), Fact(der_valued='high'))
    def ipo_rule_586(self):
        self.declare(Fact(recommendation='Laba bersih menunjukkan kerugian. PER berada di tingkat yang tinggi. DER menunjukkan tingkat hutang yang tinggi.'))


    @Rule(Fact(net_income_valued='loss'), Fact(per_valued='high'), Fact(roa_valued='high'))
    def ipo_rule_587(self):
        self.declare(Fact(recommendation='Laba bersih menunjukkan kerugian. PER berada di tingkat yang tinggi. ROA menunjukkan efisiensi tinggi.'))


    @Rule(Fact(net_income_valued='loss'), Fact(per_valued='high'), Fact(roe_valued='high'))
    def ipo_rule_588(self):
        self.declare(Fact(recommendation='Laba bersih menunjukkan kerugian. PER berada di tingkat yang tinggi. ROE menunjukkan keuntungan yang tinggi.'))


    @Rule(Fact(net_income_valued='loss'), Fact(der_valued='high'), Fact(roa_valued='high'))
    def ipo_rule_589(self):
        self.declare(Fact(recommendation='Laba bersih menunjukkan kerugian. DER menunjukkan tingkat hutang yang tinggi. ROA menunjukkan efisiensi tinggi.'))


    @Rule(Fact(net_income_valued='loss'), Fact(der_valued='high'), Fact(roe_valued='high'))
    def ipo_rule_590(self):
        self.declare(Fact(recommendation='Laba bersih menunjukkan kerugian. DER menunjukkan tingkat hutang yang tinggi. ROE menunjukkan keuntungan yang tinggi.'))


    @Rule(Fact(net_income_valued='loss'), Fact(roa_valued='high'), Fact(roe_valued='high'))
    def ipo_rule_591(self):
        self.declare(Fact(recommendation='Laba bersih menunjukkan kerugian. ROA menunjukkan efisiensi tinggi. ROE menunjukkan keuntungan yang tinggi.'))


    @Rule(Fact(per_valued='high'), Fact(der_valued='high'), Fact(roa_valued='high'))
    def ipo_rule_592(self):
        self.declare(Fact(recommendation='PER berada di tingkat yang tinggi. DER menunjukkan tingkat hutang yang tinggi. ROA menunjukkan efisiensi tinggi.'))


    @Rule(Fact(per_valued='high'), Fact(der_valued='high'), Fact(roe_valued='high'))
    def ipo_rule_593(self):
        self.declare(Fact(recommendation='PER berada di tingkat yang tinggi. DER menunjukkan tingkat hutang yang tinggi. ROE menunjukkan keuntungan yang tinggi.'))


    @Rule(Fact(per_valued='high'), Fact(roa_valued='high'), Fact(roe_valued='high'))
    def ipo_rule_594(self):
        self.declare(Fact(recommendation='PER berada di tingkat yang tinggi. ROA menunjukkan efisiensi tinggi. ROE menunjukkan keuntungan yang tinggi.'))


    @Rule(Fact(der_valued='high'), Fact(roa_valued='high'), Fact(roe_valued='high'))
    def ipo_rule_595(self):
        self.declare(Fact(recommendation='DER menunjukkan tingkat hutang yang tinggi. ROA menunjukkan efisiensi tinggi. ROE menunjukkan keuntungan yang tinggi.'))


    @Rule(Fact(underwriter_valued='good'), Fact(warrant_valued='good'), Fact(net_income_valued='loss'))
    def ipo_rule_596(self):
        self.declare(Fact(recommendation='Underwriter berkualitas baik. Warrant menunjukkan kondisi baik. Laba bersih menunjukkan kerugian.'))


    @Rule(Fact(underwriter_valued='good'), Fact(warrant_valued='good'), Fact(per_valued='high'))
    def ipo_rule_597(self):
        self.declare(Fact(recommendation='Underwriter berkualitas baik. Warrant menunjukkan kondisi baik. PER berada di tingkat yang tinggi.'))


    @Rule(Fact(underwriter_valued='good'), Fact(warrant_valued='good'), Fact(der_valued='high'))
    def ipo_rule_598(self):
        self.declare(Fact(recommendation='Underwriter berkualitas baik. Warrant menunjukkan kondisi baik. DER menunjukkan tingkat hutang yang tinggi.'))


    @Rule(Fact(underwriter_valued='good'), Fact(warrant_valued='good'), Fact(roa_valued='high'))
    def ipo_rule_599(self):
        self.declare(Fact(recommendation='Underwriter berkualitas baik. Warrant menunjukkan kondisi baik. ROA menunjukkan efisiensi tinggi.'))


    @Rule(Fact(underwriter_valued='good'), Fact(warrant_valued='good'), Fact(roe_valued='low'))
    def ipo_rule_600(self):
        self.declare(Fact(recommendation='Underwriter berkualitas baik. Warrant menunjukkan kondisi baik. ROE menunjukkan keuntungan yang rendah.'))


    @Rule(Fact(underwriter_valued='good'), Fact(net_income_valued='loss'), Fact(per_valued='high'))
    def ipo_rule_601(self):
        self.declare(Fact(recommendation='Underwriter berkualitas baik. Laba bersih menunjukkan kerugian. PER berada di tingkat yang tinggi.'))


    @Rule(Fact(underwriter_valued='good'), Fact(net_income_valued='loss'), Fact(der_valued='high'))
    def ipo_rule_602(self):
        self.declare(Fact(recommendation='Underwriter berkualitas baik. Laba bersih menunjukkan kerugian. DER menunjukkan tingkat hutang yang tinggi.'))


    @Rule(Fact(underwriter_valued='good'), Fact(net_income_valued='loss'), Fact(roa_valued='high'))
    def ipo_rule_603(self):
        self.declare(Fact(recommendation='Underwriter berkualitas baik. Laba bersih menunjukkan kerugian. ROA menunjukkan efisiensi tinggi.'))


    @Rule(Fact(underwriter_valued='good'), Fact(net_income_valued='loss'), Fact(roe_valued='low'))
    def ipo_rule_604(self):
        self.declare(Fact(recommendation='Underwriter berkualitas baik. Laba bersih menunjukkan kerugian. ROE menunjukkan keuntungan yang rendah.'))


    @Rule(Fact(underwriter_valued='good'), Fact(per_valued='high'), Fact(der_valued='high'))
    def ipo_rule_605(self):
        self.declare(Fact(recommendation='Underwriter berkualitas baik. PER berada di tingkat yang tinggi. DER menunjukkan tingkat hutang yang tinggi.'))


    @Rule(Fact(underwriter_valued='good'), Fact(per_valued='high'), Fact(roa_valued='high'))
    def ipo_rule_606(self):
        self.declare(Fact(recommendation='Underwriter berkualitas baik. PER berada di tingkat yang tinggi. ROA menunjukkan efisiensi tinggi.'))


    @Rule(Fact(underwriter_valued='good'), Fact(per_valued='high'), Fact(roe_valued='low'))
    def ipo_rule_607(self):
        self.declare(Fact(recommendation='Underwriter berkualitas baik. PER berada di tingkat yang tinggi. ROE menunjukkan keuntungan yang rendah.'))


    @Rule(Fact(underwriter_valued='good'), Fact(der_valued='high'), Fact(roa_valued='high'))
    def ipo_rule_608(self):
        self.declare(Fact(recommendation='Underwriter berkualitas baik. DER menunjukkan tingkat hutang yang tinggi. ROA menunjukkan efisiensi tinggi.'))


    @Rule(Fact(underwriter_valued='good'), Fact(der_valued='high'), Fact(roe_valued='low'))
    def ipo_rule_609(self):
        self.declare(Fact(recommendation='Underwriter berkualitas baik. DER menunjukkan tingkat hutang yang tinggi. ROE menunjukkan keuntungan yang rendah.'))


    @Rule(Fact(underwriter_valued='good'), Fact(roa_valued='high'), Fact(roe_valued='low'))
    def ipo_rule_610(self):
        self.declare(Fact(recommendation='Underwriter berkualitas baik. ROA menunjukkan efisiensi tinggi. ROE menunjukkan keuntungan yang rendah.'))


    @Rule(Fact(warrant_valued='good'), Fact(net_income_valued='loss'), Fact(per_valued='high'))
    def ipo_rule_611(self):
        self.declare(Fact(recommendation='Warrant menunjukkan kondisi baik. Laba bersih menunjukkan kerugian. PER berada di tingkat yang tinggi.'))


    @Rule(Fact(warrant_valued='good'), Fact(net_income_valued='loss'), Fact(der_valued='high'))
    def ipo_rule_612(self):
        self.declare(Fact(recommendation='Warrant menunjukkan kondisi baik. Laba bersih menunjukkan kerugian. DER menunjukkan tingkat hutang yang tinggi.'))


    @Rule(Fact(warrant_valued='good'), Fact(net_income_valued='loss'), Fact(roa_valued='high'))
    def ipo_rule_613(self):
        self.declare(Fact(recommendation='Warrant menunjukkan kondisi baik. Laba bersih menunjukkan kerugian. ROA menunjukkan efisiensi tinggi.'))


    @Rule(Fact(warrant_valued='good'), Fact(net_income_valued='loss'), Fact(roe_valued='low'))
    def ipo_rule_614(self):
        self.declare(Fact(recommendation='Warrant menunjukkan kondisi baik. Laba bersih menunjukkan kerugian. ROE menunjukkan keuntungan yang rendah.'))


    @Rule(Fact(warrant_valued='good'), Fact(per_valued='high'), Fact(der_valued='high'))
    def ipo_rule_615(self):
        self.declare(Fact(recommendation='Warrant menunjukkan kondisi baik. PER berada di tingkat yang tinggi. DER menunjukkan tingkat hutang yang tinggi.'))


    @Rule(Fact(warrant_valued='good'), Fact(per_valued='high'), Fact(roa_valued='high'))
    def ipo_rule_616(self):
        self.declare(Fact(recommendation='Warrant menunjukkan kondisi baik. PER berada di tingkat yang tinggi. ROA menunjukkan efisiensi tinggi.'))


    @Rule(Fact(warrant_valued='good'), Fact(per_valued='high'), Fact(roe_valued='low'))
    def ipo_rule_617(self):
        self.declare(Fact(recommendation='Warrant menunjukkan kondisi baik. PER berada di tingkat yang tinggi. ROE menunjukkan keuntungan yang rendah.'))


    @Rule(Fact(warrant_valued='good'), Fact(der_valued='high'), Fact(roa_valued='high'))
    def ipo_rule_618(self):
        self.declare(Fact(recommendation='Warrant menunjukkan kondisi baik. DER menunjukkan tingkat hutang yang tinggi. ROA menunjukkan efisiensi tinggi.'))


    @Rule(Fact(warrant_valued='good'), Fact(der_valued='high'), Fact(roe_valued='low'))
    def ipo_rule_619(self):
        self.declare(Fact(recommendation='Warrant menunjukkan kondisi baik. DER menunjukkan tingkat hutang yang tinggi. ROE menunjukkan keuntungan yang rendah.'))


    @Rule(Fact(warrant_valued='good'), Fact(roa_valued='high'), Fact(roe_valued='low'))
    def ipo_rule_620(self):
        self.declare(Fact(recommendation='Warrant menunjukkan kondisi baik. ROA menunjukkan efisiensi tinggi. ROE menunjukkan keuntungan yang rendah.'))


    @Rule(Fact(net_income_valued='loss'), Fact(per_valued='high'), Fact(der_valued='high'))
    def ipo_rule_621(self):
        self.declare(Fact(recommendation='Laba bersih menunjukkan kerugian. PER berada di tingkat yang tinggi. DER menunjukkan tingkat hutang yang tinggi.'))


    @Rule(Fact(net_income_valued='loss'), Fact(per_valued='high'), Fact(roa_valued='high'))
    def ipo_rule_622(self):
        self.declare(Fact(recommendation='Laba bersih menunjukkan kerugian. PER berada di tingkat yang tinggi. ROA menunjukkan efisiensi tinggi.'))


    @Rule(Fact(net_income_valued='loss'), Fact(per_valued='high'), Fact(roe_valued='low'))
    def ipo_rule_623(self):
        self.declare(Fact(recommendation='Laba bersih menunjukkan kerugian. PER berada di tingkat yang tinggi. ROE menunjukkan keuntungan yang rendah.'))


    @Rule(Fact(net_income_valued='loss'), Fact(der_valued='high'), Fact(roa_valued='high'))
    def ipo_rule_624(self):
        self.declare(Fact(recommendation='Laba bersih menunjukkan kerugian. DER menunjukkan tingkat hutang yang tinggi. ROA menunjukkan efisiensi tinggi.'))


    @Rule(Fact(net_income_valued='loss'), Fact(der_valued='high'), Fact(roe_valued='low'))
    def ipo_rule_625(self):
        self.declare(Fact(recommendation='Laba bersih menunjukkan kerugian. DER menunjukkan tingkat hutang yang tinggi. ROE menunjukkan keuntungan yang rendah.'))


    @Rule(Fact(net_income_valued='loss'), Fact(roa_valued='high'), Fact(roe_valued='low'))
    def ipo_rule_626(self):
        self.declare(Fact(recommendation='Laba bersih menunjukkan kerugian. ROA menunjukkan efisiensi tinggi. ROE menunjukkan keuntungan yang rendah.'))


    @Rule(Fact(per_valued='high'), Fact(der_valued='high'), Fact(roa_valued='high'))
    def ipo_rule_627(self):
        self.declare(Fact(recommendation='PER berada di tingkat yang tinggi. DER menunjukkan tingkat hutang yang tinggi. ROA menunjukkan efisiensi tinggi.'))


    @Rule(Fact(per_valued='high'), Fact(der_valued='high'), Fact(roe_valued='low'))
    def ipo_rule_628(self):
        self.declare(Fact(recommendation='PER berada di tingkat yang tinggi. DER menunjukkan tingkat hutang yang tinggi. ROE menunjukkan keuntungan yang rendah.'))


    @Rule(Fact(per_valued='high'), Fact(roa_valued='high'), Fact(roe_valued='low'))
    def ipo_rule_629(self):
        self.declare(Fact(recommendation='PER berada di tingkat yang tinggi. ROA menunjukkan efisiensi tinggi. ROE menunjukkan keuntungan yang rendah.'))


    @Rule(Fact(der_valued='high'), Fact(roa_valued='high'), Fact(roe_valued='low'))
    def ipo_rule_630(self):
        self.declare(Fact(recommendation='DER menunjukkan tingkat hutang yang tinggi. ROA menunjukkan efisiensi tinggi. ROE menunjukkan keuntungan yang rendah.'))


    @Rule(Fact(underwriter_valued='good'), Fact(warrant_valued='good'), Fact(net_income_valued='loss'))
    def ipo_rule_631(self):
        self.declare(Fact(recommendation='Underwriter berkualitas baik. Warrant menunjukkan kondisi baik. Laba bersih menunjukkan kerugian.'))


    @Rule(Fact(underwriter_valued='good'), Fact(warrant_valued='good'), Fact(per_valued='high'))
    def ipo_rule_632(self):
        self.declare(Fact(recommendation='Underwriter berkualitas baik. Warrant menunjukkan kondisi baik. PER berada di tingkat yang tinggi.'))


    @Rule(Fact(underwriter_valued='good'), Fact(warrant_valued='good'), Fact(der_valued='high'))
    def ipo_rule_633(self):
        self.declare(Fact(recommendation='Underwriter berkualitas baik. Warrant menunjukkan kondisi baik. DER menunjukkan tingkat hutang yang tinggi.'))


    @Rule(Fact(underwriter_valued='good'), Fact(warrant_valued='good'), Fact(roa_valued='low'))
    def ipo_rule_634(self):
        self.declare(Fact(recommendation='Underwriter berkualitas baik. Warrant menunjukkan kondisi baik. ROA menunjukkan efisiensi rendah.'))


    @Rule(Fact(underwriter_valued='good'), Fact(warrant_valued='good'), Fact(roe_valued='high'))
    def ipo_rule_635(self):
        self.declare(Fact(recommendation='Underwriter berkualitas baik. Warrant menunjukkan kondisi baik. ROE menunjukkan keuntungan yang tinggi.'))


    @Rule(Fact(underwriter_valued='good'), Fact(net_income_valued='loss'), Fact(per_valued='high'))
    def ipo_rule_636(self):
        self.declare(Fact(recommendation='Underwriter berkualitas baik. Laba bersih menunjukkan kerugian. PER berada di tingkat yang tinggi.'))


    @Rule(Fact(underwriter_valued='good'), Fact(net_income_valued='loss'), Fact(der_valued='high'))
    def ipo_rule_637(self):
        self.declare(Fact(recommendation='Underwriter berkualitas baik. Laba bersih menunjukkan kerugian. DER menunjukkan tingkat hutang yang tinggi.'))


    @Rule(Fact(underwriter_valued='good'), Fact(net_income_valued='loss'), Fact(roa_valued='low'))
    def ipo_rule_638(self):
        self.declare(Fact(recommendation='Underwriter berkualitas baik. Laba bersih menunjukkan kerugian. ROA menunjukkan efisiensi rendah.'))


    @Rule(Fact(underwriter_valued='good'), Fact(net_income_valued='loss'), Fact(roe_valued='high'))
    def ipo_rule_639(self):
        self.declare(Fact(recommendation='Underwriter berkualitas baik. Laba bersih menunjukkan kerugian. ROE menunjukkan keuntungan yang tinggi.'))


    @Rule(Fact(underwriter_valued='good'), Fact(per_valued='high'), Fact(der_valued='high'))
    def ipo_rule_640(self):
        self.declare(Fact(recommendation='Underwriter berkualitas baik. PER berada di tingkat yang tinggi. DER menunjukkan tingkat hutang yang tinggi.'))


    @Rule(Fact(underwriter_valued='good'), Fact(per_valued='high'), Fact(roa_valued='low'))
    def ipo_rule_641(self):
        self.declare(Fact(recommendation='Underwriter berkualitas baik. PER berada di tingkat yang tinggi. ROA menunjukkan efisiensi rendah.'))


    @Rule(Fact(underwriter_valued='good'), Fact(per_valued='high'), Fact(roe_valued='high'))
    def ipo_rule_642(self):
        self.declare(Fact(recommendation='Underwriter berkualitas baik. PER berada di tingkat yang tinggi. ROE menunjukkan keuntungan yang tinggi.'))


    @Rule(Fact(underwriter_valued='good'), Fact(der_valued='high'), Fact(roa_valued='low'))
    def ipo_rule_643(self):
        self.declare(Fact(recommendation='Underwriter berkualitas baik. DER menunjukkan tingkat hutang yang tinggi. ROA menunjukkan efisiensi rendah.'))


    @Rule(Fact(underwriter_valued='good'), Fact(der_valued='high'), Fact(roe_valued='high'))
    def ipo_rule_644(self):
        self.declare(Fact(recommendation='Underwriter berkualitas baik. DER menunjukkan tingkat hutang yang tinggi. ROE menunjukkan keuntungan yang tinggi.'))


    @Rule(Fact(underwriter_valued='good'), Fact(roa_valued='low'), Fact(roe_valued='high'))
    def ipo_rule_645(self):
        self.declare(Fact(recommendation='Underwriter berkualitas baik. ROA menunjukkan efisiensi rendah. ROE menunjukkan keuntungan yang tinggi.'))


    @Rule(Fact(warrant_valued='good'), Fact(net_income_valued='loss'), Fact(per_valued='high'))
    def ipo_rule_646(self):
        self.declare(Fact(recommendation='Warrant menunjukkan kondisi baik. Laba bersih menunjukkan kerugian. PER berada di tingkat yang tinggi.'))


    @Rule(Fact(warrant_valued='good'), Fact(net_income_valued='loss'), Fact(der_valued='high'))
    def ipo_rule_647(self):
        self.declare(Fact(recommendation='Warrant menunjukkan kondisi baik. Laba bersih menunjukkan kerugian. DER menunjukkan tingkat hutang yang tinggi.'))


    @Rule(Fact(warrant_valued='good'), Fact(net_income_valued='loss'), Fact(roa_valued='low'))
    def ipo_rule_648(self):
        self.declare(Fact(recommendation='Warrant menunjukkan kondisi baik. Laba bersih menunjukkan kerugian. ROA menunjukkan efisiensi rendah.'))


    @Rule(Fact(warrant_valued='good'), Fact(net_income_valued='loss'), Fact(roe_valued='high'))
    def ipo_rule_649(self):
        self.declare(Fact(recommendation='Warrant menunjukkan kondisi baik. Laba bersih menunjukkan kerugian. ROE menunjukkan keuntungan yang tinggi.'))


    @Rule(Fact(warrant_valued='good'), Fact(per_valued='high'), Fact(der_valued='high'))
    def ipo_rule_650(self):
        self.declare(Fact(recommendation='Warrant menunjukkan kondisi baik. PER berada di tingkat yang tinggi. DER menunjukkan tingkat hutang yang tinggi.'))


    @Rule(Fact(warrant_valued='good'), Fact(per_valued='high'), Fact(roa_valued='low'))
    def ipo_rule_651(self):
        self.declare(Fact(recommendation='Warrant menunjukkan kondisi baik. PER berada di tingkat yang tinggi. ROA menunjukkan efisiensi rendah.'))


    @Rule(Fact(warrant_valued='good'), Fact(per_valued='high'), Fact(roe_valued='high'))
    def ipo_rule_652(self):
        self.declare(Fact(recommendation='Warrant menunjukkan kondisi baik. PER berada di tingkat yang tinggi. ROE menunjukkan keuntungan yang tinggi.'))


    @Rule(Fact(warrant_valued='good'), Fact(der_valued='high'), Fact(roa_valued='low'))
    def ipo_rule_653(self):
        self.declare(Fact(recommendation='Warrant menunjukkan kondisi baik. DER menunjukkan tingkat hutang yang tinggi. ROA menunjukkan efisiensi rendah.'))


    @Rule(Fact(warrant_valued='good'), Fact(der_valued='high'), Fact(roe_valued='high'))
    def ipo_rule_654(self):
        self.declare(Fact(recommendation='Warrant menunjukkan kondisi baik. DER menunjukkan tingkat hutang yang tinggi. ROE menunjukkan keuntungan yang tinggi.'))


    @Rule(Fact(warrant_valued='good'), Fact(roa_valued='low'), Fact(roe_valued='high'))
    def ipo_rule_655(self):
        self.declare(Fact(recommendation='Warrant menunjukkan kondisi baik. ROA menunjukkan efisiensi rendah. ROE menunjukkan keuntungan yang tinggi.'))


    @Rule(Fact(net_income_valued='loss'), Fact(per_valued='high'), Fact(der_valued='high'))
    def ipo_rule_656(self):
        self.declare(Fact(recommendation='Laba bersih menunjukkan kerugian. PER berada di tingkat yang tinggi. DER menunjukkan tingkat hutang yang tinggi.'))


    @Rule(Fact(net_income_valued='loss'), Fact(per_valued='high'), Fact(roa_valued='low'))
    def ipo_rule_657(self):
        self.declare(Fact(recommendation='Laba bersih menunjukkan kerugian. PER berada di tingkat yang tinggi. ROA menunjukkan efisiensi rendah.'))


    @Rule(Fact(net_income_valued='loss'), Fact(per_valued='high'), Fact(roe_valued='high'))
    def ipo_rule_658(self):
        self.declare(Fact(recommendation='Laba bersih menunjukkan kerugian. PER berada di tingkat yang tinggi. ROE menunjukkan keuntungan yang tinggi.'))


    @Rule(Fact(net_income_valued='loss'), Fact(der_valued='high'), Fact(roa_valued='low'))
    def ipo_rule_659(self):
        self.declare(Fact(recommendation='Laba bersih menunjukkan kerugian. DER menunjukkan tingkat hutang yang tinggi. ROA menunjukkan efisiensi rendah.'))


    @Rule(Fact(net_income_valued='loss'), Fact(der_valued='high'), Fact(roe_valued='high'))
    def ipo_rule_660(self):
        self.declare(Fact(recommendation='Laba bersih menunjukkan kerugian. DER menunjukkan tingkat hutang yang tinggi. ROE menunjukkan keuntungan yang tinggi.'))


    @Rule(Fact(net_income_valued='loss'), Fact(roa_valued='low'), Fact(roe_valued='high'))
    def ipo_rule_661(self):
        self.declare(Fact(recommendation='Laba bersih menunjukkan kerugian. ROA menunjukkan efisiensi rendah. ROE menunjukkan keuntungan yang tinggi.'))


    @Rule(Fact(per_valued='high'), Fact(der_valued='high'), Fact(roa_valued='low'))
    def ipo_rule_662(self):
        self.declare(Fact(recommendation='PER berada di tingkat yang tinggi. DER menunjukkan tingkat hutang yang tinggi. ROA menunjukkan efisiensi rendah.'))


    @Rule(Fact(per_valued='high'), Fact(der_valued='high'), Fact(roe_valued='high'))
    def ipo_rule_663(self):
        self.declare(Fact(recommendation='PER berada di tingkat yang tinggi. DER menunjukkan tingkat hutang yang tinggi. ROE menunjukkan keuntungan yang tinggi.'))


    @Rule(Fact(per_valued='high'), Fact(roa_valued='low'), Fact(roe_valued='high'))
    def ipo_rule_664(self):
        self.declare(Fact(recommendation='PER berada di tingkat yang tinggi. ROA menunjukkan efisiensi rendah. ROE menunjukkan keuntungan yang tinggi.'))


    @Rule(Fact(der_valued='high'), Fact(roa_valued='low'), Fact(roe_valued='high'))
    def ipo_rule_665(self):
        self.declare(Fact(recommendation='DER menunjukkan tingkat hutang yang tinggi. ROA menunjukkan efisiensi rendah. ROE menunjukkan keuntungan yang tinggi.'))


    @Rule(Fact(underwriter_valued='good'), Fact(warrant_valued='good'), Fact(net_income_valued='loss'))
    def ipo_rule_666(self):
        self.declare(Fact(recommendation='Underwriter berkualitas baik. Warrant menunjukkan kondisi baik. Laba bersih menunjukkan kerugian.'))


    @Rule(Fact(underwriter_valued='good'), Fact(warrant_valued='good'), Fact(per_valued='high'))
    def ipo_rule_667(self):
        self.declare(Fact(recommendation='Underwriter berkualitas baik. Warrant menunjukkan kondisi baik. PER berada di tingkat yang tinggi.'))


    @Rule(Fact(underwriter_valued='good'), Fact(warrant_valued='good'), Fact(der_valued='high'))
    def ipo_rule_668(self):
        self.declare(Fact(recommendation='Underwriter berkualitas baik. Warrant menunjukkan kondisi baik. DER menunjukkan tingkat hutang yang tinggi.'))


    @Rule(Fact(underwriter_valued='good'), Fact(warrant_valued='good'), Fact(roa_valued='low'))
    def ipo_rule_669(self):
        self.declare(Fact(recommendation='Underwriter berkualitas baik. Warrant menunjukkan kondisi baik. ROA menunjukkan efisiensi rendah.'))


    @Rule(Fact(underwriter_valued='good'), Fact(warrant_valued='good'), Fact(roe_valued='low'))
    def ipo_rule_670(self):
        self.declare(Fact(recommendation='Underwriter berkualitas baik. Warrant menunjukkan kondisi baik. ROE menunjukkan keuntungan yang rendah.'))


    @Rule(Fact(underwriter_valued='good'), Fact(net_income_valued='loss'), Fact(per_valued='high'))
    def ipo_rule_671(self):
        self.declare(Fact(recommendation='Underwriter berkualitas baik. Laba bersih menunjukkan kerugian. PER berada di tingkat yang tinggi.'))


    @Rule(Fact(underwriter_valued='good'), Fact(net_income_valued='loss'), Fact(der_valued='high'))
    def ipo_rule_672(self):
        self.declare(Fact(recommendation='Underwriter berkualitas baik. Laba bersih menunjukkan kerugian. DER menunjukkan tingkat hutang yang tinggi.'))


    @Rule(Fact(underwriter_valued='good'), Fact(net_income_valued='loss'), Fact(roa_valued='low'))
    def ipo_rule_673(self):
        self.declare(Fact(recommendation='Underwriter berkualitas baik. Laba bersih menunjukkan kerugian. ROA menunjukkan efisiensi rendah.'))


    @Rule(Fact(underwriter_valued='good'), Fact(net_income_valued='loss'), Fact(roe_valued='low'))
    def ipo_rule_674(self):
        self.declare(Fact(recommendation='Underwriter berkualitas baik. Laba bersih menunjukkan kerugian. ROE menunjukkan keuntungan yang rendah.'))


    @Rule(Fact(underwriter_valued='good'), Fact(per_valued='high'), Fact(der_valued='high'))
    def ipo_rule_675(self):
        self.declare(Fact(recommendation='Underwriter berkualitas baik. PER berada di tingkat yang tinggi. DER menunjukkan tingkat hutang yang tinggi.'))


    @Rule(Fact(underwriter_valued='good'), Fact(per_valued='high'), Fact(roa_valued='low'))
    def ipo_rule_676(self):
        self.declare(Fact(recommendation='Underwriter berkualitas baik. PER berada di tingkat yang tinggi. ROA menunjukkan efisiensi rendah.'))


    @Rule(Fact(underwriter_valued='good'), Fact(per_valued='high'), Fact(roe_valued='low'))
    def ipo_rule_677(self):
        self.declare(Fact(recommendation='Underwriter berkualitas baik. PER berada di tingkat yang tinggi. ROE menunjukkan keuntungan yang rendah.'))


    @Rule(Fact(underwriter_valued='good'), Fact(der_valued='high'), Fact(roa_valued='low'))
    def ipo_rule_678(self):
        self.declare(Fact(recommendation='Underwriter berkualitas baik. DER menunjukkan tingkat hutang yang tinggi. ROA menunjukkan efisiensi rendah.'))


    @Rule(Fact(underwriter_valued='good'), Fact(der_valued='high'), Fact(roe_valued='low'))
    def ipo_rule_679(self):
        self.declare(Fact(recommendation='Underwriter berkualitas baik. DER menunjukkan tingkat hutang yang tinggi. ROE menunjukkan keuntungan yang rendah.'))


    @Rule(Fact(underwriter_valued='good'), Fact(roa_valued='low'), Fact(roe_valued='low'))
    def ipo_rule_680(self):
        self.declare(Fact(recommendation='Underwriter berkualitas baik. ROA menunjukkan efisiensi rendah. ROE menunjukkan keuntungan yang rendah.'))


    @Rule(Fact(warrant_valued='good'), Fact(net_income_valued='loss'), Fact(per_valued='high'))
    def ipo_rule_681(self):
        self.declare(Fact(recommendation='Warrant menunjukkan kondisi baik. Laba bersih menunjukkan kerugian. PER berada di tingkat yang tinggi.'))


    @Rule(Fact(warrant_valued='good'), Fact(net_income_valued='loss'), Fact(der_valued='high'))
    def ipo_rule_682(self):
        self.declare(Fact(recommendation='Warrant menunjukkan kondisi baik. Laba bersih menunjukkan kerugian. DER menunjukkan tingkat hutang yang tinggi.'))


    @Rule(Fact(warrant_valued='good'), Fact(net_income_valued='loss'), Fact(roa_valued='low'))
    def ipo_rule_683(self):
        self.declare(Fact(recommendation='Warrant menunjukkan kondisi baik. Laba bersih menunjukkan kerugian. ROA menunjukkan efisiensi rendah.'))


    @Rule(Fact(warrant_valued='good'), Fact(net_income_valued='loss'), Fact(roe_valued='low'))
    def ipo_rule_684(self):
        self.declare(Fact(recommendation='Warrant menunjukkan kondisi baik. Laba bersih menunjukkan kerugian. ROE menunjukkan keuntungan yang rendah.'))


    @Rule(Fact(warrant_valued='good'), Fact(per_valued='high'), Fact(der_valued='high'))
    def ipo_rule_685(self):
        self.declare(Fact(recommendation='Warrant menunjukkan kondisi baik. PER berada di tingkat yang tinggi. DER menunjukkan tingkat hutang yang tinggi.'))


    @Rule(Fact(warrant_valued='good'), Fact(per_valued='high'), Fact(roa_valued='low'))
    def ipo_rule_686(self):
        self.declare(Fact(recommendation='Warrant menunjukkan kondisi baik. PER berada di tingkat yang tinggi. ROA menunjukkan efisiensi rendah.'))


    @Rule(Fact(warrant_valued='good'), Fact(per_valued='high'), Fact(roe_valued='low'))
    def ipo_rule_687(self):
        self.declare(Fact(recommendation='Warrant menunjukkan kondisi baik. PER berada di tingkat yang tinggi. ROE menunjukkan keuntungan yang rendah.'))


    @Rule(Fact(warrant_valued='good'), Fact(der_valued='high'), Fact(roa_valued='low'))
    def ipo_rule_688(self):
        self.declare(Fact(recommendation='Warrant menunjukkan kondisi baik. DER menunjukkan tingkat hutang yang tinggi. ROA menunjukkan efisiensi rendah.'))


    @Rule(Fact(warrant_valued='good'), Fact(der_valued='high'), Fact(roe_valued='low'))
    def ipo_rule_689(self):
        self.declare(Fact(recommendation='Warrant menunjukkan kondisi baik. DER menunjukkan tingkat hutang yang tinggi. ROE menunjukkan keuntungan yang rendah.'))


    @Rule(Fact(warrant_valued='good'), Fact(roa_valued='low'), Fact(roe_valued='low'))
    def ipo_rule_690(self):
        self.declare(Fact(recommendation='Warrant menunjukkan kondisi baik. ROA menunjukkan efisiensi rendah. ROE menunjukkan keuntungan yang rendah.'))


    @Rule(Fact(net_income_valued='loss'), Fact(per_valued='high'), Fact(der_valued='high'))
    def ipo_rule_691(self):
        self.declare(Fact(recommendation='Laba bersih menunjukkan kerugian. PER berada di tingkat yang tinggi. DER menunjukkan tingkat hutang yang tinggi.'))


    @Rule(Fact(net_income_valued='loss'), Fact(per_valued='high'), Fact(roa_valued='low'))
    def ipo_rule_692(self):
        self.declare(Fact(recommendation='Laba bersih menunjukkan kerugian. PER berada di tingkat yang tinggi. ROA menunjukkan efisiensi rendah.'))


    @Rule(Fact(net_income_valued='loss'), Fact(per_valued='high'), Fact(roe_valued='low'))
    def ipo_rule_693(self):
        self.declare(Fact(recommendation='Laba bersih menunjukkan kerugian. PER berada di tingkat yang tinggi. ROE menunjukkan keuntungan yang rendah.'))


    @Rule(Fact(net_income_valued='loss'), Fact(der_valued='high'), Fact(roa_valued='low'))
    def ipo_rule_694(self):
        self.declare(Fact(recommendation='Laba bersih menunjukkan kerugian. DER menunjukkan tingkat hutang yang tinggi. ROA menunjukkan efisiensi rendah.'))


    @Rule(Fact(net_income_valued='loss'), Fact(der_valued='high'), Fact(roe_valued='low'))
    def ipo_rule_695(self):
        self.declare(Fact(recommendation='Laba bersih menunjukkan kerugian. DER menunjukkan tingkat hutang yang tinggi. ROE menunjukkan keuntungan yang rendah.'))


    @Rule(Fact(net_income_valued='loss'), Fact(roa_valued='low'), Fact(roe_valued='low'))
    def ipo_rule_696(self):
        self.declare(Fact(recommendation='Laba bersih menunjukkan kerugian. ROA menunjukkan efisiensi rendah. ROE menunjukkan keuntungan yang rendah.'))


    @Rule(Fact(per_valued='high'), Fact(der_valued='high'), Fact(roa_valued='low'))
    def ipo_rule_697(self):
        self.declare(Fact(recommendation='PER berada di tingkat yang tinggi. DER menunjukkan tingkat hutang yang tinggi. ROA menunjukkan efisiensi rendah.'))


    @Rule(Fact(per_valued='high'), Fact(der_valued='high'), Fact(roe_valued='low'))
    def ipo_rule_698(self):
        self.declare(Fact(recommendation='PER berada di tingkat yang tinggi. DER menunjukkan tingkat hutang yang tinggi. ROE menunjukkan keuntungan yang rendah.'))


    @Rule(Fact(per_valued='high'), Fact(roa_valued='low'), Fact(roe_valued='low'))
    def ipo_rule_699(self):
        self.declare(Fact(recommendation='PER berada di tingkat yang tinggi. ROA menunjukkan efisiensi rendah. ROE menunjukkan keuntungan yang rendah.'))


    @Rule(Fact(der_valued='high'), Fact(roa_valued='low'), Fact(roe_valued='low'))
    def ipo_rule_700(self):
        self.declare(Fact(recommendation='DER menunjukkan tingkat hutang yang tinggi. ROA menunjukkan efisiensi rendah. ROE menunjukkan keuntungan yang rendah.'))


    @Rule(Fact(underwriter_valued='good'), Fact(warrant_valued='good'), Fact(net_income_valued='loss'))
    def ipo_rule_701(self):
        self.declare(Fact(recommendation='Underwriter berkualitas baik. Warrant menunjukkan kondisi baik. Laba bersih menunjukkan kerugian.'))


    @Rule(Fact(underwriter_valued='good'), Fact(warrant_valued='good'), Fact(per_valued='high'))
    def ipo_rule_702(self):
        self.declare(Fact(recommendation='Underwriter berkualitas baik. Warrant menunjukkan kondisi baik. PER berada di tingkat yang tinggi.'))


    @Rule(Fact(underwriter_valued='good'), Fact(warrant_valued='good'), Fact(der_valued='low'))
    def ipo_rule_703(self):
        self.declare(Fact(recommendation='Underwriter berkualitas baik. Warrant menunjukkan kondisi baik. DER menunjukkan tingkat hutang yang rendah.'))


    @Rule(Fact(underwriter_valued='good'), Fact(warrant_valued='good'), Fact(roa_valued='high'))
    def ipo_rule_704(self):
        self.declare(Fact(recommendation='Underwriter berkualitas baik. Warrant menunjukkan kondisi baik. ROA menunjukkan efisiensi tinggi.'))


    @Rule(Fact(underwriter_valued='good'), Fact(warrant_valued='good'), Fact(roe_valued='high'))
    def ipo_rule_705(self):
        self.declare(Fact(recommendation='Underwriter berkualitas baik. Warrant menunjukkan kondisi baik. ROE menunjukkan keuntungan yang tinggi.'))


    @Rule(Fact(underwriter_valued='good'), Fact(net_income_valued='loss'), Fact(per_valued='high'))
    def ipo_rule_706(self):
        self.declare(Fact(recommendation='Underwriter berkualitas baik. Laba bersih menunjukkan kerugian. PER berada di tingkat yang tinggi.'))


    @Rule(Fact(underwriter_valued='good'), Fact(net_income_valued='loss'), Fact(der_valued='low'))
    def ipo_rule_707(self):
        self.declare(Fact(recommendation='Underwriter berkualitas baik. Laba bersih menunjukkan kerugian. DER menunjukkan tingkat hutang yang rendah.'))


    @Rule(Fact(underwriter_valued='good'), Fact(net_income_valued='loss'), Fact(roa_valued='high'))
    def ipo_rule_708(self):
        self.declare(Fact(recommendation='Underwriter berkualitas baik. Laba bersih menunjukkan kerugian. ROA menunjukkan efisiensi tinggi.'))


    @Rule(Fact(underwriter_valued='good'), Fact(net_income_valued='loss'), Fact(roe_valued='high'))
    def ipo_rule_709(self):
        self.declare(Fact(recommendation='Underwriter berkualitas baik. Laba bersih menunjukkan kerugian. ROE menunjukkan keuntungan yang tinggi.'))


    @Rule(Fact(underwriter_valued='good'), Fact(per_valued='high'), Fact(der_valued='low'))
    def ipo_rule_710(self):
        self.declare(Fact(recommendation='Underwriter berkualitas baik. PER berada di tingkat yang tinggi. DER menunjukkan tingkat hutang yang rendah.'))


    @Rule(Fact(underwriter_valued='good'), Fact(per_valued='high'), Fact(roa_valued='high'))
    def ipo_rule_711(self):
        self.declare(Fact(recommendation='Underwriter berkualitas baik. PER berada di tingkat yang tinggi. ROA menunjukkan efisiensi tinggi.'))


    @Rule(Fact(underwriter_valued='good'), Fact(per_valued='high'), Fact(roe_valued='high'))
    def ipo_rule_712(self):
        self.declare(Fact(recommendation='Underwriter berkualitas baik. PER berada di tingkat yang tinggi. ROE menunjukkan keuntungan yang tinggi.'))


    @Rule(Fact(underwriter_valued='good'), Fact(der_valued='low'), Fact(roa_valued='high'))
    def ipo_rule_713(self):
        self.declare(Fact(recommendation='Underwriter berkualitas baik. DER menunjukkan tingkat hutang yang rendah. ROA menunjukkan efisiensi tinggi.'))


    @Rule(Fact(underwriter_valued='good'), Fact(der_valued='low'), Fact(roe_valued='high'))
    def ipo_rule_714(self):
        self.declare(Fact(recommendation='Underwriter berkualitas baik. DER menunjukkan tingkat hutang yang rendah. ROE menunjukkan keuntungan yang tinggi.'))


    @Rule(Fact(underwriter_valued='good'), Fact(roa_valued='high'), Fact(roe_valued='high'))
    def ipo_rule_715(self):
        self.declare(Fact(recommendation='Underwriter berkualitas baik. ROA menunjukkan efisiensi tinggi. ROE menunjukkan keuntungan yang tinggi.'))


    @Rule(Fact(warrant_valued='good'), Fact(net_income_valued='loss'), Fact(per_valued='high'))
    def ipo_rule_716(self):
        self.declare(Fact(recommendation='Warrant menunjukkan kondisi baik. Laba bersih menunjukkan kerugian. PER berada di tingkat yang tinggi.'))


    @Rule(Fact(warrant_valued='good'), Fact(net_income_valued='loss'), Fact(der_valued='low'))
    def ipo_rule_717(self):
        self.declare(Fact(recommendation='Warrant menunjukkan kondisi baik. Laba bersih menunjukkan kerugian. DER menunjukkan tingkat hutang yang rendah.'))


    @Rule(Fact(warrant_valued='good'), Fact(net_income_valued='loss'), Fact(roa_valued='high'))
    def ipo_rule_718(self):
        self.declare(Fact(recommendation='Warrant menunjukkan kondisi baik. Laba bersih menunjukkan kerugian. ROA menunjukkan efisiensi tinggi.'))


    @Rule(Fact(warrant_valued='good'), Fact(net_income_valued='loss'), Fact(roe_valued='high'))
    def ipo_rule_719(self):
        self.declare(Fact(recommendation='Warrant menunjukkan kondisi baik. Laba bersih menunjukkan kerugian. ROE menunjukkan keuntungan yang tinggi.'))


    @Rule(Fact(warrant_valued='good'), Fact(per_valued='high'), Fact(der_valued='low'))
    def ipo_rule_720(self):
        self.declare(Fact(recommendation='Warrant menunjukkan kondisi baik. PER berada di tingkat yang tinggi. DER menunjukkan tingkat hutang yang rendah.'))


    @Rule(Fact(warrant_valued='good'), Fact(per_valued='high'), Fact(roa_valued='high'))
    def ipo_rule_721(self):
        self.declare(Fact(recommendation='Warrant menunjukkan kondisi baik. PER berada di tingkat yang tinggi. ROA menunjukkan efisiensi tinggi.'))


    @Rule(Fact(warrant_valued='good'), Fact(per_valued='high'), Fact(roe_valued='high'))
    def ipo_rule_722(self):
        self.declare(Fact(recommendation='Warrant menunjukkan kondisi baik. PER berada di tingkat yang tinggi. ROE menunjukkan keuntungan yang tinggi.'))


    @Rule(Fact(warrant_valued='good'), Fact(der_valued='low'), Fact(roa_valued='high'))
    def ipo_rule_723(self):
        self.declare(Fact(recommendation='Warrant menunjukkan kondisi baik. DER menunjukkan tingkat hutang yang rendah. ROA menunjukkan efisiensi tinggi.'))


    @Rule(Fact(warrant_valued='good'), Fact(der_valued='low'), Fact(roe_valued='high'))
    def ipo_rule_724(self):
        self.declare(Fact(recommendation='Warrant menunjukkan kondisi baik. DER menunjukkan tingkat hutang yang rendah. ROE menunjukkan keuntungan yang tinggi.'))


    @Rule(Fact(warrant_valued='good'), Fact(roa_valued='high'), Fact(roe_valued='high'))
    def ipo_rule_725(self):
        self.declare(Fact(recommendation='Warrant menunjukkan kondisi baik. ROA menunjukkan efisiensi tinggi. ROE menunjukkan keuntungan yang tinggi.'))


    @Rule(Fact(net_income_valued='loss'), Fact(per_valued='high'), Fact(der_valued='low'))
    def ipo_rule_726(self):
        self.declare(Fact(recommendation='Laba bersih menunjukkan kerugian. PER berada di tingkat yang tinggi. DER menunjukkan tingkat hutang yang rendah.'))


    @Rule(Fact(net_income_valued='loss'), Fact(per_valued='high'), Fact(roa_valued='high'))
    def ipo_rule_727(self):
        self.declare(Fact(recommendation='Laba bersih menunjukkan kerugian. PER berada di tingkat yang tinggi. ROA menunjukkan efisiensi tinggi.'))


    @Rule(Fact(net_income_valued='loss'), Fact(per_valued='high'), Fact(roe_valued='high'))
    def ipo_rule_728(self):
        self.declare(Fact(recommendation='Laba bersih menunjukkan kerugian. PER berada di tingkat yang tinggi. ROE menunjukkan keuntungan yang tinggi.'))


    @Rule(Fact(net_income_valued='loss'), Fact(der_valued='low'), Fact(roa_valued='high'))
    def ipo_rule_729(self):
        self.declare(Fact(recommendation='Laba bersih menunjukkan kerugian. DER menunjukkan tingkat hutang yang rendah. ROA menunjukkan efisiensi tinggi.'))


    @Rule(Fact(net_income_valued='loss'), Fact(der_valued='low'), Fact(roe_valued='high'))
    def ipo_rule_730(self):
        self.declare(Fact(recommendation='Laba bersih menunjukkan kerugian. DER menunjukkan tingkat hutang yang rendah. ROE menunjukkan keuntungan yang tinggi.'))


    @Rule(Fact(net_income_valued='loss'), Fact(roa_valued='high'), Fact(roe_valued='high'))
    def ipo_rule_731(self):
        self.declare(Fact(recommendation='Laba bersih menunjukkan kerugian. ROA menunjukkan efisiensi tinggi. ROE menunjukkan keuntungan yang tinggi.'))


    @Rule(Fact(per_valued='high'), Fact(der_valued='low'), Fact(roa_valued='high'))
    def ipo_rule_732(self):
        self.declare(Fact(recommendation='PER berada di tingkat yang tinggi. DER menunjukkan tingkat hutang yang rendah. ROA menunjukkan efisiensi tinggi.'))


    @Rule(Fact(per_valued='high'), Fact(der_valued='low'), Fact(roe_valued='high'))
    def ipo_rule_733(self):
        self.declare(Fact(recommendation='PER berada di tingkat yang tinggi. DER menunjukkan tingkat hutang yang rendah. ROE menunjukkan keuntungan yang tinggi.'))


    @Rule(Fact(per_valued='high'), Fact(roa_valued='high'), Fact(roe_valued='high'))
    def ipo_rule_734(self):
        self.declare(Fact(recommendation='PER berada di tingkat yang tinggi. ROA menunjukkan efisiensi tinggi. ROE menunjukkan keuntungan yang tinggi.'))


    @Rule(Fact(der_valued='low'), Fact(roa_valued='high'), Fact(roe_valued='high'))
    def ipo_rule_735(self):
        self.declare(Fact(recommendation='DER menunjukkan tingkat hutang yang rendah. ROA menunjukkan efisiensi tinggi. ROE menunjukkan keuntungan yang tinggi.'))


    @Rule(Fact(underwriter_valued='good'), Fact(warrant_valued='good'), Fact(net_income_valued='loss'))
    def ipo_rule_736(self):
        self.declare(Fact(recommendation='Underwriter berkualitas baik. Warrant menunjukkan kondisi baik. Laba bersih menunjukkan kerugian.'))


    @Rule(Fact(underwriter_valued='good'), Fact(warrant_valued='good'), Fact(per_valued='high'))
    def ipo_rule_737(self):
        self.declare(Fact(recommendation='Underwriter berkualitas baik. Warrant menunjukkan kondisi baik. PER berada di tingkat yang tinggi.'))


    @Rule(Fact(underwriter_valued='good'), Fact(warrant_valued='good'), Fact(der_valued='low'))
    def ipo_rule_738(self):
        self.declare(Fact(recommendation='Underwriter berkualitas baik. Warrant menunjukkan kondisi baik. DER menunjukkan tingkat hutang yang rendah.'))


    @Rule(Fact(underwriter_valued='good'), Fact(warrant_valued='good'), Fact(roa_valued='high'))
    def ipo_rule_739(self):
        self.declare(Fact(recommendation='Underwriter berkualitas baik. Warrant menunjukkan kondisi baik. ROA menunjukkan efisiensi tinggi.'))


    @Rule(Fact(underwriter_valued='good'), Fact(warrant_valued='good'), Fact(roe_valued='low'))
    def ipo_rule_740(self):
        self.declare(Fact(recommendation='Underwriter berkualitas baik. Warrant menunjukkan kondisi baik. ROE menunjukkan keuntungan yang rendah.'))


    @Rule(Fact(underwriter_valued='good'), Fact(net_income_valued='loss'), Fact(per_valued='high'))
    def ipo_rule_741(self):
        self.declare(Fact(recommendation='Underwriter berkualitas baik. Laba bersih menunjukkan kerugian. PER berada di tingkat yang tinggi.'))


    @Rule(Fact(underwriter_valued='good'), Fact(net_income_valued='loss'), Fact(der_valued='low'))
    def ipo_rule_742(self):
        self.declare(Fact(recommendation='Underwriter berkualitas baik. Laba bersih menunjukkan kerugian. DER menunjukkan tingkat hutang yang rendah.'))


    @Rule(Fact(underwriter_valued='good'), Fact(net_income_valued='loss'), Fact(roa_valued='high'))
    def ipo_rule_743(self):
        self.declare(Fact(recommendation='Underwriter berkualitas baik. Laba bersih menunjukkan kerugian. ROA menunjukkan efisiensi tinggi.'))


    @Rule(Fact(underwriter_valued='good'), Fact(net_income_valued='loss'), Fact(roe_valued='low'))
    def ipo_rule_744(self):
        self.declare(Fact(recommendation='Underwriter berkualitas baik. Laba bersih menunjukkan kerugian. ROE menunjukkan keuntungan yang rendah.'))


    @Rule(Fact(underwriter_valued='good'), Fact(per_valued='high'), Fact(der_valued='low'))
    def ipo_rule_745(self):
        self.declare(Fact(recommendation='Underwriter berkualitas baik. PER berada di tingkat yang tinggi. DER menunjukkan tingkat hutang yang rendah.'))


    @Rule(Fact(underwriter_valued='good'), Fact(per_valued='high'), Fact(roa_valued='high'))
    def ipo_rule_746(self):
        self.declare(Fact(recommendation='Underwriter berkualitas baik. PER berada di tingkat yang tinggi. ROA menunjukkan efisiensi tinggi.'))


    @Rule(Fact(underwriter_valued='good'), Fact(per_valued='high'), Fact(roe_valued='low'))
    def ipo_rule_747(self):
        self.declare(Fact(recommendation='Underwriter berkualitas baik. PER berada di tingkat yang tinggi. ROE menunjukkan keuntungan yang rendah.'))


    @Rule(Fact(underwriter_valued='good'), Fact(der_valued='low'), Fact(roa_valued='high'))
    def ipo_rule_748(self):
        self.declare(Fact(recommendation='Underwriter berkualitas baik. DER menunjukkan tingkat hutang yang rendah. ROA menunjukkan efisiensi tinggi.'))


    @Rule(Fact(underwriter_valued='good'), Fact(der_valued='low'), Fact(roe_valued='low'))
    def ipo_rule_749(self):
        self.declare(Fact(recommendation='Underwriter berkualitas baik. DER menunjukkan tingkat hutang yang rendah. ROE menunjukkan keuntungan yang rendah.'))


    @Rule(Fact(underwriter_valued='good'), Fact(roa_valued='high'), Fact(roe_valued='low'))
    def ipo_rule_750(self):
        self.declare(Fact(recommendation='Underwriter berkualitas baik. ROA menunjukkan efisiensi tinggi. ROE menunjukkan keuntungan yang rendah.'))


    @Rule(Fact(warrant_valued='good'), Fact(net_income_valued='loss'), Fact(per_valued='high'))
    def ipo_rule_751(self):
        self.declare(Fact(recommendation='Warrant menunjukkan kondisi baik. Laba bersih menunjukkan kerugian. PER berada di tingkat yang tinggi.'))


    @Rule(Fact(warrant_valued='good'), Fact(net_income_valued='loss'), Fact(der_valued='low'))
    def ipo_rule_752(self):
        self.declare(Fact(recommendation='Warrant menunjukkan kondisi baik. Laba bersih menunjukkan kerugian. DER menunjukkan tingkat hutang yang rendah.'))


    @Rule(Fact(warrant_valued='good'), Fact(net_income_valued='loss'), Fact(roa_valued='high'))
    def ipo_rule_753(self):
        self.declare(Fact(recommendation='Warrant menunjukkan kondisi baik. Laba bersih menunjukkan kerugian. ROA menunjukkan efisiensi tinggi.'))


    @Rule(Fact(warrant_valued='good'), Fact(net_income_valued='loss'), Fact(roe_valued='low'))
    def ipo_rule_754(self):
        self.declare(Fact(recommendation='Warrant menunjukkan kondisi baik. Laba bersih menunjukkan kerugian. ROE menunjukkan keuntungan yang rendah.'))


    @Rule(Fact(warrant_valued='good'), Fact(per_valued='high'), Fact(der_valued='low'))
    def ipo_rule_755(self):
        self.declare(Fact(recommendation='Warrant menunjukkan kondisi baik. PER berada di tingkat yang tinggi. DER menunjukkan tingkat hutang yang rendah.'))


    @Rule(Fact(warrant_valued='good'), Fact(per_valued='high'), Fact(roa_valued='high'))
    def ipo_rule_756(self):
        self.declare(Fact(recommendation='Warrant menunjukkan kondisi baik. PER berada di tingkat yang tinggi. ROA menunjukkan efisiensi tinggi.'))


    @Rule(Fact(warrant_valued='good'), Fact(per_valued='high'), Fact(roe_valued='low'))
    def ipo_rule_757(self):
        self.declare(Fact(recommendation='Warrant menunjukkan kondisi baik. PER berada di tingkat yang tinggi. ROE menunjukkan keuntungan yang rendah.'))


    @Rule(Fact(warrant_valued='good'), Fact(der_valued='low'), Fact(roa_valued='high'))
    def ipo_rule_758(self):
        self.declare(Fact(recommendation='Warrant menunjukkan kondisi baik. DER menunjukkan tingkat hutang yang rendah. ROA menunjukkan efisiensi tinggi.'))


    @Rule(Fact(warrant_valued='good'), Fact(der_valued='low'), Fact(roe_valued='low'))
    def ipo_rule_759(self):
        self.declare(Fact(recommendation='Warrant menunjukkan kondisi baik. DER menunjukkan tingkat hutang yang rendah. ROE menunjukkan keuntungan yang rendah.'))


    @Rule(Fact(warrant_valued='good'), Fact(roa_valued='high'), Fact(roe_valued='low'))
    def ipo_rule_760(self):
        self.declare(Fact(recommendation='Warrant menunjukkan kondisi baik. ROA menunjukkan efisiensi tinggi. ROE menunjukkan keuntungan yang rendah.'))


    @Rule(Fact(net_income_valued='loss'), Fact(per_valued='high'), Fact(der_valued='low'))
    def ipo_rule_761(self):
        self.declare(Fact(recommendation='Laba bersih menunjukkan kerugian. PER berada di tingkat yang tinggi. DER menunjukkan tingkat hutang yang rendah.'))


    @Rule(Fact(net_income_valued='loss'), Fact(per_valued='high'), Fact(roa_valued='high'))
    def ipo_rule_762(self):
        self.declare(Fact(recommendation='Laba bersih menunjukkan kerugian. PER berada di tingkat yang tinggi. ROA menunjukkan efisiensi tinggi.'))


    @Rule(Fact(net_income_valued='loss'), Fact(per_valued='high'), Fact(roe_valued='low'))
    def ipo_rule_763(self):
        self.declare(Fact(recommendation='Laba bersih menunjukkan kerugian. PER berada di tingkat yang tinggi. ROE menunjukkan keuntungan yang rendah.'))


    @Rule(Fact(net_income_valued='loss'), Fact(der_valued='low'), Fact(roa_valued='high'))
    def ipo_rule_764(self):
        self.declare(Fact(recommendation='Laba bersih menunjukkan kerugian. DER menunjukkan tingkat hutang yang rendah. ROA menunjukkan efisiensi tinggi.'))


    @Rule(Fact(net_income_valued='loss'), Fact(der_valued='low'), Fact(roe_valued='low'))
    def ipo_rule_765(self):
        self.declare(Fact(recommendation='Laba bersih menunjukkan kerugian. DER menunjukkan tingkat hutang yang rendah. ROE menunjukkan keuntungan yang rendah.'))


    @Rule(Fact(net_income_valued='loss'), Fact(roa_valued='high'), Fact(roe_valued='low'))
    def ipo_rule_766(self):
        self.declare(Fact(recommendation='Laba bersih menunjukkan kerugian. ROA menunjukkan efisiensi tinggi. ROE menunjukkan keuntungan yang rendah.'))


    @Rule(Fact(per_valued='high'), Fact(der_valued='low'), Fact(roa_valued='high'))
    def ipo_rule_767(self):
        self.declare(Fact(recommendation='PER berada di tingkat yang tinggi. DER menunjukkan tingkat hutang yang rendah. ROA menunjukkan efisiensi tinggi.'))


    @Rule(Fact(per_valued='high'), Fact(der_valued='low'), Fact(roe_valued='low'))
    def ipo_rule_768(self):
        self.declare(Fact(recommendation='PER berada di tingkat yang tinggi. DER menunjukkan tingkat hutang yang rendah. ROE menunjukkan keuntungan yang rendah.'))


    @Rule(Fact(per_valued='high'), Fact(roa_valued='high'), Fact(roe_valued='low'))
    def ipo_rule_769(self):
        self.declare(Fact(recommendation='PER berada di tingkat yang tinggi. ROA menunjukkan efisiensi tinggi. ROE menunjukkan keuntungan yang rendah.'))


    @Rule(Fact(der_valued='low'), Fact(roa_valued='high'), Fact(roe_valued='low'))
    def ipo_rule_770(self):
        self.declare(Fact(recommendation='DER menunjukkan tingkat hutang yang rendah. ROA menunjukkan efisiensi tinggi. ROE menunjukkan keuntungan yang rendah.'))


    @Rule(Fact(underwriter_valued='good'), Fact(warrant_valued='good'), Fact(net_income_valued='loss'))
    def ipo_rule_771(self):
        self.declare(Fact(recommendation='Underwriter berkualitas baik. Warrant menunjukkan kondisi baik. Laba bersih menunjukkan kerugian.'))


    @Rule(Fact(underwriter_valued='good'), Fact(warrant_valued='good'), Fact(per_valued='high'))
    def ipo_rule_772(self):
        self.declare(Fact(recommendation='Underwriter berkualitas baik. Warrant menunjukkan kondisi baik. PER berada di tingkat yang tinggi.'))


    @Rule(Fact(underwriter_valued='good'), Fact(warrant_valued='good'), Fact(der_valued='low'))
    def ipo_rule_773(self):
        self.declare(Fact(recommendation='Underwriter berkualitas baik. Warrant menunjukkan kondisi baik. DER menunjukkan tingkat hutang yang rendah.'))


    @Rule(Fact(underwriter_valued='good'), Fact(warrant_valued='good'), Fact(roa_valued='low'))
    def ipo_rule_774(self):
        self.declare(Fact(recommendation='Underwriter berkualitas baik. Warrant menunjukkan kondisi baik. ROA menunjukkan efisiensi rendah.'))


    @Rule(Fact(underwriter_valued='good'), Fact(warrant_valued='good'), Fact(roe_valued='high'))
    def ipo_rule_775(self):
        self.declare(Fact(recommendation='Underwriter berkualitas baik. Warrant menunjukkan kondisi baik. ROE menunjukkan keuntungan yang tinggi.'))


    @Rule(Fact(underwriter_valued='good'), Fact(net_income_valued='loss'), Fact(per_valued='high'))
    def ipo_rule_776(self):
        self.declare(Fact(recommendation='Underwriter berkualitas baik. Laba bersih menunjukkan kerugian. PER berada di tingkat yang tinggi.'))


    @Rule(Fact(underwriter_valued='good'), Fact(net_income_valued='loss'), Fact(der_valued='low'))
    def ipo_rule_777(self):
        self.declare(Fact(recommendation='Underwriter berkualitas baik. Laba bersih menunjukkan kerugian. DER menunjukkan tingkat hutang yang rendah.'))


    @Rule(Fact(underwriter_valued='good'), Fact(net_income_valued='loss'), Fact(roa_valued='low'))
    def ipo_rule_778(self):
        self.declare(Fact(recommendation='Underwriter berkualitas baik. Laba bersih menunjukkan kerugian. ROA menunjukkan efisiensi rendah.'))


    @Rule(Fact(underwriter_valued='good'), Fact(net_income_valued='loss'), Fact(roe_valued='high'))
    def ipo_rule_779(self):
        self.declare(Fact(recommendation='Underwriter berkualitas baik. Laba bersih menunjukkan kerugian. ROE menunjukkan keuntungan yang tinggi.'))


    @Rule(Fact(underwriter_valued='good'), Fact(per_valued='high'), Fact(der_valued='low'))
    def ipo_rule_780(self):
        self.declare(Fact(recommendation='Underwriter berkualitas baik. PER berada di tingkat yang tinggi. DER menunjukkan tingkat hutang yang rendah.'))


    @Rule(Fact(underwriter_valued='good'), Fact(per_valued='high'), Fact(roa_valued='low'))
    def ipo_rule_781(self):
        self.declare(Fact(recommendation='Underwriter berkualitas baik. PER berada di tingkat yang tinggi. ROA menunjukkan efisiensi rendah.'))


    @Rule(Fact(underwriter_valued='good'), Fact(per_valued='high'), Fact(roe_valued='high'))
    def ipo_rule_782(self):
        self.declare(Fact(recommendation='Underwriter berkualitas baik. PER berada di tingkat yang tinggi. ROE menunjukkan keuntungan yang tinggi.'))


    @Rule(Fact(underwriter_valued='good'), Fact(der_valued='low'), Fact(roa_valued='low'))
    def ipo_rule_783(self):
        self.declare(Fact(recommendation='Underwriter berkualitas baik. DER menunjukkan tingkat hutang yang rendah. ROA menunjukkan efisiensi rendah.'))


    @Rule(Fact(underwriter_valued='good'), Fact(der_valued='low'), Fact(roe_valued='high'))
    def ipo_rule_784(self):
        self.declare(Fact(recommendation='Underwriter berkualitas baik. DER menunjukkan tingkat hutang yang rendah. ROE menunjukkan keuntungan yang tinggi.'))


    @Rule(Fact(underwriter_valued='good'), Fact(roa_valued='low'), Fact(roe_valued='high'))
    def ipo_rule_785(self):
        self.declare(Fact(recommendation='Underwriter berkualitas baik. ROA menunjukkan efisiensi rendah. ROE menunjukkan keuntungan yang tinggi.'))


    @Rule(Fact(warrant_valued='good'), Fact(net_income_valued='loss'), Fact(per_valued='high'))
    def ipo_rule_786(self):
        self.declare(Fact(recommendation='Warrant menunjukkan kondisi baik. Laba bersih menunjukkan kerugian. PER berada di tingkat yang tinggi.'))


    @Rule(Fact(warrant_valued='good'), Fact(net_income_valued='loss'), Fact(der_valued='low'))
    def ipo_rule_787(self):
        self.declare(Fact(recommendation='Warrant menunjukkan kondisi baik. Laba bersih menunjukkan kerugian. DER menunjukkan tingkat hutang yang rendah.'))


    @Rule(Fact(warrant_valued='good'), Fact(net_income_valued='loss'), Fact(roa_valued='low'))
    def ipo_rule_788(self):
        self.declare(Fact(recommendation='Warrant menunjukkan kondisi baik. Laba bersih menunjukkan kerugian. ROA menunjukkan efisiensi rendah.'))


    @Rule(Fact(warrant_valued='good'), Fact(net_income_valued='loss'), Fact(roe_valued='high'))
    def ipo_rule_789(self):
        self.declare(Fact(recommendation='Warrant menunjukkan kondisi baik. Laba bersih menunjukkan kerugian. ROE menunjukkan keuntungan yang tinggi.'))


    @Rule(Fact(warrant_valued='good'), Fact(per_valued='high'), Fact(der_valued='low'))
    def ipo_rule_790(self):
        self.declare(Fact(recommendation='Warrant menunjukkan kondisi baik. PER berada di tingkat yang tinggi. DER menunjukkan tingkat hutang yang rendah.'))


    @Rule(Fact(warrant_valued='good'), Fact(per_valued='high'), Fact(roa_valued='low'))
    def ipo_rule_791(self):
        self.declare(Fact(recommendation='Warrant menunjukkan kondisi baik. PER berada di tingkat yang tinggi. ROA menunjukkan efisiensi rendah.'))


    @Rule(Fact(warrant_valued='good'), Fact(per_valued='high'), Fact(roe_valued='high'))
    def ipo_rule_792(self):
        self.declare(Fact(recommendation='Warrant menunjukkan kondisi baik. PER berada di tingkat yang tinggi. ROE menunjukkan keuntungan yang tinggi.'))


    @Rule(Fact(warrant_valued='good'), Fact(der_valued='low'), Fact(roa_valued='low'))
    def ipo_rule_793(self):
        self.declare(Fact(recommendation='Warrant menunjukkan kondisi baik. DER menunjukkan tingkat hutang yang rendah. ROA menunjukkan efisiensi rendah.'))


    @Rule(Fact(warrant_valued='good'), Fact(der_valued='low'), Fact(roe_valued='high'))
    def ipo_rule_794(self):
        self.declare(Fact(recommendation='Warrant menunjukkan kondisi baik. DER menunjukkan tingkat hutang yang rendah. ROE menunjukkan keuntungan yang tinggi.'))


    @Rule(Fact(warrant_valued='good'), Fact(roa_valued='low'), Fact(roe_valued='high'))
    def ipo_rule_795(self):
        self.declare(Fact(recommendation='Warrant menunjukkan kondisi baik. ROA menunjukkan efisiensi rendah. ROE menunjukkan keuntungan yang tinggi.'))


    @Rule(Fact(net_income_valued='loss'), Fact(per_valued='high'), Fact(der_valued='low'))
    def ipo_rule_796(self):
        self.declare(Fact(recommendation='Laba bersih menunjukkan kerugian. PER berada di tingkat yang tinggi. DER menunjukkan tingkat hutang yang rendah.'))


    @Rule(Fact(net_income_valued='loss'), Fact(per_valued='high'), Fact(roa_valued='low'))
    def ipo_rule_797(self):
        self.declare(Fact(recommendation='Laba bersih menunjukkan kerugian. PER berada di tingkat yang tinggi. ROA menunjukkan efisiensi rendah.'))


    @Rule(Fact(net_income_valued='loss'), Fact(per_valued='high'), Fact(roe_valued='high'))
    def ipo_rule_798(self):
        self.declare(Fact(recommendation='Laba bersih menunjukkan kerugian. PER berada di tingkat yang tinggi. ROE menunjukkan keuntungan yang tinggi.'))


    @Rule(Fact(net_income_valued='loss'), Fact(der_valued='low'), Fact(roa_valued='low'))
    def ipo_rule_799(self):
        self.declare(Fact(recommendation='Laba bersih menunjukkan kerugian. DER menunjukkan tingkat hutang yang rendah. ROA menunjukkan efisiensi rendah.'))


    @Rule(Fact(net_income_valued='loss'), Fact(der_valued='low'), Fact(roe_valued='high'))
    def ipo_rule_800(self):
        self.declare(Fact(recommendation='Laba bersih menunjukkan kerugian. DER menunjukkan tingkat hutang yang rendah. ROE menunjukkan keuntungan yang tinggi.'))


    @Rule(Fact(net_income_valued='loss'), Fact(roa_valued='low'), Fact(roe_valued='high'))
    def ipo_rule_801(self):
        self.declare(Fact(recommendation='Laba bersih menunjukkan kerugian. ROA menunjukkan efisiensi rendah. ROE menunjukkan keuntungan yang tinggi.'))


    @Rule(Fact(per_valued='high'), Fact(der_valued='low'), Fact(roa_valued='low'))
    def ipo_rule_802(self):
        self.declare(Fact(recommendation='PER berada di tingkat yang tinggi. DER menunjukkan tingkat hutang yang rendah. ROA menunjukkan efisiensi rendah.'))


    @Rule(Fact(per_valued='high'), Fact(der_valued='low'), Fact(roe_valued='high'))
    def ipo_rule_803(self):
        self.declare(Fact(recommendation='PER berada di tingkat yang tinggi. DER menunjukkan tingkat hutang yang rendah. ROE menunjukkan keuntungan yang tinggi.'))


    @Rule(Fact(per_valued='high'), Fact(roa_valued='low'), Fact(roe_valued='high'))
    def ipo_rule_804(self):
        self.declare(Fact(recommendation='PER berada di tingkat yang tinggi. ROA menunjukkan efisiensi rendah. ROE menunjukkan keuntungan yang tinggi.'))


    @Rule(Fact(der_valued='low'), Fact(roa_valued='low'), Fact(roe_valued='high'))
    def ipo_rule_805(self):
        self.declare(Fact(recommendation='DER menunjukkan tingkat hutang yang rendah. ROA menunjukkan efisiensi rendah. ROE menunjukkan keuntungan yang tinggi.'))


    @Rule(Fact(underwriter_valued='good'), Fact(warrant_valued='good'), Fact(net_income_valued='loss'))
    def ipo_rule_806(self):
        self.declare(Fact(recommendation='Underwriter berkualitas baik. Warrant menunjukkan kondisi baik. Laba bersih menunjukkan kerugian.'))


    @Rule(Fact(underwriter_valued='good'), Fact(warrant_valued='good'), Fact(per_valued='high'))
    def ipo_rule_807(self):
        self.declare(Fact(recommendation='Underwriter berkualitas baik. Warrant menunjukkan kondisi baik. PER berada di tingkat yang tinggi.'))


    @Rule(Fact(underwriter_valued='good'), Fact(warrant_valued='good'), Fact(der_valued='low'))
    def ipo_rule_808(self):
        self.declare(Fact(recommendation='Underwriter berkualitas baik. Warrant menunjukkan kondisi baik. DER menunjukkan tingkat hutang yang rendah.'))


    @Rule(Fact(underwriter_valued='good'), Fact(warrant_valued='good'), Fact(roa_valued='low'))
    def ipo_rule_809(self):
        self.declare(Fact(recommendation='Underwriter berkualitas baik. Warrant menunjukkan kondisi baik. ROA menunjukkan efisiensi rendah.'))


    @Rule(Fact(underwriter_valued='good'), Fact(warrant_valued='good'), Fact(roe_valued='low'))
    def ipo_rule_810(self):
        self.declare(Fact(recommendation='Underwriter berkualitas baik. Warrant menunjukkan kondisi baik. ROE menunjukkan keuntungan yang rendah.'))


    @Rule(Fact(underwriter_valued='good'), Fact(net_income_valued='loss'), Fact(per_valued='high'))
    def ipo_rule_811(self):
        self.declare(Fact(recommendation='Underwriter berkualitas baik. Laba bersih menunjukkan kerugian. PER berada di tingkat yang tinggi.'))


    @Rule(Fact(underwriter_valued='good'), Fact(net_income_valued='loss'), Fact(der_valued='low'))
    def ipo_rule_812(self):
        self.declare(Fact(recommendation='Underwriter berkualitas baik. Laba bersih menunjukkan kerugian. DER menunjukkan tingkat hutang yang rendah.'))


    @Rule(Fact(underwriter_valued='good'), Fact(net_income_valued='loss'), Fact(roa_valued='low'))
    def ipo_rule_813(self):
        self.declare(Fact(recommendation='Underwriter berkualitas baik. Laba bersih menunjukkan kerugian. ROA menunjukkan efisiensi rendah.'))


    @Rule(Fact(underwriter_valued='good'), Fact(net_income_valued='loss'), Fact(roe_valued='low'))
    def ipo_rule_814(self):
        self.declare(Fact(recommendation='Underwriter berkualitas baik. Laba bersih menunjukkan kerugian. ROE menunjukkan keuntungan yang rendah.'))


    @Rule(Fact(underwriter_valued='good'), Fact(per_valued='high'), Fact(der_valued='low'))
    def ipo_rule_815(self):
        self.declare(Fact(recommendation='Underwriter berkualitas baik. PER berada di tingkat yang tinggi. DER menunjukkan tingkat hutang yang rendah.'))


    @Rule(Fact(underwriter_valued='good'), Fact(per_valued='high'), Fact(roa_valued='low'))
    def ipo_rule_816(self):
        self.declare(Fact(recommendation='Underwriter berkualitas baik. PER berada di tingkat yang tinggi. ROA menunjukkan efisiensi rendah.'))


    @Rule(Fact(underwriter_valued='good'), Fact(per_valued='high'), Fact(roe_valued='low'))
    def ipo_rule_817(self):
        self.declare(Fact(recommendation='Underwriter berkualitas baik. PER berada di tingkat yang tinggi. ROE menunjukkan keuntungan yang rendah.'))


    @Rule(Fact(underwriter_valued='good'), Fact(der_valued='low'), Fact(roa_valued='low'))
    def ipo_rule_818(self):
        self.declare(Fact(recommendation='Underwriter berkualitas baik. DER menunjukkan tingkat hutang yang rendah. ROA menunjukkan efisiensi rendah.'))


    @Rule(Fact(underwriter_valued='good'), Fact(der_valued='low'), Fact(roe_valued='low'))
    def ipo_rule_819(self):
        self.declare(Fact(recommendation='Underwriter berkualitas baik. DER menunjukkan tingkat hutang yang rendah. ROE menunjukkan keuntungan yang rendah.'))


    @Rule(Fact(underwriter_valued='good'), Fact(roa_valued='low'), Fact(roe_valued='low'))
    def ipo_rule_820(self):
        self.declare(Fact(recommendation='Underwriter berkualitas baik. ROA menunjukkan efisiensi rendah. ROE menunjukkan keuntungan yang rendah.'))


    @Rule(Fact(warrant_valued='good'), Fact(net_income_valued='loss'), Fact(per_valued='high'))
    def ipo_rule_821(self):
        self.declare(Fact(recommendation='Warrant menunjukkan kondisi baik. Laba bersih menunjukkan kerugian. PER berada di tingkat yang tinggi.'))


    @Rule(Fact(warrant_valued='good'), Fact(net_income_valued='loss'), Fact(der_valued='low'))
    def ipo_rule_822(self):
        self.declare(Fact(recommendation='Warrant menunjukkan kondisi baik. Laba bersih menunjukkan kerugian. DER menunjukkan tingkat hutang yang rendah.'))


    @Rule(Fact(warrant_valued='good'), Fact(net_income_valued='loss'), Fact(roa_valued='low'))
    def ipo_rule_823(self):
        self.declare(Fact(recommendation='Warrant menunjukkan kondisi baik. Laba bersih menunjukkan kerugian. ROA menunjukkan efisiensi rendah.'))


    @Rule(Fact(warrant_valued='good'), Fact(net_income_valued='loss'), Fact(roe_valued='low'))
    def ipo_rule_824(self):
        self.declare(Fact(recommendation='Warrant menunjukkan kondisi baik. Laba bersih menunjukkan kerugian. ROE menunjukkan keuntungan yang rendah.'))


    @Rule(Fact(warrant_valued='good'), Fact(per_valued='high'), Fact(der_valued='low'))
    def ipo_rule_825(self):
        self.declare(Fact(recommendation='Warrant menunjukkan kondisi baik. PER berada di tingkat yang tinggi. DER menunjukkan tingkat hutang yang rendah.'))


    @Rule(Fact(warrant_valued='good'), Fact(per_valued='high'), Fact(roa_valued='low'))
    def ipo_rule_826(self):
        self.declare(Fact(recommendation='Warrant menunjukkan kondisi baik. PER berada di tingkat yang tinggi. ROA menunjukkan efisiensi rendah.'))


    @Rule(Fact(warrant_valued='good'), Fact(per_valued='high'), Fact(roe_valued='low'))
    def ipo_rule_827(self):
        self.declare(Fact(recommendation='Warrant menunjukkan kondisi baik. PER berada di tingkat yang tinggi. ROE menunjukkan keuntungan yang rendah.'))


    @Rule(Fact(warrant_valued='good'), Fact(der_valued='low'), Fact(roa_valued='low'))
    def ipo_rule_828(self):
        self.declare(Fact(recommendation='Warrant menunjukkan kondisi baik. DER menunjukkan tingkat hutang yang rendah. ROA menunjukkan efisiensi rendah.'))


    @Rule(Fact(warrant_valued='good'), Fact(der_valued='low'), Fact(roe_valued='low'))
    def ipo_rule_829(self):
        self.declare(Fact(recommendation='Warrant menunjukkan kondisi baik. DER menunjukkan tingkat hutang yang rendah. ROE menunjukkan keuntungan yang rendah.'))


    @Rule(Fact(warrant_valued='good'), Fact(roa_valued='low'), Fact(roe_valued='low'))
    def ipo_rule_830(self):
        self.declare(Fact(recommendation='Warrant menunjukkan kondisi baik. ROA menunjukkan efisiensi rendah. ROE menunjukkan keuntungan yang rendah.'))


    @Rule(Fact(net_income_valued='loss'), Fact(per_valued='high'), Fact(der_valued='low'))
    def ipo_rule_831(self):
        self.declare(Fact(recommendation='Laba bersih menunjukkan kerugian. PER berada di tingkat yang tinggi. DER menunjukkan tingkat hutang yang rendah.'))


    @Rule(Fact(net_income_valued='loss'), Fact(per_valued='high'), Fact(roa_valued='low'))
    def ipo_rule_832(self):
        self.declare(Fact(recommendation='Laba bersih menunjukkan kerugian. PER berada di tingkat yang tinggi. ROA menunjukkan efisiensi rendah.'))


    @Rule(Fact(net_income_valued='loss'), Fact(per_valued='high'), Fact(roe_valued='low'))
    def ipo_rule_833(self):
        self.declare(Fact(recommendation='Laba bersih menunjukkan kerugian. PER berada di tingkat yang tinggi. ROE menunjukkan keuntungan yang rendah.'))


    @Rule(Fact(net_income_valued='loss'), Fact(der_valued='low'), Fact(roa_valued='low'))
    def ipo_rule_834(self):
        self.declare(Fact(recommendation='Laba bersih menunjukkan kerugian. DER menunjukkan tingkat hutang yang rendah. ROA menunjukkan efisiensi rendah.'))


    @Rule(Fact(net_income_valued='loss'), Fact(der_valued='low'), Fact(roe_valued='low'))
    def ipo_rule_835(self):
        self.declare(Fact(recommendation='Laba bersih menunjukkan kerugian. DER menunjukkan tingkat hutang yang rendah. ROE menunjukkan keuntungan yang rendah.'))


    @Rule(Fact(net_income_valued='loss'), Fact(roa_valued='low'), Fact(roe_valued='low'))
    def ipo_rule_836(self):
        self.declare(Fact(recommendation='Laba bersih menunjukkan kerugian. ROA menunjukkan efisiensi rendah. ROE menunjukkan keuntungan yang rendah.'))


    @Rule(Fact(per_valued='high'), Fact(der_valued='low'), Fact(roa_valued='low'))
    def ipo_rule_837(self):
        self.declare(Fact(recommendation='PER berada di tingkat yang tinggi. DER menunjukkan tingkat hutang yang rendah. ROA menunjukkan efisiensi rendah.'))


    @Rule(Fact(per_valued='high'), Fact(der_valued='low'), Fact(roe_valued='low'))
    def ipo_rule_838(self):
        self.declare(Fact(recommendation='PER berada di tingkat yang tinggi. DER menunjukkan tingkat hutang yang rendah. ROE menunjukkan keuntungan yang rendah.'))


    @Rule(Fact(per_valued='high'), Fact(roa_valued='low'), Fact(roe_valued='low'))
    def ipo_rule_839(self):
        self.declare(Fact(recommendation='PER berada di tingkat yang tinggi. ROA menunjukkan efisiensi rendah. ROE menunjukkan keuntungan yang rendah.'))


    @Rule(Fact(der_valued='low'), Fact(roa_valued='low'), Fact(roe_valued='low'))
    def ipo_rule_840(self):
        self.declare(Fact(recommendation='DER menunjukkan tingkat hutang yang rendah. ROA menunjukkan efisiensi rendah. ROE menunjukkan keuntungan yang rendah.'))


    @Rule(Fact(underwriter_valued='good'), Fact(warrant_valued='good'), Fact(net_income_valued='loss'))
    def ipo_rule_841(self):
        self.declare(Fact(recommendation='Underwriter berkualitas baik. Warrant menunjukkan kondisi baik. Laba bersih menunjukkan kerugian.'))


    @Rule(Fact(underwriter_valued='good'), Fact(warrant_valued='good'), Fact(per_valued='low'))
    def ipo_rule_842(self):
        self.declare(Fact(recommendation='Underwriter berkualitas baik. Warrant menunjukkan kondisi baik. PER berada di tingkat yang rendah.'))


    @Rule(Fact(underwriter_valued='good'), Fact(warrant_valued='good'), Fact(der_valued='high'))
    def ipo_rule_843(self):
        self.declare(Fact(recommendation='Underwriter berkualitas baik. Warrant menunjukkan kondisi baik. DER menunjukkan tingkat hutang yang tinggi.'))


    @Rule(Fact(underwriter_valued='good'), Fact(warrant_valued='good'), Fact(roa_valued='high'))
    def ipo_rule_844(self):
        self.declare(Fact(recommendation='Underwriter berkualitas baik. Warrant menunjukkan kondisi baik. ROA menunjukkan efisiensi tinggi.'))


    @Rule(Fact(underwriter_valued='good'), Fact(warrant_valued='good'), Fact(roe_valued='high'))
    def ipo_rule_845(self):
        self.declare(Fact(recommendation='Underwriter berkualitas baik. Warrant menunjukkan kondisi baik. ROE menunjukkan keuntungan yang tinggi.'))


    @Rule(Fact(underwriter_valued='good'), Fact(net_income_valued='loss'), Fact(per_valued='low'))
    def ipo_rule_846(self):
        self.declare(Fact(recommendation='Underwriter berkualitas baik. Laba bersih menunjukkan kerugian. PER berada di tingkat yang rendah.'))


    @Rule(Fact(underwriter_valued='good'), Fact(net_income_valued='loss'), Fact(der_valued='high'))
    def ipo_rule_847(self):
        self.declare(Fact(recommendation='Underwriter berkualitas baik. Laba bersih menunjukkan kerugian. DER menunjukkan tingkat hutang yang tinggi.'))


    @Rule(Fact(underwriter_valued='good'), Fact(net_income_valued='loss'), Fact(roa_valued='high'))
    def ipo_rule_848(self):
        self.declare(Fact(recommendation='Underwriter berkualitas baik. Laba bersih menunjukkan kerugian. ROA menunjukkan efisiensi tinggi.'))


    @Rule(Fact(underwriter_valued='good'), Fact(net_income_valued='loss'), Fact(roe_valued='high'))
    def ipo_rule_849(self):
        self.declare(Fact(recommendation='Underwriter berkualitas baik. Laba bersih menunjukkan kerugian. ROE menunjukkan keuntungan yang tinggi.'))


    @Rule(Fact(underwriter_valued='good'), Fact(per_valued='low'), Fact(der_valued='high'))
    def ipo_rule_850(self):
        self.declare(Fact(recommendation='Underwriter berkualitas baik. PER berada di tingkat yang rendah. DER menunjukkan tingkat hutang yang tinggi.'))


    @Rule(Fact(underwriter_valued='good'), Fact(per_valued='low'), Fact(roa_valued='high'))
    def ipo_rule_851(self):
        self.declare(Fact(recommendation='Underwriter berkualitas baik. PER berada di tingkat yang rendah. ROA menunjukkan efisiensi tinggi.'))


    @Rule(Fact(underwriter_valued='good'), Fact(per_valued='low'), Fact(roe_valued='high'))
    def ipo_rule_852(self):
        self.declare(Fact(recommendation='Underwriter berkualitas baik. PER berada di tingkat yang rendah. ROE menunjukkan keuntungan yang tinggi.'))


    @Rule(Fact(underwriter_valued='good'), Fact(der_valued='high'), Fact(roa_valued='high'))
    def ipo_rule_853(self):
        self.declare(Fact(recommendation='Underwriter berkualitas baik. DER menunjukkan tingkat hutang yang tinggi. ROA menunjukkan efisiensi tinggi.'))


    @Rule(Fact(underwriter_valued='good'), Fact(der_valued='high'), Fact(roe_valued='high'))
    def ipo_rule_854(self):
        self.declare(Fact(recommendation='Underwriter berkualitas baik. DER menunjukkan tingkat hutang yang tinggi. ROE menunjukkan keuntungan yang tinggi.'))


    @Rule(Fact(underwriter_valued='good'), Fact(roa_valued='high'), Fact(roe_valued='high'))
    def ipo_rule_855(self):
        self.declare(Fact(recommendation='Underwriter berkualitas baik. ROA menunjukkan efisiensi tinggi. ROE menunjukkan keuntungan yang tinggi.'))


    @Rule(Fact(warrant_valued='good'), Fact(net_income_valued='loss'), Fact(per_valued='low'))
    def ipo_rule_856(self):
        self.declare(Fact(recommendation='Warrant menunjukkan kondisi baik. Laba bersih menunjukkan kerugian. PER berada di tingkat yang rendah.'))


    @Rule(Fact(warrant_valued='good'), Fact(net_income_valued='loss'), Fact(der_valued='high'))
    def ipo_rule_857(self):
        self.declare(Fact(recommendation='Warrant menunjukkan kondisi baik. Laba bersih menunjukkan kerugian. DER menunjukkan tingkat hutang yang tinggi.'))


    @Rule(Fact(warrant_valued='good'), Fact(net_income_valued='loss'), Fact(roa_valued='high'))
    def ipo_rule_858(self):
        self.declare(Fact(recommendation='Warrant menunjukkan kondisi baik. Laba bersih menunjukkan kerugian. ROA menunjukkan efisiensi tinggi.'))


    @Rule(Fact(warrant_valued='good'), Fact(net_income_valued='loss'), Fact(roe_valued='high'))
    def ipo_rule_859(self):
        self.declare(Fact(recommendation='Warrant menunjukkan kondisi baik. Laba bersih menunjukkan kerugian. ROE menunjukkan keuntungan yang tinggi.'))


    @Rule(Fact(warrant_valued='good'), Fact(per_valued='low'), Fact(der_valued='high'))
    def ipo_rule_860(self):
        self.declare(Fact(recommendation='Warrant menunjukkan kondisi baik. PER berada di tingkat yang rendah. DER menunjukkan tingkat hutang yang tinggi.'))


    @Rule(Fact(warrant_valued='good'), Fact(per_valued='low'), Fact(roa_valued='high'))
    def ipo_rule_861(self):
        self.declare(Fact(recommendation='Warrant menunjukkan kondisi baik. PER berada di tingkat yang rendah. ROA menunjukkan efisiensi tinggi.'))


    @Rule(Fact(warrant_valued='good'), Fact(per_valued='low'), Fact(roe_valued='high'))
    def ipo_rule_862(self):
        self.declare(Fact(recommendation='Warrant menunjukkan kondisi baik. PER berada di tingkat yang rendah. ROE menunjukkan keuntungan yang tinggi.'))


    @Rule(Fact(warrant_valued='good'), Fact(der_valued='high'), Fact(roa_valued='high'))
    def ipo_rule_863(self):
        self.declare(Fact(recommendation='Warrant menunjukkan kondisi baik. DER menunjukkan tingkat hutang yang tinggi. ROA menunjukkan efisiensi tinggi.'))


    @Rule(Fact(warrant_valued='good'), Fact(der_valued='high'), Fact(roe_valued='high'))
    def ipo_rule_864(self):
        self.declare(Fact(recommendation='Warrant menunjukkan kondisi baik. DER menunjukkan tingkat hutang yang tinggi. ROE menunjukkan keuntungan yang tinggi.'))


    @Rule(Fact(warrant_valued='good'), Fact(roa_valued='high'), Fact(roe_valued='high'))
    def ipo_rule_865(self):
        self.declare(Fact(recommendation='Warrant menunjukkan kondisi baik. ROA menunjukkan efisiensi tinggi. ROE menunjukkan keuntungan yang tinggi.'))


    @Rule(Fact(net_income_valued='loss'), Fact(per_valued='low'), Fact(der_valued='high'))
    def ipo_rule_866(self):
        self.declare(Fact(recommendation='Laba bersih menunjukkan kerugian. PER berada di tingkat yang rendah. DER menunjukkan tingkat hutang yang tinggi.'))


    @Rule(Fact(net_income_valued='loss'), Fact(per_valued='low'), Fact(roa_valued='high'))
    def ipo_rule_867(self):
        self.declare(Fact(recommendation='Laba bersih menunjukkan kerugian. PER berada di tingkat yang rendah. ROA menunjukkan efisiensi tinggi.'))


    @Rule(Fact(net_income_valued='loss'), Fact(per_valued='low'), Fact(roe_valued='high'))
    def ipo_rule_868(self):
        self.declare(Fact(recommendation='Laba bersih menunjukkan kerugian. PER berada di tingkat yang rendah. ROE menunjukkan keuntungan yang tinggi.'))


    @Rule(Fact(net_income_valued='loss'), Fact(der_valued='high'), Fact(roa_valued='high'))
    def ipo_rule_869(self):
        self.declare(Fact(recommendation='Laba bersih menunjukkan kerugian. DER menunjukkan tingkat hutang yang tinggi. ROA menunjukkan efisiensi tinggi.'))


    @Rule(Fact(net_income_valued='loss'), Fact(der_valued='high'), Fact(roe_valued='high'))
    def ipo_rule_870(self):
        self.declare(Fact(recommendation='Laba bersih menunjukkan kerugian. DER menunjukkan tingkat hutang yang tinggi. ROE menunjukkan keuntungan yang tinggi.'))


    @Rule(Fact(net_income_valued='loss'), Fact(roa_valued='high'), Fact(roe_valued='high'))
    def ipo_rule_871(self):
        self.declare(Fact(recommendation='Laba bersih menunjukkan kerugian. ROA menunjukkan efisiensi tinggi. ROE menunjukkan keuntungan yang tinggi.'))


    @Rule(Fact(per_valued='low'), Fact(der_valued='high'), Fact(roa_valued='high'))
    def ipo_rule_872(self):
        self.declare(Fact(recommendation='PER berada di tingkat yang rendah. DER menunjukkan tingkat hutang yang tinggi. ROA menunjukkan efisiensi tinggi.'))


    @Rule(Fact(per_valued='low'), Fact(der_valued='high'), Fact(roe_valued='high'))
    def ipo_rule_873(self):
        self.declare(Fact(recommendation='PER berada di tingkat yang rendah. DER menunjukkan tingkat hutang yang tinggi. ROE menunjukkan keuntungan yang tinggi.'))


    @Rule(Fact(per_valued='low'), Fact(roa_valued='high'), Fact(roe_valued='high'))
    def ipo_rule_874(self):
        self.declare(Fact(recommendation='PER berada di tingkat yang rendah. ROA menunjukkan efisiensi tinggi. ROE menunjukkan keuntungan yang tinggi.'))


    @Rule(Fact(der_valued='high'), Fact(roa_valued='high'), Fact(roe_valued='high'))
    def ipo_rule_875(self):
        self.declare(Fact(recommendation='DER menunjukkan tingkat hutang yang tinggi. ROA menunjukkan efisiensi tinggi. ROE menunjukkan keuntungan yang tinggi.'))


    @Rule(Fact(underwriter_valued='good'), Fact(warrant_valued='good'), Fact(net_income_valued='loss'))
    def ipo_rule_876(self):
        self.declare(Fact(recommendation='Underwriter berkualitas baik. Warrant menunjukkan kondisi baik. Laba bersih menunjukkan kerugian.'))


    @Rule(Fact(underwriter_valued='good'), Fact(warrant_valued='good'), Fact(per_valued='low'))
    def ipo_rule_877(self):
        self.declare(Fact(recommendation='Underwriter berkualitas baik. Warrant menunjukkan kondisi baik. PER berada di tingkat yang rendah.'))


    @Rule(Fact(underwriter_valued='good'), Fact(warrant_valued='good'), Fact(der_valued='high'))
    def ipo_rule_878(self):
        self.declare(Fact(recommendation='Underwriter berkualitas baik. Warrant menunjukkan kondisi baik. DER menunjukkan tingkat hutang yang tinggi.'))


    @Rule(Fact(underwriter_valued='good'), Fact(warrant_valued='good'), Fact(roa_valued='high'))
    def ipo_rule_879(self):
        self.declare(Fact(recommendation='Underwriter berkualitas baik. Warrant menunjukkan kondisi baik. ROA menunjukkan efisiensi tinggi.'))


    @Rule(Fact(underwriter_valued='good'), Fact(warrant_valued='good'), Fact(roe_valued='low'))
    def ipo_rule_880(self):
        self.declare(Fact(recommendation='Underwriter berkualitas baik. Warrant menunjukkan kondisi baik. ROE menunjukkan keuntungan yang rendah.'))


    @Rule(Fact(underwriter_valued='good'), Fact(net_income_valued='loss'), Fact(per_valued='low'))
    def ipo_rule_881(self):
        self.declare(Fact(recommendation='Underwriter berkualitas baik. Laba bersih menunjukkan kerugian. PER berada di tingkat yang rendah.'))


    @Rule(Fact(underwriter_valued='good'), Fact(net_income_valued='loss'), Fact(der_valued='high'))
    def ipo_rule_882(self):
        self.declare(Fact(recommendation='Underwriter berkualitas baik. Laba bersih menunjukkan kerugian. DER menunjukkan tingkat hutang yang tinggi.'))


    @Rule(Fact(underwriter_valued='good'), Fact(net_income_valued='loss'), Fact(roa_valued='high'))
    def ipo_rule_883(self):
        self.declare(Fact(recommendation='Underwriter berkualitas baik. Laba bersih menunjukkan kerugian. ROA menunjukkan efisiensi tinggi.'))


    @Rule(Fact(underwriter_valued='good'), Fact(net_income_valued='loss'), Fact(roe_valued='low'))
    def ipo_rule_884(self):
        self.declare(Fact(recommendation='Underwriter berkualitas baik. Laba bersih menunjukkan kerugian. ROE menunjukkan keuntungan yang rendah.'))


    @Rule(Fact(underwriter_valued='good'), Fact(per_valued='low'), Fact(der_valued='high'))
    def ipo_rule_885(self):
        self.declare(Fact(recommendation='Underwriter berkualitas baik. PER berada di tingkat yang rendah. DER menunjukkan tingkat hutang yang tinggi.'))


    @Rule(Fact(underwriter_valued='good'), Fact(per_valued='low'), Fact(roa_valued='high'))
    def ipo_rule_886(self):
        self.declare(Fact(recommendation='Underwriter berkualitas baik. PER berada di tingkat yang rendah. ROA menunjukkan efisiensi tinggi.'))


    @Rule(Fact(underwriter_valued='good'), Fact(per_valued='low'), Fact(roe_valued='low'))
    def ipo_rule_887(self):
        self.declare(Fact(recommendation='Underwriter berkualitas baik. PER berada di tingkat yang rendah. ROE menunjukkan keuntungan yang rendah.'))


    @Rule(Fact(underwriter_valued='good'), Fact(der_valued='high'), Fact(roa_valued='high'))
    def ipo_rule_888(self):
        self.declare(Fact(recommendation='Underwriter berkualitas baik. DER menunjukkan tingkat hutang yang tinggi. ROA menunjukkan efisiensi tinggi.'))


    @Rule(Fact(underwriter_valued='good'), Fact(der_valued='high'), Fact(roe_valued='low'))
    def ipo_rule_889(self):
        self.declare(Fact(recommendation='Underwriter berkualitas baik. DER menunjukkan tingkat hutang yang tinggi. ROE menunjukkan keuntungan yang rendah.'))


    @Rule(Fact(underwriter_valued='good'), Fact(roa_valued='high'), Fact(roe_valued='low'))
    def ipo_rule_890(self):
        self.declare(Fact(recommendation='Underwriter berkualitas baik. ROA menunjukkan efisiensi tinggi. ROE menunjukkan keuntungan yang rendah.'))


    @Rule(Fact(warrant_valued='good'), Fact(net_income_valued='loss'), Fact(per_valued='low'))
    def ipo_rule_891(self):
        self.declare(Fact(recommendation='Warrant menunjukkan kondisi baik. Laba bersih menunjukkan kerugian. PER berada di tingkat yang rendah.'))


    @Rule(Fact(warrant_valued='good'), Fact(net_income_valued='loss'), Fact(der_valued='high'))
    def ipo_rule_892(self):
        self.declare(Fact(recommendation='Warrant menunjukkan kondisi baik. Laba bersih menunjukkan kerugian. DER menunjukkan tingkat hutang yang tinggi.'))


    @Rule(Fact(warrant_valued='good'), Fact(net_income_valued='loss'), Fact(roa_valued='high'))
    def ipo_rule_893(self):
        self.declare(Fact(recommendation='Warrant menunjukkan kondisi baik. Laba bersih menunjukkan kerugian. ROA menunjukkan efisiensi tinggi.'))


    @Rule(Fact(warrant_valued='good'), Fact(net_income_valued='loss'), Fact(roe_valued='low'))
    def ipo_rule_894(self):
        self.declare(Fact(recommendation='Warrant menunjukkan kondisi baik. Laba bersih menunjukkan kerugian. ROE menunjukkan keuntungan yang rendah.'))


    @Rule(Fact(warrant_valued='good'), Fact(per_valued='low'), Fact(der_valued='high'))
    def ipo_rule_895(self):
        self.declare(Fact(recommendation='Warrant menunjukkan kondisi baik. PER berada di tingkat yang rendah. DER menunjukkan tingkat hutang yang tinggi.'))


    @Rule(Fact(warrant_valued='good'), Fact(per_valued='low'), Fact(roa_valued='high'))
    def ipo_rule_896(self):
        self.declare(Fact(recommendation='Warrant menunjukkan kondisi baik. PER berada di tingkat yang rendah. ROA menunjukkan efisiensi tinggi.'))


    @Rule(Fact(warrant_valued='good'), Fact(per_valued='low'), Fact(roe_valued='low'))
    def ipo_rule_897(self):
        self.declare(Fact(recommendation='Warrant menunjukkan kondisi baik. PER berada di tingkat yang rendah. ROE menunjukkan keuntungan yang rendah.'))


    @Rule(Fact(warrant_valued='good'), Fact(der_valued='high'), Fact(roa_valued='high'))
    def ipo_rule_898(self):
        self.declare(Fact(recommendation='Warrant menunjukkan kondisi baik. DER menunjukkan tingkat hutang yang tinggi. ROA menunjukkan efisiensi tinggi.'))


    @Rule(Fact(warrant_valued='good'), Fact(der_valued='high'), Fact(roe_valued='low'))
    def ipo_rule_899(self):
        self.declare(Fact(recommendation='Warrant menunjukkan kondisi baik. DER menunjukkan tingkat hutang yang tinggi. ROE menunjukkan keuntungan yang rendah.'))


    @Rule(Fact(warrant_valued='good'), Fact(roa_valued='high'), Fact(roe_valued='low'))
    def ipo_rule_900(self):
        self.declare(Fact(recommendation='Warrant menunjukkan kondisi baik. ROA menunjukkan efisiensi tinggi. ROE menunjukkan keuntungan yang rendah.'))


    @Rule(Fact(net_income_valued='loss'), Fact(per_valued='low'), Fact(der_valued='high'))
    def ipo_rule_901(self):
        self.declare(Fact(recommendation='Laba bersih menunjukkan kerugian. PER berada di tingkat yang rendah. DER menunjukkan tingkat hutang yang tinggi.'))


    @Rule(Fact(net_income_valued='loss'), Fact(per_valued='low'), Fact(roa_valued='high'))
    def ipo_rule_902(self):
        self.declare(Fact(recommendation='Laba bersih menunjukkan kerugian. PER berada di tingkat yang rendah. ROA menunjukkan efisiensi tinggi.'))


    @Rule(Fact(net_income_valued='loss'), Fact(per_valued='low'), Fact(roe_valued='low'))
    def ipo_rule_903(self):
        self.declare(Fact(recommendation='Laba bersih menunjukkan kerugian. PER berada di tingkat yang rendah. ROE menunjukkan keuntungan yang rendah.'))


    @Rule(Fact(net_income_valued='loss'), Fact(der_valued='high'), Fact(roa_valued='high'))
    def ipo_rule_904(self):
        self.declare(Fact(recommendation='Laba bersih menunjukkan kerugian. DER menunjukkan tingkat hutang yang tinggi. ROA menunjukkan efisiensi tinggi.'))


    @Rule(Fact(net_income_valued='loss'), Fact(der_valued='high'), Fact(roe_valued='low'))
    def ipo_rule_905(self):
        self.declare(Fact(recommendation='Laba bersih menunjukkan kerugian. DER menunjukkan tingkat hutang yang tinggi. ROE menunjukkan keuntungan yang rendah.'))


    @Rule(Fact(net_income_valued='loss'), Fact(roa_valued='high'), Fact(roe_valued='low'))
    def ipo_rule_906(self):
        self.declare(Fact(recommendation='Laba bersih menunjukkan kerugian. ROA menunjukkan efisiensi tinggi. ROE menunjukkan keuntungan yang rendah.'))


    @Rule(Fact(per_valued='low'), Fact(der_valued='high'), Fact(roa_valued='high'))
    def ipo_rule_907(self):
        self.declare(Fact(recommendation='PER berada di tingkat yang rendah. DER menunjukkan tingkat hutang yang tinggi. ROA menunjukkan efisiensi tinggi.'))


    @Rule(Fact(per_valued='low'), Fact(der_valued='high'), Fact(roe_valued='low'))
    def ipo_rule_908(self):
        self.declare(Fact(recommendation='PER berada di tingkat yang rendah. DER menunjukkan tingkat hutang yang tinggi. ROE menunjukkan keuntungan yang rendah.'))


    @Rule(Fact(per_valued='low'), Fact(roa_valued='high'), Fact(roe_valued='low'))
    def ipo_rule_909(self):
        self.declare(Fact(recommendation='PER berada di tingkat yang rendah. ROA menunjukkan efisiensi tinggi. ROE menunjukkan keuntungan yang rendah.'))


    @Rule(Fact(der_valued='high'), Fact(roa_valued='high'), Fact(roe_valued='low'))
    def ipo_rule_910(self):
        self.declare(Fact(recommendation='DER menunjukkan tingkat hutang yang tinggi. ROA menunjukkan efisiensi tinggi. ROE menunjukkan keuntungan yang rendah.'))


    @Rule(Fact(underwriter_valued='good'), Fact(warrant_valued='good'), Fact(net_income_valued='loss'))
    def ipo_rule_911(self):
        self.declare(Fact(recommendation='Underwriter berkualitas baik. Warrant menunjukkan kondisi baik. Laba bersih menunjukkan kerugian.'))


    @Rule(Fact(underwriter_valued='good'), Fact(warrant_valued='good'), Fact(per_valued='low'))
    def ipo_rule_912(self):
        self.declare(Fact(recommendation='Underwriter berkualitas baik. Warrant menunjukkan kondisi baik. PER berada di tingkat yang rendah.'))


    @Rule(Fact(underwriter_valued='good'), Fact(warrant_valued='good'), Fact(der_valued='high'))
    def ipo_rule_913(self):
        self.declare(Fact(recommendation='Underwriter berkualitas baik. Warrant menunjukkan kondisi baik. DER menunjukkan tingkat hutang yang tinggi.'))


    @Rule(Fact(underwriter_valued='good'), Fact(warrant_valued='good'), Fact(roa_valued='low'))
    def ipo_rule_914(self):
        self.declare(Fact(recommendation='Underwriter berkualitas baik. Warrant menunjukkan kondisi baik. ROA menunjukkan efisiensi rendah.'))


    @Rule(Fact(underwriter_valued='good'), Fact(warrant_valued='good'), Fact(roe_valued='high'))
    def ipo_rule_915(self):
        self.declare(Fact(recommendation='Underwriter berkualitas baik. Warrant menunjukkan kondisi baik. ROE menunjukkan keuntungan yang tinggi.'))


    @Rule(Fact(underwriter_valued='good'), Fact(net_income_valued='loss'), Fact(per_valued='low'))
    def ipo_rule_916(self):
        self.declare(Fact(recommendation='Underwriter berkualitas baik. Laba bersih menunjukkan kerugian. PER berada di tingkat yang rendah.'))


    @Rule(Fact(underwriter_valued='good'), Fact(net_income_valued='loss'), Fact(der_valued='high'))
    def ipo_rule_917(self):
        self.declare(Fact(recommendation='Underwriter berkualitas baik. Laba bersih menunjukkan kerugian. DER menunjukkan tingkat hutang yang tinggi.'))


    @Rule(Fact(underwriter_valued='good'), Fact(net_income_valued='loss'), Fact(roa_valued='low'))
    def ipo_rule_918(self):
        self.declare(Fact(recommendation='Underwriter berkualitas baik. Laba bersih menunjukkan kerugian. ROA menunjukkan efisiensi rendah.'))


    @Rule(Fact(underwriter_valued='good'), Fact(net_income_valued='loss'), Fact(roe_valued='high'))
    def ipo_rule_919(self):
        self.declare(Fact(recommendation='Underwriter berkualitas baik. Laba bersih menunjukkan kerugian. ROE menunjukkan keuntungan yang tinggi.'))


    @Rule(Fact(underwriter_valued='good'), Fact(per_valued='low'), Fact(der_valued='high'))
    def ipo_rule_920(self):
        self.declare(Fact(recommendation='Underwriter berkualitas baik. PER berada di tingkat yang rendah. DER menunjukkan tingkat hutang yang tinggi.'))


    @Rule(Fact(underwriter_valued='good'), Fact(per_valued='low'), Fact(roa_valued='low'))
    def ipo_rule_921(self):
        self.declare(Fact(recommendation='Underwriter berkualitas baik. PER berada di tingkat yang rendah. ROA menunjukkan efisiensi rendah.'))


    @Rule(Fact(underwriter_valued='good'), Fact(per_valued='low'), Fact(roe_valued='high'))
    def ipo_rule_922(self):
        self.declare(Fact(recommendation='Underwriter berkualitas baik. PER berada di tingkat yang rendah. ROE menunjukkan keuntungan yang tinggi.'))


    @Rule(Fact(underwriter_valued='good'), Fact(der_valued='high'), Fact(roa_valued='low'))
    def ipo_rule_923(self):
        self.declare(Fact(recommendation='Underwriter berkualitas baik. DER menunjukkan tingkat hutang yang tinggi. ROA menunjukkan efisiensi rendah.'))


    @Rule(Fact(underwriter_valued='good'), Fact(der_valued='high'), Fact(roe_valued='high'))
    def ipo_rule_924(self):
        self.declare(Fact(recommendation='Underwriter berkualitas baik. DER menunjukkan tingkat hutang yang tinggi. ROE menunjukkan keuntungan yang tinggi.'))


    @Rule(Fact(underwriter_valued='good'), Fact(roa_valued='low'), Fact(roe_valued='high'))
    def ipo_rule_925(self):
        self.declare(Fact(recommendation='Underwriter berkualitas baik. ROA menunjukkan efisiensi rendah. ROE menunjukkan keuntungan yang tinggi.'))


    @Rule(Fact(warrant_valued='good'), Fact(net_income_valued='loss'), Fact(per_valued='low'))
    def ipo_rule_926(self):
        self.declare(Fact(recommendation='Warrant menunjukkan kondisi baik. Laba bersih menunjukkan kerugian. PER berada di tingkat yang rendah.'))


    @Rule(Fact(warrant_valued='good'), Fact(net_income_valued='loss'), Fact(der_valued='high'))
    def ipo_rule_927(self):
        self.declare(Fact(recommendation='Warrant menunjukkan kondisi baik. Laba bersih menunjukkan kerugian. DER menunjukkan tingkat hutang yang tinggi.'))


    @Rule(Fact(warrant_valued='good'), Fact(net_income_valued='loss'), Fact(roa_valued='low'))
    def ipo_rule_928(self):
        self.declare(Fact(recommendation='Warrant menunjukkan kondisi baik. Laba bersih menunjukkan kerugian. ROA menunjukkan efisiensi rendah.'))


    @Rule(Fact(warrant_valued='good'), Fact(net_income_valued='loss'), Fact(roe_valued='high'))
    def ipo_rule_929(self):
        self.declare(Fact(recommendation='Warrant menunjukkan kondisi baik. Laba bersih menunjukkan kerugian. ROE menunjukkan keuntungan yang tinggi.'))


    @Rule(Fact(warrant_valued='good'), Fact(per_valued='low'), Fact(der_valued='high'))
    def ipo_rule_930(self):
        self.declare(Fact(recommendation='Warrant menunjukkan kondisi baik. PER berada di tingkat yang rendah. DER menunjukkan tingkat hutang yang tinggi.'))


    @Rule(Fact(warrant_valued='good'), Fact(per_valued='low'), Fact(roa_valued='low'))
    def ipo_rule_931(self):
        self.declare(Fact(recommendation='Warrant menunjukkan kondisi baik. PER berada di tingkat yang rendah. ROA menunjukkan efisiensi rendah.'))


    @Rule(Fact(warrant_valued='good'), Fact(per_valued='low'), Fact(roe_valued='high'))
    def ipo_rule_932(self):
        self.declare(Fact(recommendation='Warrant menunjukkan kondisi baik. PER berada di tingkat yang rendah. ROE menunjukkan keuntungan yang tinggi.'))


    @Rule(Fact(warrant_valued='good'), Fact(der_valued='high'), Fact(roa_valued='low'))
    def ipo_rule_933(self):
        self.declare(Fact(recommendation='Warrant menunjukkan kondisi baik. DER menunjukkan tingkat hutang yang tinggi. ROA menunjukkan efisiensi rendah.'))


    @Rule(Fact(warrant_valued='good'), Fact(der_valued='high'), Fact(roe_valued='high'))
    def ipo_rule_934(self):
        self.declare(Fact(recommendation='Warrant menunjukkan kondisi baik. DER menunjukkan tingkat hutang yang tinggi. ROE menunjukkan keuntungan yang tinggi.'))


    @Rule(Fact(warrant_valued='good'), Fact(roa_valued='low'), Fact(roe_valued='high'))
    def ipo_rule_935(self):
        self.declare(Fact(recommendation='Warrant menunjukkan kondisi baik. ROA menunjukkan efisiensi rendah. ROE menunjukkan keuntungan yang tinggi.'))


    @Rule(Fact(net_income_valued='loss'), Fact(per_valued='low'), Fact(der_valued='high'))
    def ipo_rule_936(self):
        self.declare(Fact(recommendation='Laba bersih menunjukkan kerugian. PER berada di tingkat yang rendah. DER menunjukkan tingkat hutang yang tinggi.'))


    @Rule(Fact(net_income_valued='loss'), Fact(per_valued='low'), Fact(roa_valued='low'))
    def ipo_rule_937(self):
        self.declare(Fact(recommendation='Laba bersih menunjukkan kerugian. PER berada di tingkat yang rendah. ROA menunjukkan efisiensi rendah.'))


    @Rule(Fact(net_income_valued='loss'), Fact(per_valued='low'), Fact(roe_valued='high'))
    def ipo_rule_938(self):
        self.declare(Fact(recommendation='Laba bersih menunjukkan kerugian. PER berada di tingkat yang rendah. ROE menunjukkan keuntungan yang tinggi.'))


    @Rule(Fact(net_income_valued='loss'), Fact(der_valued='high'), Fact(roa_valued='low'))
    def ipo_rule_939(self):
        self.declare(Fact(recommendation='Laba bersih menunjukkan kerugian. DER menunjukkan tingkat hutang yang tinggi. ROA menunjukkan efisiensi rendah.'))


    @Rule(Fact(net_income_valued='loss'), Fact(der_valued='high'), Fact(roe_valued='high'))
    def ipo_rule_940(self):
        self.declare(Fact(recommendation='Laba bersih menunjukkan kerugian. DER menunjukkan tingkat hutang yang tinggi. ROE menunjukkan keuntungan yang tinggi.'))


    @Rule(Fact(net_income_valued='loss'), Fact(roa_valued='low'), Fact(roe_valued='high'))
    def ipo_rule_941(self):
        self.declare(Fact(recommendation='Laba bersih menunjukkan kerugian. ROA menunjukkan efisiensi rendah. ROE menunjukkan keuntungan yang tinggi.'))


    @Rule(Fact(per_valued='low'), Fact(der_valued='high'), Fact(roa_valued='low'))
    def ipo_rule_942(self):
        self.declare(Fact(recommendation='PER berada di tingkat yang rendah. DER menunjukkan tingkat hutang yang tinggi. ROA menunjukkan efisiensi rendah.'))


    @Rule(Fact(per_valued='low'), Fact(der_valued='high'), Fact(roe_valued='high'))
    def ipo_rule_943(self):
        self.declare(Fact(recommendation='PER berada di tingkat yang rendah. DER menunjukkan tingkat hutang yang tinggi. ROE menunjukkan keuntungan yang tinggi.'))


    @Rule(Fact(per_valued='low'), Fact(roa_valued='low'), Fact(roe_valued='high'))
    def ipo_rule_944(self):
        self.declare(Fact(recommendation='PER berada di tingkat yang rendah. ROA menunjukkan efisiensi rendah. ROE menunjukkan keuntungan yang tinggi.'))


    @Rule(Fact(der_valued='high'), Fact(roa_valued='low'), Fact(roe_valued='high'))
    def ipo_rule_945(self):
        self.declare(Fact(recommendation='DER menunjukkan tingkat hutang yang tinggi. ROA menunjukkan efisiensi rendah. ROE menunjukkan keuntungan yang tinggi.'))


    @Rule(Fact(underwriter_valued='good'), Fact(warrant_valued='good'), Fact(net_income_valued='loss'))
    def ipo_rule_946(self):
        self.declare(Fact(recommendation='Underwriter berkualitas baik. Warrant menunjukkan kondisi baik. Laba bersih menunjukkan kerugian.'))


    @Rule(Fact(underwriter_valued='good'), Fact(warrant_valued='good'), Fact(per_valued='low'))
    def ipo_rule_947(self):
        self.declare(Fact(recommendation='Underwriter berkualitas baik. Warrant menunjukkan kondisi baik. PER berada di tingkat yang rendah.'))


    @Rule(Fact(underwriter_valued='good'), Fact(warrant_valued='good'), Fact(der_valued='high'))
    def ipo_rule_948(self):
        self.declare(Fact(recommendation='Underwriter berkualitas baik. Warrant menunjukkan kondisi baik. DER menunjukkan tingkat hutang yang tinggi.'))


    @Rule(Fact(underwriter_valued='good'), Fact(warrant_valued='good'), Fact(roa_valued='low'))
    def ipo_rule_949(self):
        self.declare(Fact(recommendation='Underwriter berkualitas baik. Warrant menunjukkan kondisi baik. ROA menunjukkan efisiensi rendah.'))


    @Rule(Fact(underwriter_valued='good'), Fact(warrant_valued='good'), Fact(roe_valued='low'))
    def ipo_rule_950(self):
        self.declare(Fact(recommendation='Underwriter berkualitas baik. Warrant menunjukkan kondisi baik. ROE menunjukkan keuntungan yang rendah.'))


    @Rule(Fact(underwriter_valued='good'), Fact(net_income_valued='loss'), Fact(per_valued='low'))
    def ipo_rule_951(self):
        self.declare(Fact(recommendation='Underwriter berkualitas baik. Laba bersih menunjukkan kerugian. PER berada di tingkat yang rendah.'))


    @Rule(Fact(underwriter_valued='good'), Fact(net_income_valued='loss'), Fact(der_valued='high'))
    def ipo_rule_952(self):
        self.declare(Fact(recommendation='Underwriter berkualitas baik. Laba bersih menunjukkan kerugian. DER menunjukkan tingkat hutang yang tinggi.'))


    @Rule(Fact(underwriter_valued='good'), Fact(net_income_valued='loss'), Fact(roa_valued='low'))
    def ipo_rule_953(self):
        self.declare(Fact(recommendation='Underwriter berkualitas baik. Laba bersih menunjukkan kerugian. ROA menunjukkan efisiensi rendah.'))


    @Rule(Fact(underwriter_valued='good'), Fact(net_income_valued='loss'), Fact(roe_valued='low'))
    def ipo_rule_954(self):
        self.declare(Fact(recommendation='Underwriter berkualitas baik. Laba bersih menunjukkan kerugian. ROE menunjukkan keuntungan yang rendah.'))


    @Rule(Fact(underwriter_valued='good'), Fact(per_valued='low'), Fact(der_valued='high'))
    def ipo_rule_955(self):
        self.declare(Fact(recommendation='Underwriter berkualitas baik. PER berada di tingkat yang rendah. DER menunjukkan tingkat hutang yang tinggi.'))


    @Rule(Fact(underwriter_valued='good'), Fact(per_valued='low'), Fact(roa_valued='low'))
    def ipo_rule_956(self):
        self.declare(Fact(recommendation='Underwriter berkualitas baik. PER berada di tingkat yang rendah. ROA menunjukkan efisiensi rendah.'))


    @Rule(Fact(underwriter_valued='good'), Fact(per_valued='low'), Fact(roe_valued='low'))
    def ipo_rule_957(self):
        self.declare(Fact(recommendation='Underwriter berkualitas baik. PER berada di tingkat yang rendah. ROE menunjukkan keuntungan yang rendah.'))


    @Rule(Fact(underwriter_valued='good'), Fact(der_valued='high'), Fact(roa_valued='low'))
    def ipo_rule_958(self):
        self.declare(Fact(recommendation='Underwriter berkualitas baik. DER menunjukkan tingkat hutang yang tinggi. ROA menunjukkan efisiensi rendah.'))


    @Rule(Fact(underwriter_valued='good'), Fact(der_valued='high'), Fact(roe_valued='low'))
    def ipo_rule_959(self):
        self.declare(Fact(recommendation='Underwriter berkualitas baik. DER menunjukkan tingkat hutang yang tinggi. ROE menunjukkan keuntungan yang rendah.'))


    @Rule(Fact(underwriter_valued='good'), Fact(roa_valued='low'), Fact(roe_valued='low'))
    def ipo_rule_960(self):
        self.declare(Fact(recommendation='Underwriter berkualitas baik. ROA menunjukkan efisiensi rendah. ROE menunjukkan keuntungan yang rendah.'))


    @Rule(Fact(warrant_valued='good'), Fact(net_income_valued='loss'), Fact(per_valued='low'))
    def ipo_rule_961(self):
        self.declare(Fact(recommendation='Warrant menunjukkan kondisi baik. Laba bersih menunjukkan kerugian. PER berada di tingkat yang rendah.'))


    @Rule(Fact(warrant_valued='good'), Fact(net_income_valued='loss'), Fact(der_valued='high'))
    def ipo_rule_962(self):
        self.declare(Fact(recommendation='Warrant menunjukkan kondisi baik. Laba bersih menunjukkan kerugian. DER menunjukkan tingkat hutang yang tinggi.'))


    @Rule(Fact(warrant_valued='good'), Fact(net_income_valued='loss'), Fact(roa_valued='low'))
    def ipo_rule_963(self):
        self.declare(Fact(recommendation='Warrant menunjukkan kondisi baik. Laba bersih menunjukkan kerugian. ROA menunjukkan efisiensi rendah.'))


    @Rule(Fact(warrant_valued='good'), Fact(net_income_valued='loss'), Fact(roe_valued='low'))
    def ipo_rule_964(self):
        self.declare(Fact(recommendation='Warrant menunjukkan kondisi baik. Laba bersih menunjukkan kerugian. ROE menunjukkan keuntungan yang rendah.'))


    @Rule(Fact(warrant_valued='good'), Fact(per_valued='low'), Fact(der_valued='high'))
    def ipo_rule_965(self):
        self.declare(Fact(recommendation='Warrant menunjukkan kondisi baik. PER berada di tingkat yang rendah. DER menunjukkan tingkat hutang yang tinggi.'))


    @Rule(Fact(warrant_valued='good'), Fact(per_valued='low'), Fact(roa_valued='low'))
    def ipo_rule_966(self):
        self.declare(Fact(recommendation='Warrant menunjukkan kondisi baik. PER berada di tingkat yang rendah. ROA menunjukkan efisiensi rendah.'))


    @Rule(Fact(warrant_valued='good'), Fact(per_valued='low'), Fact(roe_valued='low'))
    def ipo_rule_967(self):
        self.declare(Fact(recommendation='Warrant menunjukkan kondisi baik. PER berada di tingkat yang rendah. ROE menunjukkan keuntungan yang rendah.'))


    @Rule(Fact(warrant_valued='good'), Fact(der_valued='high'), Fact(roa_valued='low'))
    def ipo_rule_968(self):
        self.declare(Fact(recommendation='Warrant menunjukkan kondisi baik. DER menunjukkan tingkat hutang yang tinggi. ROA menunjukkan efisiensi rendah.'))


    @Rule(Fact(warrant_valued='good'), Fact(der_valued='high'), Fact(roe_valued='low'))
    def ipo_rule_969(self):
        self.declare(Fact(recommendation='Warrant menunjukkan kondisi baik. DER menunjukkan tingkat hutang yang tinggi. ROE menunjukkan keuntungan yang rendah.'))


    @Rule(Fact(warrant_valued='good'), Fact(roa_valued='low'), Fact(roe_valued='low'))
    def ipo_rule_970(self):
        self.declare(Fact(recommendation='Warrant menunjukkan kondisi baik. ROA menunjukkan efisiensi rendah. ROE menunjukkan keuntungan yang rendah.'))


    @Rule(Fact(net_income_valued='loss'), Fact(per_valued='low'), Fact(der_valued='high'))
    def ipo_rule_971(self):
        self.declare(Fact(recommendation='Laba bersih menunjukkan kerugian. PER berada di tingkat yang rendah. DER menunjukkan tingkat hutang yang tinggi.'))


    @Rule(Fact(net_income_valued='loss'), Fact(per_valued='low'), Fact(roa_valued='low'))
    def ipo_rule_972(self):
        self.declare(Fact(recommendation='Laba bersih menunjukkan kerugian. PER berada di tingkat yang rendah. ROA menunjukkan efisiensi rendah.'))


    @Rule(Fact(net_income_valued='loss'), Fact(per_valued='low'), Fact(roe_valued='low'))
    def ipo_rule_973(self):
        self.declare(Fact(recommendation='Laba bersih menunjukkan kerugian. PER berada di tingkat yang rendah. ROE menunjukkan keuntungan yang rendah.'))


    @Rule(Fact(net_income_valued='loss'), Fact(der_valued='high'), Fact(roa_valued='low'))
    def ipo_rule_974(self):
        self.declare(Fact(recommendation='Laba bersih menunjukkan kerugian. DER menunjukkan tingkat hutang yang tinggi. ROA menunjukkan efisiensi rendah.'))


    @Rule(Fact(net_income_valued='loss'), Fact(der_valued='high'), Fact(roe_valued='low'))
    def ipo_rule_975(self):
        self.declare(Fact(recommendation='Laba bersih menunjukkan kerugian. DER menunjukkan tingkat hutang yang tinggi. ROE menunjukkan keuntungan yang rendah.'))


    @Rule(Fact(net_income_valued='loss'), Fact(roa_valued='low'), Fact(roe_valued='low'))
    def ipo_rule_976(self):
        self.declare(Fact(recommendation='Laba bersih menunjukkan kerugian. ROA menunjukkan efisiensi rendah. ROE menunjukkan keuntungan yang rendah.'))


    @Rule(Fact(per_valued='low'), Fact(der_valued='high'), Fact(roa_valued='low'))
    def ipo_rule_977(self):
        self.declare(Fact(recommendation='PER berada di tingkat yang rendah. DER menunjukkan tingkat hutang yang tinggi. ROA menunjukkan efisiensi rendah.'))


    @Rule(Fact(per_valued='low'), Fact(der_valued='high'), Fact(roe_valued='low'))
    def ipo_rule_978(self):
        self.declare(Fact(recommendation='PER berada di tingkat yang rendah. DER menunjukkan tingkat hutang yang tinggi. ROE menunjukkan keuntungan yang rendah.'))


    @Rule(Fact(per_valued='low'), Fact(roa_valued='low'), Fact(roe_valued='low'))
    def ipo_rule_979(self):
        self.declare(Fact(recommendation='PER berada di tingkat yang rendah. ROA menunjukkan efisiensi rendah. ROE menunjukkan keuntungan yang rendah.'))


    @Rule(Fact(der_valued='high'), Fact(roa_valued='low'), Fact(roe_valued='low'))
    def ipo_rule_980(self):
        self.declare(Fact(recommendation='DER menunjukkan tingkat hutang yang tinggi. ROA menunjukkan efisiensi rendah. ROE menunjukkan keuntungan yang rendah.'))


    @Rule(Fact(underwriter_valued='good'), Fact(warrant_valued='good'), Fact(net_income_valued='loss'))
    def ipo_rule_981(self):
        self.declare(Fact(recommendation='Underwriter berkualitas baik. Warrant menunjukkan kondisi baik. Laba bersih menunjukkan kerugian.'))


    @Rule(Fact(underwriter_valued='good'), Fact(warrant_valued='good'), Fact(per_valued='low'))
    def ipo_rule_982(self):
        self.declare(Fact(recommendation='Underwriter berkualitas baik. Warrant menunjukkan kondisi baik. PER berada di tingkat yang rendah.'))


    @Rule(Fact(underwriter_valued='good'), Fact(warrant_valued='good'), Fact(der_valued='low'))
    def ipo_rule_983(self):
        self.declare(Fact(recommendation='Underwriter berkualitas baik. Warrant menunjukkan kondisi baik. DER menunjukkan tingkat hutang yang rendah.'))


    @Rule(Fact(underwriter_valued='good'), Fact(warrant_valued='good'), Fact(roa_valued='high'))
    def ipo_rule_984(self):
        self.declare(Fact(recommendation='Underwriter berkualitas baik. Warrant menunjukkan kondisi baik. ROA menunjukkan efisiensi tinggi.'))


    @Rule(Fact(underwriter_valued='good'), Fact(warrant_valued='good'), Fact(roe_valued='high'))
    def ipo_rule_985(self):
        self.declare(Fact(recommendation='Underwriter berkualitas baik. Warrant menunjukkan kondisi baik. ROE menunjukkan keuntungan yang tinggi.'))


    @Rule(Fact(underwriter_valued='good'), Fact(net_income_valued='loss'), Fact(per_valued='low'))
    def ipo_rule_986(self):
        self.declare(Fact(recommendation='Underwriter berkualitas baik. Laba bersih menunjukkan kerugian. PER berada di tingkat yang rendah.'))


    @Rule(Fact(underwriter_valued='good'), Fact(net_income_valued='loss'), Fact(der_valued='low'))
    def ipo_rule_987(self):
        self.declare(Fact(recommendation='Underwriter berkualitas baik. Laba bersih menunjukkan kerugian. DER menunjukkan tingkat hutang yang rendah.'))


    @Rule(Fact(underwriter_valued='good'), Fact(net_income_valued='loss'), Fact(roa_valued='high'))
    def ipo_rule_988(self):
        self.declare(Fact(recommendation='Underwriter berkualitas baik. Laba bersih menunjukkan kerugian. ROA menunjukkan efisiensi tinggi.'))


    @Rule(Fact(underwriter_valued='good'), Fact(net_income_valued='loss'), Fact(roe_valued='high'))
    def ipo_rule_989(self):
        self.declare(Fact(recommendation='Underwriter berkualitas baik. Laba bersih menunjukkan kerugian. ROE menunjukkan keuntungan yang tinggi.'))


    @Rule(Fact(underwriter_valued='good'), Fact(per_valued='low'), Fact(der_valued='low'))
    def ipo_rule_990(self):
        self.declare(Fact(recommendation='Underwriter berkualitas baik. PER berada di tingkat yang rendah. DER menunjukkan tingkat hutang yang rendah.'))


    @Rule(Fact(underwriter_valued='good'), Fact(per_valued='low'), Fact(roa_valued='high'))
    def ipo_rule_991(self):
        self.declare(Fact(recommendation='Underwriter berkualitas baik. PER berada di tingkat yang rendah. ROA menunjukkan efisiensi tinggi.'))


    @Rule(Fact(underwriter_valued='good'), Fact(per_valued='low'), Fact(roe_valued='high'))
    def ipo_rule_992(self):
        self.declare(Fact(recommendation='Underwriter berkualitas baik. PER berada di tingkat yang rendah. ROE menunjukkan keuntungan yang tinggi.'))


    @Rule(Fact(underwriter_valued='good'), Fact(der_valued='low'), Fact(roa_valued='high'))
    def ipo_rule_993(self):
        self.declare(Fact(recommendation='Underwriter berkualitas baik. DER menunjukkan tingkat hutang yang rendah. ROA menunjukkan efisiensi tinggi.'))


    @Rule(Fact(underwriter_valued='good'), Fact(der_valued='low'), Fact(roe_valued='high'))
    def ipo_rule_994(self):
        self.declare(Fact(recommendation='Underwriter berkualitas baik. DER menunjukkan tingkat hutang yang rendah. ROE menunjukkan keuntungan yang tinggi.'))


    @Rule(Fact(underwriter_valued='good'), Fact(roa_valued='high'), Fact(roe_valued='high'))
    def ipo_rule_995(self):
        self.declare(Fact(recommendation='Underwriter berkualitas baik. ROA menunjukkan efisiensi tinggi. ROE menunjukkan keuntungan yang tinggi.'))


    @Rule(Fact(warrant_valued='good'), Fact(net_income_valued='loss'), Fact(per_valued='low'))
    def ipo_rule_996(self):
        self.declare(Fact(recommendation='Warrant menunjukkan kondisi baik. Laba bersih menunjukkan kerugian. PER berada di tingkat yang rendah.'))


    @Rule(Fact(warrant_valued='good'), Fact(net_income_valued='loss'), Fact(der_valued='low'))
    def ipo_rule_997(self):
        self.declare(Fact(recommendation='Warrant menunjukkan kondisi baik. Laba bersih menunjukkan kerugian. DER menunjukkan tingkat hutang yang rendah.'))


    @Rule(Fact(warrant_valued='good'), Fact(net_income_valued='loss'), Fact(roa_valued='high'))
    def ipo_rule_998(self):
        self.declare(Fact(recommendation='Warrant menunjukkan kondisi baik. Laba bersih menunjukkan kerugian. ROA menunjukkan efisiensi tinggi.'))


    @Rule(Fact(warrant_valued='good'), Fact(net_income_valued='loss'), Fact(roe_valued='high'))
    def ipo_rule_999(self):
        self.declare(Fact(recommendation='Warrant menunjukkan kondisi baik. Laba bersih menunjukkan kerugian. ROE menunjukkan keuntungan yang tinggi.'))


    @Rule(Fact(warrant_valued='good'), Fact(per_valued='low'), Fact(der_valued='low'))
    def ipo_rule_1000(self):
        self.declare(Fact(recommendation='Warrant menunjukkan kondisi baik. PER berada di tingkat yang rendah. DER menunjukkan tingkat hutang yang rendah.'))


    @Rule(Fact(warrant_valued='good'), Fact(per_valued='low'), Fact(roa_valued='high'))
    def ipo_rule_1001(self):
        self.declare(Fact(recommendation='Warrant menunjukkan kondisi baik. PER berada di tingkat yang rendah. ROA menunjukkan efisiensi tinggi.'))


    @Rule(Fact(warrant_valued='good'), Fact(per_valued='low'), Fact(roe_valued='high'))
    def ipo_rule_1002(self):
        self.declare(Fact(recommendation='Warrant menunjukkan kondisi baik. PER berada di tingkat yang rendah. ROE menunjukkan keuntungan yang tinggi.'))


    @Rule(Fact(warrant_valued='good'), Fact(der_valued='low'), Fact(roa_valued='high'))
    def ipo_rule_1003(self):
        self.declare(Fact(recommendation='Warrant menunjukkan kondisi baik. DER menunjukkan tingkat hutang yang rendah. ROA menunjukkan efisiensi tinggi.'))


    @Rule(Fact(warrant_valued='good'), Fact(der_valued='low'), Fact(roe_valued='high'))
    def ipo_rule_1004(self):
        self.declare(Fact(recommendation='Warrant menunjukkan kondisi baik. DER menunjukkan tingkat hutang yang rendah. ROE menunjukkan keuntungan yang tinggi.'))


    @Rule(Fact(warrant_valued='good'), Fact(roa_valued='high'), Fact(roe_valued='high'))
    def ipo_rule_1005(self):
        self.declare(Fact(recommendation='Warrant menunjukkan kondisi baik. ROA menunjukkan efisiensi tinggi. ROE menunjukkan keuntungan yang tinggi.'))


    @Rule(Fact(net_income_valued='loss'), Fact(per_valued='low'), Fact(der_valued='low'))
    def ipo_rule_1006(self):
        self.declare(Fact(recommendation='Laba bersih menunjukkan kerugian. PER berada di tingkat yang rendah. DER menunjukkan tingkat hutang yang rendah.'))


    @Rule(Fact(net_income_valued='loss'), Fact(per_valued='low'), Fact(roa_valued='high'))
    def ipo_rule_1007(self):
        self.declare(Fact(recommendation='Laba bersih menunjukkan kerugian. PER berada di tingkat yang rendah. ROA menunjukkan efisiensi tinggi.'))


    @Rule(Fact(net_income_valued='loss'), Fact(per_valued='low'), Fact(roe_valued='high'))
    def ipo_rule_1008(self):
        self.declare(Fact(recommendation='Laba bersih menunjukkan kerugian. PER berada di tingkat yang rendah. ROE menunjukkan keuntungan yang tinggi.'))


    @Rule(Fact(net_income_valued='loss'), Fact(der_valued='low'), Fact(roa_valued='high'))
    def ipo_rule_1009(self):
        self.declare(Fact(recommendation='Laba bersih menunjukkan kerugian. DER menunjukkan tingkat hutang yang rendah. ROA menunjukkan efisiensi tinggi.'))


    @Rule(Fact(net_income_valued='loss'), Fact(der_valued='low'), Fact(roe_valued='high'))
    def ipo_rule_1010(self):
        self.declare(Fact(recommendation='Laba bersih menunjukkan kerugian. DER menunjukkan tingkat hutang yang rendah. ROE menunjukkan keuntungan yang tinggi.'))


    @Rule(Fact(net_income_valued='loss'), Fact(roa_valued='high'), Fact(roe_valued='high'))
    def ipo_rule_1011(self):
        self.declare(Fact(recommendation='Laba bersih menunjukkan kerugian. ROA menunjukkan efisiensi tinggi. ROE menunjukkan keuntungan yang tinggi.'))


    @Rule(Fact(per_valued='low'), Fact(der_valued='low'), Fact(roa_valued='high'))
    def ipo_rule_1012(self):
        self.declare(Fact(recommendation='PER berada di tingkat yang rendah. DER menunjukkan tingkat hutang yang rendah. ROA menunjukkan efisiensi tinggi.'))


    @Rule(Fact(per_valued='low'), Fact(der_valued='low'), Fact(roe_valued='high'))
    def ipo_rule_1013(self):
        self.declare(Fact(recommendation='PER berada di tingkat yang rendah. DER menunjukkan tingkat hutang yang rendah. ROE menunjukkan keuntungan yang tinggi.'))


    @Rule(Fact(per_valued='low'), Fact(roa_valued='high'), Fact(roe_valued='high'))
    def ipo_rule_1014(self):
        self.declare(Fact(recommendation='PER berada di tingkat yang rendah. ROA menunjukkan efisiensi tinggi. ROE menunjukkan keuntungan yang tinggi.'))


    @Rule(Fact(der_valued='low'), Fact(roa_valued='high'), Fact(roe_valued='high'))
    def ipo_rule_1015(self):
        self.declare(Fact(recommendation='DER menunjukkan tingkat hutang yang rendah. ROA menunjukkan efisiensi tinggi. ROE menunjukkan keuntungan yang tinggi.'))


    @Rule(Fact(underwriter_valued='good'), Fact(warrant_valued='good'), Fact(net_income_valued='loss'))
    def ipo_rule_1016(self):
        self.declare(Fact(recommendation='Underwriter berkualitas baik. Warrant menunjukkan kondisi baik. Laba bersih menunjukkan kerugian.'))


    @Rule(Fact(underwriter_valued='good'), Fact(warrant_valued='good'), Fact(per_valued='low'))
    def ipo_rule_1017(self):
        self.declare(Fact(recommendation='Underwriter berkualitas baik. Warrant menunjukkan kondisi baik. PER berada di tingkat yang rendah.'))


    @Rule(Fact(underwriter_valued='good'), Fact(warrant_valued='good'), Fact(der_valued='low'))
    def ipo_rule_1018(self):
        self.declare(Fact(recommendation='Underwriter berkualitas baik. Warrant menunjukkan kondisi baik. DER menunjukkan tingkat hutang yang rendah.'))


    @Rule(Fact(underwriter_valued='good'), Fact(warrant_valued='good'), Fact(roa_valued='high'))
    def ipo_rule_1019(self):
        self.declare(Fact(recommendation='Underwriter berkualitas baik. Warrant menunjukkan kondisi baik. ROA menunjukkan efisiensi tinggi.'))


    @Rule(Fact(underwriter_valued='good'), Fact(warrant_valued='good'), Fact(roe_valued='low'))
    def ipo_rule_1020(self):
        self.declare(Fact(recommendation='Underwriter berkualitas baik. Warrant menunjukkan kondisi baik. ROE menunjukkan keuntungan yang rendah.'))


    @Rule(Fact(underwriter_valued='good'), Fact(net_income_valued='loss'), Fact(per_valued='low'))
    def ipo_rule_1021(self):
        self.declare(Fact(recommendation='Underwriter berkualitas baik. Laba bersih menunjukkan kerugian. PER berada di tingkat yang rendah.'))


    @Rule(Fact(underwriter_valued='good'), Fact(net_income_valued='loss'), Fact(der_valued='low'))
    def ipo_rule_1022(self):
        self.declare(Fact(recommendation='Underwriter berkualitas baik. Laba bersih menunjukkan kerugian. DER menunjukkan tingkat hutang yang rendah.'))


    @Rule(Fact(underwriter_valued='good'), Fact(net_income_valued='loss'), Fact(roa_valued='high'))
    def ipo_rule_1023(self):
        self.declare(Fact(recommendation='Underwriter berkualitas baik. Laba bersih menunjukkan kerugian. ROA menunjukkan efisiensi tinggi.'))


    @Rule(Fact(underwriter_valued='good'), Fact(net_income_valued='loss'), Fact(roe_valued='low'))
    def ipo_rule_1024(self):
        self.declare(Fact(recommendation='Underwriter berkualitas baik. Laba bersih menunjukkan kerugian. ROE menunjukkan keuntungan yang rendah.'))


    @Rule(Fact(underwriter_valued='good'), Fact(per_valued='low'), Fact(der_valued='low'))
    def ipo_rule_1025(self):
        self.declare(Fact(recommendation='Underwriter berkualitas baik. PER berada di tingkat yang rendah. DER menunjukkan tingkat hutang yang rendah.'))


    @Rule(Fact(underwriter_valued='good'), Fact(per_valued='low'), Fact(roa_valued='high'))
    def ipo_rule_1026(self):
        self.declare(Fact(recommendation='Underwriter berkualitas baik. PER berada di tingkat yang rendah. ROA menunjukkan efisiensi tinggi.'))


    @Rule(Fact(underwriter_valued='good'), Fact(per_valued='low'), Fact(roe_valued='low'))
    def ipo_rule_1027(self):
        self.declare(Fact(recommendation='Underwriter berkualitas baik. PER berada di tingkat yang rendah. ROE menunjukkan keuntungan yang rendah.'))


    @Rule(Fact(underwriter_valued='good'), Fact(der_valued='low'), Fact(roa_valued='high'))
    def ipo_rule_1028(self):
        self.declare(Fact(recommendation='Underwriter berkualitas baik. DER menunjukkan tingkat hutang yang rendah. ROA menunjukkan efisiensi tinggi.'))


    @Rule(Fact(underwriter_valued='good'), Fact(der_valued='low'), Fact(roe_valued='low'))
    def ipo_rule_1029(self):
        self.declare(Fact(recommendation='Underwriter berkualitas baik. DER menunjukkan tingkat hutang yang rendah. ROE menunjukkan keuntungan yang rendah.'))


    @Rule(Fact(underwriter_valued='good'), Fact(roa_valued='high'), Fact(roe_valued='low'))
    def ipo_rule_1030(self):
        self.declare(Fact(recommendation='Underwriter berkualitas baik. ROA menunjukkan efisiensi tinggi. ROE menunjukkan keuntungan yang rendah.'))


    @Rule(Fact(warrant_valued='good'), Fact(net_income_valued='loss'), Fact(per_valued='low'))
    def ipo_rule_1031(self):
        self.declare(Fact(recommendation='Warrant menunjukkan kondisi baik. Laba bersih menunjukkan kerugian. PER berada di tingkat yang rendah.'))


    @Rule(Fact(warrant_valued='good'), Fact(net_income_valued='loss'), Fact(der_valued='low'))
    def ipo_rule_1032(self):
        self.declare(Fact(recommendation='Warrant menunjukkan kondisi baik. Laba bersih menunjukkan kerugian. DER menunjukkan tingkat hutang yang rendah.'))


    @Rule(Fact(warrant_valued='good'), Fact(net_income_valued='loss'), Fact(roa_valued='high'))
    def ipo_rule_1033(self):
        self.declare(Fact(recommendation='Warrant menunjukkan kondisi baik. Laba bersih menunjukkan kerugian. ROA menunjukkan efisiensi tinggi.'))


    @Rule(Fact(warrant_valued='good'), Fact(net_income_valued='loss'), Fact(roe_valued='low'))
    def ipo_rule_1034(self):
        self.declare(Fact(recommendation='Warrant menunjukkan kondisi baik. Laba bersih menunjukkan kerugian. ROE menunjukkan keuntungan yang rendah.'))


    @Rule(Fact(warrant_valued='good'), Fact(per_valued='low'), Fact(der_valued='low'))
    def ipo_rule_1035(self):
        self.declare(Fact(recommendation='Warrant menunjukkan kondisi baik. PER berada di tingkat yang rendah. DER menunjukkan tingkat hutang yang rendah.'))


    @Rule(Fact(warrant_valued='good'), Fact(per_valued='low'), Fact(roa_valued='high'))
    def ipo_rule_1036(self):
        self.declare(Fact(recommendation='Warrant menunjukkan kondisi baik. PER berada di tingkat yang rendah. ROA menunjukkan efisiensi tinggi.'))


    @Rule(Fact(warrant_valued='good'), Fact(per_valued='low'), Fact(roe_valued='low'))
    def ipo_rule_1037(self):
        self.declare(Fact(recommendation='Warrant menunjukkan kondisi baik. PER berada di tingkat yang rendah. ROE menunjukkan keuntungan yang rendah.'))


    @Rule(Fact(warrant_valued='good'), Fact(der_valued='low'), Fact(roa_valued='high'))
    def ipo_rule_1038(self):
        self.declare(Fact(recommendation='Warrant menunjukkan kondisi baik. DER menunjukkan tingkat hutang yang rendah. ROA menunjukkan efisiensi tinggi.'))


    @Rule(Fact(warrant_valued='good'), Fact(der_valued='low'), Fact(roe_valued='low'))
    def ipo_rule_1039(self):
        self.declare(Fact(recommendation='Warrant menunjukkan kondisi baik. DER menunjukkan tingkat hutang yang rendah. ROE menunjukkan keuntungan yang rendah.'))


    @Rule(Fact(warrant_valued='good'), Fact(roa_valued='high'), Fact(roe_valued='low'))
    def ipo_rule_1040(self):
        self.declare(Fact(recommendation='Warrant menunjukkan kondisi baik. ROA menunjukkan efisiensi tinggi. ROE menunjukkan keuntungan yang rendah.'))


    @Rule(Fact(net_income_valued='loss'), Fact(per_valued='low'), Fact(der_valued='low'))
    def ipo_rule_1041(self):
        self.declare(Fact(recommendation='Laba bersih menunjukkan kerugian. PER berada di tingkat yang rendah. DER menunjukkan tingkat hutang yang rendah.'))


    @Rule(Fact(net_income_valued='loss'), Fact(per_valued='low'), Fact(roa_valued='high'))
    def ipo_rule_1042(self):
        self.declare(Fact(recommendation='Laba bersih menunjukkan kerugian. PER berada di tingkat yang rendah. ROA menunjukkan efisiensi tinggi.'))


    @Rule(Fact(net_income_valued='loss'), Fact(per_valued='low'), Fact(roe_valued='low'))
    def ipo_rule_1043(self):
        self.declare(Fact(recommendation='Laba bersih menunjukkan kerugian. PER berada di tingkat yang rendah. ROE menunjukkan keuntungan yang rendah.'))


    @Rule(Fact(net_income_valued='loss'), Fact(der_valued='low'), Fact(roa_valued='high'))
    def ipo_rule_1044(self):
        self.declare(Fact(recommendation='Laba bersih menunjukkan kerugian. DER menunjukkan tingkat hutang yang rendah. ROA menunjukkan efisiensi tinggi.'))


    @Rule(Fact(net_income_valued='loss'), Fact(der_valued='low'), Fact(roe_valued='low'))
    def ipo_rule_1045(self):
        self.declare(Fact(recommendation='Laba bersih menunjukkan kerugian. DER menunjukkan tingkat hutang yang rendah. ROE menunjukkan keuntungan yang rendah.'))


    @Rule(Fact(net_income_valued='loss'), Fact(roa_valued='high'), Fact(roe_valued='low'))
    def ipo_rule_1046(self):
        self.declare(Fact(recommendation='Laba bersih menunjukkan kerugian. ROA menunjukkan efisiensi tinggi. ROE menunjukkan keuntungan yang rendah.'))


    @Rule(Fact(per_valued='low'), Fact(der_valued='low'), Fact(roa_valued='high'))
    def ipo_rule_1047(self):
        self.declare(Fact(recommendation='PER berada di tingkat yang rendah. DER menunjukkan tingkat hutang yang rendah. ROA menunjukkan efisiensi tinggi.'))


    @Rule(Fact(per_valued='low'), Fact(der_valued='low'), Fact(roe_valued='low'))
    def ipo_rule_1048(self):
        self.declare(Fact(recommendation='PER berada di tingkat yang rendah. DER menunjukkan tingkat hutang yang rendah. ROE menunjukkan keuntungan yang rendah.'))


    @Rule(Fact(per_valued='low'), Fact(roa_valued='high'), Fact(roe_valued='low'))
    def ipo_rule_1049(self):
        self.declare(Fact(recommendation='PER berada di tingkat yang rendah. ROA menunjukkan efisiensi tinggi. ROE menunjukkan keuntungan yang rendah.'))


    @Rule(Fact(der_valued='low'), Fact(roa_valued='high'), Fact(roe_valued='low'))
    def ipo_rule_1050(self):
        self.declare(Fact(recommendation='DER menunjukkan tingkat hutang yang rendah. ROA menunjukkan efisiensi tinggi. ROE menunjukkan keuntungan yang rendah.'))


    @Rule(Fact(underwriter_valued='good'), Fact(warrant_valued='good'), Fact(net_income_valued='loss'))
    def ipo_rule_1051(self):
        self.declare(Fact(recommendation='Underwriter berkualitas baik. Warrant menunjukkan kondisi baik. Laba bersih menunjukkan kerugian.'))


    @Rule(Fact(underwriter_valued='good'), Fact(warrant_valued='good'), Fact(per_valued='low'))
    def ipo_rule_1052(self):
        self.declare(Fact(recommendation='Underwriter berkualitas baik. Warrant menunjukkan kondisi baik. PER berada di tingkat yang rendah.'))


    @Rule(Fact(underwriter_valued='good'), Fact(warrant_valued='good'), Fact(der_valued='low'))
    def ipo_rule_1053(self):
        self.declare(Fact(recommendation='Underwriter berkualitas baik. Warrant menunjukkan kondisi baik. DER menunjukkan tingkat hutang yang rendah.'))


    @Rule(Fact(underwriter_valued='good'), Fact(warrant_valued='good'), Fact(roa_valued='low'))
    def ipo_rule_1054(self):
        self.declare(Fact(recommendation='Underwriter berkualitas baik. Warrant menunjukkan kondisi baik. ROA menunjukkan efisiensi rendah.'))


    @Rule(Fact(underwriter_valued='good'), Fact(warrant_valued='good'), Fact(roe_valued='high'))
    def ipo_rule_1055(self):
        self.declare(Fact(recommendation='Underwriter berkualitas baik. Warrant menunjukkan kondisi baik. ROE menunjukkan keuntungan yang tinggi.'))


    @Rule(Fact(underwriter_valued='good'), Fact(net_income_valued='loss'), Fact(per_valued='low'))
    def ipo_rule_1056(self):
        self.declare(Fact(recommendation='Underwriter berkualitas baik. Laba bersih menunjukkan kerugian. PER berada di tingkat yang rendah.'))


    @Rule(Fact(underwriter_valued='good'), Fact(net_income_valued='loss'), Fact(der_valued='low'))
    def ipo_rule_1057(self):
        self.declare(Fact(recommendation='Underwriter berkualitas baik. Laba bersih menunjukkan kerugian. DER menunjukkan tingkat hutang yang rendah.'))


    @Rule(Fact(underwriter_valued='good'), Fact(net_income_valued='loss'), Fact(roa_valued='low'))
    def ipo_rule_1058(self):
        self.declare(Fact(recommendation='Underwriter berkualitas baik. Laba bersih menunjukkan kerugian. ROA menunjukkan efisiensi rendah.'))


    @Rule(Fact(underwriter_valued='good'), Fact(net_income_valued='loss'), Fact(roe_valued='high'))
    def ipo_rule_1059(self):
        self.declare(Fact(recommendation='Underwriter berkualitas baik. Laba bersih menunjukkan kerugian. ROE menunjukkan keuntungan yang tinggi.'))


    @Rule(Fact(underwriter_valued='good'), Fact(per_valued='low'), Fact(der_valued='low'))
    def ipo_rule_1060(self):
        self.declare(Fact(recommendation='Underwriter berkualitas baik. PER berada di tingkat yang rendah. DER menunjukkan tingkat hutang yang rendah.'))


    @Rule(Fact(underwriter_valued='good'), Fact(per_valued='low'), Fact(roa_valued='low'))
    def ipo_rule_1061(self):
        self.declare(Fact(recommendation='Underwriter berkualitas baik. PER berada di tingkat yang rendah. ROA menunjukkan efisiensi rendah.'))


    @Rule(Fact(underwriter_valued='good'), Fact(per_valued='low'), Fact(roe_valued='high'))
    def ipo_rule_1062(self):
        self.declare(Fact(recommendation='Underwriter berkualitas baik. PER berada di tingkat yang rendah. ROE menunjukkan keuntungan yang tinggi.'))


    @Rule(Fact(underwriter_valued='good'), Fact(der_valued='low'), Fact(roa_valued='low'))
    def ipo_rule_1063(self):
        self.declare(Fact(recommendation='Underwriter berkualitas baik. DER menunjukkan tingkat hutang yang rendah. ROA menunjukkan efisiensi rendah.'))


    @Rule(Fact(underwriter_valued='good'), Fact(der_valued='low'), Fact(roe_valued='high'))
    def ipo_rule_1064(self):
        self.declare(Fact(recommendation='Underwriter berkualitas baik. DER menunjukkan tingkat hutang yang rendah. ROE menunjukkan keuntungan yang tinggi.'))


    @Rule(Fact(underwriter_valued='good'), Fact(roa_valued='low'), Fact(roe_valued='high'))
    def ipo_rule_1065(self):
        self.declare(Fact(recommendation='Underwriter berkualitas baik. ROA menunjukkan efisiensi rendah. ROE menunjukkan keuntungan yang tinggi.'))


    @Rule(Fact(warrant_valued='good'), Fact(net_income_valued='loss'), Fact(per_valued='low'))
    def ipo_rule_1066(self):
        self.declare(Fact(recommendation='Warrant menunjukkan kondisi baik. Laba bersih menunjukkan kerugian. PER berada di tingkat yang rendah.'))


    @Rule(Fact(warrant_valued='good'), Fact(net_income_valued='loss'), Fact(der_valued='low'))
    def ipo_rule_1067(self):
        self.declare(Fact(recommendation='Warrant menunjukkan kondisi baik. Laba bersih menunjukkan kerugian. DER menunjukkan tingkat hutang yang rendah.'))


    @Rule(Fact(warrant_valued='good'), Fact(net_income_valued='loss'), Fact(roa_valued='low'))
    def ipo_rule_1068(self):
        self.declare(Fact(recommendation='Warrant menunjukkan kondisi baik. Laba bersih menunjukkan kerugian. ROA menunjukkan efisiensi rendah.'))


    @Rule(Fact(warrant_valued='good'), Fact(net_income_valued='loss'), Fact(roe_valued='high'))
    def ipo_rule_1069(self):
        self.declare(Fact(recommendation='Warrant menunjukkan kondisi baik. Laba bersih menunjukkan kerugian. ROE menunjukkan keuntungan yang tinggi.'))


    @Rule(Fact(warrant_valued='good'), Fact(per_valued='low'), Fact(der_valued='low'))
    def ipo_rule_1070(self):
        self.declare(Fact(recommendation='Warrant menunjukkan kondisi baik. PER berada di tingkat yang rendah. DER menunjukkan tingkat hutang yang rendah.'))


    @Rule(Fact(warrant_valued='good'), Fact(per_valued='low'), Fact(roa_valued='low'))
    def ipo_rule_1071(self):
        self.declare(Fact(recommendation='Warrant menunjukkan kondisi baik. PER berada di tingkat yang rendah. ROA menunjukkan efisiensi rendah.'))


    @Rule(Fact(warrant_valued='good'), Fact(per_valued='low'), Fact(roe_valued='high'))
    def ipo_rule_1072(self):
        self.declare(Fact(recommendation='Warrant menunjukkan kondisi baik. PER berada di tingkat yang rendah. ROE menunjukkan keuntungan yang tinggi.'))


    @Rule(Fact(warrant_valued='good'), Fact(der_valued='low'), Fact(roa_valued='low'))
    def ipo_rule_1073(self):
        self.declare(Fact(recommendation='Warrant menunjukkan kondisi baik. DER menunjukkan tingkat hutang yang rendah. ROA menunjukkan efisiensi rendah.'))


    @Rule(Fact(warrant_valued='good'), Fact(der_valued='low'), Fact(roe_valued='high'))
    def ipo_rule_1074(self):
        self.declare(Fact(recommendation='Warrant menunjukkan kondisi baik. DER menunjukkan tingkat hutang yang rendah. ROE menunjukkan keuntungan yang tinggi.'))


    @Rule(Fact(warrant_valued='good'), Fact(roa_valued='low'), Fact(roe_valued='high'))
    def ipo_rule_1075(self):
        self.declare(Fact(recommendation='Warrant menunjukkan kondisi baik. ROA menunjukkan efisiensi rendah. ROE menunjukkan keuntungan yang tinggi.'))


    @Rule(Fact(net_income_valued='loss'), Fact(per_valued='low'), Fact(der_valued='low'))
    def ipo_rule_1076(self):
        self.declare(Fact(recommendation='Laba bersih menunjukkan kerugian. PER berada di tingkat yang rendah. DER menunjukkan tingkat hutang yang rendah.'))


    @Rule(Fact(net_income_valued='loss'), Fact(per_valued='low'), Fact(roa_valued='low'))
    def ipo_rule_1077(self):
        self.declare(Fact(recommendation='Laba bersih menunjukkan kerugian. PER berada di tingkat yang rendah. ROA menunjukkan efisiensi rendah.'))


    @Rule(Fact(net_income_valued='loss'), Fact(per_valued='low'), Fact(roe_valued='high'))
    def ipo_rule_1078(self):
        self.declare(Fact(recommendation='Laba bersih menunjukkan kerugian. PER berada di tingkat yang rendah. ROE menunjukkan keuntungan yang tinggi.'))


    @Rule(Fact(net_income_valued='loss'), Fact(der_valued='low'), Fact(roa_valued='low'))
    def ipo_rule_1079(self):
        self.declare(Fact(recommendation='Laba bersih menunjukkan kerugian. DER menunjukkan tingkat hutang yang rendah. ROA menunjukkan efisiensi rendah.'))


    @Rule(Fact(net_income_valued='loss'), Fact(der_valued='low'), Fact(roe_valued='high'))
    def ipo_rule_1080(self):
        self.declare(Fact(recommendation='Laba bersih menunjukkan kerugian. DER menunjukkan tingkat hutang yang rendah. ROE menunjukkan keuntungan yang tinggi.'))


    @Rule(Fact(net_income_valued='loss'), Fact(roa_valued='low'), Fact(roe_valued='high'))
    def ipo_rule_1081(self):
        self.declare(Fact(recommendation='Laba bersih menunjukkan kerugian. ROA menunjukkan efisiensi rendah. ROE menunjukkan keuntungan yang tinggi.'))


    @Rule(Fact(per_valued='low'), Fact(der_valued='low'), Fact(roa_valued='low'))
    def ipo_rule_1082(self):
        self.declare(Fact(recommendation='PER berada di tingkat yang rendah. DER menunjukkan tingkat hutang yang rendah. ROA menunjukkan efisiensi rendah.'))


    @Rule(Fact(per_valued='low'), Fact(der_valued='low'), Fact(roe_valued='high'))
    def ipo_rule_1083(self):
        self.declare(Fact(recommendation='PER berada di tingkat yang rendah. DER menunjukkan tingkat hutang yang rendah. ROE menunjukkan keuntungan yang tinggi.'))


    @Rule(Fact(per_valued='low'), Fact(roa_valued='low'), Fact(roe_valued='high'))
    def ipo_rule_1084(self):
        self.declare(Fact(recommendation='PER berada di tingkat yang rendah. ROA menunjukkan efisiensi rendah. ROE menunjukkan keuntungan yang tinggi.'))


    @Rule(Fact(der_valued='low'), Fact(roa_valued='low'), Fact(roe_valued='high'))
    def ipo_rule_1085(self):
        self.declare(Fact(recommendation='DER menunjukkan tingkat hutang yang rendah. ROA menunjukkan efisiensi rendah. ROE menunjukkan keuntungan yang tinggi.'))


    @Rule(Fact(underwriter_valued='good'), Fact(warrant_valued='good'), Fact(net_income_valued='loss'))
    def ipo_rule_1086(self):
        self.declare(Fact(recommendation='Underwriter berkualitas baik. Warrant menunjukkan kondisi baik. Laba bersih menunjukkan kerugian.'))


    @Rule(Fact(underwriter_valued='good'), Fact(warrant_valued='good'), Fact(per_valued='low'))
    def ipo_rule_1087(self):
        self.declare(Fact(recommendation='Underwriter berkualitas baik. Warrant menunjukkan kondisi baik. PER berada di tingkat yang rendah.'))


    @Rule(Fact(underwriter_valued='good'), Fact(warrant_valued='good'), Fact(der_valued='low'))
    def ipo_rule_1088(self):
        self.declare(Fact(recommendation='Underwriter berkualitas baik. Warrant menunjukkan kondisi baik. DER menunjukkan tingkat hutang yang rendah.'))


    @Rule(Fact(underwriter_valued='good'), Fact(warrant_valued='good'), Fact(roa_valued='low'))
    def ipo_rule_1089(self):
        self.declare(Fact(recommendation='Underwriter berkualitas baik. Warrant menunjukkan kondisi baik. ROA menunjukkan efisiensi rendah.'))


    @Rule(Fact(underwriter_valued='good'), Fact(warrant_valued='good'), Fact(roe_valued='low'))
    def ipo_rule_1090(self):
        self.declare(Fact(recommendation='Underwriter berkualitas baik. Warrant menunjukkan kondisi baik. ROE menunjukkan keuntungan yang rendah.'))


    @Rule(Fact(underwriter_valued='good'), Fact(net_income_valued='loss'), Fact(per_valued='low'))
    def ipo_rule_1091(self):
        self.declare(Fact(recommendation='Underwriter berkualitas baik. Laba bersih menunjukkan kerugian. PER berada di tingkat yang rendah.'))


    @Rule(Fact(underwriter_valued='good'), Fact(net_income_valued='loss'), Fact(der_valued='low'))
    def ipo_rule_1092(self):
        self.declare(Fact(recommendation='Underwriter berkualitas baik. Laba bersih menunjukkan kerugian. DER menunjukkan tingkat hutang yang rendah.'))


    @Rule(Fact(underwriter_valued='good'), Fact(net_income_valued='loss'), Fact(roa_valued='low'))
    def ipo_rule_1093(self):
        self.declare(Fact(recommendation='Underwriter berkualitas baik. Laba bersih menunjukkan kerugian. ROA menunjukkan efisiensi rendah.'))


    @Rule(Fact(underwriter_valued='good'), Fact(net_income_valued='loss'), Fact(roe_valued='low'))
    def ipo_rule_1094(self):
        self.declare(Fact(recommendation='Underwriter berkualitas baik. Laba bersih menunjukkan kerugian. ROE menunjukkan keuntungan yang rendah.'))


    @Rule(Fact(underwriter_valued='good'), Fact(per_valued='low'), Fact(der_valued='low'))
    def ipo_rule_1095(self):
        self.declare(Fact(recommendation='Underwriter berkualitas baik. PER berada di tingkat yang rendah. DER menunjukkan tingkat hutang yang rendah.'))


    @Rule(Fact(underwriter_valued='good'), Fact(per_valued='low'), Fact(roa_valued='low'))
    def ipo_rule_1096(self):
        self.declare(Fact(recommendation='Underwriter berkualitas baik. PER berada di tingkat yang rendah. ROA menunjukkan efisiensi rendah.'))


    @Rule(Fact(underwriter_valued='good'), Fact(per_valued='low'), Fact(roe_valued='low'))
    def ipo_rule_1097(self):
        self.declare(Fact(recommendation='Underwriter berkualitas baik. PER berada di tingkat yang rendah. ROE menunjukkan keuntungan yang rendah.'))


    @Rule(Fact(underwriter_valued='good'), Fact(der_valued='low'), Fact(roa_valued='low'))
    def ipo_rule_1098(self):
        self.declare(Fact(recommendation='Underwriter berkualitas baik. DER menunjukkan tingkat hutang yang rendah. ROA menunjukkan efisiensi rendah.'))


    @Rule(Fact(underwriter_valued='good'), Fact(der_valued='low'), Fact(roe_valued='low'))
    def ipo_rule_1099(self):
        self.declare(Fact(recommendation='Underwriter berkualitas baik. DER menunjukkan tingkat hutang yang rendah. ROE menunjukkan keuntungan yang rendah.'))


    @Rule(Fact(underwriter_valued='good'), Fact(roa_valued='low'), Fact(roe_valued='low'))
    def ipo_rule_1100(self):
        self.declare(Fact(recommendation='Underwriter berkualitas baik. ROA menunjukkan efisiensi rendah. ROE menunjukkan keuntungan yang rendah.'))


    @Rule(Fact(warrant_valued='good'), Fact(net_income_valued='loss'), Fact(per_valued='low'))
    def ipo_rule_1101(self):
        self.declare(Fact(recommendation='Warrant menunjukkan kondisi baik. Laba bersih menunjukkan kerugian. PER berada di tingkat yang rendah.'))


    @Rule(Fact(warrant_valued='good'), Fact(net_income_valued='loss'), Fact(der_valued='low'))
    def ipo_rule_1102(self):
        self.declare(Fact(recommendation='Warrant menunjukkan kondisi baik. Laba bersih menunjukkan kerugian. DER menunjukkan tingkat hutang yang rendah.'))


    @Rule(Fact(warrant_valued='good'), Fact(net_income_valued='loss'), Fact(roa_valued='low'))
    def ipo_rule_1103(self):
        self.declare(Fact(recommendation='Warrant menunjukkan kondisi baik. Laba bersih menunjukkan kerugian. ROA menunjukkan efisiensi rendah.'))


    @Rule(Fact(warrant_valued='good'), Fact(net_income_valued='loss'), Fact(roe_valued='low'))
    def ipo_rule_1104(self):
        self.declare(Fact(recommendation='Warrant menunjukkan kondisi baik. Laba bersih menunjukkan kerugian. ROE menunjukkan keuntungan yang rendah.'))


    @Rule(Fact(warrant_valued='good'), Fact(per_valued='low'), Fact(der_valued='low'))
    def ipo_rule_1105(self):
        self.declare(Fact(recommendation='Warrant menunjukkan kondisi baik. PER berada di tingkat yang rendah. DER menunjukkan tingkat hutang yang rendah.'))


    @Rule(Fact(warrant_valued='good'), Fact(per_valued='low'), Fact(roa_valued='low'))
    def ipo_rule_1106(self):
        self.declare(Fact(recommendation='Warrant menunjukkan kondisi baik. PER berada di tingkat yang rendah. ROA menunjukkan efisiensi rendah.'))


    @Rule(Fact(warrant_valued='good'), Fact(per_valued='low'), Fact(roe_valued='low'))
    def ipo_rule_1107(self):
        self.declare(Fact(recommendation='Warrant menunjukkan kondisi baik. PER berada di tingkat yang rendah. ROE menunjukkan keuntungan yang rendah.'))


    @Rule(Fact(warrant_valued='good'), Fact(der_valued='low'), Fact(roa_valued='low'))
    def ipo_rule_1108(self):
        self.declare(Fact(recommendation='Warrant menunjukkan kondisi baik. DER menunjukkan tingkat hutang yang rendah. ROA menunjukkan efisiensi rendah.'))


    @Rule(Fact(warrant_valued='good'), Fact(der_valued='low'), Fact(roe_valued='low'))
    def ipo_rule_1109(self):
        self.declare(Fact(recommendation='Warrant menunjukkan kondisi baik. DER menunjukkan tingkat hutang yang rendah. ROE menunjukkan keuntungan yang rendah.'))


    @Rule(Fact(warrant_valued='good'), Fact(roa_valued='low'), Fact(roe_valued='low'))
    def ipo_rule_1110(self):
        self.declare(Fact(recommendation='Warrant menunjukkan kondisi baik. ROA menunjukkan efisiensi rendah. ROE menunjukkan keuntungan yang rendah.'))


    @Rule(Fact(net_income_valued='loss'), Fact(per_valued='low'), Fact(der_valued='low'))
    def ipo_rule_1111(self):
        self.declare(Fact(recommendation='Laba bersih menunjukkan kerugian. PER berada di tingkat yang rendah. DER menunjukkan tingkat hutang yang rendah.'))


    @Rule(Fact(net_income_valued='loss'), Fact(per_valued='low'), Fact(roa_valued='low'))
    def ipo_rule_1112(self):
        self.declare(Fact(recommendation='Laba bersih menunjukkan kerugian. PER berada di tingkat yang rendah. ROA menunjukkan efisiensi rendah.'))


    @Rule(Fact(net_income_valued='loss'), Fact(per_valued='low'), Fact(roe_valued='low'))
    def ipo_rule_1113(self):
        self.declare(Fact(recommendation='Laba bersih menunjukkan kerugian. PER berada di tingkat yang rendah. ROE menunjukkan keuntungan yang rendah.'))


    @Rule(Fact(net_income_valued='loss'), Fact(der_valued='low'), Fact(roa_valued='low'))
    def ipo_rule_1114(self):
        self.declare(Fact(recommendation='Laba bersih menunjukkan kerugian. DER menunjukkan tingkat hutang yang rendah. ROA menunjukkan efisiensi rendah.'))


    @Rule(Fact(net_income_valued='loss'), Fact(der_valued='low'), Fact(roe_valued='low'))
    def ipo_rule_1115(self):
        self.declare(Fact(recommendation='Laba bersih menunjukkan kerugian. DER menunjukkan tingkat hutang yang rendah. ROE menunjukkan keuntungan yang rendah.'))


    @Rule(Fact(net_income_valued='loss'), Fact(roa_valued='low'), Fact(roe_valued='low'))
    def ipo_rule_1116(self):
        self.declare(Fact(recommendation='Laba bersih menunjukkan kerugian. ROA menunjukkan efisiensi rendah. ROE menunjukkan keuntungan yang rendah.'))


    @Rule(Fact(per_valued='low'), Fact(der_valued='low'), Fact(roa_valued='low'))
    def ipo_rule_1117(self):
        self.declare(Fact(recommendation='PER berada di tingkat yang rendah. DER menunjukkan tingkat hutang yang rendah. ROA menunjukkan efisiensi rendah.'))


    @Rule(Fact(per_valued='low'), Fact(der_valued='low'), Fact(roe_valued='low'))
    def ipo_rule_1118(self):
        self.declare(Fact(recommendation='PER berada di tingkat yang rendah. DER menunjukkan tingkat hutang yang rendah. ROE menunjukkan keuntungan yang rendah.'))


    @Rule(Fact(per_valued='low'), Fact(roa_valued='low'), Fact(roe_valued='low'))
    def ipo_rule_1119(self):
        self.declare(Fact(recommendation='PER berada di tingkat yang rendah. ROA menunjukkan efisiensi rendah. ROE menunjukkan keuntungan yang rendah.'))


    @Rule(Fact(der_valued='low'), Fact(roa_valued='low'), Fact(roe_valued='low'))
    def ipo_rule_1120(self):
        self.declare(Fact(recommendation='DER menunjukkan tingkat hutang yang rendah. ROA menunjukkan efisiensi rendah. ROE menunjukkan keuntungan yang rendah.'))


    @Rule(Fact(underwriter_valued='good'), Fact(warrant_valued='bad'), Fact(net_income_valued='profit'))
    def ipo_rule_1121(self):
        self.declare(Fact(recommendation='Underwriter berkualitas baik. Warrant menunjukkan kondisi buruk. Laba bersih menunjukkan keuntungan.'))


    @Rule(Fact(underwriter_valued='good'), Fact(warrant_valued='bad'), Fact(per_valued='high'))
    def ipo_rule_1122(self):
        self.declare(Fact(recommendation='Underwriter berkualitas baik. Warrant menunjukkan kondisi buruk. PER berada di tingkat yang tinggi.'))


    @Rule(Fact(underwriter_valued='good'), Fact(warrant_valued='bad'), Fact(der_valued='high'))
    def ipo_rule_1123(self):
        self.declare(Fact(recommendation='Underwriter berkualitas baik. Warrant menunjukkan kondisi buruk. DER menunjukkan tingkat hutang yang tinggi.'))


    @Rule(Fact(underwriter_valued='good'), Fact(warrant_valued='bad'), Fact(roa_valued='high'))
    def ipo_rule_1124(self):
        self.declare(Fact(recommendation='Underwriter berkualitas baik. Warrant menunjukkan kondisi buruk. ROA menunjukkan efisiensi tinggi.'))


    @Rule(Fact(underwriter_valued='good'), Fact(warrant_valued='bad'), Fact(roe_valued='high'))
    def ipo_rule_1125(self):
        self.declare(Fact(recommendation='Underwriter berkualitas baik. Warrant menunjukkan kondisi buruk. ROE menunjukkan keuntungan yang tinggi.'))


    @Rule(Fact(underwriter_valued='good'), Fact(net_income_valued='profit'), Fact(per_valued='high'))
    def ipo_rule_1126(self):
        self.declare(Fact(recommendation='Underwriter berkualitas baik. Laba bersih menunjukkan keuntungan. PER berada di tingkat yang tinggi.'))


    @Rule(Fact(underwriter_valued='good'), Fact(net_income_valued='profit'), Fact(der_valued='high'))
    def ipo_rule_1127(self):
        self.declare(Fact(recommendation='Underwriter berkualitas baik. Laba bersih menunjukkan keuntungan. DER menunjukkan tingkat hutang yang tinggi.'))


    @Rule(Fact(underwriter_valued='good'), Fact(net_income_valued='profit'), Fact(roa_valued='high'))
    def ipo_rule_1128(self):
        self.declare(Fact(recommendation='Underwriter berkualitas baik. Laba bersih menunjukkan keuntungan. ROA menunjukkan efisiensi tinggi.'))


    @Rule(Fact(underwriter_valued='good'), Fact(net_income_valued='profit'), Fact(roe_valued='high'))
    def ipo_rule_1129(self):
        self.declare(Fact(recommendation='Underwriter berkualitas baik. Laba bersih menunjukkan keuntungan. ROE menunjukkan keuntungan yang tinggi.'))


    @Rule(Fact(underwriter_valued='good'), Fact(per_valued='high'), Fact(der_valued='high'))
    def ipo_rule_1130(self):
        self.declare(Fact(recommendation='Underwriter berkualitas baik. PER berada di tingkat yang tinggi. DER menunjukkan tingkat hutang yang tinggi.'))


    @Rule(Fact(underwriter_valued='good'), Fact(per_valued='high'), Fact(roa_valued='high'))
    def ipo_rule_1131(self):
        self.declare(Fact(recommendation='Underwriter berkualitas baik. PER berada di tingkat yang tinggi. ROA menunjukkan efisiensi tinggi.'))


    @Rule(Fact(underwriter_valued='good'), Fact(per_valued='high'), Fact(roe_valued='high'))
    def ipo_rule_1132(self):
        self.declare(Fact(recommendation='Underwriter berkualitas baik. PER berada di tingkat yang tinggi. ROE menunjukkan keuntungan yang tinggi.'))


    @Rule(Fact(underwriter_valued='good'), Fact(der_valued='high'), Fact(roa_valued='high'))
    def ipo_rule_1133(self):
        self.declare(Fact(recommendation='Underwriter berkualitas baik. DER menunjukkan tingkat hutang yang tinggi. ROA menunjukkan efisiensi tinggi.'))


    @Rule(Fact(underwriter_valued='good'), Fact(der_valued='high'), Fact(roe_valued='high'))
    def ipo_rule_1134(self):
        self.declare(Fact(recommendation='Underwriter berkualitas baik. DER menunjukkan tingkat hutang yang tinggi. ROE menunjukkan keuntungan yang tinggi.'))


    @Rule(Fact(underwriter_valued='good'), Fact(roa_valued='high'), Fact(roe_valued='high'))
    def ipo_rule_1135(self):
        self.declare(Fact(recommendation='Underwriter berkualitas baik. ROA menunjukkan efisiensi tinggi. ROE menunjukkan keuntungan yang tinggi.'))


    @Rule(Fact(warrant_valued='bad'), Fact(net_income_valued='profit'), Fact(per_valued='high'))
    def ipo_rule_1136(self):
        self.declare(Fact(recommendation='Warrant menunjukkan kondisi buruk. Laba bersih menunjukkan keuntungan. PER berada di tingkat yang tinggi.'))


    @Rule(Fact(warrant_valued='bad'), Fact(net_income_valued='profit'), Fact(der_valued='high'))
    def ipo_rule_1137(self):
        self.declare(Fact(recommendation='Warrant menunjukkan kondisi buruk. Laba bersih menunjukkan keuntungan. DER menunjukkan tingkat hutang yang tinggi.'))


    @Rule(Fact(warrant_valued='bad'), Fact(net_income_valued='profit'), Fact(roa_valued='high'))
    def ipo_rule_1138(self):
        self.declare(Fact(recommendation='Warrant menunjukkan kondisi buruk. Laba bersih menunjukkan keuntungan. ROA menunjukkan efisiensi tinggi.'))


    @Rule(Fact(warrant_valued='bad'), Fact(net_income_valued='profit'), Fact(roe_valued='high'))
    def ipo_rule_1139(self):
        self.declare(Fact(recommendation='Warrant menunjukkan kondisi buruk. Laba bersih menunjukkan keuntungan. ROE menunjukkan keuntungan yang tinggi.'))


    @Rule(Fact(warrant_valued='bad'), Fact(per_valued='high'), Fact(der_valued='high'))
    def ipo_rule_1140(self):
        self.declare(Fact(recommendation='Warrant menunjukkan kondisi buruk. PER berada di tingkat yang tinggi. DER menunjukkan tingkat hutang yang tinggi.'))


    @Rule(Fact(warrant_valued='bad'), Fact(per_valued='high'), Fact(roa_valued='high'))
    def ipo_rule_1141(self):
        self.declare(Fact(recommendation='Warrant menunjukkan kondisi buruk. PER berada di tingkat yang tinggi. ROA menunjukkan efisiensi tinggi.'))


    @Rule(Fact(warrant_valued='bad'), Fact(per_valued='high'), Fact(roe_valued='high'))
    def ipo_rule_1142(self):
        self.declare(Fact(recommendation='Warrant menunjukkan kondisi buruk. PER berada di tingkat yang tinggi. ROE menunjukkan keuntungan yang tinggi.'))


    @Rule(Fact(warrant_valued='bad'), Fact(der_valued='high'), Fact(roa_valued='high'))
    def ipo_rule_1143(self):
        self.declare(Fact(recommendation='Warrant menunjukkan kondisi buruk. DER menunjukkan tingkat hutang yang tinggi. ROA menunjukkan efisiensi tinggi.'))


    @Rule(Fact(warrant_valued='bad'), Fact(der_valued='high'), Fact(roe_valued='high'))
    def ipo_rule_1144(self):
        self.declare(Fact(recommendation='Warrant menunjukkan kondisi buruk. DER menunjukkan tingkat hutang yang tinggi. ROE menunjukkan keuntungan yang tinggi.'))


    @Rule(Fact(warrant_valued='bad'), Fact(roa_valued='high'), Fact(roe_valued='high'))
    def ipo_rule_1145(self):
        self.declare(Fact(recommendation='Warrant menunjukkan kondisi buruk. ROA menunjukkan efisiensi tinggi. ROE menunjukkan keuntungan yang tinggi.'))


    @Rule(Fact(net_income_valued='profit'), Fact(per_valued='high'), Fact(der_valued='high'))
    def ipo_rule_1146(self):
        self.declare(Fact(recommendation='Laba bersih menunjukkan keuntungan. PER berada di tingkat yang tinggi. DER menunjukkan tingkat hutang yang tinggi.'))


    @Rule(Fact(net_income_valued='profit'), Fact(per_valued='high'), Fact(roa_valued='high'))
    def ipo_rule_1147(self):
        self.declare(Fact(recommendation='Laba bersih menunjukkan keuntungan. PER berada di tingkat yang tinggi. ROA menunjukkan efisiensi tinggi.'))


    @Rule(Fact(net_income_valued='profit'), Fact(per_valued='high'), Fact(roe_valued='high'))
    def ipo_rule_1148(self):
        self.declare(Fact(recommendation='Laba bersih menunjukkan keuntungan. PER berada di tingkat yang tinggi. ROE menunjukkan keuntungan yang tinggi.'))


    @Rule(Fact(net_income_valued='profit'), Fact(der_valued='high'), Fact(roa_valued='high'))
    def ipo_rule_1149(self):
        self.declare(Fact(recommendation='Laba bersih menunjukkan keuntungan. DER menunjukkan tingkat hutang yang tinggi. ROA menunjukkan efisiensi tinggi.'))


    @Rule(Fact(net_income_valued='profit'), Fact(der_valued='high'), Fact(roe_valued='high'))
    def ipo_rule_1150(self):
        self.declare(Fact(recommendation='Laba bersih menunjukkan keuntungan. DER menunjukkan tingkat hutang yang tinggi. ROE menunjukkan keuntungan yang tinggi.'))


    @Rule(Fact(net_income_valued='profit'), Fact(roa_valued='high'), Fact(roe_valued='high'))
    def ipo_rule_1151(self):
        self.declare(Fact(recommendation='Laba bersih menunjukkan keuntungan. ROA menunjukkan efisiensi tinggi. ROE menunjukkan keuntungan yang tinggi.'))


    @Rule(Fact(per_valued='high'), Fact(der_valued='high'), Fact(roa_valued='high'))
    def ipo_rule_1152(self):
        self.declare(Fact(recommendation='PER berada di tingkat yang tinggi. DER menunjukkan tingkat hutang yang tinggi. ROA menunjukkan efisiensi tinggi.'))


    @Rule(Fact(per_valued='high'), Fact(der_valued='high'), Fact(roe_valued='high'))
    def ipo_rule_1153(self):
        self.declare(Fact(recommendation='PER berada di tingkat yang tinggi. DER menunjukkan tingkat hutang yang tinggi. ROE menunjukkan keuntungan yang tinggi.'))


    @Rule(Fact(per_valued='high'), Fact(roa_valued='high'), Fact(roe_valued='high'))
    def ipo_rule_1154(self):
        self.declare(Fact(recommendation='PER berada di tingkat yang tinggi. ROA menunjukkan efisiensi tinggi. ROE menunjukkan keuntungan yang tinggi.'))


    @Rule(Fact(der_valued='high'), Fact(roa_valued='high'), Fact(roe_valued='high'))
    def ipo_rule_1155(self):
        self.declare(Fact(recommendation='DER menunjukkan tingkat hutang yang tinggi. ROA menunjukkan efisiensi tinggi. ROE menunjukkan keuntungan yang tinggi.'))


    @Rule(Fact(underwriter_valued='good'), Fact(warrant_valued='bad'), Fact(net_income_valued='profit'))
    def ipo_rule_1156(self):
        self.declare(Fact(recommendation='Underwriter berkualitas baik. Warrant menunjukkan kondisi buruk. Laba bersih menunjukkan keuntungan.'))


    @Rule(Fact(underwriter_valued='good'), Fact(warrant_valued='bad'), Fact(per_valued='high'))
    def ipo_rule_1157(self):
        self.declare(Fact(recommendation='Underwriter berkualitas baik. Warrant menunjukkan kondisi buruk. PER berada di tingkat yang tinggi.'))


    @Rule(Fact(underwriter_valued='good'), Fact(warrant_valued='bad'), Fact(der_valued='high'))
    def ipo_rule_1158(self):
        self.declare(Fact(recommendation='Underwriter berkualitas baik. Warrant menunjukkan kondisi buruk. DER menunjukkan tingkat hutang yang tinggi.'))


    @Rule(Fact(underwriter_valued='good'), Fact(warrant_valued='bad'), Fact(roa_valued='high'))
    def ipo_rule_1159(self):
        self.declare(Fact(recommendation='Underwriter berkualitas baik. Warrant menunjukkan kondisi buruk. ROA menunjukkan efisiensi tinggi.'))


    @Rule(Fact(underwriter_valued='good'), Fact(warrant_valued='bad'), Fact(roe_valued='low'))
    def ipo_rule_1160(self):
        self.declare(Fact(recommendation='Underwriter berkualitas baik. Warrant menunjukkan kondisi buruk. ROE menunjukkan keuntungan yang rendah.'))


    @Rule(Fact(underwriter_valued='good'), Fact(net_income_valued='profit'), Fact(per_valued='high'))
    def ipo_rule_1161(self):
        self.declare(Fact(recommendation='Underwriter berkualitas baik. Laba bersih menunjukkan keuntungan. PER berada di tingkat yang tinggi.'))


    @Rule(Fact(underwriter_valued='good'), Fact(net_income_valued='profit'), Fact(der_valued='high'))
    def ipo_rule_1162(self):
        self.declare(Fact(recommendation='Underwriter berkualitas baik. Laba bersih menunjukkan keuntungan. DER menunjukkan tingkat hutang yang tinggi.'))


    @Rule(Fact(underwriter_valued='good'), Fact(net_income_valued='profit'), Fact(roa_valued='high'))
    def ipo_rule_1163(self):
        self.declare(Fact(recommendation='Underwriter berkualitas baik. Laba bersih menunjukkan keuntungan. ROA menunjukkan efisiensi tinggi.'))


    @Rule(Fact(underwriter_valued='good'), Fact(net_income_valued='profit'), Fact(roe_valued='low'))
    def ipo_rule_1164(self):
        self.declare(Fact(recommendation='Underwriter berkualitas baik. Laba bersih menunjukkan keuntungan. ROE menunjukkan keuntungan yang rendah.'))


    @Rule(Fact(underwriter_valued='good'), Fact(per_valued='high'), Fact(der_valued='high'))
    def ipo_rule_1165(self):
        self.declare(Fact(recommendation='Underwriter berkualitas baik. PER berada di tingkat yang tinggi. DER menunjukkan tingkat hutang yang tinggi.'))


    @Rule(Fact(underwriter_valued='good'), Fact(per_valued='high'), Fact(roa_valued='high'))
    def ipo_rule_1166(self):
        self.declare(Fact(recommendation='Underwriter berkualitas baik. PER berada di tingkat yang tinggi. ROA menunjukkan efisiensi tinggi.'))


    @Rule(Fact(underwriter_valued='good'), Fact(per_valued='high'), Fact(roe_valued='low'))
    def ipo_rule_1167(self):
        self.declare(Fact(recommendation='Underwriter berkualitas baik. PER berada di tingkat yang tinggi. ROE menunjukkan keuntungan yang rendah.'))


    @Rule(Fact(underwriter_valued='good'), Fact(der_valued='high'), Fact(roa_valued='high'))
    def ipo_rule_1168(self):
        self.declare(Fact(recommendation='Underwriter berkualitas baik. DER menunjukkan tingkat hutang yang tinggi. ROA menunjukkan efisiensi tinggi.'))


    @Rule(Fact(underwriter_valued='good'), Fact(der_valued='high'), Fact(roe_valued='low'))
    def ipo_rule_1169(self):
        self.declare(Fact(recommendation='Underwriter berkualitas baik. DER menunjukkan tingkat hutang yang tinggi. ROE menunjukkan keuntungan yang rendah.'))


    @Rule(Fact(underwriter_valued='good'), Fact(roa_valued='high'), Fact(roe_valued='low'))
    def ipo_rule_1170(self):
        self.declare(Fact(recommendation='Underwriter berkualitas baik. ROA menunjukkan efisiensi tinggi. ROE menunjukkan keuntungan yang rendah.'))


    @Rule(Fact(warrant_valued='bad'), Fact(net_income_valued='profit'), Fact(per_valued='high'))
    def ipo_rule_1171(self):
        self.declare(Fact(recommendation='Warrant menunjukkan kondisi buruk. Laba bersih menunjukkan keuntungan. PER berada di tingkat yang tinggi.'))


    @Rule(Fact(warrant_valued='bad'), Fact(net_income_valued='profit'), Fact(der_valued='high'))
    def ipo_rule_1172(self):
        self.declare(Fact(recommendation='Warrant menunjukkan kondisi buruk. Laba bersih menunjukkan keuntungan. DER menunjukkan tingkat hutang yang tinggi.'))


    @Rule(Fact(warrant_valued='bad'), Fact(net_income_valued='profit'), Fact(roa_valued='high'))
    def ipo_rule_1173(self):
        self.declare(Fact(recommendation='Warrant menunjukkan kondisi buruk. Laba bersih menunjukkan keuntungan. ROA menunjukkan efisiensi tinggi.'))


    @Rule(Fact(warrant_valued='bad'), Fact(net_income_valued='profit'), Fact(roe_valued='low'))
    def ipo_rule_1174(self):
        self.declare(Fact(recommendation='Warrant menunjukkan kondisi buruk. Laba bersih menunjukkan keuntungan. ROE menunjukkan keuntungan yang rendah.'))


    @Rule(Fact(warrant_valued='bad'), Fact(per_valued='high'), Fact(der_valued='high'))
    def ipo_rule_1175(self):
        self.declare(Fact(recommendation='Warrant menunjukkan kondisi buruk. PER berada di tingkat yang tinggi. DER menunjukkan tingkat hutang yang tinggi.'))


    @Rule(Fact(warrant_valued='bad'), Fact(per_valued='high'), Fact(roa_valued='high'))
    def ipo_rule_1176(self):
        self.declare(Fact(recommendation='Warrant menunjukkan kondisi buruk. PER berada di tingkat yang tinggi. ROA menunjukkan efisiensi tinggi.'))


    @Rule(Fact(warrant_valued='bad'), Fact(per_valued='high'), Fact(roe_valued='low'))
    def ipo_rule_1177(self):
        self.declare(Fact(recommendation='Warrant menunjukkan kondisi buruk. PER berada di tingkat yang tinggi. ROE menunjukkan keuntungan yang rendah.'))


    @Rule(Fact(warrant_valued='bad'), Fact(der_valued='high'), Fact(roa_valued='high'))
    def ipo_rule_1178(self):
        self.declare(Fact(recommendation='Warrant menunjukkan kondisi buruk. DER menunjukkan tingkat hutang yang tinggi. ROA menunjukkan efisiensi tinggi.'))


    @Rule(Fact(warrant_valued='bad'), Fact(der_valued='high'), Fact(roe_valued='low'))
    def ipo_rule_1179(self):
        self.declare(Fact(recommendation='Warrant menunjukkan kondisi buruk. DER menunjukkan tingkat hutang yang tinggi. ROE menunjukkan keuntungan yang rendah.'))


    @Rule(Fact(warrant_valued='bad'), Fact(roa_valued='high'), Fact(roe_valued='low'))
    def ipo_rule_1180(self):
        self.declare(Fact(recommendation='Warrant menunjukkan kondisi buruk. ROA menunjukkan efisiensi tinggi. ROE menunjukkan keuntungan yang rendah.'))


    @Rule(Fact(net_income_valued='profit'), Fact(per_valued='high'), Fact(der_valued='high'))
    def ipo_rule_1181(self):
        self.declare(Fact(recommendation='Laba bersih menunjukkan keuntungan. PER berada di tingkat yang tinggi. DER menunjukkan tingkat hutang yang tinggi.'))


    @Rule(Fact(net_income_valued='profit'), Fact(per_valued='high'), Fact(roa_valued='high'))
    def ipo_rule_1182(self):
        self.declare(Fact(recommendation='Laba bersih menunjukkan keuntungan. PER berada di tingkat yang tinggi. ROA menunjukkan efisiensi tinggi.'))


    @Rule(Fact(net_income_valued='profit'), Fact(per_valued='high'), Fact(roe_valued='low'))
    def ipo_rule_1183(self):
        self.declare(Fact(recommendation='Laba bersih menunjukkan keuntungan. PER berada di tingkat yang tinggi. ROE menunjukkan keuntungan yang rendah.'))


    @Rule(Fact(net_income_valued='profit'), Fact(der_valued='high'), Fact(roa_valued='high'))
    def ipo_rule_1184(self):
        self.declare(Fact(recommendation='Laba bersih menunjukkan keuntungan. DER menunjukkan tingkat hutang yang tinggi. ROA menunjukkan efisiensi tinggi.'))


    @Rule(Fact(net_income_valued='profit'), Fact(der_valued='high'), Fact(roe_valued='low'))
    def ipo_rule_1185(self):
        self.declare(Fact(recommendation='Laba bersih menunjukkan keuntungan. DER menunjukkan tingkat hutang yang tinggi. ROE menunjukkan keuntungan yang rendah.'))


    @Rule(Fact(net_income_valued='profit'), Fact(roa_valued='high'), Fact(roe_valued='low'))
    def ipo_rule_1186(self):
        self.declare(Fact(recommendation='Laba bersih menunjukkan keuntungan. ROA menunjukkan efisiensi tinggi. ROE menunjukkan keuntungan yang rendah.'))


    @Rule(Fact(per_valued='high'), Fact(der_valued='high'), Fact(roa_valued='high'))
    def ipo_rule_1187(self):
        self.declare(Fact(recommendation='PER berada di tingkat yang tinggi. DER menunjukkan tingkat hutang yang tinggi. ROA menunjukkan efisiensi tinggi.'))


    @Rule(Fact(per_valued='high'), Fact(der_valued='high'), Fact(roe_valued='low'))
    def ipo_rule_1188(self):
        self.declare(Fact(recommendation='PER berada di tingkat yang tinggi. DER menunjukkan tingkat hutang yang tinggi. ROE menunjukkan keuntungan yang rendah.'))


    @Rule(Fact(per_valued='high'), Fact(roa_valued='high'), Fact(roe_valued='low'))
    def ipo_rule_1189(self):
        self.declare(Fact(recommendation='PER berada di tingkat yang tinggi. ROA menunjukkan efisiensi tinggi. ROE menunjukkan keuntungan yang rendah.'))


    @Rule(Fact(der_valued='high'), Fact(roa_valued='high'), Fact(roe_valued='low'))
    def ipo_rule_1190(self):
        self.declare(Fact(recommendation='DER menunjukkan tingkat hutang yang tinggi. ROA menunjukkan efisiensi tinggi. ROE menunjukkan keuntungan yang rendah.'))


    @Rule(Fact(underwriter_valued='good'), Fact(warrant_valued='bad'), Fact(net_income_valued='profit'))
    def ipo_rule_1191(self):
        self.declare(Fact(recommendation='Underwriter berkualitas baik. Warrant menunjukkan kondisi buruk. Laba bersih menunjukkan keuntungan.'))


    @Rule(Fact(underwriter_valued='good'), Fact(warrant_valued='bad'), Fact(per_valued='high'))
    def ipo_rule_1192(self):
        self.declare(Fact(recommendation='Underwriter berkualitas baik. Warrant menunjukkan kondisi buruk. PER berada di tingkat yang tinggi.'))


    @Rule(Fact(underwriter_valued='good'), Fact(warrant_valued='bad'), Fact(der_valued='high'))
    def ipo_rule_1193(self):
        self.declare(Fact(recommendation='Underwriter berkualitas baik. Warrant menunjukkan kondisi buruk. DER menunjukkan tingkat hutang yang tinggi.'))


    @Rule(Fact(underwriter_valued='good'), Fact(warrant_valued='bad'), Fact(roa_valued='low'))
    def ipo_rule_1194(self):
        self.declare(Fact(recommendation='Underwriter berkualitas baik. Warrant menunjukkan kondisi buruk. ROA menunjukkan efisiensi rendah.'))


    @Rule(Fact(underwriter_valued='good'), Fact(warrant_valued='bad'), Fact(roe_valued='high'))
    def ipo_rule_1195(self):
        self.declare(Fact(recommendation='Underwriter berkualitas baik. Warrant menunjukkan kondisi buruk. ROE menunjukkan keuntungan yang tinggi.'))


    @Rule(Fact(underwriter_valued='good'), Fact(net_income_valued='profit'), Fact(per_valued='high'))
    def ipo_rule_1196(self):
        self.declare(Fact(recommendation='Underwriter berkualitas baik. Laba bersih menunjukkan keuntungan. PER berada di tingkat yang tinggi.'))


    @Rule(Fact(underwriter_valued='good'), Fact(net_income_valued='profit'), Fact(der_valued='high'))
    def ipo_rule_1197(self):
        self.declare(Fact(recommendation='Underwriter berkualitas baik. Laba bersih menunjukkan keuntungan. DER menunjukkan tingkat hutang yang tinggi.'))


    @Rule(Fact(underwriter_valued='good'), Fact(net_income_valued='profit'), Fact(roa_valued='low'))
    def ipo_rule_1198(self):
        self.declare(Fact(recommendation='Underwriter berkualitas baik. Laba bersih menunjukkan keuntungan. ROA menunjukkan efisiensi rendah.'))


    @Rule(Fact(underwriter_valued='good'), Fact(net_income_valued='profit'), Fact(roe_valued='high'))
    def ipo_rule_1199(self):
        self.declare(Fact(recommendation='Underwriter berkualitas baik. Laba bersih menunjukkan keuntungan. ROE menunjukkan keuntungan yang tinggi.'))


    @Rule(Fact(underwriter_valued='good'), Fact(per_valued='high'), Fact(der_valued='high'))
    def ipo_rule_1200(self):
        self.declare(Fact(recommendation='Underwriter berkualitas baik. PER berada di tingkat yang tinggi. DER menunjukkan tingkat hutang yang tinggi.'))


    @Rule(Fact(underwriter_valued='good'), Fact(per_valued='high'), Fact(roa_valued='low'))
    def ipo_rule_1201(self):
        self.declare(Fact(recommendation='Underwriter berkualitas baik. PER berada di tingkat yang tinggi. ROA menunjukkan efisiensi rendah.'))


    @Rule(Fact(underwriter_valued='good'), Fact(per_valued='high'), Fact(roe_valued='high'))
    def ipo_rule_1202(self):
        self.declare(Fact(recommendation='Underwriter berkualitas baik. PER berada di tingkat yang tinggi. ROE menunjukkan keuntungan yang tinggi.'))


    @Rule(Fact(underwriter_valued='good'), Fact(der_valued='high'), Fact(roa_valued='low'))
    def ipo_rule_1203(self):
        self.declare(Fact(recommendation='Underwriter berkualitas baik. DER menunjukkan tingkat hutang yang tinggi. ROA menunjukkan efisiensi rendah.'))


    @Rule(Fact(underwriter_valued='good'), Fact(der_valued='high'), Fact(roe_valued='high'))
    def ipo_rule_1204(self):
        self.declare(Fact(recommendation='Underwriter berkualitas baik. DER menunjukkan tingkat hutang yang tinggi. ROE menunjukkan keuntungan yang tinggi.'))


    @Rule(Fact(underwriter_valued='good'), Fact(roa_valued='low'), Fact(roe_valued='high'))
    def ipo_rule_1205(self):
        self.declare(Fact(recommendation='Underwriter berkualitas baik. ROA menunjukkan efisiensi rendah. ROE menunjukkan keuntungan yang tinggi.'))


    @Rule(Fact(warrant_valued='bad'), Fact(net_income_valued='profit'), Fact(per_valued='high'))
    def ipo_rule_1206(self):
        self.declare(Fact(recommendation='Warrant menunjukkan kondisi buruk. Laba bersih menunjukkan keuntungan. PER berada di tingkat yang tinggi.'))


    @Rule(Fact(warrant_valued='bad'), Fact(net_income_valued='profit'), Fact(der_valued='high'))
    def ipo_rule_1207(self):
        self.declare(Fact(recommendation='Warrant menunjukkan kondisi buruk. Laba bersih menunjukkan keuntungan. DER menunjukkan tingkat hutang yang tinggi.'))


    @Rule(Fact(warrant_valued='bad'), Fact(net_income_valued='profit'), Fact(roa_valued='low'))
    def ipo_rule_1208(self):
        self.declare(Fact(recommendation='Warrant menunjukkan kondisi buruk. Laba bersih menunjukkan keuntungan. ROA menunjukkan efisiensi rendah.'))


    @Rule(Fact(warrant_valued='bad'), Fact(net_income_valued='profit'), Fact(roe_valued='high'))
    def ipo_rule_1209(self):
        self.declare(Fact(recommendation='Warrant menunjukkan kondisi buruk. Laba bersih menunjukkan keuntungan. ROE menunjukkan keuntungan yang tinggi.'))


    @Rule(Fact(warrant_valued='bad'), Fact(per_valued='high'), Fact(der_valued='high'))
    def ipo_rule_1210(self):
        self.declare(Fact(recommendation='Warrant menunjukkan kondisi buruk. PER berada di tingkat yang tinggi. DER menunjukkan tingkat hutang yang tinggi.'))


    @Rule(Fact(warrant_valued='bad'), Fact(per_valued='high'), Fact(roa_valued='low'))
    def ipo_rule_1211(self):
        self.declare(Fact(recommendation='Warrant menunjukkan kondisi buruk. PER berada di tingkat yang tinggi. ROA menunjukkan efisiensi rendah.'))


    @Rule(Fact(warrant_valued='bad'), Fact(per_valued='high'), Fact(roe_valued='high'))
    def ipo_rule_1212(self):
        self.declare(Fact(recommendation='Warrant menunjukkan kondisi buruk. PER berada di tingkat yang tinggi. ROE menunjukkan keuntungan yang tinggi.'))


    @Rule(Fact(warrant_valued='bad'), Fact(der_valued='high'), Fact(roa_valued='low'))
    def ipo_rule_1213(self):
        self.declare(Fact(recommendation='Warrant menunjukkan kondisi buruk. DER menunjukkan tingkat hutang yang tinggi. ROA menunjukkan efisiensi rendah.'))


    @Rule(Fact(warrant_valued='bad'), Fact(der_valued='high'), Fact(roe_valued='high'))
    def ipo_rule_1214(self):
        self.declare(Fact(recommendation='Warrant menunjukkan kondisi buruk. DER menunjukkan tingkat hutang yang tinggi. ROE menunjukkan keuntungan yang tinggi.'))


    @Rule(Fact(warrant_valued='bad'), Fact(roa_valued='low'), Fact(roe_valued='high'))
    def ipo_rule_1215(self):
        self.declare(Fact(recommendation='Warrant menunjukkan kondisi buruk. ROA menunjukkan efisiensi rendah. ROE menunjukkan keuntungan yang tinggi.'))


    @Rule(Fact(net_income_valued='profit'), Fact(per_valued='high'), Fact(der_valued='high'))
    def ipo_rule_1216(self):
        self.declare(Fact(recommendation='Laba bersih menunjukkan keuntungan. PER berada di tingkat yang tinggi. DER menunjukkan tingkat hutang yang tinggi.'))


    @Rule(Fact(net_income_valued='profit'), Fact(per_valued='high'), Fact(roa_valued='low'))
    def ipo_rule_1217(self):
        self.declare(Fact(recommendation='Laba bersih menunjukkan keuntungan. PER berada di tingkat yang tinggi. ROA menunjukkan efisiensi rendah.'))


    @Rule(Fact(net_income_valued='profit'), Fact(per_valued='high'), Fact(roe_valued='high'))
    def ipo_rule_1218(self):
        self.declare(Fact(recommendation='Laba bersih menunjukkan keuntungan. PER berada di tingkat yang tinggi. ROE menunjukkan keuntungan yang tinggi.'))


    @Rule(Fact(net_income_valued='profit'), Fact(der_valued='high'), Fact(roa_valued='low'))
    def ipo_rule_1219(self):
        self.declare(Fact(recommendation='Laba bersih menunjukkan keuntungan. DER menunjukkan tingkat hutang yang tinggi. ROA menunjukkan efisiensi rendah.'))


    @Rule(Fact(net_income_valued='profit'), Fact(der_valued='high'), Fact(roe_valued='high'))
    def ipo_rule_1220(self):
        self.declare(Fact(recommendation='Laba bersih menunjukkan keuntungan. DER menunjukkan tingkat hutang yang tinggi. ROE menunjukkan keuntungan yang tinggi.'))


    @Rule(Fact(net_income_valued='profit'), Fact(roa_valued='low'), Fact(roe_valued='high'))
    def ipo_rule_1221(self):
        self.declare(Fact(recommendation='Laba bersih menunjukkan keuntungan. ROA menunjukkan efisiensi rendah. ROE menunjukkan keuntungan yang tinggi.'))


    @Rule(Fact(per_valued='high'), Fact(der_valued='high'), Fact(roa_valued='low'))
    def ipo_rule_1222(self):
        self.declare(Fact(recommendation='PER berada di tingkat yang tinggi. DER menunjukkan tingkat hutang yang tinggi. ROA menunjukkan efisiensi rendah.'))


    @Rule(Fact(per_valued='high'), Fact(der_valued='high'), Fact(roe_valued='high'))
    def ipo_rule_1223(self):
        self.declare(Fact(recommendation='PER berada di tingkat yang tinggi. DER menunjukkan tingkat hutang yang tinggi. ROE menunjukkan keuntungan yang tinggi.'))


    @Rule(Fact(per_valued='high'), Fact(roa_valued='low'), Fact(roe_valued='high'))
    def ipo_rule_1224(self):
        self.declare(Fact(recommendation='PER berada di tingkat yang tinggi. ROA menunjukkan efisiensi rendah. ROE menunjukkan keuntungan yang tinggi.'))


    @Rule(Fact(der_valued='high'), Fact(roa_valued='low'), Fact(roe_valued='high'))
    def ipo_rule_1225(self):
        self.declare(Fact(recommendation='DER menunjukkan tingkat hutang yang tinggi. ROA menunjukkan efisiensi rendah. ROE menunjukkan keuntungan yang tinggi.'))


    @Rule(Fact(underwriter_valued='good'), Fact(warrant_valued='bad'), Fact(net_income_valued='profit'))
    def ipo_rule_1226(self):
        self.declare(Fact(recommendation='Underwriter berkualitas baik. Warrant menunjukkan kondisi buruk. Laba bersih menunjukkan keuntungan.'))


    @Rule(Fact(underwriter_valued='good'), Fact(warrant_valued='bad'), Fact(per_valued='high'))
    def ipo_rule_1227(self):
        self.declare(Fact(recommendation='Underwriter berkualitas baik. Warrant menunjukkan kondisi buruk. PER berada di tingkat yang tinggi.'))


    @Rule(Fact(underwriter_valued='good'), Fact(warrant_valued='bad'), Fact(der_valued='high'))
    def ipo_rule_1228(self):
        self.declare(Fact(recommendation='Underwriter berkualitas baik. Warrant menunjukkan kondisi buruk. DER menunjukkan tingkat hutang yang tinggi.'))


    @Rule(Fact(underwriter_valued='good'), Fact(warrant_valued='bad'), Fact(roa_valued='low'))
    def ipo_rule_1229(self):
        self.declare(Fact(recommendation='Underwriter berkualitas baik. Warrant menunjukkan kondisi buruk. ROA menunjukkan efisiensi rendah.'))


    @Rule(Fact(underwriter_valued='good'), Fact(warrant_valued='bad'), Fact(roe_valued='low'))
    def ipo_rule_1230(self):
        self.declare(Fact(recommendation='Underwriter berkualitas baik. Warrant menunjukkan kondisi buruk. ROE menunjukkan keuntungan yang rendah.'))


    @Rule(Fact(underwriter_valued='good'), Fact(net_income_valued='profit'), Fact(per_valued='high'))
    def ipo_rule_1231(self):
        self.declare(Fact(recommendation='Underwriter berkualitas baik. Laba bersih menunjukkan keuntungan. PER berada di tingkat yang tinggi.'))


    @Rule(Fact(underwriter_valued='good'), Fact(net_income_valued='profit'), Fact(der_valued='high'))
    def ipo_rule_1232(self):
        self.declare(Fact(recommendation='Underwriter berkualitas baik. Laba bersih menunjukkan keuntungan. DER menunjukkan tingkat hutang yang tinggi.'))


    @Rule(Fact(underwriter_valued='good'), Fact(net_income_valued='profit'), Fact(roa_valued='low'))
    def ipo_rule_1233(self):
        self.declare(Fact(recommendation='Underwriter berkualitas baik. Laba bersih menunjukkan keuntungan. ROA menunjukkan efisiensi rendah.'))


    @Rule(Fact(underwriter_valued='good'), Fact(net_income_valued='profit'), Fact(roe_valued='low'))
    def ipo_rule_1234(self):
        self.declare(Fact(recommendation='Underwriter berkualitas baik. Laba bersih menunjukkan keuntungan. ROE menunjukkan keuntungan yang rendah.'))


    @Rule(Fact(underwriter_valued='good'), Fact(per_valued='high'), Fact(der_valued='high'))
    def ipo_rule_1235(self):
        self.declare(Fact(recommendation='Underwriter berkualitas baik. PER berada di tingkat yang tinggi. DER menunjukkan tingkat hutang yang tinggi.'))


    @Rule(Fact(underwriter_valued='good'), Fact(per_valued='high'), Fact(roa_valued='low'))
    def ipo_rule_1236(self):
        self.declare(Fact(recommendation='Underwriter berkualitas baik. PER berada di tingkat yang tinggi. ROA menunjukkan efisiensi rendah.'))


    @Rule(Fact(underwriter_valued='good'), Fact(per_valued='high'), Fact(roe_valued='low'))
    def ipo_rule_1237(self):
        self.declare(Fact(recommendation='Underwriter berkualitas baik. PER berada di tingkat yang tinggi. ROE menunjukkan keuntungan yang rendah.'))


    @Rule(Fact(underwriter_valued='good'), Fact(der_valued='high'), Fact(roa_valued='low'))
    def ipo_rule_1238(self):
        self.declare(Fact(recommendation='Underwriter berkualitas baik. DER menunjukkan tingkat hutang yang tinggi. ROA menunjukkan efisiensi rendah.'))


    @Rule(Fact(underwriter_valued='good'), Fact(der_valued='high'), Fact(roe_valued='low'))
    def ipo_rule_1239(self):
        self.declare(Fact(recommendation='Underwriter berkualitas baik. DER menunjukkan tingkat hutang yang tinggi. ROE menunjukkan keuntungan yang rendah.'))


    @Rule(Fact(underwriter_valued='good'), Fact(roa_valued='low'), Fact(roe_valued='low'))
    def ipo_rule_1240(self):
        self.declare(Fact(recommendation='Underwriter berkualitas baik. ROA menunjukkan efisiensi rendah. ROE menunjukkan keuntungan yang rendah.'))


    @Rule(Fact(warrant_valued='bad'), Fact(net_income_valued='profit'), Fact(per_valued='high'))
    def ipo_rule_1241(self):
        self.declare(Fact(recommendation='Warrant menunjukkan kondisi buruk. Laba bersih menunjukkan keuntungan. PER berada di tingkat yang tinggi.'))


    @Rule(Fact(warrant_valued='bad'), Fact(net_income_valued='profit'), Fact(der_valued='high'))
    def ipo_rule_1242(self):
        self.declare(Fact(recommendation='Warrant menunjukkan kondisi buruk. Laba bersih menunjukkan keuntungan. DER menunjukkan tingkat hutang yang tinggi.'))


    @Rule(Fact(warrant_valued='bad'), Fact(net_income_valued='profit'), Fact(roa_valued='low'))
    def ipo_rule_1243(self):
        self.declare(Fact(recommendation='Warrant menunjukkan kondisi buruk. Laba bersih menunjukkan keuntungan. ROA menunjukkan efisiensi rendah.'))


    @Rule(Fact(warrant_valued='bad'), Fact(net_income_valued='profit'), Fact(roe_valued='low'))
    def ipo_rule_1244(self):
        self.declare(Fact(recommendation='Warrant menunjukkan kondisi buruk. Laba bersih menunjukkan keuntungan. ROE menunjukkan keuntungan yang rendah.'))


    @Rule(Fact(warrant_valued='bad'), Fact(per_valued='high'), Fact(der_valued='high'))
    def ipo_rule_1245(self):
        self.declare(Fact(recommendation='Warrant menunjukkan kondisi buruk. PER berada di tingkat yang tinggi. DER menunjukkan tingkat hutang yang tinggi.'))


    @Rule(Fact(warrant_valued='bad'), Fact(per_valued='high'), Fact(roa_valued='low'))
    def ipo_rule_1246(self):
        self.declare(Fact(recommendation='Warrant menunjukkan kondisi buruk. PER berada di tingkat yang tinggi. ROA menunjukkan efisiensi rendah.'))


    @Rule(Fact(warrant_valued='bad'), Fact(per_valued='high'), Fact(roe_valued='low'))
    def ipo_rule_1247(self):
        self.declare(Fact(recommendation='Warrant menunjukkan kondisi buruk. PER berada di tingkat yang tinggi. ROE menunjukkan keuntungan yang rendah.'))


    @Rule(Fact(warrant_valued='bad'), Fact(der_valued='high'), Fact(roa_valued='low'))
    def ipo_rule_1248(self):
        self.declare(Fact(recommendation='Warrant menunjukkan kondisi buruk. DER menunjukkan tingkat hutang yang tinggi. ROA menunjukkan efisiensi rendah.'))


    @Rule(Fact(warrant_valued='bad'), Fact(der_valued='high'), Fact(roe_valued='low'))
    def ipo_rule_1249(self):
        self.declare(Fact(recommendation='Warrant menunjukkan kondisi buruk. DER menunjukkan tingkat hutang yang tinggi. ROE menunjukkan keuntungan yang rendah.'))


    @Rule(Fact(warrant_valued='bad'), Fact(roa_valued='low'), Fact(roe_valued='low'))
    def ipo_rule_1250(self):
        self.declare(Fact(recommendation='Warrant menunjukkan kondisi buruk. ROA menunjukkan efisiensi rendah. ROE menunjukkan keuntungan yang rendah.'))


    @Rule(Fact(net_income_valued='profit'), Fact(per_valued='high'), Fact(der_valued='high'))
    def ipo_rule_1251(self):
        self.declare(Fact(recommendation='Laba bersih menunjukkan keuntungan. PER berada di tingkat yang tinggi. DER menunjukkan tingkat hutang yang tinggi.'))


    @Rule(Fact(net_income_valued='profit'), Fact(per_valued='high'), Fact(roa_valued='low'))
    def ipo_rule_1252(self):
        self.declare(Fact(recommendation='Laba bersih menunjukkan keuntungan. PER berada di tingkat yang tinggi. ROA menunjukkan efisiensi rendah.'))


    @Rule(Fact(net_income_valued='profit'), Fact(per_valued='high'), Fact(roe_valued='low'))
    def ipo_rule_1253(self):
        self.declare(Fact(recommendation='Laba bersih menunjukkan keuntungan. PER berada di tingkat yang tinggi. ROE menunjukkan keuntungan yang rendah.'))


    @Rule(Fact(net_income_valued='profit'), Fact(der_valued='high'), Fact(roa_valued='low'))
    def ipo_rule_1254(self):
        self.declare(Fact(recommendation='Laba bersih menunjukkan keuntungan. DER menunjukkan tingkat hutang yang tinggi. ROA menunjukkan efisiensi rendah.'))


    @Rule(Fact(net_income_valued='profit'), Fact(der_valued='high'), Fact(roe_valued='low'))
    def ipo_rule_1255(self):
        self.declare(Fact(recommendation='Laba bersih menunjukkan keuntungan. DER menunjukkan tingkat hutang yang tinggi. ROE menunjukkan keuntungan yang rendah.'))


    @Rule(Fact(net_income_valued='profit'), Fact(roa_valued='low'), Fact(roe_valued='low'))
    def ipo_rule_1256(self):
        self.declare(Fact(recommendation='Laba bersih menunjukkan keuntungan. ROA menunjukkan efisiensi rendah. ROE menunjukkan keuntungan yang rendah.'))


    @Rule(Fact(per_valued='high'), Fact(der_valued='high'), Fact(roa_valued='low'))
    def ipo_rule_1257(self):
        self.declare(Fact(recommendation='PER berada di tingkat yang tinggi. DER menunjukkan tingkat hutang yang tinggi. ROA menunjukkan efisiensi rendah.'))


    @Rule(Fact(per_valued='high'), Fact(der_valued='high'), Fact(roe_valued='low'))
    def ipo_rule_1258(self):
        self.declare(Fact(recommendation='PER berada di tingkat yang tinggi. DER menunjukkan tingkat hutang yang tinggi. ROE menunjukkan keuntungan yang rendah.'))


    @Rule(Fact(per_valued='high'), Fact(roa_valued='low'), Fact(roe_valued='low'))
    def ipo_rule_1259(self):
        self.declare(Fact(recommendation='PER berada di tingkat yang tinggi. ROA menunjukkan efisiensi rendah. ROE menunjukkan keuntungan yang rendah.'))


    @Rule(Fact(der_valued='high'), Fact(roa_valued='low'), Fact(roe_valued='low'))
    def ipo_rule_1260(self):
        self.declare(Fact(recommendation='DER menunjukkan tingkat hutang yang tinggi. ROA menunjukkan efisiensi rendah. ROE menunjukkan keuntungan yang rendah.'))


    @Rule(Fact(underwriter_valued='good'), Fact(warrant_valued='bad'), Fact(net_income_valued='profit'))
    def ipo_rule_1261(self):
        self.declare(Fact(recommendation='Underwriter berkualitas baik. Warrant menunjukkan kondisi buruk. Laba bersih menunjukkan keuntungan.'))


    @Rule(Fact(underwriter_valued='good'), Fact(warrant_valued='bad'), Fact(per_valued='high'))
    def ipo_rule_1262(self):
        self.declare(Fact(recommendation='Underwriter berkualitas baik. Warrant menunjukkan kondisi buruk. PER berada di tingkat yang tinggi.'))


    @Rule(Fact(underwriter_valued='good'), Fact(warrant_valued='bad'), Fact(der_valued='low'))
    def ipo_rule_1263(self):
        self.declare(Fact(recommendation='Underwriter berkualitas baik. Warrant menunjukkan kondisi buruk. DER menunjukkan tingkat hutang yang rendah.'))


    @Rule(Fact(underwriter_valued='good'), Fact(warrant_valued='bad'), Fact(roa_valued='high'))
    def ipo_rule_1264(self):
        self.declare(Fact(recommendation='Underwriter berkualitas baik. Warrant menunjukkan kondisi buruk. ROA menunjukkan efisiensi tinggi.'))


    @Rule(Fact(underwriter_valued='good'), Fact(warrant_valued='bad'), Fact(roe_valued='high'))
    def ipo_rule_1265(self):
        self.declare(Fact(recommendation='Underwriter berkualitas baik. Warrant menunjukkan kondisi buruk. ROE menunjukkan keuntungan yang tinggi.'))


    @Rule(Fact(underwriter_valued='good'), Fact(net_income_valued='profit'), Fact(per_valued='high'))
    def ipo_rule_1266(self):
        self.declare(Fact(recommendation='Underwriter berkualitas baik. Laba bersih menunjukkan keuntungan. PER berada di tingkat yang tinggi.'))


    @Rule(Fact(underwriter_valued='good'), Fact(net_income_valued='profit'), Fact(der_valued='low'))
    def ipo_rule_1267(self):
        self.declare(Fact(recommendation='Underwriter berkualitas baik. Laba bersih menunjukkan keuntungan. DER menunjukkan tingkat hutang yang rendah.'))


    @Rule(Fact(underwriter_valued='good'), Fact(net_income_valued='profit'), Fact(roa_valued='high'))
    def ipo_rule_1268(self):
        self.declare(Fact(recommendation='Underwriter berkualitas baik. Laba bersih menunjukkan keuntungan. ROA menunjukkan efisiensi tinggi.'))


    @Rule(Fact(underwriter_valued='good'), Fact(net_income_valued='profit'), Fact(roe_valued='high'))
    def ipo_rule_1269(self):
        self.declare(Fact(recommendation='Underwriter berkualitas baik. Laba bersih menunjukkan keuntungan. ROE menunjukkan keuntungan yang tinggi.'))


    @Rule(Fact(underwriter_valued='good'), Fact(per_valued='high'), Fact(der_valued='low'))
    def ipo_rule_1270(self):
        self.declare(Fact(recommendation='Underwriter berkualitas baik. PER berada di tingkat yang tinggi. DER menunjukkan tingkat hutang yang rendah.'))


    @Rule(Fact(underwriter_valued='good'), Fact(per_valued='high'), Fact(roa_valued='high'))
    def ipo_rule_1271(self):
        self.declare(Fact(recommendation='Underwriter berkualitas baik. PER berada di tingkat yang tinggi. ROA menunjukkan efisiensi tinggi.'))


    @Rule(Fact(underwriter_valued='good'), Fact(per_valued='high'), Fact(roe_valued='high'))
    def ipo_rule_1272(self):
        self.declare(Fact(recommendation='Underwriter berkualitas baik. PER berada di tingkat yang tinggi. ROE menunjukkan keuntungan yang tinggi.'))


    @Rule(Fact(underwriter_valued='good'), Fact(der_valued='low'), Fact(roa_valued='high'))
    def ipo_rule_1273(self):
        self.declare(Fact(recommendation='Underwriter berkualitas baik. DER menunjukkan tingkat hutang yang rendah. ROA menunjukkan efisiensi tinggi.'))


    @Rule(Fact(underwriter_valued='good'), Fact(der_valued='low'), Fact(roe_valued='high'))
    def ipo_rule_1274(self):
        self.declare(Fact(recommendation='Underwriter berkualitas baik. DER menunjukkan tingkat hutang yang rendah. ROE menunjukkan keuntungan yang tinggi.'))


    @Rule(Fact(underwriter_valued='good'), Fact(roa_valued='high'), Fact(roe_valued='high'))
    def ipo_rule_1275(self):
        self.declare(Fact(recommendation='Underwriter berkualitas baik. ROA menunjukkan efisiensi tinggi. ROE menunjukkan keuntungan yang tinggi.'))


    @Rule(Fact(warrant_valued='bad'), Fact(net_income_valued='profit'), Fact(per_valued='high'))
    def ipo_rule_1276(self):
        self.declare(Fact(recommendation='Warrant menunjukkan kondisi buruk. Laba bersih menunjukkan keuntungan. PER berada di tingkat yang tinggi.'))


    @Rule(Fact(warrant_valued='bad'), Fact(net_income_valued='profit'), Fact(der_valued='low'))
    def ipo_rule_1277(self):
        self.declare(Fact(recommendation='Warrant menunjukkan kondisi buruk. Laba bersih menunjukkan keuntungan. DER menunjukkan tingkat hutang yang rendah.'))


    @Rule(Fact(warrant_valued='bad'), Fact(net_income_valued='profit'), Fact(roa_valued='high'))
    def ipo_rule_1278(self):
        self.declare(Fact(recommendation='Warrant menunjukkan kondisi buruk. Laba bersih menunjukkan keuntungan. ROA menunjukkan efisiensi tinggi.'))


    @Rule(Fact(warrant_valued='bad'), Fact(net_income_valued='profit'), Fact(roe_valued='high'))
    def ipo_rule_1279(self):
        self.declare(Fact(recommendation='Warrant menunjukkan kondisi buruk. Laba bersih menunjukkan keuntungan. ROE menunjukkan keuntungan yang tinggi.'))


    @Rule(Fact(warrant_valued='bad'), Fact(per_valued='high'), Fact(der_valued='low'))
    def ipo_rule_1280(self):
        self.declare(Fact(recommendation='Warrant menunjukkan kondisi buruk. PER berada di tingkat yang tinggi. DER menunjukkan tingkat hutang yang rendah.'))


    @Rule(Fact(warrant_valued='bad'), Fact(per_valued='high'), Fact(roa_valued='high'))
    def ipo_rule_1281(self):
        self.declare(Fact(recommendation='Warrant menunjukkan kondisi buruk. PER berada di tingkat yang tinggi. ROA menunjukkan efisiensi tinggi.'))


    @Rule(Fact(warrant_valued='bad'), Fact(per_valued='high'), Fact(roe_valued='high'))
    def ipo_rule_1282(self):
        self.declare(Fact(recommendation='Warrant menunjukkan kondisi buruk. PER berada di tingkat yang tinggi. ROE menunjukkan keuntungan yang tinggi.'))


    @Rule(Fact(warrant_valued='bad'), Fact(der_valued='low'), Fact(roa_valued='high'))
    def ipo_rule_1283(self):
        self.declare(Fact(recommendation='Warrant menunjukkan kondisi buruk. DER menunjukkan tingkat hutang yang rendah. ROA menunjukkan efisiensi tinggi.'))


    @Rule(Fact(warrant_valued='bad'), Fact(der_valued='low'), Fact(roe_valued='high'))
    def ipo_rule_1284(self):
        self.declare(Fact(recommendation='Warrant menunjukkan kondisi buruk. DER menunjukkan tingkat hutang yang rendah. ROE menunjukkan keuntungan yang tinggi.'))


    @Rule(Fact(warrant_valued='bad'), Fact(roa_valued='high'), Fact(roe_valued='high'))
    def ipo_rule_1285(self):
        self.declare(Fact(recommendation='Warrant menunjukkan kondisi buruk. ROA menunjukkan efisiensi tinggi. ROE menunjukkan keuntungan yang tinggi.'))


    @Rule(Fact(net_income_valued='profit'), Fact(per_valued='high'), Fact(der_valued='low'))
    def ipo_rule_1286(self):
        self.declare(Fact(recommendation='Laba bersih menunjukkan keuntungan. PER berada di tingkat yang tinggi. DER menunjukkan tingkat hutang yang rendah.'))


    @Rule(Fact(net_income_valued='profit'), Fact(per_valued='high'), Fact(roa_valued='high'))
    def ipo_rule_1287(self):
        self.declare(Fact(recommendation='Laba bersih menunjukkan keuntungan. PER berada di tingkat yang tinggi. ROA menunjukkan efisiensi tinggi.'))


    @Rule(Fact(net_income_valued='profit'), Fact(per_valued='high'), Fact(roe_valued='high'))
    def ipo_rule_1288(self):
        self.declare(Fact(recommendation='Laba bersih menunjukkan keuntungan. PER berada di tingkat yang tinggi. ROE menunjukkan keuntungan yang tinggi.'))


    @Rule(Fact(net_income_valued='profit'), Fact(der_valued='low'), Fact(roa_valued='high'))
    def ipo_rule_1289(self):
        self.declare(Fact(recommendation='Laba bersih menunjukkan keuntungan. DER menunjukkan tingkat hutang yang rendah. ROA menunjukkan efisiensi tinggi.'))


    @Rule(Fact(net_income_valued='profit'), Fact(der_valued='low'), Fact(roe_valued='high'))
    def ipo_rule_1290(self):
        self.declare(Fact(recommendation='Laba bersih menunjukkan keuntungan. DER menunjukkan tingkat hutang yang rendah. ROE menunjukkan keuntungan yang tinggi.'))


    @Rule(Fact(net_income_valued='profit'), Fact(roa_valued='high'), Fact(roe_valued='high'))
    def ipo_rule_1291(self):
        self.declare(Fact(recommendation='Laba bersih menunjukkan keuntungan. ROA menunjukkan efisiensi tinggi. ROE menunjukkan keuntungan yang tinggi.'))


    @Rule(Fact(per_valued='high'), Fact(der_valued='low'), Fact(roa_valued='high'))
    def ipo_rule_1292(self):
        self.declare(Fact(recommendation='PER berada di tingkat yang tinggi. DER menunjukkan tingkat hutang yang rendah. ROA menunjukkan efisiensi tinggi.'))


    @Rule(Fact(per_valued='high'), Fact(der_valued='low'), Fact(roe_valued='high'))
    def ipo_rule_1293(self):
        self.declare(Fact(recommendation='PER berada di tingkat yang tinggi. DER menunjukkan tingkat hutang yang rendah. ROE menunjukkan keuntungan yang tinggi.'))


    @Rule(Fact(per_valued='high'), Fact(roa_valued='high'), Fact(roe_valued='high'))
    def ipo_rule_1294(self):
        self.declare(Fact(recommendation='PER berada di tingkat yang tinggi. ROA menunjukkan efisiensi tinggi. ROE menunjukkan keuntungan yang tinggi.'))


    @Rule(Fact(der_valued='low'), Fact(roa_valued='high'), Fact(roe_valued='high'))
    def ipo_rule_1295(self):
        self.declare(Fact(recommendation='DER menunjukkan tingkat hutang yang rendah. ROA menunjukkan efisiensi tinggi. ROE menunjukkan keuntungan yang tinggi.'))


    @Rule(Fact(underwriter_valued='good'), Fact(warrant_valued='bad'), Fact(net_income_valued='profit'))
    def ipo_rule_1296(self):
        self.declare(Fact(recommendation='Underwriter berkualitas baik. Warrant menunjukkan kondisi buruk. Laba bersih menunjukkan keuntungan.'))


    @Rule(Fact(underwriter_valued='good'), Fact(warrant_valued='bad'), Fact(per_valued='high'))
    def ipo_rule_1297(self):
        self.declare(Fact(recommendation='Underwriter berkualitas baik. Warrant menunjukkan kondisi buruk. PER berada di tingkat yang tinggi.'))


    @Rule(Fact(underwriter_valued='good'), Fact(warrant_valued='bad'), Fact(der_valued='low'))
    def ipo_rule_1298(self):
        self.declare(Fact(recommendation='Underwriter berkualitas baik. Warrant menunjukkan kondisi buruk. DER menunjukkan tingkat hutang yang rendah.'))


    @Rule(Fact(underwriter_valued='good'), Fact(warrant_valued='bad'), Fact(roa_valued='high'))
    def ipo_rule_1299(self):
        self.declare(Fact(recommendation='Underwriter berkualitas baik. Warrant menunjukkan kondisi buruk. ROA menunjukkan efisiensi tinggi.'))


    @Rule(Fact(underwriter_valued='good'), Fact(warrant_valued='bad'), Fact(roe_valued='low'))
    def ipo_rule_1300(self):
        self.declare(Fact(recommendation='Underwriter berkualitas baik. Warrant menunjukkan kondisi buruk. ROE menunjukkan keuntungan yang rendah.'))


    @Rule(Fact(underwriter_valued='good'), Fact(net_income_valued='profit'), Fact(per_valued='high'))
    def ipo_rule_1301(self):
        self.declare(Fact(recommendation='Underwriter berkualitas baik. Laba bersih menunjukkan keuntungan. PER berada di tingkat yang tinggi.'))


    @Rule(Fact(underwriter_valued='good'), Fact(net_income_valued='profit'), Fact(der_valued='low'))
    def ipo_rule_1302(self):
        self.declare(Fact(recommendation='Underwriter berkualitas baik. Laba bersih menunjukkan keuntungan. DER menunjukkan tingkat hutang yang rendah.'))


    @Rule(Fact(underwriter_valued='good'), Fact(net_income_valued='profit'), Fact(roa_valued='high'))
    def ipo_rule_1303(self):
        self.declare(Fact(recommendation='Underwriter berkualitas baik. Laba bersih menunjukkan keuntungan. ROA menunjukkan efisiensi tinggi.'))


    @Rule(Fact(underwriter_valued='good'), Fact(net_income_valued='profit'), Fact(roe_valued='low'))
    def ipo_rule_1304(self):
        self.declare(Fact(recommendation='Underwriter berkualitas baik. Laba bersih menunjukkan keuntungan. ROE menunjukkan keuntungan yang rendah.'))


    @Rule(Fact(underwriter_valued='good'), Fact(per_valued='high'), Fact(der_valued='low'))
    def ipo_rule_1305(self):
        self.declare(Fact(recommendation='Underwriter berkualitas baik. PER berada di tingkat yang tinggi. DER menunjukkan tingkat hutang yang rendah.'))


    @Rule(Fact(underwriter_valued='good'), Fact(per_valued='high'), Fact(roa_valued='high'))
    def ipo_rule_1306(self):
        self.declare(Fact(recommendation='Underwriter berkualitas baik. PER berada di tingkat yang tinggi. ROA menunjukkan efisiensi tinggi.'))


    @Rule(Fact(underwriter_valued='good'), Fact(per_valued='high'), Fact(roe_valued='low'))
    def ipo_rule_1307(self):
        self.declare(Fact(recommendation='Underwriter berkualitas baik. PER berada di tingkat yang tinggi. ROE menunjukkan keuntungan yang rendah.'))


    @Rule(Fact(underwriter_valued='good'), Fact(der_valued='low'), Fact(roa_valued='high'))
    def ipo_rule_1308(self):
        self.declare(Fact(recommendation='Underwriter berkualitas baik. DER menunjukkan tingkat hutang yang rendah. ROA menunjukkan efisiensi tinggi.'))


    @Rule(Fact(underwriter_valued='good'), Fact(der_valued='low'), Fact(roe_valued='low'))
    def ipo_rule_1309(self):
        self.declare(Fact(recommendation='Underwriter berkualitas baik. DER menunjukkan tingkat hutang yang rendah. ROE menunjukkan keuntungan yang rendah.'))


    @Rule(Fact(underwriter_valued='good'), Fact(roa_valued='high'), Fact(roe_valued='low'))
    def ipo_rule_1310(self):
        self.declare(Fact(recommendation='Underwriter berkualitas baik. ROA menunjukkan efisiensi tinggi. ROE menunjukkan keuntungan yang rendah.'))


    @Rule(Fact(warrant_valued='bad'), Fact(net_income_valued='profit'), Fact(per_valued='high'))
    def ipo_rule_1311(self):
        self.declare(Fact(recommendation='Warrant menunjukkan kondisi buruk. Laba bersih menunjukkan keuntungan. PER berada di tingkat yang tinggi.'))


    @Rule(Fact(warrant_valued='bad'), Fact(net_income_valued='profit'), Fact(der_valued='low'))
    def ipo_rule_1312(self):
        self.declare(Fact(recommendation='Warrant menunjukkan kondisi buruk. Laba bersih menunjukkan keuntungan. DER menunjukkan tingkat hutang yang rendah.'))


    @Rule(Fact(warrant_valued='bad'), Fact(net_income_valued='profit'), Fact(roa_valued='high'))
    def ipo_rule_1313(self):
        self.declare(Fact(recommendation='Warrant menunjukkan kondisi buruk. Laba bersih menunjukkan keuntungan. ROA menunjukkan efisiensi tinggi.'))


    @Rule(Fact(warrant_valued='bad'), Fact(net_income_valued='profit'), Fact(roe_valued='low'))
    def ipo_rule_1314(self):
        self.declare(Fact(recommendation='Warrant menunjukkan kondisi buruk. Laba bersih menunjukkan keuntungan. ROE menunjukkan keuntungan yang rendah.'))


    @Rule(Fact(warrant_valued='bad'), Fact(per_valued='high'), Fact(der_valued='low'))
    def ipo_rule_1315(self):
        self.declare(Fact(recommendation='Warrant menunjukkan kondisi buruk. PER berada di tingkat yang tinggi. DER menunjukkan tingkat hutang yang rendah.'))


    @Rule(Fact(warrant_valued='bad'), Fact(per_valued='high'), Fact(roa_valued='high'))
    def ipo_rule_1316(self):
        self.declare(Fact(recommendation='Warrant menunjukkan kondisi buruk. PER berada di tingkat yang tinggi. ROA menunjukkan efisiensi tinggi.'))


    @Rule(Fact(warrant_valued='bad'), Fact(per_valued='high'), Fact(roe_valued='low'))
    def ipo_rule_1317(self):
        self.declare(Fact(recommendation='Warrant menunjukkan kondisi buruk. PER berada di tingkat yang tinggi. ROE menunjukkan keuntungan yang rendah.'))


    @Rule(Fact(warrant_valued='bad'), Fact(der_valued='low'), Fact(roa_valued='high'))
    def ipo_rule_1318(self):
        self.declare(Fact(recommendation='Warrant menunjukkan kondisi buruk. DER menunjukkan tingkat hutang yang rendah. ROA menunjukkan efisiensi tinggi.'))


    @Rule(Fact(warrant_valued='bad'), Fact(der_valued='low'), Fact(roe_valued='low'))
    def ipo_rule_1319(self):
        self.declare(Fact(recommendation='Warrant menunjukkan kondisi buruk. DER menunjukkan tingkat hutang yang rendah. ROE menunjukkan keuntungan yang rendah.'))


    @Rule(Fact(warrant_valued='bad'), Fact(roa_valued='high'), Fact(roe_valued='low'))
    def ipo_rule_1320(self):
        self.declare(Fact(recommendation='Warrant menunjukkan kondisi buruk. ROA menunjukkan efisiensi tinggi. ROE menunjukkan keuntungan yang rendah.'))


    @Rule(Fact(net_income_valued='profit'), Fact(per_valued='high'), Fact(der_valued='low'))
    def ipo_rule_1321(self):
        self.declare(Fact(recommendation='Laba bersih menunjukkan keuntungan. PER berada di tingkat yang tinggi. DER menunjukkan tingkat hutang yang rendah.'))


    @Rule(Fact(net_income_valued='profit'), Fact(per_valued='high'), Fact(roa_valued='high'))
    def ipo_rule_1322(self):
        self.declare(Fact(recommendation='Laba bersih menunjukkan keuntungan. PER berada di tingkat yang tinggi. ROA menunjukkan efisiensi tinggi.'))


    @Rule(Fact(net_income_valued='profit'), Fact(per_valued='high'), Fact(roe_valued='low'))
    def ipo_rule_1323(self):
        self.declare(Fact(recommendation='Laba bersih menunjukkan keuntungan. PER berada di tingkat yang tinggi. ROE menunjukkan keuntungan yang rendah.'))


    @Rule(Fact(net_income_valued='profit'), Fact(der_valued='low'), Fact(roa_valued='high'))
    def ipo_rule_1324(self):
        self.declare(Fact(recommendation='Laba bersih menunjukkan keuntungan. DER menunjukkan tingkat hutang yang rendah. ROA menunjukkan efisiensi tinggi.'))


    @Rule(Fact(net_income_valued='profit'), Fact(der_valued='low'), Fact(roe_valued='low'))
    def ipo_rule_1325(self):
        self.declare(Fact(recommendation='Laba bersih menunjukkan keuntungan. DER menunjukkan tingkat hutang yang rendah. ROE menunjukkan keuntungan yang rendah.'))


    @Rule(Fact(net_income_valued='profit'), Fact(roa_valued='high'), Fact(roe_valued='low'))
    def ipo_rule_1326(self):
        self.declare(Fact(recommendation='Laba bersih menunjukkan keuntungan. ROA menunjukkan efisiensi tinggi. ROE menunjukkan keuntungan yang rendah.'))


    @Rule(Fact(per_valued='high'), Fact(der_valued='low'), Fact(roa_valued='high'))
    def ipo_rule_1327(self):
        self.declare(Fact(recommendation='PER berada di tingkat yang tinggi. DER menunjukkan tingkat hutang yang rendah. ROA menunjukkan efisiensi tinggi.'))


    @Rule(Fact(per_valued='high'), Fact(der_valued='low'), Fact(roe_valued='low'))
    def ipo_rule_1328(self):
        self.declare(Fact(recommendation='PER berada di tingkat yang tinggi. DER menunjukkan tingkat hutang yang rendah. ROE menunjukkan keuntungan yang rendah.'))


    @Rule(Fact(per_valued='high'), Fact(roa_valued='high'), Fact(roe_valued='low'))
    def ipo_rule_1329(self):
        self.declare(Fact(recommendation='PER berada di tingkat yang tinggi. ROA menunjukkan efisiensi tinggi. ROE menunjukkan keuntungan yang rendah.'))


    @Rule(Fact(der_valued='low'), Fact(roa_valued='high'), Fact(roe_valued='low'))
    def ipo_rule_1330(self):
        self.declare(Fact(recommendation='DER menunjukkan tingkat hutang yang rendah. ROA menunjukkan efisiensi tinggi. ROE menunjukkan keuntungan yang rendah.'))


    @Rule(Fact(underwriter_valued='good'), Fact(warrant_valued='bad'), Fact(net_income_valued='profit'))
    def ipo_rule_1331(self):
        self.declare(Fact(recommendation='Underwriter berkualitas baik. Warrant menunjukkan kondisi buruk. Laba bersih menunjukkan keuntungan.'))


    @Rule(Fact(underwriter_valued='good'), Fact(warrant_valued='bad'), Fact(per_valued='high'))
    def ipo_rule_1332(self):
        self.declare(Fact(recommendation='Underwriter berkualitas baik. Warrant menunjukkan kondisi buruk. PER berada di tingkat yang tinggi.'))


    @Rule(Fact(underwriter_valued='good'), Fact(warrant_valued='bad'), Fact(der_valued='low'))
    def ipo_rule_1333(self):
        self.declare(Fact(recommendation='Underwriter berkualitas baik. Warrant menunjukkan kondisi buruk. DER menunjukkan tingkat hutang yang rendah.'))


    @Rule(Fact(underwriter_valued='good'), Fact(warrant_valued='bad'), Fact(roa_valued='low'))
    def ipo_rule_1334(self):
        self.declare(Fact(recommendation='Underwriter berkualitas baik. Warrant menunjukkan kondisi buruk. ROA menunjukkan efisiensi rendah.'))


    @Rule(Fact(underwriter_valued='good'), Fact(warrant_valued='bad'), Fact(roe_valued='high'))
    def ipo_rule_1335(self):
        self.declare(Fact(recommendation='Underwriter berkualitas baik. Warrant menunjukkan kondisi buruk. ROE menunjukkan keuntungan yang tinggi.'))


    @Rule(Fact(underwriter_valued='good'), Fact(net_income_valued='profit'), Fact(per_valued='high'))
    def ipo_rule_1336(self):
        self.declare(Fact(recommendation='Underwriter berkualitas baik. Laba bersih menunjukkan keuntungan. PER berada di tingkat yang tinggi.'))


    @Rule(Fact(underwriter_valued='good'), Fact(net_income_valued='profit'), Fact(der_valued='low'))
    def ipo_rule_1337(self):
        self.declare(Fact(recommendation='Underwriter berkualitas baik. Laba bersih menunjukkan keuntungan. DER menunjukkan tingkat hutang yang rendah.'))


    @Rule(Fact(underwriter_valued='good'), Fact(net_income_valued='profit'), Fact(roa_valued='low'))
    def ipo_rule_1338(self):
        self.declare(Fact(recommendation='Underwriter berkualitas baik. Laba bersih menunjukkan keuntungan. ROA menunjukkan efisiensi rendah.'))


    @Rule(Fact(underwriter_valued='good'), Fact(net_income_valued='profit'), Fact(roe_valued='high'))
    def ipo_rule_1339(self):
        self.declare(Fact(recommendation='Underwriter berkualitas baik. Laba bersih menunjukkan keuntungan. ROE menunjukkan keuntungan yang tinggi.'))


    @Rule(Fact(underwriter_valued='good'), Fact(per_valued='high'), Fact(der_valued='low'))
    def ipo_rule_1340(self):
        self.declare(Fact(recommendation='Underwriter berkualitas baik. PER berada di tingkat yang tinggi. DER menunjukkan tingkat hutang yang rendah.'))


    @Rule(Fact(underwriter_valued='good'), Fact(per_valued='high'), Fact(roa_valued='low'))
    def ipo_rule_1341(self):
        self.declare(Fact(recommendation='Underwriter berkualitas baik. PER berada di tingkat yang tinggi. ROA menunjukkan efisiensi rendah.'))


    @Rule(Fact(underwriter_valued='good'), Fact(per_valued='high'), Fact(roe_valued='high'))
    def ipo_rule_1342(self):
        self.declare(Fact(recommendation='Underwriter berkualitas baik. PER berada di tingkat yang tinggi. ROE menunjukkan keuntungan yang tinggi.'))


    @Rule(Fact(underwriter_valued='good'), Fact(der_valued='low'), Fact(roa_valued='low'))
    def ipo_rule_1343(self):
        self.declare(Fact(recommendation='Underwriter berkualitas baik. DER menunjukkan tingkat hutang yang rendah. ROA menunjukkan efisiensi rendah.'))


    @Rule(Fact(underwriter_valued='good'), Fact(der_valued='low'), Fact(roe_valued='high'))
    def ipo_rule_1344(self):
        self.declare(Fact(recommendation='Underwriter berkualitas baik. DER menunjukkan tingkat hutang yang rendah. ROE menunjukkan keuntungan yang tinggi.'))


    @Rule(Fact(underwriter_valued='good'), Fact(roa_valued='low'), Fact(roe_valued='high'))
    def ipo_rule_1345(self):
        self.declare(Fact(recommendation='Underwriter berkualitas baik. ROA menunjukkan efisiensi rendah. ROE menunjukkan keuntungan yang tinggi.'))


    @Rule(Fact(warrant_valued='bad'), Fact(net_income_valued='profit'), Fact(per_valued='high'))
    def ipo_rule_1346(self):
        self.declare(Fact(recommendation='Warrant menunjukkan kondisi buruk. Laba bersih menunjukkan keuntungan. PER berada di tingkat yang tinggi.'))


    @Rule(Fact(warrant_valued='bad'), Fact(net_income_valued='profit'), Fact(der_valued='low'))
    def ipo_rule_1347(self):
        self.declare(Fact(recommendation='Warrant menunjukkan kondisi buruk. Laba bersih menunjukkan keuntungan. DER menunjukkan tingkat hutang yang rendah.'))


    @Rule(Fact(warrant_valued='bad'), Fact(net_income_valued='profit'), Fact(roa_valued='low'))
    def ipo_rule_1348(self):
        self.declare(Fact(recommendation='Warrant menunjukkan kondisi buruk. Laba bersih menunjukkan keuntungan. ROA menunjukkan efisiensi rendah.'))


    @Rule(Fact(warrant_valued='bad'), Fact(net_income_valued='profit'), Fact(roe_valued='high'))
    def ipo_rule_1349(self):
        self.declare(Fact(recommendation='Warrant menunjukkan kondisi buruk. Laba bersih menunjukkan keuntungan. ROE menunjukkan keuntungan yang tinggi.'))


    @Rule(Fact(warrant_valued='bad'), Fact(per_valued='high'), Fact(der_valued='low'))
    def ipo_rule_1350(self):
        self.declare(Fact(recommendation='Warrant menunjukkan kondisi buruk. PER berada di tingkat yang tinggi. DER menunjukkan tingkat hutang yang rendah.'))


    @Rule(Fact(warrant_valued='bad'), Fact(per_valued='high'), Fact(roa_valued='low'))
    def ipo_rule_1351(self):
        self.declare(Fact(recommendation='Warrant menunjukkan kondisi buruk. PER berada di tingkat yang tinggi. ROA menunjukkan efisiensi rendah.'))


    @Rule(Fact(warrant_valued='bad'), Fact(per_valued='high'), Fact(roe_valued='high'))
    def ipo_rule_1352(self):
        self.declare(Fact(recommendation='Warrant menunjukkan kondisi buruk. PER berada di tingkat yang tinggi. ROE menunjukkan keuntungan yang tinggi.'))


    @Rule(Fact(warrant_valued='bad'), Fact(der_valued='low'), Fact(roa_valued='low'))
    def ipo_rule_1353(self):
        self.declare(Fact(recommendation='Warrant menunjukkan kondisi buruk. DER menunjukkan tingkat hutang yang rendah. ROA menunjukkan efisiensi rendah.'))


    @Rule(Fact(warrant_valued='bad'), Fact(der_valued='low'), Fact(roe_valued='high'))
    def ipo_rule_1354(self):
        self.declare(Fact(recommendation='Warrant menunjukkan kondisi buruk. DER menunjukkan tingkat hutang yang rendah. ROE menunjukkan keuntungan yang tinggi.'))


    @Rule(Fact(warrant_valued='bad'), Fact(roa_valued='low'), Fact(roe_valued='high'))
    def ipo_rule_1355(self):
        self.declare(Fact(recommendation='Warrant menunjukkan kondisi buruk. ROA menunjukkan efisiensi rendah. ROE menunjukkan keuntungan yang tinggi.'))


    @Rule(Fact(net_income_valued='profit'), Fact(per_valued='high'), Fact(der_valued='low'))
    def ipo_rule_1356(self):
        self.declare(Fact(recommendation='Laba bersih menunjukkan keuntungan. PER berada di tingkat yang tinggi. DER menunjukkan tingkat hutang yang rendah.'))


    @Rule(Fact(net_income_valued='profit'), Fact(per_valued='high'), Fact(roa_valued='low'))
    def ipo_rule_1357(self):
        self.declare(Fact(recommendation='Laba bersih menunjukkan keuntungan. PER berada di tingkat yang tinggi. ROA menunjukkan efisiensi rendah.'))


    @Rule(Fact(net_income_valued='profit'), Fact(per_valued='high'), Fact(roe_valued='high'))
    def ipo_rule_1358(self):
        self.declare(Fact(recommendation='Laba bersih menunjukkan keuntungan. PER berada di tingkat yang tinggi. ROE menunjukkan keuntungan yang tinggi.'))


    @Rule(Fact(net_income_valued='profit'), Fact(der_valued='low'), Fact(roa_valued='low'))
    def ipo_rule_1359(self):
        self.declare(Fact(recommendation='Laba bersih menunjukkan keuntungan. DER menunjukkan tingkat hutang yang rendah. ROA menunjukkan efisiensi rendah.'))


    @Rule(Fact(net_income_valued='profit'), Fact(der_valued='low'), Fact(roe_valued='high'))
    def ipo_rule_1360(self):
        self.declare(Fact(recommendation='Laba bersih menunjukkan keuntungan. DER menunjukkan tingkat hutang yang rendah. ROE menunjukkan keuntungan yang tinggi.'))


    @Rule(Fact(net_income_valued='profit'), Fact(roa_valued='low'), Fact(roe_valued='high'))
    def ipo_rule_1361(self):
        self.declare(Fact(recommendation='Laba bersih menunjukkan keuntungan. ROA menunjukkan efisiensi rendah. ROE menunjukkan keuntungan yang tinggi.'))


    @Rule(Fact(per_valued='high'), Fact(der_valued='low'), Fact(roa_valued='low'))
    def ipo_rule_1362(self):
        self.declare(Fact(recommendation='PER berada di tingkat yang tinggi. DER menunjukkan tingkat hutang yang rendah. ROA menunjukkan efisiensi rendah.'))


    @Rule(Fact(per_valued='high'), Fact(der_valued='low'), Fact(roe_valued='high'))
    def ipo_rule_1363(self):
        self.declare(Fact(recommendation='PER berada di tingkat yang tinggi. DER menunjukkan tingkat hutang yang rendah. ROE menunjukkan keuntungan yang tinggi.'))


    @Rule(Fact(per_valued='high'), Fact(roa_valued='low'), Fact(roe_valued='high'))
    def ipo_rule_1364(self):
        self.declare(Fact(recommendation='PER berada di tingkat yang tinggi. ROA menunjukkan efisiensi rendah. ROE menunjukkan keuntungan yang tinggi.'))


    @Rule(Fact(der_valued='low'), Fact(roa_valued='low'), Fact(roe_valued='high'))
    def ipo_rule_1365(self):
        self.declare(Fact(recommendation='DER menunjukkan tingkat hutang yang rendah. ROA menunjukkan efisiensi rendah. ROE menunjukkan keuntungan yang tinggi.'))


    @Rule(Fact(underwriter_valued='good'), Fact(warrant_valued='bad'), Fact(net_income_valued='profit'))
    def ipo_rule_1366(self):
        self.declare(Fact(recommendation='Underwriter berkualitas baik. Warrant menunjukkan kondisi buruk. Laba bersih menunjukkan keuntungan.'))


    @Rule(Fact(underwriter_valued='good'), Fact(warrant_valued='bad'), Fact(per_valued='high'))
    def ipo_rule_1367(self):
        self.declare(Fact(recommendation='Underwriter berkualitas baik. Warrant menunjukkan kondisi buruk. PER berada di tingkat yang tinggi.'))


    @Rule(Fact(underwriter_valued='good'), Fact(warrant_valued='bad'), Fact(der_valued='low'))
    def ipo_rule_1368(self):
        self.declare(Fact(recommendation='Underwriter berkualitas baik. Warrant menunjukkan kondisi buruk. DER menunjukkan tingkat hutang yang rendah.'))


    @Rule(Fact(underwriter_valued='good'), Fact(warrant_valued='bad'), Fact(roa_valued='low'))
    def ipo_rule_1369(self):
        self.declare(Fact(recommendation='Underwriter berkualitas baik. Warrant menunjukkan kondisi buruk. ROA menunjukkan efisiensi rendah.'))


    @Rule(Fact(underwriter_valued='good'), Fact(warrant_valued='bad'), Fact(roe_valued='low'))
    def ipo_rule_1370(self):
        self.declare(Fact(recommendation='Underwriter berkualitas baik. Warrant menunjukkan kondisi buruk. ROE menunjukkan keuntungan yang rendah.'))


    @Rule(Fact(underwriter_valued='good'), Fact(net_income_valued='profit'), Fact(per_valued='high'))
    def ipo_rule_1371(self):
        self.declare(Fact(recommendation='Underwriter berkualitas baik. Laba bersih menunjukkan keuntungan. PER berada di tingkat yang tinggi.'))


    @Rule(Fact(underwriter_valued='good'), Fact(net_income_valued='profit'), Fact(der_valued='low'))
    def ipo_rule_1372(self):
        self.declare(Fact(recommendation='Underwriter berkualitas baik. Laba bersih menunjukkan keuntungan. DER menunjukkan tingkat hutang yang rendah.'))


    @Rule(Fact(underwriter_valued='good'), Fact(net_income_valued='profit'), Fact(roa_valued='low'))
    def ipo_rule_1373(self):
        self.declare(Fact(recommendation='Underwriter berkualitas baik. Laba bersih menunjukkan keuntungan. ROA menunjukkan efisiensi rendah.'))


    @Rule(Fact(underwriter_valued='good'), Fact(net_income_valued='profit'), Fact(roe_valued='low'))
    def ipo_rule_1374(self):
        self.declare(Fact(recommendation='Underwriter berkualitas baik. Laba bersih menunjukkan keuntungan. ROE menunjukkan keuntungan yang rendah.'))


    @Rule(Fact(underwriter_valued='good'), Fact(per_valued='high'), Fact(der_valued='low'))
    def ipo_rule_1375(self):
        self.declare(Fact(recommendation='Underwriter berkualitas baik. PER berada di tingkat yang tinggi. DER menunjukkan tingkat hutang yang rendah.'))


    @Rule(Fact(underwriter_valued='good'), Fact(per_valued='high'), Fact(roa_valued='low'))
    def ipo_rule_1376(self):
        self.declare(Fact(recommendation='Underwriter berkualitas baik. PER berada di tingkat yang tinggi. ROA menunjukkan efisiensi rendah.'))


    @Rule(Fact(underwriter_valued='good'), Fact(per_valued='high'), Fact(roe_valued='low'))
    def ipo_rule_1377(self):
        self.declare(Fact(recommendation='Underwriter berkualitas baik. PER berada di tingkat yang tinggi. ROE menunjukkan keuntungan yang rendah.'))


    @Rule(Fact(underwriter_valued='good'), Fact(der_valued='low'), Fact(roa_valued='low'))
    def ipo_rule_1378(self):
        self.declare(Fact(recommendation='Underwriter berkualitas baik. DER menunjukkan tingkat hutang yang rendah. ROA menunjukkan efisiensi rendah.'))


    @Rule(Fact(underwriter_valued='good'), Fact(der_valued='low'), Fact(roe_valued='low'))
    def ipo_rule_1379(self):
        self.declare(Fact(recommendation='Underwriter berkualitas baik. DER menunjukkan tingkat hutang yang rendah. ROE menunjukkan keuntungan yang rendah.'))


    @Rule(Fact(underwriter_valued='good'), Fact(roa_valued='low'), Fact(roe_valued='low'))
    def ipo_rule_1380(self):
        self.declare(Fact(recommendation='Underwriter berkualitas baik. ROA menunjukkan efisiensi rendah. ROE menunjukkan keuntungan yang rendah.'))


    @Rule(Fact(warrant_valued='bad'), Fact(net_income_valued='profit'), Fact(per_valued='high'))
    def ipo_rule_1381(self):
        self.declare(Fact(recommendation='Warrant menunjukkan kondisi buruk. Laba bersih menunjukkan keuntungan. PER berada di tingkat yang tinggi.'))


    @Rule(Fact(warrant_valued='bad'), Fact(net_income_valued='profit'), Fact(der_valued='low'))
    def ipo_rule_1382(self):
        self.declare(Fact(recommendation='Warrant menunjukkan kondisi buruk. Laba bersih menunjukkan keuntungan. DER menunjukkan tingkat hutang yang rendah.'))


    @Rule(Fact(warrant_valued='bad'), Fact(net_income_valued='profit'), Fact(roa_valued='low'))
    def ipo_rule_1383(self):
        self.declare(Fact(recommendation='Warrant menunjukkan kondisi buruk. Laba bersih menunjukkan keuntungan. ROA menunjukkan efisiensi rendah.'))


    @Rule(Fact(warrant_valued='bad'), Fact(net_income_valued='profit'), Fact(roe_valued='low'))
    def ipo_rule_1384(self):
        self.declare(Fact(recommendation='Warrant menunjukkan kondisi buruk. Laba bersih menunjukkan keuntungan. ROE menunjukkan keuntungan yang rendah.'))


    @Rule(Fact(warrant_valued='bad'), Fact(per_valued='high'), Fact(der_valued='low'))
    def ipo_rule_1385(self):
        self.declare(Fact(recommendation='Warrant menunjukkan kondisi buruk. PER berada di tingkat yang tinggi. DER menunjukkan tingkat hutang yang rendah.'))


    @Rule(Fact(warrant_valued='bad'), Fact(per_valued='high'), Fact(roa_valued='low'))
    def ipo_rule_1386(self):
        self.declare(Fact(recommendation='Warrant menunjukkan kondisi buruk. PER berada di tingkat yang tinggi. ROA menunjukkan efisiensi rendah.'))


    @Rule(Fact(warrant_valued='bad'), Fact(per_valued='high'), Fact(roe_valued='low'))
    def ipo_rule_1387(self):
        self.declare(Fact(recommendation='Warrant menunjukkan kondisi buruk. PER berada di tingkat yang tinggi. ROE menunjukkan keuntungan yang rendah.'))


    @Rule(Fact(warrant_valued='bad'), Fact(der_valued='low'), Fact(roa_valued='low'))
    def ipo_rule_1388(self):
        self.declare(Fact(recommendation='Warrant menunjukkan kondisi buruk. DER menunjukkan tingkat hutang yang rendah. ROA menunjukkan efisiensi rendah.'))


    @Rule(Fact(warrant_valued='bad'), Fact(der_valued='low'), Fact(roe_valued='low'))
    def ipo_rule_1389(self):
        self.declare(Fact(recommendation='Warrant menunjukkan kondisi buruk. DER menunjukkan tingkat hutang yang rendah. ROE menunjukkan keuntungan yang rendah.'))


    @Rule(Fact(warrant_valued='bad'), Fact(roa_valued='low'), Fact(roe_valued='low'))
    def ipo_rule_1390(self):
        self.declare(Fact(recommendation='Warrant menunjukkan kondisi buruk. ROA menunjukkan efisiensi rendah. ROE menunjukkan keuntungan yang rendah.'))


    @Rule(Fact(net_income_valued='profit'), Fact(per_valued='high'), Fact(der_valued='low'))
    def ipo_rule_1391(self):
        self.declare(Fact(recommendation='Laba bersih menunjukkan keuntungan. PER berada di tingkat yang tinggi. DER menunjukkan tingkat hutang yang rendah.'))


    @Rule(Fact(net_income_valued='profit'), Fact(per_valued='high'), Fact(roa_valued='low'))
    def ipo_rule_1392(self):
        self.declare(Fact(recommendation='Laba bersih menunjukkan keuntungan. PER berada di tingkat yang tinggi. ROA menunjukkan efisiensi rendah.'))


    @Rule(Fact(net_income_valued='profit'), Fact(per_valued='high'), Fact(roe_valued='low'))
    def ipo_rule_1393(self):
        self.declare(Fact(recommendation='Laba bersih menunjukkan keuntungan. PER berada di tingkat yang tinggi. ROE menunjukkan keuntungan yang rendah.'))


    @Rule(Fact(net_income_valued='profit'), Fact(der_valued='low'), Fact(roa_valued='low'))
    def ipo_rule_1394(self):
        self.declare(Fact(recommendation='Laba bersih menunjukkan keuntungan. DER menunjukkan tingkat hutang yang rendah. ROA menunjukkan efisiensi rendah.'))


    @Rule(Fact(net_income_valued='profit'), Fact(der_valued='low'), Fact(roe_valued='low'))
    def ipo_rule_1395(self):
        self.declare(Fact(recommendation='Laba bersih menunjukkan keuntungan. DER menunjukkan tingkat hutang yang rendah. ROE menunjukkan keuntungan yang rendah.'))


    @Rule(Fact(net_income_valued='profit'), Fact(roa_valued='low'), Fact(roe_valued='low'))
    def ipo_rule_1396(self):
        self.declare(Fact(recommendation='Laba bersih menunjukkan keuntungan. ROA menunjukkan efisiensi rendah. ROE menunjukkan keuntungan yang rendah.'))


    @Rule(Fact(per_valued='high'), Fact(der_valued='low'), Fact(roa_valued='low'))
    def ipo_rule_1397(self):
        self.declare(Fact(recommendation='PER berada di tingkat yang tinggi. DER menunjukkan tingkat hutang yang rendah. ROA menunjukkan efisiensi rendah.'))


    @Rule(Fact(per_valued='high'), Fact(der_valued='low'), Fact(roe_valued='low'))
    def ipo_rule_1398(self):
        self.declare(Fact(recommendation='PER berada di tingkat yang tinggi. DER menunjukkan tingkat hutang yang rendah. ROE menunjukkan keuntungan yang rendah.'))


    @Rule(Fact(per_valued='high'), Fact(roa_valued='low'), Fact(roe_valued='low'))
    def ipo_rule_1399(self):
        self.declare(Fact(recommendation='PER berada di tingkat yang tinggi. ROA menunjukkan efisiensi rendah. ROE menunjukkan keuntungan yang rendah.'))


    @Rule(Fact(der_valued='low'), Fact(roa_valued='low'), Fact(roe_valued='low'))
    def ipo_rule_1400(self):
        self.declare(Fact(recommendation='DER menunjukkan tingkat hutang yang rendah. ROA menunjukkan efisiensi rendah. ROE menunjukkan keuntungan yang rendah.'))


    @Rule(Fact(underwriter_valued='good'), Fact(warrant_valued='bad'), Fact(net_income_valued='profit'))
    def ipo_rule_1401(self):
        self.declare(Fact(recommendation='Underwriter berkualitas baik. Warrant menunjukkan kondisi buruk. Laba bersih menunjukkan keuntungan.'))


    @Rule(Fact(underwriter_valued='good'), Fact(warrant_valued='bad'), Fact(per_valued='low'))
    def ipo_rule_1402(self):
        self.declare(Fact(recommendation='Underwriter berkualitas baik. Warrant menunjukkan kondisi buruk. PER berada di tingkat yang rendah.'))


    @Rule(Fact(underwriter_valued='good'), Fact(warrant_valued='bad'), Fact(der_valued='high'))
    def ipo_rule_1403(self):
        self.declare(Fact(recommendation='Underwriter berkualitas baik. Warrant menunjukkan kondisi buruk. DER menunjukkan tingkat hutang yang tinggi.'))


    @Rule(Fact(underwriter_valued='good'), Fact(warrant_valued='bad'), Fact(roa_valued='high'))
    def ipo_rule_1404(self):
        self.declare(Fact(recommendation='Underwriter berkualitas baik. Warrant menunjukkan kondisi buruk. ROA menunjukkan efisiensi tinggi.'))


    @Rule(Fact(underwriter_valued='good'), Fact(warrant_valued='bad'), Fact(roe_valued='high'))
    def ipo_rule_1405(self):
        self.declare(Fact(recommendation='Underwriter berkualitas baik. Warrant menunjukkan kondisi buruk. ROE menunjukkan keuntungan yang tinggi.'))


    @Rule(Fact(underwriter_valued='good'), Fact(net_income_valued='profit'), Fact(per_valued='low'))
    def ipo_rule_1406(self):
        self.declare(Fact(recommendation='Underwriter berkualitas baik. Laba bersih menunjukkan keuntungan. PER berada di tingkat yang rendah.'))


    @Rule(Fact(underwriter_valued='good'), Fact(net_income_valued='profit'), Fact(der_valued='high'))
    def ipo_rule_1407(self):
        self.declare(Fact(recommendation='Underwriter berkualitas baik. Laba bersih menunjukkan keuntungan. DER menunjukkan tingkat hutang yang tinggi.'))


    @Rule(Fact(underwriter_valued='good'), Fact(net_income_valued='profit'), Fact(roa_valued='high'))
    def ipo_rule_1408(self):
        self.declare(Fact(recommendation='Underwriter berkualitas baik. Laba bersih menunjukkan keuntungan. ROA menunjukkan efisiensi tinggi.'))


    @Rule(Fact(underwriter_valued='good'), Fact(net_income_valued='profit'), Fact(roe_valued='high'))
    def ipo_rule_1409(self):
        self.declare(Fact(recommendation='Underwriter berkualitas baik. Laba bersih menunjukkan keuntungan. ROE menunjukkan keuntungan yang tinggi.'))


    @Rule(Fact(underwriter_valued='good'), Fact(per_valued='low'), Fact(der_valued='high'))
    def ipo_rule_1410(self):
        self.declare(Fact(recommendation='Underwriter berkualitas baik. PER berada di tingkat yang rendah. DER menunjukkan tingkat hutang yang tinggi.'))


    @Rule(Fact(underwriter_valued='good'), Fact(per_valued='low'), Fact(roa_valued='high'))
    def ipo_rule_1411(self):
        self.declare(Fact(recommendation='Underwriter berkualitas baik. PER berada di tingkat yang rendah. ROA menunjukkan efisiensi tinggi.'))


    @Rule(Fact(underwriter_valued='good'), Fact(per_valued='low'), Fact(roe_valued='high'))
    def ipo_rule_1412(self):
        self.declare(Fact(recommendation='Underwriter berkualitas baik. PER berada di tingkat yang rendah. ROE menunjukkan keuntungan yang tinggi.'))


    @Rule(Fact(underwriter_valued='good'), Fact(der_valued='high'), Fact(roa_valued='high'))
    def ipo_rule_1413(self):
        self.declare(Fact(recommendation='Underwriter berkualitas baik. DER menunjukkan tingkat hutang yang tinggi. ROA menunjukkan efisiensi tinggi.'))


    @Rule(Fact(underwriter_valued='good'), Fact(der_valued='high'), Fact(roe_valued='high'))
    def ipo_rule_1414(self):
        self.declare(Fact(recommendation='Underwriter berkualitas baik. DER menunjukkan tingkat hutang yang tinggi. ROE menunjukkan keuntungan yang tinggi.'))


    @Rule(Fact(underwriter_valued='good'), Fact(roa_valued='high'), Fact(roe_valued='high'))
    def ipo_rule_1415(self):
        self.declare(Fact(recommendation='Underwriter berkualitas baik. ROA menunjukkan efisiensi tinggi. ROE menunjukkan keuntungan yang tinggi.'))


    @Rule(Fact(warrant_valued='bad'), Fact(net_income_valued='profit'), Fact(per_valued='low'))
    def ipo_rule_1416(self):
        self.declare(Fact(recommendation='Warrant menunjukkan kondisi buruk. Laba bersih menunjukkan keuntungan. PER berada di tingkat yang rendah.'))


    @Rule(Fact(warrant_valued='bad'), Fact(net_income_valued='profit'), Fact(der_valued='high'))
    def ipo_rule_1417(self):
        self.declare(Fact(recommendation='Warrant menunjukkan kondisi buruk. Laba bersih menunjukkan keuntungan. DER menunjukkan tingkat hutang yang tinggi.'))


    @Rule(Fact(warrant_valued='bad'), Fact(net_income_valued='profit'), Fact(roa_valued='high'))
    def ipo_rule_1418(self):
        self.declare(Fact(recommendation='Warrant menunjukkan kondisi buruk. Laba bersih menunjukkan keuntungan. ROA menunjukkan efisiensi tinggi.'))


    @Rule(Fact(warrant_valued='bad'), Fact(net_income_valued='profit'), Fact(roe_valued='high'))
    def ipo_rule_1419(self):
        self.declare(Fact(recommendation='Warrant menunjukkan kondisi buruk. Laba bersih menunjukkan keuntungan. ROE menunjukkan keuntungan yang tinggi.'))


    @Rule(Fact(warrant_valued='bad'), Fact(per_valued='low'), Fact(der_valued='high'))
    def ipo_rule_1420(self):
        self.declare(Fact(recommendation='Warrant menunjukkan kondisi buruk. PER berada di tingkat yang rendah. DER menunjukkan tingkat hutang yang tinggi.'))


    @Rule(Fact(warrant_valued='bad'), Fact(per_valued='low'), Fact(roa_valued='high'))
    def ipo_rule_1421(self):
        self.declare(Fact(recommendation='Warrant menunjukkan kondisi buruk. PER berada di tingkat yang rendah. ROA menunjukkan efisiensi tinggi.'))


    @Rule(Fact(warrant_valued='bad'), Fact(per_valued='low'), Fact(roe_valued='high'))
    def ipo_rule_1422(self):
        self.declare(Fact(recommendation='Warrant menunjukkan kondisi buruk. PER berada di tingkat yang rendah. ROE menunjukkan keuntungan yang tinggi.'))


    @Rule(Fact(warrant_valued='bad'), Fact(der_valued='high'), Fact(roa_valued='high'))
    def ipo_rule_1423(self):
        self.declare(Fact(recommendation='Warrant menunjukkan kondisi buruk. DER menunjukkan tingkat hutang yang tinggi. ROA menunjukkan efisiensi tinggi.'))


    @Rule(Fact(warrant_valued='bad'), Fact(der_valued='high'), Fact(roe_valued='high'))
    def ipo_rule_1424(self):
        self.declare(Fact(recommendation='Warrant menunjukkan kondisi buruk. DER menunjukkan tingkat hutang yang tinggi. ROE menunjukkan keuntungan yang tinggi.'))


    @Rule(Fact(warrant_valued='bad'), Fact(roa_valued='high'), Fact(roe_valued='high'))
    def ipo_rule_1425(self):
        self.declare(Fact(recommendation='Warrant menunjukkan kondisi buruk. ROA menunjukkan efisiensi tinggi. ROE menunjukkan keuntungan yang tinggi.'))


    @Rule(Fact(net_income_valued='profit'), Fact(per_valued='low'), Fact(der_valued='high'))
    def ipo_rule_1426(self):
        self.declare(Fact(recommendation='Laba bersih menunjukkan keuntungan. PER berada di tingkat yang rendah. DER menunjukkan tingkat hutang yang tinggi.'))


    @Rule(Fact(net_income_valued='profit'), Fact(per_valued='low'), Fact(roa_valued='high'))
    def ipo_rule_1427(self):
        self.declare(Fact(recommendation='Laba bersih menunjukkan keuntungan. PER berada di tingkat yang rendah. ROA menunjukkan efisiensi tinggi.'))


    @Rule(Fact(net_income_valued='profit'), Fact(per_valued='low'), Fact(roe_valued='high'))
    def ipo_rule_1428(self):
        self.declare(Fact(recommendation='Laba bersih menunjukkan keuntungan. PER berada di tingkat yang rendah. ROE menunjukkan keuntungan yang tinggi.'))


    @Rule(Fact(net_income_valued='profit'), Fact(der_valued='high'), Fact(roa_valued='high'))
    def ipo_rule_1429(self):
        self.declare(Fact(recommendation='Laba bersih menunjukkan keuntungan. DER menunjukkan tingkat hutang yang tinggi. ROA menunjukkan efisiensi tinggi.'))


    @Rule(Fact(net_income_valued='profit'), Fact(der_valued='high'), Fact(roe_valued='high'))
    def ipo_rule_1430(self):
        self.declare(Fact(recommendation='Laba bersih menunjukkan keuntungan. DER menunjukkan tingkat hutang yang tinggi. ROE menunjukkan keuntungan yang tinggi.'))


    @Rule(Fact(net_income_valued='profit'), Fact(roa_valued='high'), Fact(roe_valued='high'))
    def ipo_rule_1431(self):
        self.declare(Fact(recommendation='Laba bersih menunjukkan keuntungan. ROA menunjukkan efisiensi tinggi. ROE menunjukkan keuntungan yang tinggi.'))


    @Rule(Fact(per_valued='low'), Fact(der_valued='high'), Fact(roa_valued='high'))
    def ipo_rule_1432(self):
        self.declare(Fact(recommendation='PER berada di tingkat yang rendah. DER menunjukkan tingkat hutang yang tinggi. ROA menunjukkan efisiensi tinggi.'))


    @Rule(Fact(per_valued='low'), Fact(der_valued='high'), Fact(roe_valued='high'))
    def ipo_rule_1433(self):
        self.declare(Fact(recommendation='PER berada di tingkat yang rendah. DER menunjukkan tingkat hutang yang tinggi. ROE menunjukkan keuntungan yang tinggi.'))


    @Rule(Fact(per_valued='low'), Fact(roa_valued='high'), Fact(roe_valued='high'))
    def ipo_rule_1434(self):
        self.declare(Fact(recommendation='PER berada di tingkat yang rendah. ROA menunjukkan efisiensi tinggi. ROE menunjukkan keuntungan yang tinggi.'))


    @Rule(Fact(der_valued='high'), Fact(roa_valued='high'), Fact(roe_valued='high'))
    def ipo_rule_1435(self):
        self.declare(Fact(recommendation='DER menunjukkan tingkat hutang yang tinggi. ROA menunjukkan efisiensi tinggi. ROE menunjukkan keuntungan yang tinggi.'))


    @Rule(Fact(underwriter_valued='good'), Fact(warrant_valued='bad'), Fact(net_income_valued='profit'))
    def ipo_rule_1436(self):
        self.declare(Fact(recommendation='Underwriter berkualitas baik. Warrant menunjukkan kondisi buruk. Laba bersih menunjukkan keuntungan.'))


    @Rule(Fact(underwriter_valued='good'), Fact(warrant_valued='bad'), Fact(per_valued='low'))
    def ipo_rule_1437(self):
        self.declare(Fact(recommendation='Underwriter berkualitas baik. Warrant menunjukkan kondisi buruk. PER berada di tingkat yang rendah.'))


    @Rule(Fact(underwriter_valued='good'), Fact(warrant_valued='bad'), Fact(der_valued='high'))
    def ipo_rule_1438(self):
        self.declare(Fact(recommendation='Underwriter berkualitas baik. Warrant menunjukkan kondisi buruk. DER menunjukkan tingkat hutang yang tinggi.'))


    @Rule(Fact(underwriter_valued='good'), Fact(warrant_valued='bad'), Fact(roa_valued='high'))
    def ipo_rule_1439(self):
        self.declare(Fact(recommendation='Underwriter berkualitas baik. Warrant menunjukkan kondisi buruk. ROA menunjukkan efisiensi tinggi.'))


    @Rule(Fact(underwriter_valued='good'), Fact(warrant_valued='bad'), Fact(roe_valued='low'))
    def ipo_rule_1440(self):
        self.declare(Fact(recommendation='Underwriter berkualitas baik. Warrant menunjukkan kondisi buruk. ROE menunjukkan keuntungan yang rendah.'))


    @Rule(Fact(underwriter_valued='good'), Fact(net_income_valued='profit'), Fact(per_valued='low'))
    def ipo_rule_1441(self):
        self.declare(Fact(recommendation='Underwriter berkualitas baik. Laba bersih menunjukkan keuntungan. PER berada di tingkat yang rendah.'))


    @Rule(Fact(underwriter_valued='good'), Fact(net_income_valued='profit'), Fact(der_valued='high'))
    def ipo_rule_1442(self):
        self.declare(Fact(recommendation='Underwriter berkualitas baik. Laba bersih menunjukkan keuntungan. DER menunjukkan tingkat hutang yang tinggi.'))


    @Rule(Fact(underwriter_valued='good'), Fact(net_income_valued='profit'), Fact(roa_valued='high'))
    def ipo_rule_1443(self):
        self.declare(Fact(recommendation='Underwriter berkualitas baik. Laba bersih menunjukkan keuntungan. ROA menunjukkan efisiensi tinggi.'))


    @Rule(Fact(underwriter_valued='good'), Fact(net_income_valued='profit'), Fact(roe_valued='low'))
    def ipo_rule_1444(self):
        self.declare(Fact(recommendation='Underwriter berkualitas baik. Laba bersih menunjukkan keuntungan. ROE menunjukkan keuntungan yang rendah.'))


    @Rule(Fact(underwriter_valued='good'), Fact(per_valued='low'), Fact(der_valued='high'))
    def ipo_rule_1445(self):
        self.declare(Fact(recommendation='Underwriter berkualitas baik. PER berada di tingkat yang rendah. DER menunjukkan tingkat hutang yang tinggi.'))


    @Rule(Fact(underwriter_valued='good'), Fact(per_valued='low'), Fact(roa_valued='high'))
    def ipo_rule_1446(self):
        self.declare(Fact(recommendation='Underwriter berkualitas baik. PER berada di tingkat yang rendah. ROA menunjukkan efisiensi tinggi.'))


    @Rule(Fact(underwriter_valued='good'), Fact(per_valued='low'), Fact(roe_valued='low'))
    def ipo_rule_1447(self):
        self.declare(Fact(recommendation='Underwriter berkualitas baik. PER berada di tingkat yang rendah. ROE menunjukkan keuntungan yang rendah.'))


    @Rule(Fact(underwriter_valued='good'), Fact(der_valued='high'), Fact(roa_valued='high'))
    def ipo_rule_1448(self):
        self.declare(Fact(recommendation='Underwriter berkualitas baik. DER menunjukkan tingkat hutang yang tinggi. ROA menunjukkan efisiensi tinggi.'))


    @Rule(Fact(underwriter_valued='good'), Fact(der_valued='high'), Fact(roe_valued='low'))
    def ipo_rule_1449(self):
        self.declare(Fact(recommendation='Underwriter berkualitas baik. DER menunjukkan tingkat hutang yang tinggi. ROE menunjukkan keuntungan yang rendah.'))


    @Rule(Fact(underwriter_valued='good'), Fact(roa_valued='high'), Fact(roe_valued='low'))
    def ipo_rule_1450(self):
        self.declare(Fact(recommendation='Underwriter berkualitas baik. ROA menunjukkan efisiensi tinggi. ROE menunjukkan keuntungan yang rendah.'))


    @Rule(Fact(warrant_valued='bad'), Fact(net_income_valued='profit'), Fact(per_valued='low'))
    def ipo_rule_1451(self):
        self.declare(Fact(recommendation='Warrant menunjukkan kondisi buruk. Laba bersih menunjukkan keuntungan. PER berada di tingkat yang rendah.'))


    @Rule(Fact(warrant_valued='bad'), Fact(net_income_valued='profit'), Fact(der_valued='high'))
    def ipo_rule_1452(self):
        self.declare(Fact(recommendation='Warrant menunjukkan kondisi buruk. Laba bersih menunjukkan keuntungan. DER menunjukkan tingkat hutang yang tinggi.'))


    @Rule(Fact(warrant_valued='bad'), Fact(net_income_valued='profit'), Fact(roa_valued='high'))
    def ipo_rule_1453(self):
        self.declare(Fact(recommendation='Warrant menunjukkan kondisi buruk. Laba bersih menunjukkan keuntungan. ROA menunjukkan efisiensi tinggi.'))


    @Rule(Fact(warrant_valued='bad'), Fact(net_income_valued='profit'), Fact(roe_valued='low'))
    def ipo_rule_1454(self):
        self.declare(Fact(recommendation='Warrant menunjukkan kondisi buruk. Laba bersih menunjukkan keuntungan. ROE menunjukkan keuntungan yang rendah.'))


    @Rule(Fact(warrant_valued='bad'), Fact(per_valued='low'), Fact(der_valued='high'))
    def ipo_rule_1455(self):
        self.declare(Fact(recommendation='Warrant menunjukkan kondisi buruk. PER berada di tingkat yang rendah. DER menunjukkan tingkat hutang yang tinggi.'))


    @Rule(Fact(warrant_valued='bad'), Fact(per_valued='low'), Fact(roa_valued='high'))
    def ipo_rule_1456(self):
        self.declare(Fact(recommendation='Warrant menunjukkan kondisi buruk. PER berada di tingkat yang rendah. ROA menunjukkan efisiensi tinggi.'))


    @Rule(Fact(warrant_valued='bad'), Fact(per_valued='low'), Fact(roe_valued='low'))
    def ipo_rule_1457(self):
        self.declare(Fact(recommendation='Warrant menunjukkan kondisi buruk. PER berada di tingkat yang rendah. ROE menunjukkan keuntungan yang rendah.'))


    @Rule(Fact(warrant_valued='bad'), Fact(der_valued='high'), Fact(roa_valued='high'))
    def ipo_rule_1458(self):
        self.declare(Fact(recommendation='Warrant menunjukkan kondisi buruk. DER menunjukkan tingkat hutang yang tinggi. ROA menunjukkan efisiensi tinggi.'))


    @Rule(Fact(warrant_valued='bad'), Fact(der_valued='high'), Fact(roe_valued='low'))
    def ipo_rule_1459(self):
        self.declare(Fact(recommendation='Warrant menunjukkan kondisi buruk. DER menunjukkan tingkat hutang yang tinggi. ROE menunjukkan keuntungan yang rendah.'))


    @Rule(Fact(warrant_valued='bad'), Fact(roa_valued='high'), Fact(roe_valued='low'))
    def ipo_rule_1460(self):
        self.declare(Fact(recommendation='Warrant menunjukkan kondisi buruk. ROA menunjukkan efisiensi tinggi. ROE menunjukkan keuntungan yang rendah.'))


    @Rule(Fact(net_income_valued='profit'), Fact(per_valued='low'), Fact(der_valued='high'))
    def ipo_rule_1461(self):
        self.declare(Fact(recommendation='Laba bersih menunjukkan keuntungan. PER berada di tingkat yang rendah. DER menunjukkan tingkat hutang yang tinggi.'))


    @Rule(Fact(net_income_valued='profit'), Fact(per_valued='low'), Fact(roa_valued='high'))
    def ipo_rule_1462(self):
        self.declare(Fact(recommendation='Laba bersih menunjukkan keuntungan. PER berada di tingkat yang rendah. ROA menunjukkan efisiensi tinggi.'))


    @Rule(Fact(net_income_valued='profit'), Fact(per_valued='low'), Fact(roe_valued='low'))
    def ipo_rule_1463(self):
        self.declare(Fact(recommendation='Laba bersih menunjukkan keuntungan. PER berada di tingkat yang rendah. ROE menunjukkan keuntungan yang rendah.'))


    @Rule(Fact(net_income_valued='profit'), Fact(der_valued='high'), Fact(roa_valued='high'))
    def ipo_rule_1464(self):
        self.declare(Fact(recommendation='Laba bersih menunjukkan keuntungan. DER menunjukkan tingkat hutang yang tinggi. ROA menunjukkan efisiensi tinggi.'))


    @Rule(Fact(net_income_valued='profit'), Fact(der_valued='high'), Fact(roe_valued='low'))
    def ipo_rule_1465(self):
        self.declare(Fact(recommendation='Laba bersih menunjukkan keuntungan. DER menunjukkan tingkat hutang yang tinggi. ROE menunjukkan keuntungan yang rendah.'))


    @Rule(Fact(net_income_valued='profit'), Fact(roa_valued='high'), Fact(roe_valued='low'))
    def ipo_rule_1466(self):
        self.declare(Fact(recommendation='Laba bersih menunjukkan keuntungan. ROA menunjukkan efisiensi tinggi. ROE menunjukkan keuntungan yang rendah.'))


    @Rule(Fact(per_valued='low'), Fact(der_valued='high'), Fact(roa_valued='high'))
    def ipo_rule_1467(self):
        self.declare(Fact(recommendation='PER berada di tingkat yang rendah. DER menunjukkan tingkat hutang yang tinggi. ROA menunjukkan efisiensi tinggi.'))


    @Rule(Fact(per_valued='low'), Fact(der_valued='high'), Fact(roe_valued='low'))
    def ipo_rule_1468(self):
        self.declare(Fact(recommendation='PER berada di tingkat yang rendah. DER menunjukkan tingkat hutang yang tinggi. ROE menunjukkan keuntungan yang rendah.'))


    @Rule(Fact(per_valued='low'), Fact(roa_valued='high'), Fact(roe_valued='low'))
    def ipo_rule_1469(self):
        self.declare(Fact(recommendation='PER berada di tingkat yang rendah. ROA menunjukkan efisiensi tinggi. ROE menunjukkan keuntungan yang rendah.'))


    @Rule(Fact(der_valued='high'), Fact(roa_valued='high'), Fact(roe_valued='low'))
    def ipo_rule_1470(self):
        self.declare(Fact(recommendation='DER menunjukkan tingkat hutang yang tinggi. ROA menunjukkan efisiensi tinggi. ROE menunjukkan keuntungan yang rendah.'))


    @Rule(Fact(underwriter_valued='good'), Fact(warrant_valued='bad'), Fact(net_income_valued='profit'))
    def ipo_rule_1471(self):
        self.declare(Fact(recommendation='Underwriter berkualitas baik. Warrant menunjukkan kondisi buruk. Laba bersih menunjukkan keuntungan.'))


    @Rule(Fact(underwriter_valued='good'), Fact(warrant_valued='bad'), Fact(per_valued='low'))
    def ipo_rule_1472(self):
        self.declare(Fact(recommendation='Underwriter berkualitas baik. Warrant menunjukkan kondisi buruk. PER berada di tingkat yang rendah.'))


    @Rule(Fact(underwriter_valued='good'), Fact(warrant_valued='bad'), Fact(der_valued='high'))
    def ipo_rule_1473(self):
        self.declare(Fact(recommendation='Underwriter berkualitas baik. Warrant menunjukkan kondisi buruk. DER menunjukkan tingkat hutang yang tinggi.'))


    @Rule(Fact(underwriter_valued='good'), Fact(warrant_valued='bad'), Fact(roa_valued='low'))
    def ipo_rule_1474(self):
        self.declare(Fact(recommendation='Underwriter berkualitas baik. Warrant menunjukkan kondisi buruk. ROA menunjukkan efisiensi rendah.'))


    @Rule(Fact(underwriter_valued='good'), Fact(warrant_valued='bad'), Fact(roe_valued='high'))
    def ipo_rule_1475(self):
        self.declare(Fact(recommendation='Underwriter berkualitas baik. Warrant menunjukkan kondisi buruk. ROE menunjukkan keuntungan yang tinggi.'))


    @Rule(Fact(underwriter_valued='good'), Fact(net_income_valued='profit'), Fact(per_valued='low'))
    def ipo_rule_1476(self):
        self.declare(Fact(recommendation='Underwriter berkualitas baik. Laba bersih menunjukkan keuntungan. PER berada di tingkat yang rendah.'))


    @Rule(Fact(underwriter_valued='good'), Fact(net_income_valued='profit'), Fact(der_valued='high'))
    def ipo_rule_1477(self):
        self.declare(Fact(recommendation='Underwriter berkualitas baik. Laba bersih menunjukkan keuntungan. DER menunjukkan tingkat hutang yang tinggi.'))


    @Rule(Fact(underwriter_valued='good'), Fact(net_income_valued='profit'), Fact(roa_valued='low'))
    def ipo_rule_1478(self):
        self.declare(Fact(recommendation='Underwriter berkualitas baik. Laba bersih menunjukkan keuntungan. ROA menunjukkan efisiensi rendah.'))


    @Rule(Fact(underwriter_valued='good'), Fact(net_income_valued='profit'), Fact(roe_valued='high'))
    def ipo_rule_1479(self):
        self.declare(Fact(recommendation='Underwriter berkualitas baik. Laba bersih menunjukkan keuntungan. ROE menunjukkan keuntungan yang tinggi.'))


    @Rule(Fact(underwriter_valued='good'), Fact(per_valued='low'), Fact(der_valued='high'))
    def ipo_rule_1480(self):
        self.declare(Fact(recommendation='Underwriter berkualitas baik. PER berada di tingkat yang rendah. DER menunjukkan tingkat hutang yang tinggi.'))


    @Rule(Fact(underwriter_valued='good'), Fact(per_valued='low'), Fact(roa_valued='low'))
    def ipo_rule_1481(self):
        self.declare(Fact(recommendation='Underwriter berkualitas baik. PER berada di tingkat yang rendah. ROA menunjukkan efisiensi rendah.'))


    @Rule(Fact(underwriter_valued='good'), Fact(per_valued='low'), Fact(roe_valued='high'))
    def ipo_rule_1482(self):
        self.declare(Fact(recommendation='Underwriter berkualitas baik. PER berada di tingkat yang rendah. ROE menunjukkan keuntungan yang tinggi.'))


    @Rule(Fact(underwriter_valued='good'), Fact(der_valued='high'), Fact(roa_valued='low'))
    def ipo_rule_1483(self):
        self.declare(Fact(recommendation='Underwriter berkualitas baik. DER menunjukkan tingkat hutang yang tinggi. ROA menunjukkan efisiensi rendah.'))


    @Rule(Fact(underwriter_valued='good'), Fact(der_valued='high'), Fact(roe_valued='high'))
    def ipo_rule_1484(self):
        self.declare(Fact(recommendation='Underwriter berkualitas baik. DER menunjukkan tingkat hutang yang tinggi. ROE menunjukkan keuntungan yang tinggi.'))


    @Rule(Fact(underwriter_valued='good'), Fact(roa_valued='low'), Fact(roe_valued='high'))
    def ipo_rule_1485(self):
        self.declare(Fact(recommendation='Underwriter berkualitas baik. ROA menunjukkan efisiensi rendah. ROE menunjukkan keuntungan yang tinggi.'))


    @Rule(Fact(warrant_valued='bad'), Fact(net_income_valued='profit'), Fact(per_valued='low'))
    def ipo_rule_1486(self):
        self.declare(Fact(recommendation='Warrant menunjukkan kondisi buruk. Laba bersih menunjukkan keuntungan. PER berada di tingkat yang rendah.'))


    @Rule(Fact(warrant_valued='bad'), Fact(net_income_valued='profit'), Fact(der_valued='high'))
    def ipo_rule_1487(self):
        self.declare(Fact(recommendation='Warrant menunjukkan kondisi buruk. Laba bersih menunjukkan keuntungan. DER menunjukkan tingkat hutang yang tinggi.'))


    @Rule(Fact(warrant_valued='bad'), Fact(net_income_valued='profit'), Fact(roa_valued='low'))
    def ipo_rule_1488(self):
        self.declare(Fact(recommendation='Warrant menunjukkan kondisi buruk. Laba bersih menunjukkan keuntungan. ROA menunjukkan efisiensi rendah.'))


    @Rule(Fact(warrant_valued='bad'), Fact(net_income_valued='profit'), Fact(roe_valued='high'))
    def ipo_rule_1489(self):
        self.declare(Fact(recommendation='Warrant menunjukkan kondisi buruk. Laba bersih menunjukkan keuntungan. ROE menunjukkan keuntungan yang tinggi.'))


    @Rule(Fact(warrant_valued='bad'), Fact(per_valued='low'), Fact(der_valued='high'))
    def ipo_rule_1490(self):
        self.declare(Fact(recommendation='Warrant menunjukkan kondisi buruk. PER berada di tingkat yang rendah. DER menunjukkan tingkat hutang yang tinggi.'))


    @Rule(Fact(warrant_valued='bad'), Fact(per_valued='low'), Fact(roa_valued='low'))
    def ipo_rule_1491(self):
        self.declare(Fact(recommendation='Warrant menunjukkan kondisi buruk. PER berada di tingkat yang rendah. ROA menunjukkan efisiensi rendah.'))


    @Rule(Fact(warrant_valued='bad'), Fact(per_valued='low'), Fact(roe_valued='high'))
    def ipo_rule_1492(self):
        self.declare(Fact(recommendation='Warrant menunjukkan kondisi buruk. PER berada di tingkat yang rendah. ROE menunjukkan keuntungan yang tinggi.'))


    @Rule(Fact(warrant_valued='bad'), Fact(der_valued='high'), Fact(roa_valued='low'))
    def ipo_rule_1493(self):
        self.declare(Fact(recommendation='Warrant menunjukkan kondisi buruk. DER menunjukkan tingkat hutang yang tinggi. ROA menunjukkan efisiensi rendah.'))


    @Rule(Fact(warrant_valued='bad'), Fact(der_valued='high'), Fact(roe_valued='high'))
    def ipo_rule_1494(self):
        self.declare(Fact(recommendation='Warrant menunjukkan kondisi buruk. DER menunjukkan tingkat hutang yang tinggi. ROE menunjukkan keuntungan yang tinggi.'))


    @Rule(Fact(warrant_valued='bad'), Fact(roa_valued='low'), Fact(roe_valued='high'))
    def ipo_rule_1495(self):
        self.declare(Fact(recommendation='Warrant menunjukkan kondisi buruk. ROA menunjukkan efisiensi rendah. ROE menunjukkan keuntungan yang tinggi.'))


    @Rule(Fact(net_income_valued='profit'), Fact(per_valued='low'), Fact(der_valued='high'))
    def ipo_rule_1496(self):
        self.declare(Fact(recommendation='Laba bersih menunjukkan keuntungan. PER berada di tingkat yang rendah. DER menunjukkan tingkat hutang yang tinggi.'))


    @Rule(Fact(net_income_valued='profit'), Fact(per_valued='low'), Fact(roa_valued='low'))
    def ipo_rule_1497(self):
        self.declare(Fact(recommendation='Laba bersih menunjukkan keuntungan. PER berada di tingkat yang rendah. ROA menunjukkan efisiensi rendah.'))


    @Rule(Fact(net_income_valued='profit'), Fact(per_valued='low'), Fact(roe_valued='high'))
    def ipo_rule_1498(self):
        self.declare(Fact(recommendation='Laba bersih menunjukkan keuntungan. PER berada di tingkat yang rendah. ROE menunjukkan keuntungan yang tinggi.'))


    @Rule(Fact(net_income_valued='profit'), Fact(der_valued='high'), Fact(roa_valued='low'))
    def ipo_rule_1499(self):
        self.declare(Fact(recommendation='Laba bersih menunjukkan keuntungan. DER menunjukkan tingkat hutang yang tinggi. ROA menunjukkan efisiensi rendah.'))


    @Rule(Fact(net_income_valued='profit'), Fact(der_valued='high'), Fact(roe_valued='high'))
    def ipo_rule_1500(self):
        self.declare(Fact(recommendation='Laba bersih menunjukkan keuntungan. DER menunjukkan tingkat hutang yang tinggi. ROE menunjukkan keuntungan yang tinggi.'))


    @Rule(Fact(net_income_valued='profit'), Fact(roa_valued='low'), Fact(roe_valued='high'))
    def ipo_rule_1501(self):
        self.declare(Fact(recommendation='Laba bersih menunjukkan keuntungan. ROA menunjukkan efisiensi rendah. ROE menunjukkan keuntungan yang tinggi.'))


    @Rule(Fact(per_valued='low'), Fact(der_valued='high'), Fact(roa_valued='low'))
    def ipo_rule_1502(self):
        self.declare(Fact(recommendation='PER berada di tingkat yang rendah. DER menunjukkan tingkat hutang yang tinggi. ROA menunjukkan efisiensi rendah.'))


    @Rule(Fact(per_valued='low'), Fact(der_valued='high'), Fact(roe_valued='high'))
    def ipo_rule_1503(self):
        self.declare(Fact(recommendation='PER berada di tingkat yang rendah. DER menunjukkan tingkat hutang yang tinggi. ROE menunjukkan keuntungan yang tinggi.'))


    @Rule(Fact(per_valued='low'), Fact(roa_valued='low'), Fact(roe_valued='high'))
    def ipo_rule_1504(self):
        self.declare(Fact(recommendation='PER berada di tingkat yang rendah. ROA menunjukkan efisiensi rendah. ROE menunjukkan keuntungan yang tinggi.'))


    @Rule(Fact(der_valued='high'), Fact(roa_valued='low'), Fact(roe_valued='high'))
    def ipo_rule_1505(self):
        self.declare(Fact(recommendation='DER menunjukkan tingkat hutang yang tinggi. ROA menunjukkan efisiensi rendah. ROE menunjukkan keuntungan yang tinggi.'))


    @Rule(Fact(underwriter_valued='good'), Fact(warrant_valued='bad'), Fact(net_income_valued='profit'))
    def ipo_rule_1506(self):
        self.declare(Fact(recommendation='Underwriter berkualitas baik. Warrant menunjukkan kondisi buruk. Laba bersih menunjukkan keuntungan.'))


    @Rule(Fact(underwriter_valued='good'), Fact(warrant_valued='bad'), Fact(per_valued='low'))
    def ipo_rule_1507(self):
        self.declare(Fact(recommendation='Underwriter berkualitas baik. Warrant menunjukkan kondisi buruk. PER berada di tingkat yang rendah.'))


    @Rule(Fact(underwriter_valued='good'), Fact(warrant_valued='bad'), Fact(der_valued='high'))
    def ipo_rule_1508(self):
        self.declare(Fact(recommendation='Underwriter berkualitas baik. Warrant menunjukkan kondisi buruk. DER menunjukkan tingkat hutang yang tinggi.'))


    @Rule(Fact(underwriter_valued='good'), Fact(warrant_valued='bad'), Fact(roa_valued='low'))
    def ipo_rule_1509(self):
        self.declare(Fact(recommendation='Underwriter berkualitas baik. Warrant menunjukkan kondisi buruk. ROA menunjukkan efisiensi rendah.'))


    @Rule(Fact(underwriter_valued='good'), Fact(warrant_valued='bad'), Fact(roe_valued='low'))
    def ipo_rule_1510(self):
        self.declare(Fact(recommendation='Underwriter berkualitas baik. Warrant menunjukkan kondisi buruk. ROE menunjukkan keuntungan yang rendah.'))


    @Rule(Fact(underwriter_valued='good'), Fact(net_income_valued='profit'), Fact(per_valued='low'))
    def ipo_rule_1511(self):
        self.declare(Fact(recommendation='Underwriter berkualitas baik. Laba bersih menunjukkan keuntungan. PER berada di tingkat yang rendah.'))


    @Rule(Fact(underwriter_valued='good'), Fact(net_income_valued='profit'), Fact(der_valued='high'))
    def ipo_rule_1512(self):
        self.declare(Fact(recommendation='Underwriter berkualitas baik. Laba bersih menunjukkan keuntungan. DER menunjukkan tingkat hutang yang tinggi.'))


    @Rule(Fact(underwriter_valued='good'), Fact(net_income_valued='profit'), Fact(roa_valued='low'))
    def ipo_rule_1513(self):
        self.declare(Fact(recommendation='Underwriter berkualitas baik. Laba bersih menunjukkan keuntungan. ROA menunjukkan efisiensi rendah.'))


    @Rule(Fact(underwriter_valued='good'), Fact(net_income_valued='profit'), Fact(roe_valued='low'))
    def ipo_rule_1514(self):
        self.declare(Fact(recommendation='Underwriter berkualitas baik. Laba bersih menunjukkan keuntungan. ROE menunjukkan keuntungan yang rendah.'))


    @Rule(Fact(underwriter_valued='good'), Fact(per_valued='low'), Fact(der_valued='high'))
    def ipo_rule_1515(self):
        self.declare(Fact(recommendation='Underwriter berkualitas baik. PER berada di tingkat yang rendah. DER menunjukkan tingkat hutang yang tinggi.'))


    @Rule(Fact(underwriter_valued='good'), Fact(per_valued='low'), Fact(roa_valued='low'))
    def ipo_rule_1516(self):
        self.declare(Fact(recommendation='Underwriter berkualitas baik. PER berada di tingkat yang rendah. ROA menunjukkan efisiensi rendah.'))


    @Rule(Fact(underwriter_valued='good'), Fact(per_valued='low'), Fact(roe_valued='low'))
    def ipo_rule_1517(self):
        self.declare(Fact(recommendation='Underwriter berkualitas baik. PER berada di tingkat yang rendah. ROE menunjukkan keuntungan yang rendah.'))


    @Rule(Fact(underwriter_valued='good'), Fact(der_valued='high'), Fact(roa_valued='low'))
    def ipo_rule_1518(self):
        self.declare(Fact(recommendation='Underwriter berkualitas baik. DER menunjukkan tingkat hutang yang tinggi. ROA menunjukkan efisiensi rendah.'))


    @Rule(Fact(underwriter_valued='good'), Fact(der_valued='high'), Fact(roe_valued='low'))
    def ipo_rule_1519(self):
        self.declare(Fact(recommendation='Underwriter berkualitas baik. DER menunjukkan tingkat hutang yang tinggi. ROE menunjukkan keuntungan yang rendah.'))


    @Rule(Fact(underwriter_valued='good'), Fact(roa_valued='low'), Fact(roe_valued='low'))
    def ipo_rule_1520(self):
        self.declare(Fact(recommendation='Underwriter berkualitas baik. ROA menunjukkan efisiensi rendah. ROE menunjukkan keuntungan yang rendah.'))


    @Rule(Fact(warrant_valued='bad'), Fact(net_income_valued='profit'), Fact(per_valued='low'))
    def ipo_rule_1521(self):
        self.declare(Fact(recommendation='Warrant menunjukkan kondisi buruk. Laba bersih menunjukkan keuntungan. PER berada di tingkat yang rendah.'))


    @Rule(Fact(warrant_valued='bad'), Fact(net_income_valued='profit'), Fact(der_valued='high'))
    def ipo_rule_1522(self):
        self.declare(Fact(recommendation='Warrant menunjukkan kondisi buruk. Laba bersih menunjukkan keuntungan. DER menunjukkan tingkat hutang yang tinggi.'))


    @Rule(Fact(warrant_valued='bad'), Fact(net_income_valued='profit'), Fact(roa_valued='low'))
    def ipo_rule_1523(self):
        self.declare(Fact(recommendation='Warrant menunjukkan kondisi buruk. Laba bersih menunjukkan keuntungan. ROA menunjukkan efisiensi rendah.'))


    @Rule(Fact(warrant_valued='bad'), Fact(net_income_valued='profit'), Fact(roe_valued='low'))
    def ipo_rule_1524(self):
        self.declare(Fact(recommendation='Warrant menunjukkan kondisi buruk. Laba bersih menunjukkan keuntungan. ROE menunjukkan keuntungan yang rendah.'))


    @Rule(Fact(warrant_valued='bad'), Fact(per_valued='low'), Fact(der_valued='high'))
    def ipo_rule_1525(self):
        self.declare(Fact(recommendation='Warrant menunjukkan kondisi buruk. PER berada di tingkat yang rendah. DER menunjukkan tingkat hutang yang tinggi.'))


    @Rule(Fact(warrant_valued='bad'), Fact(per_valued='low'), Fact(roa_valued='low'))
    def ipo_rule_1526(self):
        self.declare(Fact(recommendation='Warrant menunjukkan kondisi buruk. PER berada di tingkat yang rendah. ROA menunjukkan efisiensi rendah.'))


    @Rule(Fact(warrant_valued='bad'), Fact(per_valued='low'), Fact(roe_valued='low'))
    def ipo_rule_1527(self):
        self.declare(Fact(recommendation='Warrant menunjukkan kondisi buruk. PER berada di tingkat yang rendah. ROE menunjukkan keuntungan yang rendah.'))


    @Rule(Fact(warrant_valued='bad'), Fact(der_valued='high'), Fact(roa_valued='low'))
    def ipo_rule_1528(self):
        self.declare(Fact(recommendation='Warrant menunjukkan kondisi buruk. DER menunjukkan tingkat hutang yang tinggi. ROA menunjukkan efisiensi rendah.'))


    @Rule(Fact(warrant_valued='bad'), Fact(der_valued='high'), Fact(roe_valued='low'))
    def ipo_rule_1529(self):
        self.declare(Fact(recommendation='Warrant menunjukkan kondisi buruk. DER menunjukkan tingkat hutang yang tinggi. ROE menunjukkan keuntungan yang rendah.'))


    @Rule(Fact(warrant_valued='bad'), Fact(roa_valued='low'), Fact(roe_valued='low'))
    def ipo_rule_1530(self):
        self.declare(Fact(recommendation='Warrant menunjukkan kondisi buruk. ROA menunjukkan efisiensi rendah. ROE menunjukkan keuntungan yang rendah.'))


    @Rule(Fact(net_income_valued='profit'), Fact(per_valued='low'), Fact(der_valued='high'))
    def ipo_rule_1531(self):
        self.declare(Fact(recommendation='Laba bersih menunjukkan keuntungan. PER berada di tingkat yang rendah. DER menunjukkan tingkat hutang yang tinggi.'))


    @Rule(Fact(net_income_valued='profit'), Fact(per_valued='low'), Fact(roa_valued='low'))
    def ipo_rule_1532(self):
        self.declare(Fact(recommendation='Laba bersih menunjukkan keuntungan. PER berada di tingkat yang rendah. ROA menunjukkan efisiensi rendah.'))


    @Rule(Fact(net_income_valued='profit'), Fact(per_valued='low'), Fact(roe_valued='low'))
    def ipo_rule_1533(self):
        self.declare(Fact(recommendation='Laba bersih menunjukkan keuntungan. PER berada di tingkat yang rendah. ROE menunjukkan keuntungan yang rendah.'))


    @Rule(Fact(net_income_valued='profit'), Fact(der_valued='high'), Fact(roa_valued='low'))
    def ipo_rule_1534(self):
        self.declare(Fact(recommendation='Laba bersih menunjukkan keuntungan. DER menunjukkan tingkat hutang yang tinggi. ROA menunjukkan efisiensi rendah.'))


    @Rule(Fact(net_income_valued='profit'), Fact(der_valued='high'), Fact(roe_valued='low'))
    def ipo_rule_1535(self):
        self.declare(Fact(recommendation='Laba bersih menunjukkan keuntungan. DER menunjukkan tingkat hutang yang tinggi. ROE menunjukkan keuntungan yang rendah.'))


    @Rule(Fact(net_income_valued='profit'), Fact(roa_valued='low'), Fact(roe_valued='low'))
    def ipo_rule_1536(self):
        self.declare(Fact(recommendation='Laba bersih menunjukkan keuntungan. ROA menunjukkan efisiensi rendah. ROE menunjukkan keuntungan yang rendah.'))


    @Rule(Fact(per_valued='low'), Fact(der_valued='high'), Fact(roa_valued='low'))
    def ipo_rule_1537(self):
        self.declare(Fact(recommendation='PER berada di tingkat yang rendah. DER menunjukkan tingkat hutang yang tinggi. ROA menunjukkan efisiensi rendah.'))


    @Rule(Fact(per_valued='low'), Fact(der_valued='high'), Fact(roe_valued='low'))
    def ipo_rule_1538(self):
        self.declare(Fact(recommendation='PER berada di tingkat yang rendah. DER menunjukkan tingkat hutang yang tinggi. ROE menunjukkan keuntungan yang rendah.'))


    @Rule(Fact(per_valued='low'), Fact(roa_valued='low'), Fact(roe_valued='low'))
    def ipo_rule_1539(self):
        self.declare(Fact(recommendation='PER berada di tingkat yang rendah. ROA menunjukkan efisiensi rendah. ROE menunjukkan keuntungan yang rendah.'))


    @Rule(Fact(der_valued='high'), Fact(roa_valued='low'), Fact(roe_valued='low'))
    def ipo_rule_1540(self):
        self.declare(Fact(recommendation='DER menunjukkan tingkat hutang yang tinggi. ROA menunjukkan efisiensi rendah. ROE menunjukkan keuntungan yang rendah.'))


    @Rule(Fact(underwriter_valued='good'), Fact(warrant_valued='bad'), Fact(net_income_valued='profit'))
    def ipo_rule_1541(self):
        self.declare(Fact(recommendation='Underwriter berkualitas baik. Warrant menunjukkan kondisi buruk. Laba bersih menunjukkan keuntungan.'))


    @Rule(Fact(underwriter_valued='good'), Fact(warrant_valued='bad'), Fact(per_valued='low'))
    def ipo_rule_1542(self):
        self.declare(Fact(recommendation='Underwriter berkualitas baik. Warrant menunjukkan kondisi buruk. PER berada di tingkat yang rendah.'))


    @Rule(Fact(underwriter_valued='good'), Fact(warrant_valued='bad'), Fact(der_valued='low'))
    def ipo_rule_1543(self):
        self.declare(Fact(recommendation='Underwriter berkualitas baik. Warrant menunjukkan kondisi buruk. DER menunjukkan tingkat hutang yang rendah.'))


    @Rule(Fact(underwriter_valued='good'), Fact(warrant_valued='bad'), Fact(roa_valued='high'))
    def ipo_rule_1544(self):
        self.declare(Fact(recommendation='Underwriter berkualitas baik. Warrant menunjukkan kondisi buruk. ROA menunjukkan efisiensi tinggi.'))


    @Rule(Fact(underwriter_valued='good'), Fact(warrant_valued='bad'), Fact(roe_valued='high'))
    def ipo_rule_1545(self):
        self.declare(Fact(recommendation='Underwriter berkualitas baik. Warrant menunjukkan kondisi buruk. ROE menunjukkan keuntungan yang tinggi.'))


    @Rule(Fact(underwriter_valued='good'), Fact(net_income_valued='profit'), Fact(per_valued='low'))
    def ipo_rule_1546(self):
        self.declare(Fact(recommendation='Underwriter berkualitas baik. Laba bersih menunjukkan keuntungan. PER berada di tingkat yang rendah.'))


    @Rule(Fact(underwriter_valued='good'), Fact(net_income_valued='profit'), Fact(der_valued='low'))
    def ipo_rule_1547(self):
        self.declare(Fact(recommendation='Underwriter berkualitas baik. Laba bersih menunjukkan keuntungan. DER menunjukkan tingkat hutang yang rendah.'))


    @Rule(Fact(underwriter_valued='good'), Fact(net_income_valued='profit'), Fact(roa_valued='high'))
    def ipo_rule_1548(self):
        self.declare(Fact(recommendation='Underwriter berkualitas baik. Laba bersih menunjukkan keuntungan. ROA menunjukkan efisiensi tinggi.'))


    @Rule(Fact(underwriter_valued='good'), Fact(net_income_valued='profit'), Fact(roe_valued='high'))
    def ipo_rule_1549(self):
        self.declare(Fact(recommendation='Underwriter berkualitas baik. Laba bersih menunjukkan keuntungan. ROE menunjukkan keuntungan yang tinggi.'))


    @Rule(Fact(underwriter_valued='good'), Fact(per_valued='low'), Fact(der_valued='low'))
    def ipo_rule_1550(self):
        self.declare(Fact(recommendation='Underwriter berkualitas baik. PER berada di tingkat yang rendah. DER menunjukkan tingkat hutang yang rendah.'))


    @Rule(Fact(underwriter_valued='good'), Fact(per_valued='low'), Fact(roa_valued='high'))
    def ipo_rule_1551(self):
        self.declare(Fact(recommendation='Underwriter berkualitas baik. PER berada di tingkat yang rendah. ROA menunjukkan efisiensi tinggi.'))


    @Rule(Fact(underwriter_valued='good'), Fact(per_valued='low'), Fact(roe_valued='high'))
    def ipo_rule_1552(self):
        self.declare(Fact(recommendation='Underwriter berkualitas baik. PER berada di tingkat yang rendah. ROE menunjukkan keuntungan yang tinggi.'))


    @Rule(Fact(underwriter_valued='good'), Fact(der_valued='low'), Fact(roa_valued='high'))
    def ipo_rule_1553(self):
        self.declare(Fact(recommendation='Underwriter berkualitas baik. DER menunjukkan tingkat hutang yang rendah. ROA menunjukkan efisiensi tinggi.'))


    @Rule(Fact(underwriter_valued='good'), Fact(der_valued='low'), Fact(roe_valued='high'))
    def ipo_rule_1554(self):
        self.declare(Fact(recommendation='Underwriter berkualitas baik. DER menunjukkan tingkat hutang yang rendah. ROE menunjukkan keuntungan yang tinggi.'))


    @Rule(Fact(underwriter_valued='good'), Fact(roa_valued='high'), Fact(roe_valued='high'))
    def ipo_rule_1555(self):
        self.declare(Fact(recommendation='Underwriter berkualitas baik. ROA menunjukkan efisiensi tinggi. ROE menunjukkan keuntungan yang tinggi.'))


    @Rule(Fact(warrant_valued='bad'), Fact(net_income_valued='profit'), Fact(per_valued='low'))
    def ipo_rule_1556(self):
        self.declare(Fact(recommendation='Warrant menunjukkan kondisi buruk. Laba bersih menunjukkan keuntungan. PER berada di tingkat yang rendah.'))


    @Rule(Fact(warrant_valued='bad'), Fact(net_income_valued='profit'), Fact(der_valued='low'))
    def ipo_rule_1557(self):
        self.declare(Fact(recommendation='Warrant menunjukkan kondisi buruk. Laba bersih menunjukkan keuntungan. DER menunjukkan tingkat hutang yang rendah.'))


    @Rule(Fact(warrant_valued='bad'), Fact(net_income_valued='profit'), Fact(roa_valued='high'))
    def ipo_rule_1558(self):
        self.declare(Fact(recommendation='Warrant menunjukkan kondisi buruk. Laba bersih menunjukkan keuntungan. ROA menunjukkan efisiensi tinggi.'))


    @Rule(Fact(warrant_valued='bad'), Fact(net_income_valued='profit'), Fact(roe_valued='high'))
    def ipo_rule_1559(self):
        self.declare(Fact(recommendation='Warrant menunjukkan kondisi buruk. Laba bersih menunjukkan keuntungan. ROE menunjukkan keuntungan yang tinggi.'))


    @Rule(Fact(warrant_valued='bad'), Fact(per_valued='low'), Fact(der_valued='low'))
    def ipo_rule_1560(self):
        self.declare(Fact(recommendation='Warrant menunjukkan kondisi buruk. PER berada di tingkat yang rendah. DER menunjukkan tingkat hutang yang rendah.'))


    @Rule(Fact(warrant_valued='bad'), Fact(per_valued='low'), Fact(roa_valued='high'))
    def ipo_rule_1561(self):
        self.declare(Fact(recommendation='Warrant menunjukkan kondisi buruk. PER berada di tingkat yang rendah. ROA menunjukkan efisiensi tinggi.'))


    @Rule(Fact(warrant_valued='bad'), Fact(per_valued='low'), Fact(roe_valued='high'))
    def ipo_rule_1562(self):
        self.declare(Fact(recommendation='Warrant menunjukkan kondisi buruk. PER berada di tingkat yang rendah. ROE menunjukkan keuntungan yang tinggi.'))


    @Rule(Fact(warrant_valued='bad'), Fact(der_valued='low'), Fact(roa_valued='high'))
    def ipo_rule_1563(self):
        self.declare(Fact(recommendation='Warrant menunjukkan kondisi buruk. DER menunjukkan tingkat hutang yang rendah. ROA menunjukkan efisiensi tinggi.'))


    @Rule(Fact(warrant_valued='bad'), Fact(der_valued='low'), Fact(roe_valued='high'))
    def ipo_rule_1564(self):
        self.declare(Fact(recommendation='Warrant menunjukkan kondisi buruk. DER menunjukkan tingkat hutang yang rendah. ROE menunjukkan keuntungan yang tinggi.'))


    @Rule(Fact(warrant_valued='bad'), Fact(roa_valued='high'), Fact(roe_valued='high'))
    def ipo_rule_1565(self):
        self.declare(Fact(recommendation='Warrant menunjukkan kondisi buruk. ROA menunjukkan efisiensi tinggi. ROE menunjukkan keuntungan yang tinggi.'))


    @Rule(Fact(net_income_valued='profit'), Fact(per_valued='low'), Fact(der_valued='low'))
    def ipo_rule_1566(self):
        self.declare(Fact(recommendation='Laba bersih menunjukkan keuntungan. PER berada di tingkat yang rendah. DER menunjukkan tingkat hutang yang rendah.'))


    @Rule(Fact(net_income_valued='profit'), Fact(per_valued='low'), Fact(roa_valued='high'))
    def ipo_rule_1567(self):
        self.declare(Fact(recommendation='Laba bersih menunjukkan keuntungan. PER berada di tingkat yang rendah. ROA menunjukkan efisiensi tinggi.'))


    @Rule(Fact(net_income_valued='profit'), Fact(per_valued='low'), Fact(roe_valued='high'))
    def ipo_rule_1568(self):
        self.declare(Fact(recommendation='Laba bersih menunjukkan keuntungan. PER berada di tingkat yang rendah. ROE menunjukkan keuntungan yang tinggi.'))


    @Rule(Fact(net_income_valued='profit'), Fact(der_valued='low'), Fact(roa_valued='high'))
    def ipo_rule_1569(self):
        self.declare(Fact(recommendation='Laba bersih menunjukkan keuntungan. DER menunjukkan tingkat hutang yang rendah. ROA menunjukkan efisiensi tinggi.'))


    @Rule(Fact(net_income_valued='profit'), Fact(der_valued='low'), Fact(roe_valued='high'))
    def ipo_rule_1570(self):
        self.declare(Fact(recommendation='Laba bersih menunjukkan keuntungan. DER menunjukkan tingkat hutang yang rendah. ROE menunjukkan keuntungan yang tinggi.'))


    @Rule(Fact(net_income_valued='profit'), Fact(roa_valued='high'), Fact(roe_valued='high'))
    def ipo_rule_1571(self):
        self.declare(Fact(recommendation='Laba bersih menunjukkan keuntungan. ROA menunjukkan efisiensi tinggi. ROE menunjukkan keuntungan yang tinggi.'))


    @Rule(Fact(per_valued='low'), Fact(der_valued='low'), Fact(roa_valued='high'))
    def ipo_rule_1572(self):
        self.declare(Fact(recommendation='PER berada di tingkat yang rendah. DER menunjukkan tingkat hutang yang rendah. ROA menunjukkan efisiensi tinggi.'))


    @Rule(Fact(per_valued='low'), Fact(der_valued='low'), Fact(roe_valued='high'))
    def ipo_rule_1573(self):
        self.declare(Fact(recommendation='PER berada di tingkat yang rendah. DER menunjukkan tingkat hutang yang rendah. ROE menunjukkan keuntungan yang tinggi.'))


    @Rule(Fact(per_valued='low'), Fact(roa_valued='high'), Fact(roe_valued='high'))
    def ipo_rule_1574(self):
        self.declare(Fact(recommendation='PER berada di tingkat yang rendah. ROA menunjukkan efisiensi tinggi. ROE menunjukkan keuntungan yang tinggi.'))


    @Rule(Fact(der_valued='low'), Fact(roa_valued='high'), Fact(roe_valued='high'))
    def ipo_rule_1575(self):
        self.declare(Fact(recommendation='DER menunjukkan tingkat hutang yang rendah. ROA menunjukkan efisiensi tinggi. ROE menunjukkan keuntungan yang tinggi.'))


    @Rule(Fact(underwriter_valued='good'), Fact(warrant_valued='bad'), Fact(net_income_valued='profit'))
    def ipo_rule_1576(self):
        self.declare(Fact(recommendation='Underwriter berkualitas baik. Warrant menunjukkan kondisi buruk. Laba bersih menunjukkan keuntungan.'))


    @Rule(Fact(underwriter_valued='good'), Fact(warrant_valued='bad'), Fact(per_valued='low'))
    def ipo_rule_1577(self):
        self.declare(Fact(recommendation='Underwriter berkualitas baik. Warrant menunjukkan kondisi buruk. PER berada di tingkat yang rendah.'))


    @Rule(Fact(underwriter_valued='good'), Fact(warrant_valued='bad'), Fact(der_valued='low'))
    def ipo_rule_1578(self):
        self.declare(Fact(recommendation='Underwriter berkualitas baik. Warrant menunjukkan kondisi buruk. DER menunjukkan tingkat hutang yang rendah.'))


    @Rule(Fact(underwriter_valued='good'), Fact(warrant_valued='bad'), Fact(roa_valued='high'))
    def ipo_rule_1579(self):
        self.declare(Fact(recommendation='Underwriter berkualitas baik. Warrant menunjukkan kondisi buruk. ROA menunjukkan efisiensi tinggi.'))


    @Rule(Fact(underwriter_valued='good'), Fact(warrant_valued='bad'), Fact(roe_valued='low'))
    def ipo_rule_1580(self):
        self.declare(Fact(recommendation='Underwriter berkualitas baik. Warrant menunjukkan kondisi buruk. ROE menunjukkan keuntungan yang rendah.'))


    @Rule(Fact(underwriter_valued='good'), Fact(net_income_valued='profit'), Fact(per_valued='low'))
    def ipo_rule_1581(self):
        self.declare(Fact(recommendation='Underwriter berkualitas baik. Laba bersih menunjukkan keuntungan. PER berada di tingkat yang rendah.'))


    @Rule(Fact(underwriter_valued='good'), Fact(net_income_valued='profit'), Fact(der_valued='low'))
    def ipo_rule_1582(self):
        self.declare(Fact(recommendation='Underwriter berkualitas baik. Laba bersih menunjukkan keuntungan. DER menunjukkan tingkat hutang yang rendah.'))


    @Rule(Fact(underwriter_valued='good'), Fact(net_income_valued='profit'), Fact(roa_valued='high'))
    def ipo_rule_1583(self):
        self.declare(Fact(recommendation='Underwriter berkualitas baik. Laba bersih menunjukkan keuntungan. ROA menunjukkan efisiensi tinggi.'))


    @Rule(Fact(underwriter_valued='good'), Fact(net_income_valued='profit'), Fact(roe_valued='low'))
    def ipo_rule_1584(self):
        self.declare(Fact(recommendation='Underwriter berkualitas baik. Laba bersih menunjukkan keuntungan. ROE menunjukkan keuntungan yang rendah.'))


    @Rule(Fact(underwriter_valued='good'), Fact(per_valued='low'), Fact(der_valued='low'))
    def ipo_rule_1585(self):
        self.declare(Fact(recommendation='Underwriter berkualitas baik. PER berada di tingkat yang rendah. DER menunjukkan tingkat hutang yang rendah.'))


    @Rule(Fact(underwriter_valued='good'), Fact(per_valued='low'), Fact(roa_valued='high'))
    def ipo_rule_1586(self):
        self.declare(Fact(recommendation='Underwriter berkualitas baik. PER berada di tingkat yang rendah. ROA menunjukkan efisiensi tinggi.'))


    @Rule(Fact(underwriter_valued='good'), Fact(per_valued='low'), Fact(roe_valued='low'))
    def ipo_rule_1587(self):
        self.declare(Fact(recommendation='Underwriter berkualitas baik. PER berada di tingkat yang rendah. ROE menunjukkan keuntungan yang rendah.'))


    @Rule(Fact(underwriter_valued='good'), Fact(der_valued='low'), Fact(roa_valued='high'))
    def ipo_rule_1588(self):
        self.declare(Fact(recommendation='Underwriter berkualitas baik. DER menunjukkan tingkat hutang yang rendah. ROA menunjukkan efisiensi tinggi.'))


    @Rule(Fact(underwriter_valued='good'), Fact(der_valued='low'), Fact(roe_valued='low'))
    def ipo_rule_1589(self):
        self.declare(Fact(recommendation='Underwriter berkualitas baik. DER menunjukkan tingkat hutang yang rendah. ROE menunjukkan keuntungan yang rendah.'))


    @Rule(Fact(underwriter_valued='good'), Fact(roa_valued='high'), Fact(roe_valued='low'))
    def ipo_rule_1590(self):
        self.declare(Fact(recommendation='Underwriter berkualitas baik. ROA menunjukkan efisiensi tinggi. ROE menunjukkan keuntungan yang rendah.'))


    @Rule(Fact(warrant_valued='bad'), Fact(net_income_valued='profit'), Fact(per_valued='low'))
    def ipo_rule_1591(self):
        self.declare(Fact(recommendation='Warrant menunjukkan kondisi buruk. Laba bersih menunjukkan keuntungan. PER berada di tingkat yang rendah.'))


    @Rule(Fact(warrant_valued='bad'), Fact(net_income_valued='profit'), Fact(der_valued='low'))
    def ipo_rule_1592(self):
        self.declare(Fact(recommendation='Warrant menunjukkan kondisi buruk. Laba bersih menunjukkan keuntungan. DER menunjukkan tingkat hutang yang rendah.'))


    @Rule(Fact(warrant_valued='bad'), Fact(net_income_valued='profit'), Fact(roa_valued='high'))
    def ipo_rule_1593(self):
        self.declare(Fact(recommendation='Warrant menunjukkan kondisi buruk. Laba bersih menunjukkan keuntungan. ROA menunjukkan efisiensi tinggi.'))


    @Rule(Fact(warrant_valued='bad'), Fact(net_income_valued='profit'), Fact(roe_valued='low'))
    def ipo_rule_1594(self):
        self.declare(Fact(recommendation='Warrant menunjukkan kondisi buruk. Laba bersih menunjukkan keuntungan. ROE menunjukkan keuntungan yang rendah.'))


    @Rule(Fact(warrant_valued='bad'), Fact(per_valued='low'), Fact(der_valued='low'))
    def ipo_rule_1595(self):
        self.declare(Fact(recommendation='Warrant menunjukkan kondisi buruk. PER berada di tingkat yang rendah. DER menunjukkan tingkat hutang yang rendah.'))


    @Rule(Fact(warrant_valued='bad'), Fact(per_valued='low'), Fact(roa_valued='high'))
    def ipo_rule_1596(self):
        self.declare(Fact(recommendation='Warrant menunjukkan kondisi buruk. PER berada di tingkat yang rendah. ROA menunjukkan efisiensi tinggi.'))


    @Rule(Fact(warrant_valued='bad'), Fact(per_valued='low'), Fact(roe_valued='low'))
    def ipo_rule_1597(self):
        self.declare(Fact(recommendation='Warrant menunjukkan kondisi buruk. PER berada di tingkat yang rendah. ROE menunjukkan keuntungan yang rendah.'))


    @Rule(Fact(warrant_valued='bad'), Fact(der_valued='low'), Fact(roa_valued='high'))
    def ipo_rule_1598(self):
        self.declare(Fact(recommendation='Warrant menunjukkan kondisi buruk. DER menunjukkan tingkat hutang yang rendah. ROA menunjukkan efisiensi tinggi.'))


    @Rule(Fact(warrant_valued='bad'), Fact(der_valued='low'), Fact(roe_valued='low'))
    def ipo_rule_1599(self):
        self.declare(Fact(recommendation='Warrant menunjukkan kondisi buruk. DER menunjukkan tingkat hutang yang rendah. ROE menunjukkan keuntungan yang rendah.'))


    @Rule(Fact(warrant_valued='bad'), Fact(roa_valued='high'), Fact(roe_valued='low'))
    def ipo_rule_1600(self):
        self.declare(Fact(recommendation='Warrant menunjukkan kondisi buruk. ROA menunjukkan efisiensi tinggi. ROE menunjukkan keuntungan yang rendah.'))


    @Rule(Fact(net_income_valued='profit'), Fact(per_valued='low'), Fact(der_valued='low'))
    def ipo_rule_1601(self):
        self.declare(Fact(recommendation='Laba bersih menunjukkan keuntungan. PER berada di tingkat yang rendah. DER menunjukkan tingkat hutang yang rendah.'))


    @Rule(Fact(net_income_valued='profit'), Fact(per_valued='low'), Fact(roa_valued='high'))
    def ipo_rule_1602(self):
        self.declare(Fact(recommendation='Laba bersih menunjukkan keuntungan. PER berada di tingkat yang rendah. ROA menunjukkan efisiensi tinggi.'))


    @Rule(Fact(net_income_valued='profit'), Fact(per_valued='low'), Fact(roe_valued='low'))
    def ipo_rule_1603(self):
        self.declare(Fact(recommendation='Laba bersih menunjukkan keuntungan. PER berada di tingkat yang rendah. ROE menunjukkan keuntungan yang rendah.'))


    @Rule(Fact(net_income_valued='profit'), Fact(der_valued='low'), Fact(roa_valued='high'))
    def ipo_rule_1604(self):
        self.declare(Fact(recommendation='Laba bersih menunjukkan keuntungan. DER menunjukkan tingkat hutang yang rendah. ROA menunjukkan efisiensi tinggi.'))


    @Rule(Fact(net_income_valued='profit'), Fact(der_valued='low'), Fact(roe_valued='low'))
    def ipo_rule_1605(self):
        self.declare(Fact(recommendation='Laba bersih menunjukkan keuntungan. DER menunjukkan tingkat hutang yang rendah. ROE menunjukkan keuntungan yang rendah.'))


    @Rule(Fact(net_income_valued='profit'), Fact(roa_valued='high'), Fact(roe_valued='low'))
    def ipo_rule_1606(self):
        self.declare(Fact(recommendation='Laba bersih menunjukkan keuntungan. ROA menunjukkan efisiensi tinggi. ROE menunjukkan keuntungan yang rendah.'))


    @Rule(Fact(per_valued='low'), Fact(der_valued='low'), Fact(roa_valued='high'))
    def ipo_rule_1607(self):
        self.declare(Fact(recommendation='PER berada di tingkat yang rendah. DER menunjukkan tingkat hutang yang rendah. ROA menunjukkan efisiensi tinggi.'))


    @Rule(Fact(per_valued='low'), Fact(der_valued='low'), Fact(roe_valued='low'))
    def ipo_rule_1608(self):
        self.declare(Fact(recommendation='PER berada di tingkat yang rendah. DER menunjukkan tingkat hutang yang rendah. ROE menunjukkan keuntungan yang rendah.'))


    @Rule(Fact(per_valued='low'), Fact(roa_valued='high'), Fact(roe_valued='low'))
    def ipo_rule_1609(self):
        self.declare(Fact(recommendation='PER berada di tingkat yang rendah. ROA menunjukkan efisiensi tinggi. ROE menunjukkan keuntungan yang rendah.'))


    @Rule(Fact(der_valued='low'), Fact(roa_valued='high'), Fact(roe_valued='low'))
    def ipo_rule_1610(self):
        self.declare(Fact(recommendation='DER menunjukkan tingkat hutang yang rendah. ROA menunjukkan efisiensi tinggi. ROE menunjukkan keuntungan yang rendah.'))


    @Rule(Fact(underwriter_valued='good'), Fact(warrant_valued='bad'), Fact(net_income_valued='profit'))
    def ipo_rule_1611(self):
        self.declare(Fact(recommendation='Underwriter berkualitas baik. Warrant menunjukkan kondisi buruk. Laba bersih menunjukkan keuntungan.'))


    @Rule(Fact(underwriter_valued='good'), Fact(warrant_valued='bad'), Fact(per_valued='low'))
    def ipo_rule_1612(self):
        self.declare(Fact(recommendation='Underwriter berkualitas baik. Warrant menunjukkan kondisi buruk. PER berada di tingkat yang rendah.'))


    @Rule(Fact(underwriter_valued='good'), Fact(warrant_valued='bad'), Fact(der_valued='low'))
    def ipo_rule_1613(self):
        self.declare(Fact(recommendation='Underwriter berkualitas baik. Warrant menunjukkan kondisi buruk. DER menunjukkan tingkat hutang yang rendah.'))


    @Rule(Fact(underwriter_valued='good'), Fact(warrant_valued='bad'), Fact(roa_valued='low'))
    def ipo_rule_1614(self):
        self.declare(Fact(recommendation='Underwriter berkualitas baik. Warrant menunjukkan kondisi buruk. ROA menunjukkan efisiensi rendah.'))


    @Rule(Fact(underwriter_valued='good'), Fact(warrant_valued='bad'), Fact(roe_valued='high'))
    def ipo_rule_1615(self):
        self.declare(Fact(recommendation='Underwriter berkualitas baik. Warrant menunjukkan kondisi buruk. ROE menunjukkan keuntungan yang tinggi.'))


    @Rule(Fact(underwriter_valued='good'), Fact(net_income_valued='profit'), Fact(per_valued='low'))
    def ipo_rule_1616(self):
        self.declare(Fact(recommendation='Underwriter berkualitas baik. Laba bersih menunjukkan keuntungan. PER berada di tingkat yang rendah.'))


    @Rule(Fact(underwriter_valued='good'), Fact(net_income_valued='profit'), Fact(der_valued='low'))
    def ipo_rule_1617(self):
        self.declare(Fact(recommendation='Underwriter berkualitas baik. Laba bersih menunjukkan keuntungan. DER menunjukkan tingkat hutang yang rendah.'))


    @Rule(Fact(underwriter_valued='good'), Fact(net_income_valued='profit'), Fact(roa_valued='low'))
    def ipo_rule_1618(self):
        self.declare(Fact(recommendation='Underwriter berkualitas baik. Laba bersih menunjukkan keuntungan. ROA menunjukkan efisiensi rendah.'))


    @Rule(Fact(underwriter_valued='good'), Fact(net_income_valued='profit'), Fact(roe_valued='high'))
    def ipo_rule_1619(self):
        self.declare(Fact(recommendation='Underwriter berkualitas baik. Laba bersih menunjukkan keuntungan. ROE menunjukkan keuntungan yang tinggi.'))


    @Rule(Fact(underwriter_valued='good'), Fact(per_valued='low'), Fact(der_valued='low'))
    def ipo_rule_1620(self):
        self.declare(Fact(recommendation='Underwriter berkualitas baik. PER berada di tingkat yang rendah. DER menunjukkan tingkat hutang yang rendah.'))


    @Rule(Fact(underwriter_valued='good'), Fact(per_valued='low'), Fact(roa_valued='low'))
    def ipo_rule_1621(self):
        self.declare(Fact(recommendation='Underwriter berkualitas baik. PER berada di tingkat yang rendah. ROA menunjukkan efisiensi rendah.'))


    @Rule(Fact(underwriter_valued='good'), Fact(per_valued='low'), Fact(roe_valued='high'))
    def ipo_rule_1622(self):
        self.declare(Fact(recommendation='Underwriter berkualitas baik. PER berada di tingkat yang rendah. ROE menunjukkan keuntungan yang tinggi.'))


    @Rule(Fact(underwriter_valued='good'), Fact(der_valued='low'), Fact(roa_valued='low'))
    def ipo_rule_1623(self):
        self.declare(Fact(recommendation='Underwriter berkualitas baik. DER menunjukkan tingkat hutang yang rendah. ROA menunjukkan efisiensi rendah.'))


    @Rule(Fact(underwriter_valued='good'), Fact(der_valued='low'), Fact(roe_valued='high'))
    def ipo_rule_1624(self):
        self.declare(Fact(recommendation='Underwriter berkualitas baik. DER menunjukkan tingkat hutang yang rendah. ROE menunjukkan keuntungan yang tinggi.'))


    @Rule(Fact(underwriter_valued='good'), Fact(roa_valued='low'), Fact(roe_valued='high'))
    def ipo_rule_1625(self):
        self.declare(Fact(recommendation='Underwriter berkualitas baik. ROA menunjukkan efisiensi rendah. ROE menunjukkan keuntungan yang tinggi.'))


    @Rule(Fact(warrant_valued='bad'), Fact(net_income_valued='profit'), Fact(per_valued='low'))
    def ipo_rule_1626(self):
        self.declare(Fact(recommendation='Warrant menunjukkan kondisi buruk. Laba bersih menunjukkan keuntungan. PER berada di tingkat yang rendah.'))


    @Rule(Fact(warrant_valued='bad'), Fact(net_income_valued='profit'), Fact(der_valued='low'))
    def ipo_rule_1627(self):
        self.declare(Fact(recommendation='Warrant menunjukkan kondisi buruk. Laba bersih menunjukkan keuntungan. DER menunjukkan tingkat hutang yang rendah.'))


    @Rule(Fact(warrant_valued='bad'), Fact(net_income_valued='profit'), Fact(roa_valued='low'))
    def ipo_rule_1628(self):
        self.declare(Fact(recommendation='Warrant menunjukkan kondisi buruk. Laba bersih menunjukkan keuntungan. ROA menunjukkan efisiensi rendah.'))


    @Rule(Fact(warrant_valued='bad'), Fact(net_income_valued='profit'), Fact(roe_valued='high'))
    def ipo_rule_1629(self):
        self.declare(Fact(recommendation='Warrant menunjukkan kondisi buruk. Laba bersih menunjukkan keuntungan. ROE menunjukkan keuntungan yang tinggi.'))


    @Rule(Fact(warrant_valued='bad'), Fact(per_valued='low'), Fact(der_valued='low'))
    def ipo_rule_1630(self):
        self.declare(Fact(recommendation='Warrant menunjukkan kondisi buruk. PER berada di tingkat yang rendah. DER menunjukkan tingkat hutang yang rendah.'))


    @Rule(Fact(warrant_valued='bad'), Fact(per_valued='low'), Fact(roa_valued='low'))
    def ipo_rule_1631(self):
        self.declare(Fact(recommendation='Warrant menunjukkan kondisi buruk. PER berada di tingkat yang rendah. ROA menunjukkan efisiensi rendah.'))


    @Rule(Fact(warrant_valued='bad'), Fact(per_valued='low'), Fact(roe_valued='high'))
    def ipo_rule_1632(self):
        self.declare(Fact(recommendation='Warrant menunjukkan kondisi buruk. PER berada di tingkat yang rendah. ROE menunjukkan keuntungan yang tinggi.'))


    @Rule(Fact(warrant_valued='bad'), Fact(der_valued='low'), Fact(roa_valued='low'))
    def ipo_rule_1633(self):
        self.declare(Fact(recommendation='Warrant menunjukkan kondisi buruk. DER menunjukkan tingkat hutang yang rendah. ROA menunjukkan efisiensi rendah.'))


    @Rule(Fact(warrant_valued='bad'), Fact(der_valued='low'), Fact(roe_valued='high'))
    def ipo_rule_1634(self):
        self.declare(Fact(recommendation='Warrant menunjukkan kondisi buruk. DER menunjukkan tingkat hutang yang rendah. ROE menunjukkan keuntungan yang tinggi.'))


    @Rule(Fact(warrant_valued='bad'), Fact(roa_valued='low'), Fact(roe_valued='high'))
    def ipo_rule_1635(self):
        self.declare(Fact(recommendation='Warrant menunjukkan kondisi buruk. ROA menunjukkan efisiensi rendah. ROE menunjukkan keuntungan yang tinggi.'))


    @Rule(Fact(net_income_valued='profit'), Fact(per_valued='low'), Fact(der_valued='low'))
    def ipo_rule_1636(self):
        self.declare(Fact(recommendation='Laba bersih menunjukkan keuntungan. PER berada di tingkat yang rendah. DER menunjukkan tingkat hutang yang rendah.'))


    @Rule(Fact(net_income_valued='profit'), Fact(per_valued='low'), Fact(roa_valued='low'))
    def ipo_rule_1637(self):
        self.declare(Fact(recommendation='Laba bersih menunjukkan keuntungan. PER berada di tingkat yang rendah. ROA menunjukkan efisiensi rendah.'))


    @Rule(Fact(net_income_valued='profit'), Fact(per_valued='low'), Fact(roe_valued='high'))
    def ipo_rule_1638(self):
        self.declare(Fact(recommendation='Laba bersih menunjukkan keuntungan. PER berada di tingkat yang rendah. ROE menunjukkan keuntungan yang tinggi.'))


    @Rule(Fact(net_income_valued='profit'), Fact(der_valued='low'), Fact(roa_valued='low'))
    def ipo_rule_1639(self):
        self.declare(Fact(recommendation='Laba bersih menunjukkan keuntungan. DER menunjukkan tingkat hutang yang rendah. ROA menunjukkan efisiensi rendah.'))


    @Rule(Fact(net_income_valued='profit'), Fact(der_valued='low'), Fact(roe_valued='high'))
    def ipo_rule_1640(self):
        self.declare(Fact(recommendation='Laba bersih menunjukkan keuntungan. DER menunjukkan tingkat hutang yang rendah. ROE menunjukkan keuntungan yang tinggi.'))


    @Rule(Fact(net_income_valued='profit'), Fact(roa_valued='low'), Fact(roe_valued='high'))
    def ipo_rule_1641(self):
        self.declare(Fact(recommendation='Laba bersih menunjukkan keuntungan. ROA menunjukkan efisiensi rendah. ROE menunjukkan keuntungan yang tinggi.'))


    @Rule(Fact(per_valued='low'), Fact(der_valued='low'), Fact(roa_valued='low'))
    def ipo_rule_1642(self):
        self.declare(Fact(recommendation='PER berada di tingkat yang rendah. DER menunjukkan tingkat hutang yang rendah. ROA menunjukkan efisiensi rendah.'))


    @Rule(Fact(per_valued='low'), Fact(der_valued='low'), Fact(roe_valued='high'))
    def ipo_rule_1643(self):
        self.declare(Fact(recommendation='PER berada di tingkat yang rendah. DER menunjukkan tingkat hutang yang rendah. ROE menunjukkan keuntungan yang tinggi.'))


    @Rule(Fact(per_valued='low'), Fact(roa_valued='low'), Fact(roe_valued='high'))
    def ipo_rule_1644(self):
        self.declare(Fact(recommendation='PER berada di tingkat yang rendah. ROA menunjukkan efisiensi rendah. ROE menunjukkan keuntungan yang tinggi.'))


    @Rule(Fact(der_valued='low'), Fact(roa_valued='low'), Fact(roe_valued='high'))
    def ipo_rule_1645(self):
        self.declare(Fact(recommendation='DER menunjukkan tingkat hutang yang rendah. ROA menunjukkan efisiensi rendah. ROE menunjukkan keuntungan yang tinggi.'))


    @Rule(Fact(underwriter_valued='good'), Fact(warrant_valued='bad'), Fact(net_income_valued='profit'))
    def ipo_rule_1646(self):
        self.declare(Fact(recommendation='Underwriter berkualitas baik. Warrant menunjukkan kondisi buruk. Laba bersih menunjukkan keuntungan.'))


    @Rule(Fact(underwriter_valued='good'), Fact(warrant_valued='bad'), Fact(per_valued='low'))
    def ipo_rule_1647(self):
        self.declare(Fact(recommendation='Underwriter berkualitas baik. Warrant menunjukkan kondisi buruk. PER berada di tingkat yang rendah.'))


    @Rule(Fact(underwriter_valued='good'), Fact(warrant_valued='bad'), Fact(der_valued='low'))
    def ipo_rule_1648(self):
        self.declare(Fact(recommendation='Underwriter berkualitas baik. Warrant menunjukkan kondisi buruk. DER menunjukkan tingkat hutang yang rendah.'))


    @Rule(Fact(underwriter_valued='good'), Fact(warrant_valued='bad'), Fact(roa_valued='low'))
    def ipo_rule_1649(self):
        self.declare(Fact(recommendation='Underwriter berkualitas baik. Warrant menunjukkan kondisi buruk. ROA menunjukkan efisiensi rendah.'))


    @Rule(Fact(underwriter_valued='good'), Fact(warrant_valued='bad'), Fact(roe_valued='low'))
    def ipo_rule_1650(self):
        self.declare(Fact(recommendation='Underwriter berkualitas baik. Warrant menunjukkan kondisi buruk. ROE menunjukkan keuntungan yang rendah.'))


    @Rule(Fact(underwriter_valued='good'), Fact(net_income_valued='profit'), Fact(per_valued='low'))
    def ipo_rule_1651(self):
        self.declare(Fact(recommendation='Underwriter berkualitas baik. Laba bersih menunjukkan keuntungan. PER berada di tingkat yang rendah.'))


    @Rule(Fact(underwriter_valued='good'), Fact(net_income_valued='profit'), Fact(der_valued='low'))
    def ipo_rule_1652(self):
        self.declare(Fact(recommendation='Underwriter berkualitas baik. Laba bersih menunjukkan keuntungan. DER menunjukkan tingkat hutang yang rendah.'))


    @Rule(Fact(underwriter_valued='good'), Fact(net_income_valued='profit'), Fact(roa_valued='low'))
    def ipo_rule_1653(self):
        self.declare(Fact(recommendation='Underwriter berkualitas baik. Laba bersih menunjukkan keuntungan. ROA menunjukkan efisiensi rendah.'))


    @Rule(Fact(underwriter_valued='good'), Fact(net_income_valued='profit'), Fact(roe_valued='low'))
    def ipo_rule_1654(self):
        self.declare(Fact(recommendation='Underwriter berkualitas baik. Laba bersih menunjukkan keuntungan. ROE menunjukkan keuntungan yang rendah.'))


    @Rule(Fact(underwriter_valued='good'), Fact(per_valued='low'), Fact(der_valued='low'))
    def ipo_rule_1655(self):
        self.declare(Fact(recommendation='Underwriter berkualitas baik. PER berada di tingkat yang rendah. DER menunjukkan tingkat hutang yang rendah.'))


    @Rule(Fact(underwriter_valued='good'), Fact(per_valued='low'), Fact(roa_valued='low'))
    def ipo_rule_1656(self):
        self.declare(Fact(recommendation='Underwriter berkualitas baik. PER berada di tingkat yang rendah. ROA menunjukkan efisiensi rendah.'))


    @Rule(Fact(underwriter_valued='good'), Fact(per_valued='low'), Fact(roe_valued='low'))
    def ipo_rule_1657(self):
        self.declare(Fact(recommendation='Underwriter berkualitas baik. PER berada di tingkat yang rendah. ROE menunjukkan keuntungan yang rendah.'))


    @Rule(Fact(underwriter_valued='good'), Fact(der_valued='low'), Fact(roa_valued='low'))
    def ipo_rule_1658(self):
        self.declare(Fact(recommendation='Underwriter berkualitas baik. DER menunjukkan tingkat hutang yang rendah. ROA menunjukkan efisiensi rendah.'))


    @Rule(Fact(underwriter_valued='good'), Fact(der_valued='low'), Fact(roe_valued='low'))
    def ipo_rule_1659(self):
        self.declare(Fact(recommendation='Underwriter berkualitas baik. DER menunjukkan tingkat hutang yang rendah. ROE menunjukkan keuntungan yang rendah.'))


    @Rule(Fact(underwriter_valued='good'), Fact(roa_valued='low'), Fact(roe_valued='low'))
    def ipo_rule_1660(self):
        self.declare(Fact(recommendation='Underwriter berkualitas baik. ROA menunjukkan efisiensi rendah. ROE menunjukkan keuntungan yang rendah.'))


    @Rule(Fact(warrant_valued='bad'), Fact(net_income_valued='profit'), Fact(per_valued='low'))
    def ipo_rule_1661(self):
        self.declare(Fact(recommendation='Warrant menunjukkan kondisi buruk. Laba bersih menunjukkan keuntungan. PER berada di tingkat yang rendah.'))


    @Rule(Fact(warrant_valued='bad'), Fact(net_income_valued='profit'), Fact(der_valued='low'))
    def ipo_rule_1662(self):
        self.declare(Fact(recommendation='Warrant menunjukkan kondisi buruk. Laba bersih menunjukkan keuntungan. DER menunjukkan tingkat hutang yang rendah.'))


    @Rule(Fact(warrant_valued='bad'), Fact(net_income_valued='profit'), Fact(roa_valued='low'))
    def ipo_rule_1663(self):
        self.declare(Fact(recommendation='Warrant menunjukkan kondisi buruk. Laba bersih menunjukkan keuntungan. ROA menunjukkan efisiensi rendah.'))


    @Rule(Fact(warrant_valued='bad'), Fact(net_income_valued='profit'), Fact(roe_valued='low'))
    def ipo_rule_1664(self):
        self.declare(Fact(recommendation='Warrant menunjukkan kondisi buruk. Laba bersih menunjukkan keuntungan. ROE menunjukkan keuntungan yang rendah.'))


    @Rule(Fact(warrant_valued='bad'), Fact(per_valued='low'), Fact(der_valued='low'))
    def ipo_rule_1665(self):
        self.declare(Fact(recommendation='Warrant menunjukkan kondisi buruk. PER berada di tingkat yang rendah. DER menunjukkan tingkat hutang yang rendah.'))


    @Rule(Fact(warrant_valued='bad'), Fact(per_valued='low'), Fact(roa_valued='low'))
    def ipo_rule_1666(self):
        self.declare(Fact(recommendation='Warrant menunjukkan kondisi buruk. PER berada di tingkat yang rendah. ROA menunjukkan efisiensi rendah.'))


    @Rule(Fact(warrant_valued='bad'), Fact(per_valued='low'), Fact(roe_valued='low'))
    def ipo_rule_1667(self):
        self.declare(Fact(recommendation='Warrant menunjukkan kondisi buruk. PER berada di tingkat yang rendah. ROE menunjukkan keuntungan yang rendah.'))


    @Rule(Fact(warrant_valued='bad'), Fact(der_valued='low'), Fact(roa_valued='low'))
    def ipo_rule_1668(self):
        self.declare(Fact(recommendation='Warrant menunjukkan kondisi buruk. DER menunjukkan tingkat hutang yang rendah. ROA menunjukkan efisiensi rendah.'))


    @Rule(Fact(warrant_valued='bad'), Fact(der_valued='low'), Fact(roe_valued='low'))
    def ipo_rule_1669(self):
        self.declare(Fact(recommendation='Warrant menunjukkan kondisi buruk. DER menunjukkan tingkat hutang yang rendah. ROE menunjukkan keuntungan yang rendah.'))


    @Rule(Fact(warrant_valued='bad'), Fact(roa_valued='low'), Fact(roe_valued='low'))
    def ipo_rule_1670(self):
        self.declare(Fact(recommendation='Warrant menunjukkan kondisi buruk. ROA menunjukkan efisiensi rendah. ROE menunjukkan keuntungan yang rendah.'))


    @Rule(Fact(net_income_valued='profit'), Fact(per_valued='low'), Fact(der_valued='low'))
    def ipo_rule_1671(self):
        self.declare(Fact(recommendation='Laba bersih menunjukkan keuntungan. PER berada di tingkat yang rendah. DER menunjukkan tingkat hutang yang rendah.'))


    @Rule(Fact(net_income_valued='profit'), Fact(per_valued='low'), Fact(roa_valued='low'))
    def ipo_rule_1672(self):
        self.declare(Fact(recommendation='Laba bersih menunjukkan keuntungan. PER berada di tingkat yang rendah. ROA menunjukkan efisiensi rendah.'))


    @Rule(Fact(net_income_valued='profit'), Fact(per_valued='low'), Fact(roe_valued='low'))
    def ipo_rule_1673(self):
        self.declare(Fact(recommendation='Laba bersih menunjukkan keuntungan. PER berada di tingkat yang rendah. ROE menunjukkan keuntungan yang rendah.'))


    @Rule(Fact(net_income_valued='profit'), Fact(der_valued='low'), Fact(roa_valued='low'))
    def ipo_rule_1674(self):
        self.declare(Fact(recommendation='Laba bersih menunjukkan keuntungan. DER menunjukkan tingkat hutang yang rendah. ROA menunjukkan efisiensi rendah.'))


    @Rule(Fact(net_income_valued='profit'), Fact(der_valued='low'), Fact(roe_valued='low'))
    def ipo_rule_1675(self):
        self.declare(Fact(recommendation='Laba bersih menunjukkan keuntungan. DER menunjukkan tingkat hutang yang rendah. ROE menunjukkan keuntungan yang rendah.'))


    @Rule(Fact(net_income_valued='profit'), Fact(roa_valued='low'), Fact(roe_valued='low'))
    def ipo_rule_1676(self):
        self.declare(Fact(recommendation='Laba bersih menunjukkan keuntungan. ROA menunjukkan efisiensi rendah. ROE menunjukkan keuntungan yang rendah.'))


    @Rule(Fact(per_valued='low'), Fact(der_valued='low'), Fact(roa_valued='low'))
    def ipo_rule_1677(self):
        self.declare(Fact(recommendation='PER berada di tingkat yang rendah. DER menunjukkan tingkat hutang yang rendah. ROA menunjukkan efisiensi rendah.'))


    @Rule(Fact(per_valued='low'), Fact(der_valued='low'), Fact(roe_valued='low'))
    def ipo_rule_1678(self):
        self.declare(Fact(recommendation='PER berada di tingkat yang rendah. DER menunjukkan tingkat hutang yang rendah. ROE menunjukkan keuntungan yang rendah.'))


    @Rule(Fact(per_valued='low'), Fact(roa_valued='low'), Fact(roe_valued='low'))
    def ipo_rule_1679(self):
        self.declare(Fact(recommendation='PER berada di tingkat yang rendah. ROA menunjukkan efisiensi rendah. ROE menunjukkan keuntungan yang rendah.'))


    @Rule(Fact(der_valued='low'), Fact(roa_valued='low'), Fact(roe_valued='low'))
    def ipo_rule_1680(self):
        self.declare(Fact(recommendation='DER menunjukkan tingkat hutang yang rendah. ROA menunjukkan efisiensi rendah. ROE menunjukkan keuntungan yang rendah.'))


    @Rule(Fact(underwriter_valued='good'), Fact(warrant_valued='bad'), Fact(net_income_valued='loss'))
    def ipo_rule_1681(self):
        self.declare(Fact(recommendation='Underwriter berkualitas baik. Warrant menunjukkan kondisi buruk. Laba bersih menunjukkan kerugian.'))


    @Rule(Fact(underwriter_valued='good'), Fact(warrant_valued='bad'), Fact(per_valued='high'))
    def ipo_rule_1682(self):
        self.declare(Fact(recommendation='Underwriter berkualitas baik. Warrant menunjukkan kondisi buruk. PER berada di tingkat yang tinggi.'))


    @Rule(Fact(underwriter_valued='good'), Fact(warrant_valued='bad'), Fact(der_valued='high'))
    def ipo_rule_1683(self):
        self.declare(Fact(recommendation='Underwriter berkualitas baik. Warrant menunjukkan kondisi buruk. DER menunjukkan tingkat hutang yang tinggi.'))


    @Rule(Fact(underwriter_valued='good'), Fact(warrant_valued='bad'), Fact(roa_valued='high'))
    def ipo_rule_1684(self):
        self.declare(Fact(recommendation='Underwriter berkualitas baik. Warrant menunjukkan kondisi buruk. ROA menunjukkan efisiensi tinggi.'))


    @Rule(Fact(underwriter_valued='good'), Fact(warrant_valued='bad'), Fact(roe_valued='high'))
    def ipo_rule_1685(self):
        self.declare(Fact(recommendation='Underwriter berkualitas baik. Warrant menunjukkan kondisi buruk. ROE menunjukkan keuntungan yang tinggi.'))


    @Rule(Fact(underwriter_valued='good'), Fact(net_income_valued='loss'), Fact(per_valued='high'))
    def ipo_rule_1686(self):
        self.declare(Fact(recommendation='Underwriter berkualitas baik. Laba bersih menunjukkan kerugian. PER berada di tingkat yang tinggi.'))


    @Rule(Fact(underwriter_valued='good'), Fact(net_income_valued='loss'), Fact(der_valued='high'))
    def ipo_rule_1687(self):
        self.declare(Fact(recommendation='Underwriter berkualitas baik. Laba bersih menunjukkan kerugian. DER menunjukkan tingkat hutang yang tinggi.'))


    @Rule(Fact(underwriter_valued='good'), Fact(net_income_valued='loss'), Fact(roa_valued='high'))
    def ipo_rule_1688(self):
        self.declare(Fact(recommendation='Underwriter berkualitas baik. Laba bersih menunjukkan kerugian. ROA menunjukkan efisiensi tinggi.'))


    @Rule(Fact(underwriter_valued='good'), Fact(net_income_valued='loss'), Fact(roe_valued='high'))
    def ipo_rule_1689(self):
        self.declare(Fact(recommendation='Underwriter berkualitas baik. Laba bersih menunjukkan kerugian. ROE menunjukkan keuntungan yang tinggi.'))


    @Rule(Fact(underwriter_valued='good'), Fact(per_valued='high'), Fact(der_valued='high'))
    def ipo_rule_1690(self):
        self.declare(Fact(recommendation='Underwriter berkualitas baik. PER berada di tingkat yang tinggi. DER menunjukkan tingkat hutang yang tinggi.'))


    @Rule(Fact(underwriter_valued='good'), Fact(per_valued='high'), Fact(roa_valued='high'))
    def ipo_rule_1691(self):
        self.declare(Fact(recommendation='Underwriter berkualitas baik. PER berada di tingkat yang tinggi. ROA menunjukkan efisiensi tinggi.'))


    @Rule(Fact(underwriter_valued='good'), Fact(per_valued='high'), Fact(roe_valued='high'))
    def ipo_rule_1692(self):
        self.declare(Fact(recommendation='Underwriter berkualitas baik. PER berada di tingkat yang tinggi. ROE menunjukkan keuntungan yang tinggi.'))


    @Rule(Fact(underwriter_valued='good'), Fact(der_valued='high'), Fact(roa_valued='high'))
    def ipo_rule_1693(self):
        self.declare(Fact(recommendation='Underwriter berkualitas baik. DER menunjukkan tingkat hutang yang tinggi. ROA menunjukkan efisiensi tinggi.'))


    @Rule(Fact(underwriter_valued='good'), Fact(der_valued='high'), Fact(roe_valued='high'))
    def ipo_rule_1694(self):
        self.declare(Fact(recommendation='Underwriter berkualitas baik. DER menunjukkan tingkat hutang yang tinggi. ROE menunjukkan keuntungan yang tinggi.'))


    @Rule(Fact(underwriter_valued='good'), Fact(roa_valued='high'), Fact(roe_valued='high'))
    def ipo_rule_1695(self):
        self.declare(Fact(recommendation='Underwriter berkualitas baik. ROA menunjukkan efisiensi tinggi. ROE menunjukkan keuntungan yang tinggi.'))


    @Rule(Fact(warrant_valued='bad'), Fact(net_income_valued='loss'), Fact(per_valued='high'))
    def ipo_rule_1696(self):
        self.declare(Fact(recommendation='Warrant menunjukkan kondisi buruk. Laba bersih menunjukkan kerugian. PER berada di tingkat yang tinggi.'))


    @Rule(Fact(warrant_valued='bad'), Fact(net_income_valued='loss'), Fact(der_valued='high'))
    def ipo_rule_1697(self):
        self.declare(Fact(recommendation='Warrant menunjukkan kondisi buruk. Laba bersih menunjukkan kerugian. DER menunjukkan tingkat hutang yang tinggi.'))


    @Rule(Fact(warrant_valued='bad'), Fact(net_income_valued='loss'), Fact(roa_valued='high'))
    def ipo_rule_1698(self):
        self.declare(Fact(recommendation='Warrant menunjukkan kondisi buruk. Laba bersih menunjukkan kerugian. ROA menunjukkan efisiensi tinggi.'))


    @Rule(Fact(warrant_valued='bad'), Fact(net_income_valued='loss'), Fact(roe_valued='high'))
    def ipo_rule_1699(self):
        self.declare(Fact(recommendation='Warrant menunjukkan kondisi buruk. Laba bersih menunjukkan kerugian. ROE menunjukkan keuntungan yang tinggi.'))


    @Rule(Fact(warrant_valued='bad'), Fact(per_valued='high'), Fact(der_valued='high'))
    def ipo_rule_1700(self):
        self.declare(Fact(recommendation='Warrant menunjukkan kondisi buruk. PER berada di tingkat yang tinggi. DER menunjukkan tingkat hutang yang tinggi.'))


    @Rule(Fact(warrant_valued='bad'), Fact(per_valued='high'), Fact(roa_valued='high'))
    def ipo_rule_1701(self):
        self.declare(Fact(recommendation='Warrant menunjukkan kondisi buruk. PER berada di tingkat yang tinggi. ROA menunjukkan efisiensi tinggi.'))


    @Rule(Fact(warrant_valued='bad'), Fact(per_valued='high'), Fact(roe_valued='high'))
    def ipo_rule_1702(self):
        self.declare(Fact(recommendation='Warrant menunjukkan kondisi buruk. PER berada di tingkat yang tinggi. ROE menunjukkan keuntungan yang tinggi.'))


    @Rule(Fact(warrant_valued='bad'), Fact(der_valued='high'), Fact(roa_valued='high'))
    def ipo_rule_1703(self):
        self.declare(Fact(recommendation='Warrant menunjukkan kondisi buruk. DER menunjukkan tingkat hutang yang tinggi. ROA menunjukkan efisiensi tinggi.'))


    @Rule(Fact(warrant_valued='bad'), Fact(der_valued='high'), Fact(roe_valued='high'))
    def ipo_rule_1704(self):
        self.declare(Fact(recommendation='Warrant menunjukkan kondisi buruk. DER menunjukkan tingkat hutang yang tinggi. ROE menunjukkan keuntungan yang tinggi.'))


    @Rule(Fact(warrant_valued='bad'), Fact(roa_valued='high'), Fact(roe_valued='high'))
    def ipo_rule_1705(self):
        self.declare(Fact(recommendation='Warrant menunjukkan kondisi buruk. ROA menunjukkan efisiensi tinggi. ROE menunjukkan keuntungan yang tinggi.'))


    @Rule(Fact(net_income_valued='loss'), Fact(per_valued='high'), Fact(der_valued='high'))
    def ipo_rule_1706(self):
        self.declare(Fact(recommendation='Laba bersih menunjukkan kerugian. PER berada di tingkat yang tinggi. DER menunjukkan tingkat hutang yang tinggi.'))


    @Rule(Fact(net_income_valued='loss'), Fact(per_valued='high'), Fact(roa_valued='high'))
    def ipo_rule_1707(self):
        self.declare(Fact(recommendation='Laba bersih menunjukkan kerugian. PER berada di tingkat yang tinggi. ROA menunjukkan efisiensi tinggi.'))


    @Rule(Fact(net_income_valued='loss'), Fact(per_valued='high'), Fact(roe_valued='high'))
    def ipo_rule_1708(self):
        self.declare(Fact(recommendation='Laba bersih menunjukkan kerugian. PER berada di tingkat yang tinggi. ROE menunjukkan keuntungan yang tinggi.'))


    @Rule(Fact(net_income_valued='loss'), Fact(der_valued='high'), Fact(roa_valued='high'))
    def ipo_rule_1709(self):
        self.declare(Fact(recommendation='Laba bersih menunjukkan kerugian. DER menunjukkan tingkat hutang yang tinggi. ROA menunjukkan efisiensi tinggi.'))


    @Rule(Fact(net_income_valued='loss'), Fact(der_valued='high'), Fact(roe_valued='high'))
    def ipo_rule_1710(self):
        self.declare(Fact(recommendation='Laba bersih menunjukkan kerugian. DER menunjukkan tingkat hutang yang tinggi. ROE menunjukkan keuntungan yang tinggi.'))


    @Rule(Fact(net_income_valued='loss'), Fact(roa_valued='high'), Fact(roe_valued='high'))
    def ipo_rule_1711(self):
        self.declare(Fact(recommendation='Laba bersih menunjukkan kerugian. ROA menunjukkan efisiensi tinggi. ROE menunjukkan keuntungan yang tinggi.'))


    @Rule(Fact(per_valued='high'), Fact(der_valued='high'), Fact(roa_valued='high'))
    def ipo_rule_1712(self):
        self.declare(Fact(recommendation='PER berada di tingkat yang tinggi. DER menunjukkan tingkat hutang yang tinggi. ROA menunjukkan efisiensi tinggi.'))


    @Rule(Fact(per_valued='high'), Fact(der_valued='high'), Fact(roe_valued='high'))
    def ipo_rule_1713(self):
        self.declare(Fact(recommendation='PER berada di tingkat yang tinggi. DER menunjukkan tingkat hutang yang tinggi. ROE menunjukkan keuntungan yang tinggi.'))


    @Rule(Fact(per_valued='high'), Fact(roa_valued='high'), Fact(roe_valued='high'))
    def ipo_rule_1714(self):
        self.declare(Fact(recommendation='PER berada di tingkat yang tinggi. ROA menunjukkan efisiensi tinggi. ROE menunjukkan keuntungan yang tinggi.'))


    @Rule(Fact(der_valued='high'), Fact(roa_valued='high'), Fact(roe_valued='high'))
    def ipo_rule_1715(self):
        self.declare(Fact(recommendation='DER menunjukkan tingkat hutang yang tinggi. ROA menunjukkan efisiensi tinggi. ROE menunjukkan keuntungan yang tinggi.'))


    @Rule(Fact(underwriter_valued='good'), Fact(warrant_valued='bad'), Fact(net_income_valued='loss'))
    def ipo_rule_1716(self):
        self.declare(Fact(recommendation='Underwriter berkualitas baik. Warrant menunjukkan kondisi buruk. Laba bersih menunjukkan kerugian.'))


    @Rule(Fact(underwriter_valued='good'), Fact(warrant_valued='bad'), Fact(per_valued='high'))
    def ipo_rule_1717(self):
        self.declare(Fact(recommendation='Underwriter berkualitas baik. Warrant menunjukkan kondisi buruk. PER berada di tingkat yang tinggi.'))


    @Rule(Fact(underwriter_valued='good'), Fact(warrant_valued='bad'), Fact(der_valued='high'))
    def ipo_rule_1718(self):
        self.declare(Fact(recommendation='Underwriter berkualitas baik. Warrant menunjukkan kondisi buruk. DER menunjukkan tingkat hutang yang tinggi.'))


    @Rule(Fact(underwriter_valued='good'), Fact(warrant_valued='bad'), Fact(roa_valued='high'))
    def ipo_rule_1719(self):
        self.declare(Fact(recommendation='Underwriter berkualitas baik. Warrant menunjukkan kondisi buruk. ROA menunjukkan efisiensi tinggi.'))


    @Rule(Fact(underwriter_valued='good'), Fact(warrant_valued='bad'), Fact(roe_valued='low'))
    def ipo_rule_1720(self):
        self.declare(Fact(recommendation='Underwriter berkualitas baik. Warrant menunjukkan kondisi buruk. ROE menunjukkan keuntungan yang rendah.'))


    @Rule(Fact(underwriter_valued='good'), Fact(net_income_valued='loss'), Fact(per_valued='high'))
    def ipo_rule_1721(self):
        self.declare(Fact(recommendation='Underwriter berkualitas baik. Laba bersih menunjukkan kerugian. PER berada di tingkat yang tinggi.'))


    @Rule(Fact(underwriter_valued='good'), Fact(net_income_valued='loss'), Fact(der_valued='high'))
    def ipo_rule_1722(self):
        self.declare(Fact(recommendation='Underwriter berkualitas baik. Laba bersih menunjukkan kerugian. DER menunjukkan tingkat hutang yang tinggi.'))


    @Rule(Fact(underwriter_valued='good'), Fact(net_income_valued='loss'), Fact(roa_valued='high'))
    def ipo_rule_1723(self):
        self.declare(Fact(recommendation='Underwriter berkualitas baik. Laba bersih menunjukkan kerugian. ROA menunjukkan efisiensi tinggi.'))


    @Rule(Fact(underwriter_valued='good'), Fact(net_income_valued='loss'), Fact(roe_valued='low'))
    def ipo_rule_1724(self):
        self.declare(Fact(recommendation='Underwriter berkualitas baik. Laba bersih menunjukkan kerugian. ROE menunjukkan keuntungan yang rendah.'))


    @Rule(Fact(underwriter_valued='good'), Fact(per_valued='high'), Fact(der_valued='high'))
    def ipo_rule_1725(self):
        self.declare(Fact(recommendation='Underwriter berkualitas baik. PER berada di tingkat yang tinggi. DER menunjukkan tingkat hutang yang tinggi.'))


    @Rule(Fact(underwriter_valued='good'), Fact(per_valued='high'), Fact(roa_valued='high'))
    def ipo_rule_1726(self):
        self.declare(Fact(recommendation='Underwriter berkualitas baik. PER berada di tingkat yang tinggi. ROA menunjukkan efisiensi tinggi.'))


    @Rule(Fact(underwriter_valued='good'), Fact(per_valued='high'), Fact(roe_valued='low'))
    def ipo_rule_1727(self):
        self.declare(Fact(recommendation='Underwriter berkualitas baik. PER berada di tingkat yang tinggi. ROE menunjukkan keuntungan yang rendah.'))


    @Rule(Fact(underwriter_valued='good'), Fact(der_valued='high'), Fact(roa_valued='high'))
    def ipo_rule_1728(self):
        self.declare(Fact(recommendation='Underwriter berkualitas baik. DER menunjukkan tingkat hutang yang tinggi. ROA menunjukkan efisiensi tinggi.'))


    @Rule(Fact(underwriter_valued='good'), Fact(der_valued='high'), Fact(roe_valued='low'))
    def ipo_rule_1729(self):
        self.declare(Fact(recommendation='Underwriter berkualitas baik. DER menunjukkan tingkat hutang yang tinggi. ROE menunjukkan keuntungan yang rendah.'))


    @Rule(Fact(underwriter_valued='good'), Fact(roa_valued='high'), Fact(roe_valued='low'))
    def ipo_rule_1730(self):
        self.declare(Fact(recommendation='Underwriter berkualitas baik. ROA menunjukkan efisiensi tinggi. ROE menunjukkan keuntungan yang rendah.'))


    @Rule(Fact(warrant_valued='bad'), Fact(net_income_valued='loss'), Fact(per_valued='high'))
    def ipo_rule_1731(self):
        self.declare(Fact(recommendation='Warrant menunjukkan kondisi buruk. Laba bersih menunjukkan kerugian. PER berada di tingkat yang tinggi.'))


    @Rule(Fact(warrant_valued='bad'), Fact(net_income_valued='loss'), Fact(der_valued='high'))
    def ipo_rule_1732(self):
        self.declare(Fact(recommendation='Warrant menunjukkan kondisi buruk. Laba bersih menunjukkan kerugian. DER menunjukkan tingkat hutang yang tinggi.'))


    @Rule(Fact(warrant_valued='bad'), Fact(net_income_valued='loss'), Fact(roa_valued='high'))
    def ipo_rule_1733(self):
        self.declare(Fact(recommendation='Warrant menunjukkan kondisi buruk. Laba bersih menunjukkan kerugian. ROA menunjukkan efisiensi tinggi.'))


    @Rule(Fact(warrant_valued='bad'), Fact(net_income_valued='loss'), Fact(roe_valued='low'))
    def ipo_rule_1734(self):
        self.declare(Fact(recommendation='Warrant menunjukkan kondisi buruk. Laba bersih menunjukkan kerugian. ROE menunjukkan keuntungan yang rendah.'))


    @Rule(Fact(warrant_valued='bad'), Fact(per_valued='high'), Fact(der_valued='high'))
    def ipo_rule_1735(self):
        self.declare(Fact(recommendation='Warrant menunjukkan kondisi buruk. PER berada di tingkat yang tinggi. DER menunjukkan tingkat hutang yang tinggi.'))


    @Rule(Fact(warrant_valued='bad'), Fact(per_valued='high'), Fact(roa_valued='high'))
    def ipo_rule_1736(self):
        self.declare(Fact(recommendation='Warrant menunjukkan kondisi buruk. PER berada di tingkat yang tinggi. ROA menunjukkan efisiensi tinggi.'))


    @Rule(Fact(warrant_valued='bad'), Fact(per_valued='high'), Fact(roe_valued='low'))
    def ipo_rule_1737(self):
        self.declare(Fact(recommendation='Warrant menunjukkan kondisi buruk. PER berada di tingkat yang tinggi. ROE menunjukkan keuntungan yang rendah.'))


    @Rule(Fact(warrant_valued='bad'), Fact(der_valued='high'), Fact(roa_valued='high'))
    def ipo_rule_1738(self):
        self.declare(Fact(recommendation='Warrant menunjukkan kondisi buruk. DER menunjukkan tingkat hutang yang tinggi. ROA menunjukkan efisiensi tinggi.'))


    @Rule(Fact(warrant_valued='bad'), Fact(der_valued='high'), Fact(roe_valued='low'))
    def ipo_rule_1739(self):
        self.declare(Fact(recommendation='Warrant menunjukkan kondisi buruk. DER menunjukkan tingkat hutang yang tinggi. ROE menunjukkan keuntungan yang rendah.'))


    @Rule(Fact(warrant_valued='bad'), Fact(roa_valued='high'), Fact(roe_valued='low'))
    def ipo_rule_1740(self):
        self.declare(Fact(recommendation='Warrant menunjukkan kondisi buruk. ROA menunjukkan efisiensi tinggi. ROE menunjukkan keuntungan yang rendah.'))


    @Rule(Fact(net_income_valued='loss'), Fact(per_valued='high'), Fact(der_valued='high'))
    def ipo_rule_1741(self):
        self.declare(Fact(recommendation='Laba bersih menunjukkan kerugian. PER berada di tingkat yang tinggi. DER menunjukkan tingkat hutang yang tinggi.'))


    @Rule(Fact(net_income_valued='loss'), Fact(per_valued='high'), Fact(roa_valued='high'))
    def ipo_rule_1742(self):
        self.declare(Fact(recommendation='Laba bersih menunjukkan kerugian. PER berada di tingkat yang tinggi. ROA menunjukkan efisiensi tinggi.'))


    @Rule(Fact(net_income_valued='loss'), Fact(per_valued='high'), Fact(roe_valued='low'))
    def ipo_rule_1743(self):
        self.declare(Fact(recommendation='Laba bersih menunjukkan kerugian. PER berada di tingkat yang tinggi. ROE menunjukkan keuntungan yang rendah.'))


    @Rule(Fact(net_income_valued='loss'), Fact(der_valued='high'), Fact(roa_valued='high'))
    def ipo_rule_1744(self):
        self.declare(Fact(recommendation='Laba bersih menunjukkan kerugian. DER menunjukkan tingkat hutang yang tinggi. ROA menunjukkan efisiensi tinggi.'))


    @Rule(Fact(net_income_valued='loss'), Fact(der_valued='high'), Fact(roe_valued='low'))
    def ipo_rule_1745(self):
        self.declare(Fact(recommendation='Laba bersih menunjukkan kerugian. DER menunjukkan tingkat hutang yang tinggi. ROE menunjukkan keuntungan yang rendah.'))


    @Rule(Fact(net_income_valued='loss'), Fact(roa_valued='high'), Fact(roe_valued='low'))
    def ipo_rule_1746(self):
        self.declare(Fact(recommendation='Laba bersih menunjukkan kerugian. ROA menunjukkan efisiensi tinggi. ROE menunjukkan keuntungan yang rendah.'))


    @Rule(Fact(per_valued='high'), Fact(der_valued='high'), Fact(roa_valued='high'))
    def ipo_rule_1747(self):
        self.declare(Fact(recommendation='PER berada di tingkat yang tinggi. DER menunjukkan tingkat hutang yang tinggi. ROA menunjukkan efisiensi tinggi.'))


    @Rule(Fact(per_valued='high'), Fact(der_valued='high'), Fact(roe_valued='low'))
    def ipo_rule_1748(self):
        self.declare(Fact(recommendation='PER berada di tingkat yang tinggi. DER menunjukkan tingkat hutang yang tinggi. ROE menunjukkan keuntungan yang rendah.'))


    @Rule(Fact(per_valued='high'), Fact(roa_valued='high'), Fact(roe_valued='low'))
    def ipo_rule_1749(self):
        self.declare(Fact(recommendation='PER berada di tingkat yang tinggi. ROA menunjukkan efisiensi tinggi. ROE menunjukkan keuntungan yang rendah.'))


    @Rule(Fact(der_valued='high'), Fact(roa_valued='high'), Fact(roe_valued='low'))
    def ipo_rule_1750(self):
        self.declare(Fact(recommendation='DER menunjukkan tingkat hutang yang tinggi. ROA menunjukkan efisiensi tinggi. ROE menunjukkan keuntungan yang rendah.'))


    @Rule(Fact(underwriter_valued='good'), Fact(warrant_valued='bad'), Fact(net_income_valued='loss'))
    def ipo_rule_1751(self):
        self.declare(Fact(recommendation='Underwriter berkualitas baik. Warrant menunjukkan kondisi buruk. Laba bersih menunjukkan kerugian.'))


    @Rule(Fact(underwriter_valued='good'), Fact(warrant_valued='bad'), Fact(per_valued='high'))
    def ipo_rule_1752(self):
        self.declare(Fact(recommendation='Underwriter berkualitas baik. Warrant menunjukkan kondisi buruk. PER berada di tingkat yang tinggi.'))


    @Rule(Fact(underwriter_valued='good'), Fact(warrant_valued='bad'), Fact(der_valued='high'))
    def ipo_rule_1753(self):
        self.declare(Fact(recommendation='Underwriter berkualitas baik. Warrant menunjukkan kondisi buruk. DER menunjukkan tingkat hutang yang tinggi.'))


    @Rule(Fact(underwriter_valued='good'), Fact(warrant_valued='bad'), Fact(roa_valued='low'))
    def ipo_rule_1754(self):
        self.declare(Fact(recommendation='Underwriter berkualitas baik. Warrant menunjukkan kondisi buruk. ROA menunjukkan efisiensi rendah.'))


    @Rule(Fact(underwriter_valued='good'), Fact(warrant_valued='bad'), Fact(roe_valued='high'))
    def ipo_rule_1755(self):
        self.declare(Fact(recommendation='Underwriter berkualitas baik. Warrant menunjukkan kondisi buruk. ROE menunjukkan keuntungan yang tinggi.'))


    @Rule(Fact(underwriter_valued='good'), Fact(net_income_valued='loss'), Fact(per_valued='high'))
    def ipo_rule_1756(self):
        self.declare(Fact(recommendation='Underwriter berkualitas baik. Laba bersih menunjukkan kerugian. PER berada di tingkat yang tinggi.'))


    @Rule(Fact(underwriter_valued='good'), Fact(net_income_valued='loss'), Fact(der_valued='high'))
    def ipo_rule_1757(self):
        self.declare(Fact(recommendation='Underwriter berkualitas baik. Laba bersih menunjukkan kerugian. DER menunjukkan tingkat hutang yang tinggi.'))


    @Rule(Fact(underwriter_valued='good'), Fact(net_income_valued='loss'), Fact(roa_valued='low'))
    def ipo_rule_1758(self):
        self.declare(Fact(recommendation='Underwriter berkualitas baik. Laba bersih menunjukkan kerugian. ROA menunjukkan efisiensi rendah.'))


    @Rule(Fact(underwriter_valued='good'), Fact(net_income_valued='loss'), Fact(roe_valued='high'))
    def ipo_rule_1759(self):
        self.declare(Fact(recommendation='Underwriter berkualitas baik. Laba bersih menunjukkan kerugian. ROE menunjukkan keuntungan yang tinggi.'))


    @Rule(Fact(underwriter_valued='good'), Fact(per_valued='high'), Fact(der_valued='high'))
    def ipo_rule_1760(self):
        self.declare(Fact(recommendation='Underwriter berkualitas baik. PER berada di tingkat yang tinggi. DER menunjukkan tingkat hutang yang tinggi.'))


    @Rule(Fact(underwriter_valued='good'), Fact(per_valued='high'), Fact(roa_valued='low'))
    def ipo_rule_1761(self):
        self.declare(Fact(recommendation='Underwriter berkualitas baik. PER berada di tingkat yang tinggi. ROA menunjukkan efisiensi rendah.'))


    @Rule(Fact(underwriter_valued='good'), Fact(per_valued='high'), Fact(roe_valued='high'))
    def ipo_rule_1762(self):
        self.declare(Fact(recommendation='Underwriter berkualitas baik. PER berada di tingkat yang tinggi. ROE menunjukkan keuntungan yang tinggi.'))


    @Rule(Fact(underwriter_valued='good'), Fact(der_valued='high'), Fact(roa_valued='low'))
    def ipo_rule_1763(self):
        self.declare(Fact(recommendation='Underwriter berkualitas baik. DER menunjukkan tingkat hutang yang tinggi. ROA menunjukkan efisiensi rendah.'))


    @Rule(Fact(underwriter_valued='good'), Fact(der_valued='high'), Fact(roe_valued='high'))
    def ipo_rule_1764(self):
        self.declare(Fact(recommendation='Underwriter berkualitas baik. DER menunjukkan tingkat hutang yang tinggi. ROE menunjukkan keuntungan yang tinggi.'))


    @Rule(Fact(underwriter_valued='good'), Fact(roa_valued='low'), Fact(roe_valued='high'))
    def ipo_rule_1765(self):
        self.declare(Fact(recommendation='Underwriter berkualitas baik. ROA menunjukkan efisiensi rendah. ROE menunjukkan keuntungan yang tinggi.'))


    @Rule(Fact(warrant_valued='bad'), Fact(net_income_valued='loss'), Fact(per_valued='high'))
    def ipo_rule_1766(self):
        self.declare(Fact(recommendation='Warrant menunjukkan kondisi buruk. Laba bersih menunjukkan kerugian. PER berada di tingkat yang tinggi.'))


    @Rule(Fact(warrant_valued='bad'), Fact(net_income_valued='loss'), Fact(der_valued='high'))
    def ipo_rule_1767(self):
        self.declare(Fact(recommendation='Warrant menunjukkan kondisi buruk. Laba bersih menunjukkan kerugian. DER menunjukkan tingkat hutang yang tinggi.'))


    @Rule(Fact(warrant_valued='bad'), Fact(net_income_valued='loss'), Fact(roa_valued='low'))
    def ipo_rule_1768(self):
        self.declare(Fact(recommendation='Warrant menunjukkan kondisi buruk. Laba bersih menunjukkan kerugian. ROA menunjukkan efisiensi rendah.'))


    @Rule(Fact(warrant_valued='bad'), Fact(net_income_valued='loss'), Fact(roe_valued='high'))
    def ipo_rule_1769(self):
        self.declare(Fact(recommendation='Warrant menunjukkan kondisi buruk. Laba bersih menunjukkan kerugian. ROE menunjukkan keuntungan yang tinggi.'))


    @Rule(Fact(warrant_valued='bad'), Fact(per_valued='high'), Fact(der_valued='high'))
    def ipo_rule_1770(self):
        self.declare(Fact(recommendation='Warrant menunjukkan kondisi buruk. PER berada di tingkat yang tinggi. DER menunjukkan tingkat hutang yang tinggi.'))


    @Rule(Fact(warrant_valued='bad'), Fact(per_valued='high'), Fact(roa_valued='low'))
    def ipo_rule_1771(self):
        self.declare(Fact(recommendation='Warrant menunjukkan kondisi buruk. PER berada di tingkat yang tinggi. ROA menunjukkan efisiensi rendah.'))


    @Rule(Fact(warrant_valued='bad'), Fact(per_valued='high'), Fact(roe_valued='high'))
    def ipo_rule_1772(self):
        self.declare(Fact(recommendation='Warrant menunjukkan kondisi buruk. PER berada di tingkat yang tinggi. ROE menunjukkan keuntungan yang tinggi.'))


    @Rule(Fact(warrant_valued='bad'), Fact(der_valued='high'), Fact(roa_valued='low'))
    def ipo_rule_1773(self):
        self.declare(Fact(recommendation='Warrant menunjukkan kondisi buruk. DER menunjukkan tingkat hutang yang tinggi. ROA menunjukkan efisiensi rendah.'))


    @Rule(Fact(warrant_valued='bad'), Fact(der_valued='high'), Fact(roe_valued='high'))
    def ipo_rule_1774(self):
        self.declare(Fact(recommendation='Warrant menunjukkan kondisi buruk. DER menunjukkan tingkat hutang yang tinggi. ROE menunjukkan keuntungan yang tinggi.'))


    @Rule(Fact(warrant_valued='bad'), Fact(roa_valued='low'), Fact(roe_valued='high'))
    def ipo_rule_1775(self):
        self.declare(Fact(recommendation='Warrant menunjukkan kondisi buruk. ROA menunjukkan efisiensi rendah. ROE menunjukkan keuntungan yang tinggi.'))


    @Rule(Fact(net_income_valued='loss'), Fact(per_valued='high'), Fact(der_valued='high'))
    def ipo_rule_1776(self):
        self.declare(Fact(recommendation='Laba bersih menunjukkan kerugian. PER berada di tingkat yang tinggi. DER menunjukkan tingkat hutang yang tinggi.'))


    @Rule(Fact(net_income_valued='loss'), Fact(per_valued='high'), Fact(roa_valued='low'))
    def ipo_rule_1777(self):
        self.declare(Fact(recommendation='Laba bersih menunjukkan kerugian. PER berada di tingkat yang tinggi. ROA menunjukkan efisiensi rendah.'))


    @Rule(Fact(net_income_valued='loss'), Fact(per_valued='high'), Fact(roe_valued='high'))
    def ipo_rule_1778(self):
        self.declare(Fact(recommendation='Laba bersih menunjukkan kerugian. PER berada di tingkat yang tinggi. ROE menunjukkan keuntungan yang tinggi.'))


    @Rule(Fact(net_income_valued='loss'), Fact(der_valued='high'), Fact(roa_valued='low'))
    def ipo_rule_1779(self):
        self.declare(Fact(recommendation='Laba bersih menunjukkan kerugian. DER menunjukkan tingkat hutang yang tinggi. ROA menunjukkan efisiensi rendah.'))


    @Rule(Fact(net_income_valued='loss'), Fact(der_valued='high'), Fact(roe_valued='high'))
    def ipo_rule_1780(self):
        self.declare(Fact(recommendation='Laba bersih menunjukkan kerugian. DER menunjukkan tingkat hutang yang tinggi. ROE menunjukkan keuntungan yang tinggi.'))


    @Rule(Fact(net_income_valued='loss'), Fact(roa_valued='low'), Fact(roe_valued='high'))
    def ipo_rule_1781(self):
        self.declare(Fact(recommendation='Laba bersih menunjukkan kerugian. ROA menunjukkan efisiensi rendah. ROE menunjukkan keuntungan yang tinggi.'))


    @Rule(Fact(per_valued='high'), Fact(der_valued='high'), Fact(roa_valued='low'))
    def ipo_rule_1782(self):
        self.declare(Fact(recommendation='PER berada di tingkat yang tinggi. DER menunjukkan tingkat hutang yang tinggi. ROA menunjukkan efisiensi rendah.'))


    @Rule(Fact(per_valued='high'), Fact(der_valued='high'), Fact(roe_valued='high'))
    def ipo_rule_1783(self):
        self.declare(Fact(recommendation='PER berada di tingkat yang tinggi. DER menunjukkan tingkat hutang yang tinggi. ROE menunjukkan keuntungan yang tinggi.'))


    @Rule(Fact(per_valued='high'), Fact(roa_valued='low'), Fact(roe_valued='high'))
    def ipo_rule_1784(self):
        self.declare(Fact(recommendation='PER berada di tingkat yang tinggi. ROA menunjukkan efisiensi rendah. ROE menunjukkan keuntungan yang tinggi.'))


    @Rule(Fact(der_valued='high'), Fact(roa_valued='low'), Fact(roe_valued='high'))
    def ipo_rule_1785(self):
        self.declare(Fact(recommendation='DER menunjukkan tingkat hutang yang tinggi. ROA menunjukkan efisiensi rendah. ROE menunjukkan keuntungan yang tinggi.'))


    @Rule(Fact(underwriter_valued='good'), Fact(warrant_valued='bad'), Fact(net_income_valued='loss'))
    def ipo_rule_1786(self):
        self.declare(Fact(recommendation='Underwriter berkualitas baik. Warrant menunjukkan kondisi buruk. Laba bersih menunjukkan kerugian.'))


    @Rule(Fact(underwriter_valued='good'), Fact(warrant_valued='bad'), Fact(per_valued='high'))
    def ipo_rule_1787(self):
        self.declare(Fact(recommendation='Underwriter berkualitas baik. Warrant menunjukkan kondisi buruk. PER berada di tingkat yang tinggi.'))


    @Rule(Fact(underwriter_valued='good'), Fact(warrant_valued='bad'), Fact(der_valued='high'))
    def ipo_rule_1788(self):
        self.declare(Fact(recommendation='Underwriter berkualitas baik. Warrant menunjukkan kondisi buruk. DER menunjukkan tingkat hutang yang tinggi.'))


    @Rule(Fact(underwriter_valued='good'), Fact(warrant_valued='bad'), Fact(roa_valued='low'))
    def ipo_rule_1789(self):
        self.declare(Fact(recommendation='Underwriter berkualitas baik. Warrant menunjukkan kondisi buruk. ROA menunjukkan efisiensi rendah.'))


    @Rule(Fact(underwriter_valued='good'), Fact(warrant_valued='bad'), Fact(roe_valued='low'))
    def ipo_rule_1790(self):
        self.declare(Fact(recommendation='Underwriter berkualitas baik. Warrant menunjukkan kondisi buruk. ROE menunjukkan keuntungan yang rendah.'))


    @Rule(Fact(underwriter_valued='good'), Fact(net_income_valued='loss'), Fact(per_valued='high'))
    def ipo_rule_1791(self):
        self.declare(Fact(recommendation='Underwriter berkualitas baik. Laba bersih menunjukkan kerugian. PER berada di tingkat yang tinggi.'))


    @Rule(Fact(underwriter_valued='good'), Fact(net_income_valued='loss'), Fact(der_valued='high'))
    def ipo_rule_1792(self):
        self.declare(Fact(recommendation='Underwriter berkualitas baik. Laba bersih menunjukkan kerugian. DER menunjukkan tingkat hutang yang tinggi.'))


    @Rule(Fact(underwriter_valued='good'), Fact(net_income_valued='loss'), Fact(roa_valued='low'))
    def ipo_rule_1793(self):
        self.declare(Fact(recommendation='Underwriter berkualitas baik. Laba bersih menunjukkan kerugian. ROA menunjukkan efisiensi rendah.'))


    @Rule(Fact(underwriter_valued='good'), Fact(net_income_valued='loss'), Fact(roe_valued='low'))
    def ipo_rule_1794(self):
        self.declare(Fact(recommendation='Underwriter berkualitas baik. Laba bersih menunjukkan kerugian. ROE menunjukkan keuntungan yang rendah.'))


    @Rule(Fact(underwriter_valued='good'), Fact(per_valued='high'), Fact(der_valued='high'))
    def ipo_rule_1795(self):
        self.declare(Fact(recommendation='Underwriter berkualitas baik. PER berada di tingkat yang tinggi. DER menunjukkan tingkat hutang yang tinggi.'))


    @Rule(Fact(underwriter_valued='good'), Fact(per_valued='high'), Fact(roa_valued='low'))
    def ipo_rule_1796(self):
        self.declare(Fact(recommendation='Underwriter berkualitas baik. PER berada di tingkat yang tinggi. ROA menunjukkan efisiensi rendah.'))


    @Rule(Fact(underwriter_valued='good'), Fact(per_valued='high'), Fact(roe_valued='low'))
    def ipo_rule_1797(self):
        self.declare(Fact(recommendation='Underwriter berkualitas baik. PER berada di tingkat yang tinggi. ROE menunjukkan keuntungan yang rendah.'))


    @Rule(Fact(underwriter_valued='good'), Fact(der_valued='high'), Fact(roa_valued='low'))
    def ipo_rule_1798(self):
        self.declare(Fact(recommendation='Underwriter berkualitas baik. DER menunjukkan tingkat hutang yang tinggi. ROA menunjukkan efisiensi rendah.'))


    @Rule(Fact(underwriter_valued='good'), Fact(der_valued='high'), Fact(roe_valued='low'))
    def ipo_rule_1799(self):
        self.declare(Fact(recommendation='Underwriter berkualitas baik. DER menunjukkan tingkat hutang yang tinggi. ROE menunjukkan keuntungan yang rendah.'))


    @Rule(Fact(underwriter_valued='good'), Fact(roa_valued='low'), Fact(roe_valued='low'))
    def ipo_rule_1800(self):
        self.declare(Fact(recommendation='Underwriter berkualitas baik. ROA menunjukkan efisiensi rendah. ROE menunjukkan keuntungan yang rendah.'))


    @Rule(Fact(warrant_valued='bad'), Fact(net_income_valued='loss'), Fact(per_valued='high'))
    def ipo_rule_1801(self):
        self.declare(Fact(recommendation='Warrant menunjukkan kondisi buruk. Laba bersih menunjukkan kerugian. PER berada di tingkat yang tinggi.'))


    @Rule(Fact(warrant_valued='bad'), Fact(net_income_valued='loss'), Fact(der_valued='high'))
    def ipo_rule_1802(self):
        self.declare(Fact(recommendation='Warrant menunjukkan kondisi buruk. Laba bersih menunjukkan kerugian. DER menunjukkan tingkat hutang yang tinggi.'))


    @Rule(Fact(warrant_valued='bad'), Fact(net_income_valued='loss'), Fact(roa_valued='low'))
    def ipo_rule_1803(self):
        self.declare(Fact(recommendation='Warrant menunjukkan kondisi buruk. Laba bersih menunjukkan kerugian. ROA menunjukkan efisiensi rendah.'))


    @Rule(Fact(warrant_valued='bad'), Fact(net_income_valued='loss'), Fact(roe_valued='low'))
    def ipo_rule_1804(self):
        self.declare(Fact(recommendation='Warrant menunjukkan kondisi buruk. Laba bersih menunjukkan kerugian. ROE menunjukkan keuntungan yang rendah.'))


    @Rule(Fact(warrant_valued='bad'), Fact(per_valued='high'), Fact(der_valued='high'))
    def ipo_rule_1805(self):
        self.declare(Fact(recommendation='Warrant menunjukkan kondisi buruk. PER berada di tingkat yang tinggi. DER menunjukkan tingkat hutang yang tinggi.'))


    @Rule(Fact(warrant_valued='bad'), Fact(per_valued='high'), Fact(roa_valued='low'))
    def ipo_rule_1806(self):
        self.declare(Fact(recommendation='Warrant menunjukkan kondisi buruk. PER berada di tingkat yang tinggi. ROA menunjukkan efisiensi rendah.'))


    @Rule(Fact(warrant_valued='bad'), Fact(per_valued='high'), Fact(roe_valued='low'))
    def ipo_rule_1807(self):
        self.declare(Fact(recommendation='Warrant menunjukkan kondisi buruk. PER berada di tingkat yang tinggi. ROE menunjukkan keuntungan yang rendah.'))


    @Rule(Fact(warrant_valued='bad'), Fact(der_valued='high'), Fact(roa_valued='low'))
    def ipo_rule_1808(self):
        self.declare(Fact(recommendation='Warrant menunjukkan kondisi buruk. DER menunjukkan tingkat hutang yang tinggi. ROA menunjukkan efisiensi rendah.'))


    @Rule(Fact(warrant_valued='bad'), Fact(der_valued='high'), Fact(roe_valued='low'))
    def ipo_rule_1809(self):
        self.declare(Fact(recommendation='Warrant menunjukkan kondisi buruk. DER menunjukkan tingkat hutang yang tinggi. ROE menunjukkan keuntungan yang rendah.'))


    @Rule(Fact(warrant_valued='bad'), Fact(roa_valued='low'), Fact(roe_valued='low'))
    def ipo_rule_1810(self):
        self.declare(Fact(recommendation='Warrant menunjukkan kondisi buruk. ROA menunjukkan efisiensi rendah. ROE menunjukkan keuntungan yang rendah.'))


    @Rule(Fact(net_income_valued='loss'), Fact(per_valued='high'), Fact(der_valued='high'))
    def ipo_rule_1811(self):
        self.declare(Fact(recommendation='Laba bersih menunjukkan kerugian. PER berada di tingkat yang tinggi. DER menunjukkan tingkat hutang yang tinggi.'))


    @Rule(Fact(net_income_valued='loss'), Fact(per_valued='high'), Fact(roa_valued='low'))
    def ipo_rule_1812(self):
        self.declare(Fact(recommendation='Laba bersih menunjukkan kerugian. PER berada di tingkat yang tinggi. ROA menunjukkan efisiensi rendah.'))


    @Rule(Fact(net_income_valued='loss'), Fact(per_valued='high'), Fact(roe_valued='low'))
    def ipo_rule_1813(self):
        self.declare(Fact(recommendation='Laba bersih menunjukkan kerugian. PER berada di tingkat yang tinggi. ROE menunjukkan keuntungan yang rendah.'))


    @Rule(Fact(net_income_valued='loss'), Fact(der_valued='high'), Fact(roa_valued='low'))
    def ipo_rule_1814(self):
        self.declare(Fact(recommendation='Laba bersih menunjukkan kerugian. DER menunjukkan tingkat hutang yang tinggi. ROA menunjukkan efisiensi rendah.'))


    @Rule(Fact(net_income_valued='loss'), Fact(der_valued='high'), Fact(roe_valued='low'))
    def ipo_rule_1815(self):
        self.declare(Fact(recommendation='Laba bersih menunjukkan kerugian. DER menunjukkan tingkat hutang yang tinggi. ROE menunjukkan keuntungan yang rendah.'))


    @Rule(Fact(net_income_valued='loss'), Fact(roa_valued='low'), Fact(roe_valued='low'))
    def ipo_rule_1816(self):
        self.declare(Fact(recommendation='Laba bersih menunjukkan kerugian. ROA menunjukkan efisiensi rendah. ROE menunjukkan keuntungan yang rendah.'))


    @Rule(Fact(per_valued='high'), Fact(der_valued='high'), Fact(roa_valued='low'))
    def ipo_rule_1817(self):
        self.declare(Fact(recommendation='PER berada di tingkat yang tinggi. DER menunjukkan tingkat hutang yang tinggi. ROA menunjukkan efisiensi rendah.'))


    @Rule(Fact(per_valued='high'), Fact(der_valued='high'), Fact(roe_valued='low'))
    def ipo_rule_1818(self):
        self.declare(Fact(recommendation='PER berada di tingkat yang tinggi. DER menunjukkan tingkat hutang yang tinggi. ROE menunjukkan keuntungan yang rendah.'))


    @Rule(Fact(per_valued='high'), Fact(roa_valued='low'), Fact(roe_valued='low'))
    def ipo_rule_1819(self):
        self.declare(Fact(recommendation='PER berada di tingkat yang tinggi. ROA menunjukkan efisiensi rendah. ROE menunjukkan keuntungan yang rendah.'))


    @Rule(Fact(der_valued='high'), Fact(roa_valued='low'), Fact(roe_valued='low'))
    def ipo_rule_1820(self):
        self.declare(Fact(recommendation='DER menunjukkan tingkat hutang yang tinggi. ROA menunjukkan efisiensi rendah. ROE menunjukkan keuntungan yang rendah.'))


    @Rule(Fact(underwriter_valued='good'), Fact(warrant_valued='bad'), Fact(net_income_valued='loss'))
    def ipo_rule_1821(self):
        self.declare(Fact(recommendation='Underwriter berkualitas baik. Warrant menunjukkan kondisi buruk. Laba bersih menunjukkan kerugian.'))


    @Rule(Fact(underwriter_valued='good'), Fact(warrant_valued='bad'), Fact(per_valued='high'))
    def ipo_rule_1822(self):
        self.declare(Fact(recommendation='Underwriter berkualitas baik. Warrant menunjukkan kondisi buruk. PER berada di tingkat yang tinggi.'))


    @Rule(Fact(underwriter_valued='good'), Fact(warrant_valued='bad'), Fact(der_valued='low'))
    def ipo_rule_1823(self):
        self.declare(Fact(recommendation='Underwriter berkualitas baik. Warrant menunjukkan kondisi buruk. DER menunjukkan tingkat hutang yang rendah.'))


    @Rule(Fact(underwriter_valued='good'), Fact(warrant_valued='bad'), Fact(roa_valued='high'))
    def ipo_rule_1824(self):
        self.declare(Fact(recommendation='Underwriter berkualitas baik. Warrant menunjukkan kondisi buruk. ROA menunjukkan efisiensi tinggi.'))


    @Rule(Fact(underwriter_valued='good'), Fact(warrant_valued='bad'), Fact(roe_valued='high'))
    def ipo_rule_1825(self):
        self.declare(Fact(recommendation='Underwriter berkualitas baik. Warrant menunjukkan kondisi buruk. ROE menunjukkan keuntungan yang tinggi.'))


    @Rule(Fact(underwriter_valued='good'), Fact(net_income_valued='loss'), Fact(per_valued='high'))
    def ipo_rule_1826(self):
        self.declare(Fact(recommendation='Underwriter berkualitas baik. Laba bersih menunjukkan kerugian. PER berada di tingkat yang tinggi.'))


    @Rule(Fact(underwriter_valued='good'), Fact(net_income_valued='loss'), Fact(der_valued='low'))
    def ipo_rule_1827(self):
        self.declare(Fact(recommendation='Underwriter berkualitas baik. Laba bersih menunjukkan kerugian. DER menunjukkan tingkat hutang yang rendah.'))


    @Rule(Fact(underwriter_valued='good'), Fact(net_income_valued='loss'), Fact(roa_valued='high'))
    def ipo_rule_1828(self):
        self.declare(Fact(recommendation='Underwriter berkualitas baik. Laba bersih menunjukkan kerugian. ROA menunjukkan efisiensi tinggi.'))


    @Rule(Fact(underwriter_valued='good'), Fact(net_income_valued='loss'), Fact(roe_valued='high'))
    def ipo_rule_1829(self):
        self.declare(Fact(recommendation='Underwriter berkualitas baik. Laba bersih menunjukkan kerugian. ROE menunjukkan keuntungan yang tinggi.'))


    @Rule(Fact(underwriter_valued='good'), Fact(per_valued='high'), Fact(der_valued='low'))
    def ipo_rule_1830(self):
        self.declare(Fact(recommendation='Underwriter berkualitas baik. PER berada di tingkat yang tinggi. DER menunjukkan tingkat hutang yang rendah.'))


    @Rule(Fact(underwriter_valued='good'), Fact(per_valued='high'), Fact(roa_valued='high'))
    def ipo_rule_1831(self):
        self.declare(Fact(recommendation='Underwriter berkualitas baik. PER berada di tingkat yang tinggi. ROA menunjukkan efisiensi tinggi.'))


    @Rule(Fact(underwriter_valued='good'), Fact(per_valued='high'), Fact(roe_valued='high'))
    def ipo_rule_1832(self):
        self.declare(Fact(recommendation='Underwriter berkualitas baik. PER berada di tingkat yang tinggi. ROE menunjukkan keuntungan yang tinggi.'))


    @Rule(Fact(underwriter_valued='good'), Fact(der_valued='low'), Fact(roa_valued='high'))
    def ipo_rule_1833(self):
        self.declare(Fact(recommendation='Underwriter berkualitas baik. DER menunjukkan tingkat hutang yang rendah. ROA menunjukkan efisiensi tinggi.'))


    @Rule(Fact(underwriter_valued='good'), Fact(der_valued='low'), Fact(roe_valued='high'))
    def ipo_rule_1834(self):
        self.declare(Fact(recommendation='Underwriter berkualitas baik. DER menunjukkan tingkat hutang yang rendah. ROE menunjukkan keuntungan yang tinggi.'))


    @Rule(Fact(underwriter_valued='good'), Fact(roa_valued='high'), Fact(roe_valued='high'))
    def ipo_rule_1835(self):
        self.declare(Fact(recommendation='Underwriter berkualitas baik. ROA menunjukkan efisiensi tinggi. ROE menunjukkan keuntungan yang tinggi.'))


    @Rule(Fact(warrant_valued='bad'), Fact(net_income_valued='loss'), Fact(per_valued='high'))
    def ipo_rule_1836(self):
        self.declare(Fact(recommendation='Warrant menunjukkan kondisi buruk. Laba bersih menunjukkan kerugian. PER berada di tingkat yang tinggi.'))


    @Rule(Fact(warrant_valued='bad'), Fact(net_income_valued='loss'), Fact(der_valued='low'))
    def ipo_rule_1837(self):
        self.declare(Fact(recommendation='Warrant menunjukkan kondisi buruk. Laba bersih menunjukkan kerugian. DER menunjukkan tingkat hutang yang rendah.'))


    @Rule(Fact(warrant_valued='bad'), Fact(net_income_valued='loss'), Fact(roa_valued='high'))
    def ipo_rule_1838(self):
        self.declare(Fact(recommendation='Warrant menunjukkan kondisi buruk. Laba bersih menunjukkan kerugian. ROA menunjukkan efisiensi tinggi.'))


    @Rule(Fact(warrant_valued='bad'), Fact(net_income_valued='loss'), Fact(roe_valued='high'))
    def ipo_rule_1839(self):
        self.declare(Fact(recommendation='Warrant menunjukkan kondisi buruk. Laba bersih menunjukkan kerugian. ROE menunjukkan keuntungan yang tinggi.'))


    @Rule(Fact(warrant_valued='bad'), Fact(per_valued='high'), Fact(der_valued='low'))
    def ipo_rule_1840(self):
        self.declare(Fact(recommendation='Warrant menunjukkan kondisi buruk. PER berada di tingkat yang tinggi. DER menunjukkan tingkat hutang yang rendah.'))


    @Rule(Fact(warrant_valued='bad'), Fact(per_valued='high'), Fact(roa_valued='high'))
    def ipo_rule_1841(self):
        self.declare(Fact(recommendation='Warrant menunjukkan kondisi buruk. PER berada di tingkat yang tinggi. ROA menunjukkan efisiensi tinggi.'))


    @Rule(Fact(warrant_valued='bad'), Fact(per_valued='high'), Fact(roe_valued='high'))
    def ipo_rule_1842(self):
        self.declare(Fact(recommendation='Warrant menunjukkan kondisi buruk. PER berada di tingkat yang tinggi. ROE menunjukkan keuntungan yang tinggi.'))


    @Rule(Fact(warrant_valued='bad'), Fact(der_valued='low'), Fact(roa_valued='high'))
    def ipo_rule_1843(self):
        self.declare(Fact(recommendation='Warrant menunjukkan kondisi buruk. DER menunjukkan tingkat hutang yang rendah. ROA menunjukkan efisiensi tinggi.'))


    @Rule(Fact(warrant_valued='bad'), Fact(der_valued='low'), Fact(roe_valued='high'))
    def ipo_rule_1844(self):
        self.declare(Fact(recommendation='Warrant menunjukkan kondisi buruk. DER menunjukkan tingkat hutang yang rendah. ROE menunjukkan keuntungan yang tinggi.'))


    @Rule(Fact(warrant_valued='bad'), Fact(roa_valued='high'), Fact(roe_valued='high'))
    def ipo_rule_1845(self):
        self.declare(Fact(recommendation='Warrant menunjukkan kondisi buruk. ROA menunjukkan efisiensi tinggi. ROE menunjukkan keuntungan yang tinggi.'))


    @Rule(Fact(net_income_valued='loss'), Fact(per_valued='high'), Fact(der_valued='low'))
    def ipo_rule_1846(self):
        self.declare(Fact(recommendation='Laba bersih menunjukkan kerugian. PER berada di tingkat yang tinggi. DER menunjukkan tingkat hutang yang rendah.'))


    @Rule(Fact(net_income_valued='loss'), Fact(per_valued='high'), Fact(roa_valued='high'))
    def ipo_rule_1847(self):
        self.declare(Fact(recommendation='Laba bersih menunjukkan kerugian. PER berada di tingkat yang tinggi. ROA menunjukkan efisiensi tinggi.'))


    @Rule(Fact(net_income_valued='loss'), Fact(per_valued='high'), Fact(roe_valued='high'))
    def ipo_rule_1848(self):
        self.declare(Fact(recommendation='Laba bersih menunjukkan kerugian. PER berada di tingkat yang tinggi. ROE menunjukkan keuntungan yang tinggi.'))


    @Rule(Fact(net_income_valued='loss'), Fact(der_valued='low'), Fact(roa_valued='high'))
    def ipo_rule_1849(self):
        self.declare(Fact(recommendation='Laba bersih menunjukkan kerugian. DER menunjukkan tingkat hutang yang rendah. ROA menunjukkan efisiensi tinggi.'))


    @Rule(Fact(net_income_valued='loss'), Fact(der_valued='low'), Fact(roe_valued='high'))
    def ipo_rule_1850(self):
        self.declare(Fact(recommendation='Laba bersih menunjukkan kerugian. DER menunjukkan tingkat hutang yang rendah. ROE menunjukkan keuntungan yang tinggi.'))


    @Rule(Fact(net_income_valued='loss'), Fact(roa_valued='high'), Fact(roe_valued='high'))
    def ipo_rule_1851(self):
        self.declare(Fact(recommendation='Laba bersih menunjukkan kerugian. ROA menunjukkan efisiensi tinggi. ROE menunjukkan keuntungan yang tinggi.'))


    @Rule(Fact(per_valued='high'), Fact(der_valued='low'), Fact(roa_valued='high'))
    def ipo_rule_1852(self):
        self.declare(Fact(recommendation='PER berada di tingkat yang tinggi. DER menunjukkan tingkat hutang yang rendah. ROA menunjukkan efisiensi tinggi.'))


    @Rule(Fact(per_valued='high'), Fact(der_valued='low'), Fact(roe_valued='high'))
    def ipo_rule_1853(self):
        self.declare(Fact(recommendation='PER berada di tingkat yang tinggi. DER menunjukkan tingkat hutang yang rendah. ROE menunjukkan keuntungan yang tinggi.'))


    @Rule(Fact(per_valued='high'), Fact(roa_valued='high'), Fact(roe_valued='high'))
    def ipo_rule_1854(self):
        self.declare(Fact(recommendation='PER berada di tingkat yang tinggi. ROA menunjukkan efisiensi tinggi. ROE menunjukkan keuntungan yang tinggi.'))


    @Rule(Fact(der_valued='low'), Fact(roa_valued='high'), Fact(roe_valued='high'))
    def ipo_rule_1855(self):
        self.declare(Fact(recommendation='DER menunjukkan tingkat hutang yang rendah. ROA menunjukkan efisiensi tinggi. ROE menunjukkan keuntungan yang tinggi.'))


    @Rule(Fact(underwriter_valued='good'), Fact(warrant_valued='bad'), Fact(net_income_valued='loss'))
    def ipo_rule_1856(self):
        self.declare(Fact(recommendation='Underwriter berkualitas baik. Warrant menunjukkan kondisi buruk. Laba bersih menunjukkan kerugian.'))


    @Rule(Fact(underwriter_valued='good'), Fact(warrant_valued='bad'), Fact(per_valued='high'))
    def ipo_rule_1857(self):
        self.declare(Fact(recommendation='Underwriter berkualitas baik. Warrant menunjukkan kondisi buruk. PER berada di tingkat yang tinggi.'))


    @Rule(Fact(underwriter_valued='good'), Fact(warrant_valued='bad'), Fact(der_valued='low'))
    def ipo_rule_1858(self):
        self.declare(Fact(recommendation='Underwriter berkualitas baik. Warrant menunjukkan kondisi buruk. DER menunjukkan tingkat hutang yang rendah.'))


    @Rule(Fact(underwriter_valued='good'), Fact(warrant_valued='bad'), Fact(roa_valued='high'))
    def ipo_rule_1859(self):
        self.declare(Fact(recommendation='Underwriter berkualitas baik. Warrant menunjukkan kondisi buruk. ROA menunjukkan efisiensi tinggi.'))


    @Rule(Fact(underwriter_valued='good'), Fact(warrant_valued='bad'), Fact(roe_valued='low'))
    def ipo_rule_1860(self):
        self.declare(Fact(recommendation='Underwriter berkualitas baik. Warrant menunjukkan kondisi buruk. ROE menunjukkan keuntungan yang rendah.'))


    @Rule(Fact(underwriter_valued='good'), Fact(net_income_valued='loss'), Fact(per_valued='high'))
    def ipo_rule_1861(self):
        self.declare(Fact(recommendation='Underwriter berkualitas baik. Laba bersih menunjukkan kerugian. PER berada di tingkat yang tinggi.'))


    @Rule(Fact(underwriter_valued='good'), Fact(net_income_valued='loss'), Fact(der_valued='low'))
    def ipo_rule_1862(self):
        self.declare(Fact(recommendation='Underwriter berkualitas baik. Laba bersih menunjukkan kerugian. DER menunjukkan tingkat hutang yang rendah.'))


    @Rule(Fact(underwriter_valued='good'), Fact(net_income_valued='loss'), Fact(roa_valued='high'))
    def ipo_rule_1863(self):
        self.declare(Fact(recommendation='Underwriter berkualitas baik. Laba bersih menunjukkan kerugian. ROA menunjukkan efisiensi tinggi.'))


    @Rule(Fact(underwriter_valued='good'), Fact(net_income_valued='loss'), Fact(roe_valued='low'))
    def ipo_rule_1864(self):
        self.declare(Fact(recommendation='Underwriter berkualitas baik. Laba bersih menunjukkan kerugian. ROE menunjukkan keuntungan yang rendah.'))


    @Rule(Fact(underwriter_valued='good'), Fact(per_valued='high'), Fact(der_valued='low'))
    def ipo_rule_1865(self):
        self.declare(Fact(recommendation='Underwriter berkualitas baik. PER berada di tingkat yang tinggi. DER menunjukkan tingkat hutang yang rendah.'))


    @Rule(Fact(underwriter_valued='good'), Fact(per_valued='high'), Fact(roa_valued='high'))
    def ipo_rule_1866(self):
        self.declare(Fact(recommendation='Underwriter berkualitas baik. PER berada di tingkat yang tinggi. ROA menunjukkan efisiensi tinggi.'))


    @Rule(Fact(underwriter_valued='good'), Fact(per_valued='high'), Fact(roe_valued='low'))
    def ipo_rule_1867(self):
        self.declare(Fact(recommendation='Underwriter berkualitas baik. PER berada di tingkat yang tinggi. ROE menunjukkan keuntungan yang rendah.'))


    @Rule(Fact(underwriter_valued='good'), Fact(der_valued='low'), Fact(roa_valued='high'))
    def ipo_rule_1868(self):
        self.declare(Fact(recommendation='Underwriter berkualitas baik. DER menunjukkan tingkat hutang yang rendah. ROA menunjukkan efisiensi tinggi.'))


    @Rule(Fact(underwriter_valued='good'), Fact(der_valued='low'), Fact(roe_valued='low'))
    def ipo_rule_1869(self):
        self.declare(Fact(recommendation='Underwriter berkualitas baik. DER menunjukkan tingkat hutang yang rendah. ROE menunjukkan keuntungan yang rendah.'))


    @Rule(Fact(underwriter_valued='good'), Fact(roa_valued='high'), Fact(roe_valued='low'))
    def ipo_rule_1870(self):
        self.declare(Fact(recommendation='Underwriter berkualitas baik. ROA menunjukkan efisiensi tinggi. ROE menunjukkan keuntungan yang rendah.'))


    @Rule(Fact(warrant_valued='bad'), Fact(net_income_valued='loss'), Fact(per_valued='high'))
    def ipo_rule_1871(self):
        self.declare(Fact(recommendation='Warrant menunjukkan kondisi buruk. Laba bersih menunjukkan kerugian. PER berada di tingkat yang tinggi.'))


    @Rule(Fact(warrant_valued='bad'), Fact(net_income_valued='loss'), Fact(der_valued='low'))
    def ipo_rule_1872(self):
        self.declare(Fact(recommendation='Warrant menunjukkan kondisi buruk. Laba bersih menunjukkan kerugian. DER menunjukkan tingkat hutang yang rendah.'))


    @Rule(Fact(warrant_valued='bad'), Fact(net_income_valued='loss'), Fact(roa_valued='high'))
    def ipo_rule_1873(self):
        self.declare(Fact(recommendation='Warrant menunjukkan kondisi buruk. Laba bersih menunjukkan kerugian. ROA menunjukkan efisiensi tinggi.'))


    @Rule(Fact(warrant_valued='bad'), Fact(net_income_valued='loss'), Fact(roe_valued='low'))
    def ipo_rule_1874(self):
        self.declare(Fact(recommendation='Warrant menunjukkan kondisi buruk. Laba bersih menunjukkan kerugian. ROE menunjukkan keuntungan yang rendah.'))


    @Rule(Fact(warrant_valued='bad'), Fact(per_valued='high'), Fact(der_valued='low'))
    def ipo_rule_1875(self):
        self.declare(Fact(recommendation='Warrant menunjukkan kondisi buruk. PER berada di tingkat yang tinggi. DER menunjukkan tingkat hutang yang rendah.'))


    @Rule(Fact(warrant_valued='bad'), Fact(per_valued='high'), Fact(roa_valued='high'))
    def ipo_rule_1876(self):
        self.declare(Fact(recommendation='Warrant menunjukkan kondisi buruk. PER berada di tingkat yang tinggi. ROA menunjukkan efisiensi tinggi.'))


    @Rule(Fact(warrant_valued='bad'), Fact(per_valued='high'), Fact(roe_valued='low'))
    def ipo_rule_1877(self):
        self.declare(Fact(recommendation='Warrant menunjukkan kondisi buruk. PER berada di tingkat yang tinggi. ROE menunjukkan keuntungan yang rendah.'))


    @Rule(Fact(warrant_valued='bad'), Fact(der_valued='low'), Fact(roa_valued='high'))
    def ipo_rule_1878(self):
        self.declare(Fact(recommendation='Warrant menunjukkan kondisi buruk. DER menunjukkan tingkat hutang yang rendah. ROA menunjukkan efisiensi tinggi.'))


    @Rule(Fact(warrant_valued='bad'), Fact(der_valued='low'), Fact(roe_valued='low'))
    def ipo_rule_1879(self):
        self.declare(Fact(recommendation='Warrant menunjukkan kondisi buruk. DER menunjukkan tingkat hutang yang rendah. ROE menunjukkan keuntungan yang rendah.'))


    @Rule(Fact(warrant_valued='bad'), Fact(roa_valued='high'), Fact(roe_valued='low'))
    def ipo_rule_1880(self):
        self.declare(Fact(recommendation='Warrant menunjukkan kondisi buruk. ROA menunjukkan efisiensi tinggi. ROE menunjukkan keuntungan yang rendah.'))


    @Rule(Fact(net_income_valued='loss'), Fact(per_valued='high'), Fact(der_valued='low'))
    def ipo_rule_1881(self):
        self.declare(Fact(recommendation='Laba bersih menunjukkan kerugian. PER berada di tingkat yang tinggi. DER menunjukkan tingkat hutang yang rendah.'))


    @Rule(Fact(net_income_valued='loss'), Fact(per_valued='high'), Fact(roa_valued='high'))
    def ipo_rule_1882(self):
        self.declare(Fact(recommendation='Laba bersih menunjukkan kerugian. PER berada di tingkat yang tinggi. ROA menunjukkan efisiensi tinggi.'))


    @Rule(Fact(net_income_valued='loss'), Fact(per_valued='high'), Fact(roe_valued='low'))
    def ipo_rule_1883(self):
        self.declare(Fact(recommendation='Laba bersih menunjukkan kerugian. PER berada di tingkat yang tinggi. ROE menunjukkan keuntungan yang rendah.'))


    @Rule(Fact(net_income_valued='loss'), Fact(der_valued='low'), Fact(roa_valued='high'))
    def ipo_rule_1884(self):
        self.declare(Fact(recommendation='Laba bersih menunjukkan kerugian. DER menunjukkan tingkat hutang yang rendah. ROA menunjukkan efisiensi tinggi.'))


    @Rule(Fact(net_income_valued='loss'), Fact(der_valued='low'), Fact(roe_valued='low'))
    def ipo_rule_1885(self):
        self.declare(Fact(recommendation='Laba bersih menunjukkan kerugian. DER menunjukkan tingkat hutang yang rendah. ROE menunjukkan keuntungan yang rendah.'))


    @Rule(Fact(net_income_valued='loss'), Fact(roa_valued='high'), Fact(roe_valued='low'))
    def ipo_rule_1886(self):
        self.declare(Fact(recommendation='Laba bersih menunjukkan kerugian. ROA menunjukkan efisiensi tinggi. ROE menunjukkan keuntungan yang rendah.'))


    @Rule(Fact(per_valued='high'), Fact(der_valued='low'), Fact(roa_valued='high'))
    def ipo_rule_1887(self):
        self.declare(Fact(recommendation='PER berada di tingkat yang tinggi. DER menunjukkan tingkat hutang yang rendah. ROA menunjukkan efisiensi tinggi.'))


    @Rule(Fact(per_valued='high'), Fact(der_valued='low'), Fact(roe_valued='low'))
    def ipo_rule_1888(self):
        self.declare(Fact(recommendation='PER berada di tingkat yang tinggi. DER menunjukkan tingkat hutang yang rendah. ROE menunjukkan keuntungan yang rendah.'))


    @Rule(Fact(per_valued='high'), Fact(roa_valued='high'), Fact(roe_valued='low'))
    def ipo_rule_1889(self):
        self.declare(Fact(recommendation='PER berada di tingkat yang tinggi. ROA menunjukkan efisiensi tinggi. ROE menunjukkan keuntungan yang rendah.'))


    @Rule(Fact(der_valued='low'), Fact(roa_valued='high'), Fact(roe_valued='low'))
    def ipo_rule_1890(self):
        self.declare(Fact(recommendation='DER menunjukkan tingkat hutang yang rendah. ROA menunjukkan efisiensi tinggi. ROE menunjukkan keuntungan yang rendah.'))


    @Rule(Fact(underwriter_valued='good'), Fact(warrant_valued='bad'), Fact(net_income_valued='loss'))
    def ipo_rule_1891(self):
        self.declare(Fact(recommendation='Underwriter berkualitas baik. Warrant menunjukkan kondisi buruk. Laba bersih menunjukkan kerugian.'))


    @Rule(Fact(underwriter_valued='good'), Fact(warrant_valued='bad'), Fact(per_valued='high'))
    def ipo_rule_1892(self):
        self.declare(Fact(recommendation='Underwriter berkualitas baik. Warrant menunjukkan kondisi buruk. PER berada di tingkat yang tinggi.'))


    @Rule(Fact(underwriter_valued='good'), Fact(warrant_valued='bad'), Fact(der_valued='low'))
    def ipo_rule_1893(self):
        self.declare(Fact(recommendation='Underwriter berkualitas baik. Warrant menunjukkan kondisi buruk. DER menunjukkan tingkat hutang yang rendah.'))


    @Rule(Fact(underwriter_valued='good'), Fact(warrant_valued='bad'), Fact(roa_valued='low'))
    def ipo_rule_1894(self):
        self.declare(Fact(recommendation='Underwriter berkualitas baik. Warrant menunjukkan kondisi buruk. ROA menunjukkan efisiensi rendah.'))


    @Rule(Fact(underwriter_valued='good'), Fact(warrant_valued='bad'), Fact(roe_valued='high'))
    def ipo_rule_1895(self):
        self.declare(Fact(recommendation='Underwriter berkualitas baik. Warrant menunjukkan kondisi buruk. ROE menunjukkan keuntungan yang tinggi.'))


    @Rule(Fact(underwriter_valued='good'), Fact(net_income_valued='loss'), Fact(per_valued='high'))
    def ipo_rule_1896(self):
        self.declare(Fact(recommendation='Underwriter berkualitas baik. Laba bersih menunjukkan kerugian. PER berada di tingkat yang tinggi.'))


    @Rule(Fact(underwriter_valued='good'), Fact(net_income_valued='loss'), Fact(der_valued='low'))
    def ipo_rule_1897(self):
        self.declare(Fact(recommendation='Underwriter berkualitas baik. Laba bersih menunjukkan kerugian. DER menunjukkan tingkat hutang yang rendah.'))


    @Rule(Fact(underwriter_valued='good'), Fact(net_income_valued='loss'), Fact(roa_valued='low'))
    def ipo_rule_1898(self):
        self.declare(Fact(recommendation='Underwriter berkualitas baik. Laba bersih menunjukkan kerugian. ROA menunjukkan efisiensi rendah.'))


    @Rule(Fact(underwriter_valued='good'), Fact(net_income_valued='loss'), Fact(roe_valued='high'))
    def ipo_rule_1899(self):
        self.declare(Fact(recommendation='Underwriter berkualitas baik. Laba bersih menunjukkan kerugian. ROE menunjukkan keuntungan yang tinggi.'))


    @Rule(Fact(underwriter_valued='good'), Fact(per_valued='high'), Fact(der_valued='low'))
    def ipo_rule_1900(self):
        self.declare(Fact(recommendation='Underwriter berkualitas baik. PER berada di tingkat yang tinggi. DER menunjukkan tingkat hutang yang rendah.'))


    @Rule(Fact(underwriter_valued='good'), Fact(per_valued='high'), Fact(roa_valued='low'))
    def ipo_rule_1901(self):
        self.declare(Fact(recommendation='Underwriter berkualitas baik. PER berada di tingkat yang tinggi. ROA menunjukkan efisiensi rendah.'))


    @Rule(Fact(underwriter_valued='good'), Fact(per_valued='high'), Fact(roe_valued='high'))
    def ipo_rule_1902(self):
        self.declare(Fact(recommendation='Underwriter berkualitas baik. PER berada di tingkat yang tinggi. ROE menunjukkan keuntungan yang tinggi.'))


    @Rule(Fact(underwriter_valued='good'), Fact(der_valued='low'), Fact(roa_valued='low'))
    def ipo_rule_1903(self):
        self.declare(Fact(recommendation='Underwriter berkualitas baik. DER menunjukkan tingkat hutang yang rendah. ROA menunjukkan efisiensi rendah.'))


    @Rule(Fact(underwriter_valued='good'), Fact(der_valued='low'), Fact(roe_valued='high'))
    def ipo_rule_1904(self):
        self.declare(Fact(recommendation='Underwriter berkualitas baik. DER menunjukkan tingkat hutang yang rendah. ROE menunjukkan keuntungan yang tinggi.'))


    @Rule(Fact(underwriter_valued='good'), Fact(roa_valued='low'), Fact(roe_valued='high'))
    def ipo_rule_1905(self):
        self.declare(Fact(recommendation='Underwriter berkualitas baik. ROA menunjukkan efisiensi rendah. ROE menunjukkan keuntungan yang tinggi.'))


    @Rule(Fact(warrant_valued='bad'), Fact(net_income_valued='loss'), Fact(per_valued='high'))
    def ipo_rule_1906(self):
        self.declare(Fact(recommendation='Warrant menunjukkan kondisi buruk. Laba bersih menunjukkan kerugian. PER berada di tingkat yang tinggi.'))


    @Rule(Fact(warrant_valued='bad'), Fact(net_income_valued='loss'), Fact(der_valued='low'))
    def ipo_rule_1907(self):
        self.declare(Fact(recommendation='Warrant menunjukkan kondisi buruk. Laba bersih menunjukkan kerugian. DER menunjukkan tingkat hutang yang rendah.'))


    @Rule(Fact(warrant_valued='bad'), Fact(net_income_valued='loss'), Fact(roa_valued='low'))
    def ipo_rule_1908(self):
        self.declare(Fact(recommendation='Warrant menunjukkan kondisi buruk. Laba bersih menunjukkan kerugian. ROA menunjukkan efisiensi rendah.'))


    @Rule(Fact(warrant_valued='bad'), Fact(net_income_valued='loss'), Fact(roe_valued='high'))
    def ipo_rule_1909(self):
        self.declare(Fact(recommendation='Warrant menunjukkan kondisi buruk. Laba bersih menunjukkan kerugian. ROE menunjukkan keuntungan yang tinggi.'))


    @Rule(Fact(warrant_valued='bad'), Fact(per_valued='high'), Fact(der_valued='low'))
    def ipo_rule_1910(self):
        self.declare(Fact(recommendation='Warrant menunjukkan kondisi buruk. PER berada di tingkat yang tinggi. DER menunjukkan tingkat hutang yang rendah.'))


    @Rule(Fact(warrant_valued='bad'), Fact(per_valued='high'), Fact(roa_valued='low'))
    def ipo_rule_1911(self):
        self.declare(Fact(recommendation='Warrant menunjukkan kondisi buruk. PER berada di tingkat yang tinggi. ROA menunjukkan efisiensi rendah.'))


    @Rule(Fact(warrant_valued='bad'), Fact(per_valued='high'), Fact(roe_valued='high'))
    def ipo_rule_1912(self):
        self.declare(Fact(recommendation='Warrant menunjukkan kondisi buruk. PER berada di tingkat yang tinggi. ROE menunjukkan keuntungan yang tinggi.'))


    @Rule(Fact(warrant_valued='bad'), Fact(der_valued='low'), Fact(roa_valued='low'))
    def ipo_rule_1913(self):
        self.declare(Fact(recommendation='Warrant menunjukkan kondisi buruk. DER menunjukkan tingkat hutang yang rendah. ROA menunjukkan efisiensi rendah.'))


    @Rule(Fact(warrant_valued='bad'), Fact(der_valued='low'), Fact(roe_valued='high'))
    def ipo_rule_1914(self):
        self.declare(Fact(recommendation='Warrant menunjukkan kondisi buruk. DER menunjukkan tingkat hutang yang rendah. ROE menunjukkan keuntungan yang tinggi.'))


    @Rule(Fact(warrant_valued='bad'), Fact(roa_valued='low'), Fact(roe_valued='high'))
    def ipo_rule_1915(self):
        self.declare(Fact(recommendation='Warrant menunjukkan kondisi buruk. ROA menunjukkan efisiensi rendah. ROE menunjukkan keuntungan yang tinggi.'))


    @Rule(Fact(net_income_valued='loss'), Fact(per_valued='high'), Fact(der_valued='low'))
    def ipo_rule_1916(self):
        self.declare(Fact(recommendation='Laba bersih menunjukkan kerugian. PER berada di tingkat yang tinggi. DER menunjukkan tingkat hutang yang rendah.'))


    @Rule(Fact(net_income_valued='loss'), Fact(per_valued='high'), Fact(roa_valued='low'))
    def ipo_rule_1917(self):
        self.declare(Fact(recommendation='Laba bersih menunjukkan kerugian. PER berada di tingkat yang tinggi. ROA menunjukkan efisiensi rendah.'))


    @Rule(Fact(net_income_valued='loss'), Fact(per_valued='high'), Fact(roe_valued='high'))
    def ipo_rule_1918(self):
        self.declare(Fact(recommendation='Laba bersih menunjukkan kerugian. PER berada di tingkat yang tinggi. ROE menunjukkan keuntungan yang tinggi.'))


    @Rule(Fact(net_income_valued='loss'), Fact(der_valued='low'), Fact(roa_valued='low'))
    def ipo_rule_1919(self):
        self.declare(Fact(recommendation='Laba bersih menunjukkan kerugian. DER menunjukkan tingkat hutang yang rendah. ROA menunjukkan efisiensi rendah.'))


    @Rule(Fact(net_income_valued='loss'), Fact(der_valued='low'), Fact(roe_valued='high'))
    def ipo_rule_1920(self):
        self.declare(Fact(recommendation='Laba bersih menunjukkan kerugian. DER menunjukkan tingkat hutang yang rendah. ROE menunjukkan keuntungan yang tinggi.'))


    @Rule(Fact(net_income_valued='loss'), Fact(roa_valued='low'), Fact(roe_valued='high'))
    def ipo_rule_1921(self):
        self.declare(Fact(recommendation='Laba bersih menunjukkan kerugian. ROA menunjukkan efisiensi rendah. ROE menunjukkan keuntungan yang tinggi.'))


    @Rule(Fact(per_valued='high'), Fact(der_valued='low'), Fact(roa_valued='low'))
    def ipo_rule_1922(self):
        self.declare(Fact(recommendation='PER berada di tingkat yang tinggi. DER menunjukkan tingkat hutang yang rendah. ROA menunjukkan efisiensi rendah.'))


    @Rule(Fact(per_valued='high'), Fact(der_valued='low'), Fact(roe_valued='high'))
    def ipo_rule_1923(self):
        self.declare(Fact(recommendation='PER berada di tingkat yang tinggi. DER menunjukkan tingkat hutang yang rendah. ROE menunjukkan keuntungan yang tinggi.'))


    @Rule(Fact(per_valued='high'), Fact(roa_valued='low'), Fact(roe_valued='high'))
    def ipo_rule_1924(self):
        self.declare(Fact(recommendation='PER berada di tingkat yang tinggi. ROA menunjukkan efisiensi rendah. ROE menunjukkan keuntungan yang tinggi.'))


    @Rule(Fact(der_valued='low'), Fact(roa_valued='low'), Fact(roe_valued='high'))
    def ipo_rule_1925(self):
        self.declare(Fact(recommendation='DER menunjukkan tingkat hutang yang rendah. ROA menunjukkan efisiensi rendah. ROE menunjukkan keuntungan yang tinggi.'))


    @Rule(Fact(underwriter_valued='good'), Fact(warrant_valued='bad'), Fact(net_income_valued='loss'))
    def ipo_rule_1926(self):
        self.declare(Fact(recommendation='Underwriter berkualitas baik. Warrant menunjukkan kondisi buruk. Laba bersih menunjukkan kerugian.'))


    @Rule(Fact(underwriter_valued='good'), Fact(warrant_valued='bad'), Fact(per_valued='high'))
    def ipo_rule_1927(self):
        self.declare(Fact(recommendation='Underwriter berkualitas baik. Warrant menunjukkan kondisi buruk. PER berada di tingkat yang tinggi.'))


    @Rule(Fact(underwriter_valued='good'), Fact(warrant_valued='bad'), Fact(der_valued='low'))
    def ipo_rule_1928(self):
        self.declare(Fact(recommendation='Underwriter berkualitas baik. Warrant menunjukkan kondisi buruk. DER menunjukkan tingkat hutang yang rendah.'))


    @Rule(Fact(underwriter_valued='good'), Fact(warrant_valued='bad'), Fact(roa_valued='low'))
    def ipo_rule_1929(self):
        self.declare(Fact(recommendation='Underwriter berkualitas baik. Warrant menunjukkan kondisi buruk. ROA menunjukkan efisiensi rendah.'))


    @Rule(Fact(underwriter_valued='good'), Fact(warrant_valued='bad'), Fact(roe_valued='low'))
    def ipo_rule_1930(self):
        self.declare(Fact(recommendation='Underwriter berkualitas baik. Warrant menunjukkan kondisi buruk. ROE menunjukkan keuntungan yang rendah.'))


    @Rule(Fact(underwriter_valued='good'), Fact(net_income_valued='loss'), Fact(per_valued='high'))
    def ipo_rule_1931(self):
        self.declare(Fact(recommendation='Underwriter berkualitas baik. Laba bersih menunjukkan kerugian. PER berada di tingkat yang tinggi.'))


    @Rule(Fact(underwriter_valued='good'), Fact(net_income_valued='loss'), Fact(der_valued='low'))
    def ipo_rule_1932(self):
        self.declare(Fact(recommendation='Underwriter berkualitas baik. Laba bersih menunjukkan kerugian. DER menunjukkan tingkat hutang yang rendah.'))


    @Rule(Fact(underwriter_valued='good'), Fact(net_income_valued='loss'), Fact(roa_valued='low'))
    def ipo_rule_1933(self):
        self.declare(Fact(recommendation='Underwriter berkualitas baik. Laba bersih menunjukkan kerugian. ROA menunjukkan efisiensi rendah.'))


    @Rule(Fact(underwriter_valued='good'), Fact(net_income_valued='loss'), Fact(roe_valued='low'))
    def ipo_rule_1934(self):
        self.declare(Fact(recommendation='Underwriter berkualitas baik. Laba bersih menunjukkan kerugian. ROE menunjukkan keuntungan yang rendah.'))


    @Rule(Fact(underwriter_valued='good'), Fact(per_valued='high'), Fact(der_valued='low'))
    def ipo_rule_1935(self):
        self.declare(Fact(recommendation='Underwriter berkualitas baik. PER berada di tingkat yang tinggi. DER menunjukkan tingkat hutang yang rendah.'))


    @Rule(Fact(underwriter_valued='good'), Fact(per_valued='high'), Fact(roa_valued='low'))
    def ipo_rule_1936(self):
        self.declare(Fact(recommendation='Underwriter berkualitas baik. PER berada di tingkat yang tinggi. ROA menunjukkan efisiensi rendah.'))


    @Rule(Fact(underwriter_valued='good'), Fact(per_valued='high'), Fact(roe_valued='low'))
    def ipo_rule_1937(self):
        self.declare(Fact(recommendation='Underwriter berkualitas baik. PER berada di tingkat yang tinggi. ROE menunjukkan keuntungan yang rendah.'))


    @Rule(Fact(underwriter_valued='good'), Fact(der_valued='low'), Fact(roa_valued='low'))
    def ipo_rule_1938(self):
        self.declare(Fact(recommendation='Underwriter berkualitas baik. DER menunjukkan tingkat hutang yang rendah. ROA menunjukkan efisiensi rendah.'))


    @Rule(Fact(underwriter_valued='good'), Fact(der_valued='low'), Fact(roe_valued='low'))
    def ipo_rule_1939(self):
        self.declare(Fact(recommendation='Underwriter berkualitas baik. DER menunjukkan tingkat hutang yang rendah. ROE menunjukkan keuntungan yang rendah.'))


    @Rule(Fact(underwriter_valued='good'), Fact(roa_valued='low'), Fact(roe_valued='low'))
    def ipo_rule_1940(self):
        self.declare(Fact(recommendation='Underwriter berkualitas baik. ROA menunjukkan efisiensi rendah. ROE menunjukkan keuntungan yang rendah.'))


    @Rule(Fact(warrant_valued='bad'), Fact(net_income_valued='loss'), Fact(per_valued='high'))
    def ipo_rule_1941(self):
        self.declare(Fact(recommendation='Warrant menunjukkan kondisi buruk. Laba bersih menunjukkan kerugian. PER berada di tingkat yang tinggi.'))


    @Rule(Fact(warrant_valued='bad'), Fact(net_income_valued='loss'), Fact(der_valued='low'))
    def ipo_rule_1942(self):
        self.declare(Fact(recommendation='Warrant menunjukkan kondisi buruk. Laba bersih menunjukkan kerugian. DER menunjukkan tingkat hutang yang rendah.'))


    @Rule(Fact(warrant_valued='bad'), Fact(net_income_valued='loss'), Fact(roa_valued='low'))
    def ipo_rule_1943(self):
        self.declare(Fact(recommendation='Warrant menunjukkan kondisi buruk. Laba bersih menunjukkan kerugian. ROA menunjukkan efisiensi rendah.'))


    @Rule(Fact(warrant_valued='bad'), Fact(net_income_valued='loss'), Fact(roe_valued='low'))
    def ipo_rule_1944(self):
        self.declare(Fact(recommendation='Warrant menunjukkan kondisi buruk. Laba bersih menunjukkan kerugian. ROE menunjukkan keuntungan yang rendah.'))


    @Rule(Fact(warrant_valued='bad'), Fact(per_valued='high'), Fact(der_valued='low'))
    def ipo_rule_1945(self):
        self.declare(Fact(recommendation='Warrant menunjukkan kondisi buruk. PER berada di tingkat yang tinggi. DER menunjukkan tingkat hutang yang rendah.'))


    @Rule(Fact(warrant_valued='bad'), Fact(per_valued='high'), Fact(roa_valued='low'))
    def ipo_rule_1946(self):
        self.declare(Fact(recommendation='Warrant menunjukkan kondisi buruk. PER berada di tingkat yang tinggi. ROA menunjukkan efisiensi rendah.'))


    @Rule(Fact(warrant_valued='bad'), Fact(per_valued='high'), Fact(roe_valued='low'))
    def ipo_rule_1947(self):
        self.declare(Fact(recommendation='Warrant menunjukkan kondisi buruk. PER berada di tingkat yang tinggi. ROE menunjukkan keuntungan yang rendah.'))


    @Rule(Fact(warrant_valued='bad'), Fact(der_valued='low'), Fact(roa_valued='low'))
    def ipo_rule_1948(self):
        self.declare(Fact(recommendation='Warrant menunjukkan kondisi buruk. DER menunjukkan tingkat hutang yang rendah. ROA menunjukkan efisiensi rendah.'))


    @Rule(Fact(warrant_valued='bad'), Fact(der_valued='low'), Fact(roe_valued='low'))
    def ipo_rule_1949(self):
        self.declare(Fact(recommendation='Warrant menunjukkan kondisi buruk. DER menunjukkan tingkat hutang yang rendah. ROE menunjukkan keuntungan yang rendah.'))


    @Rule(Fact(warrant_valued='bad'), Fact(roa_valued='low'), Fact(roe_valued='low'))
    def ipo_rule_1950(self):
        self.declare(Fact(recommendation='Warrant menunjukkan kondisi buruk. ROA menunjukkan efisiensi rendah. ROE menunjukkan keuntungan yang rendah.'))


    @Rule(Fact(net_income_valued='loss'), Fact(per_valued='high'), Fact(der_valued='low'))
    def ipo_rule_1951(self):
        self.declare(Fact(recommendation='Laba bersih menunjukkan kerugian. PER berada di tingkat yang tinggi. DER menunjukkan tingkat hutang yang rendah.'))


    @Rule(Fact(net_income_valued='loss'), Fact(per_valued='high'), Fact(roa_valued='low'))
    def ipo_rule_1952(self):
        self.declare(Fact(recommendation='Laba bersih menunjukkan kerugian. PER berada di tingkat yang tinggi. ROA menunjukkan efisiensi rendah.'))


    @Rule(Fact(net_income_valued='loss'), Fact(per_valued='high'), Fact(roe_valued='low'))
    def ipo_rule_1953(self):
        self.declare(Fact(recommendation='Laba bersih menunjukkan kerugian. PER berada di tingkat yang tinggi. ROE menunjukkan keuntungan yang rendah.'))


    @Rule(Fact(net_income_valued='loss'), Fact(der_valued='low'), Fact(roa_valued='low'))
    def ipo_rule_1954(self):
        self.declare(Fact(recommendation='Laba bersih menunjukkan kerugian. DER menunjukkan tingkat hutang yang rendah. ROA menunjukkan efisiensi rendah.'))


    @Rule(Fact(net_income_valued='loss'), Fact(der_valued='low'), Fact(roe_valued='low'))
    def ipo_rule_1955(self):
        self.declare(Fact(recommendation='Laba bersih menunjukkan kerugian. DER menunjukkan tingkat hutang yang rendah. ROE menunjukkan keuntungan yang rendah.'))


    @Rule(Fact(net_income_valued='loss'), Fact(roa_valued='low'), Fact(roe_valued='low'))
    def ipo_rule_1956(self):
        self.declare(Fact(recommendation='Laba bersih menunjukkan kerugian. ROA menunjukkan efisiensi rendah. ROE menunjukkan keuntungan yang rendah.'))


    @Rule(Fact(per_valued='high'), Fact(der_valued='low'), Fact(roa_valued='low'))
    def ipo_rule_1957(self):
        self.declare(Fact(recommendation='PER berada di tingkat yang tinggi. DER menunjukkan tingkat hutang yang rendah. ROA menunjukkan efisiensi rendah.'))


    @Rule(Fact(per_valued='high'), Fact(der_valued='low'), Fact(roe_valued='low'))
    def ipo_rule_1958(self):
        self.declare(Fact(recommendation='PER berada di tingkat yang tinggi. DER menunjukkan tingkat hutang yang rendah. ROE menunjukkan keuntungan yang rendah.'))


    @Rule(Fact(per_valued='high'), Fact(roa_valued='low'), Fact(roe_valued='low'))
    def ipo_rule_1959(self):
        self.declare(Fact(recommendation='PER berada di tingkat yang tinggi. ROA menunjukkan efisiensi rendah. ROE menunjukkan keuntungan yang rendah.'))


    @Rule(Fact(der_valued='low'), Fact(roa_valued='low'), Fact(roe_valued='low'))
    def ipo_rule_1960(self):
        self.declare(Fact(recommendation='DER menunjukkan tingkat hutang yang rendah. ROA menunjukkan efisiensi rendah. ROE menunjukkan keuntungan yang rendah.'))


    @Rule(Fact(underwriter_valued='good'), Fact(warrant_valued='bad'), Fact(net_income_valued='loss'))
    def ipo_rule_1961(self):
        self.declare(Fact(recommendation='Underwriter berkualitas baik. Warrant menunjukkan kondisi buruk. Laba bersih menunjukkan kerugian.'))


    @Rule(Fact(underwriter_valued='good'), Fact(warrant_valued='bad'), Fact(per_valued='low'))
    def ipo_rule_1962(self):
        self.declare(Fact(recommendation='Underwriter berkualitas baik. Warrant menunjukkan kondisi buruk. PER berada di tingkat yang rendah.'))


    @Rule(Fact(underwriter_valued='good'), Fact(warrant_valued='bad'), Fact(der_valued='high'))
    def ipo_rule_1963(self):
        self.declare(Fact(recommendation='Underwriter berkualitas baik. Warrant menunjukkan kondisi buruk. DER menunjukkan tingkat hutang yang tinggi.'))


    @Rule(Fact(underwriter_valued='good'), Fact(warrant_valued='bad'), Fact(roa_valued='high'))
    def ipo_rule_1964(self):
        self.declare(Fact(recommendation='Underwriter berkualitas baik. Warrant menunjukkan kondisi buruk. ROA menunjukkan efisiensi tinggi.'))


    @Rule(Fact(underwriter_valued='good'), Fact(warrant_valued='bad'), Fact(roe_valued='high'))
    def ipo_rule_1965(self):
        self.declare(Fact(recommendation='Underwriter berkualitas baik. Warrant menunjukkan kondisi buruk. ROE menunjukkan keuntungan yang tinggi.'))


    @Rule(Fact(underwriter_valued='good'), Fact(net_income_valued='loss'), Fact(per_valued='low'))
    def ipo_rule_1966(self):
        self.declare(Fact(recommendation='Underwriter berkualitas baik. Laba bersih menunjukkan kerugian. PER berada di tingkat yang rendah.'))


    @Rule(Fact(underwriter_valued='good'), Fact(net_income_valued='loss'), Fact(der_valued='high'))
    def ipo_rule_1967(self):
        self.declare(Fact(recommendation='Underwriter berkualitas baik. Laba bersih menunjukkan kerugian. DER menunjukkan tingkat hutang yang tinggi.'))


    @Rule(Fact(underwriter_valued='good'), Fact(net_income_valued='loss'), Fact(roa_valued='high'))
    def ipo_rule_1968(self):
        self.declare(Fact(recommendation='Underwriter berkualitas baik. Laba bersih menunjukkan kerugian. ROA menunjukkan efisiensi tinggi.'))


    @Rule(Fact(underwriter_valued='good'), Fact(net_income_valued='loss'), Fact(roe_valued='high'))
    def ipo_rule_1969(self):
        self.declare(Fact(recommendation='Underwriter berkualitas baik. Laba bersih menunjukkan kerugian. ROE menunjukkan keuntungan yang tinggi.'))


    @Rule(Fact(underwriter_valued='good'), Fact(per_valued='low'), Fact(der_valued='high'))
    def ipo_rule_1970(self):
        self.declare(Fact(recommendation='Underwriter berkualitas baik. PER berada di tingkat yang rendah. DER menunjukkan tingkat hutang yang tinggi.'))


    @Rule(Fact(underwriter_valued='good'), Fact(per_valued='low'), Fact(roa_valued='high'))
    def ipo_rule_1971(self):
        self.declare(Fact(recommendation='Underwriter berkualitas baik. PER berada di tingkat yang rendah. ROA menunjukkan efisiensi tinggi.'))


    @Rule(Fact(underwriter_valued='good'), Fact(per_valued='low'), Fact(roe_valued='high'))
    def ipo_rule_1972(self):
        self.declare(Fact(recommendation='Underwriter berkualitas baik. PER berada di tingkat yang rendah. ROE menunjukkan keuntungan yang tinggi.'))


    @Rule(Fact(underwriter_valued='good'), Fact(der_valued='high'), Fact(roa_valued='high'))
    def ipo_rule_1973(self):
        self.declare(Fact(recommendation='Underwriter berkualitas baik. DER menunjukkan tingkat hutang yang tinggi. ROA menunjukkan efisiensi tinggi.'))


    @Rule(Fact(underwriter_valued='good'), Fact(der_valued='high'), Fact(roe_valued='high'))
    def ipo_rule_1974(self):
        self.declare(Fact(recommendation='Underwriter berkualitas baik. DER menunjukkan tingkat hutang yang tinggi. ROE menunjukkan keuntungan yang tinggi.'))


    @Rule(Fact(underwriter_valued='good'), Fact(roa_valued='high'), Fact(roe_valued='high'))
    def ipo_rule_1975(self):
        self.declare(Fact(recommendation='Underwriter berkualitas baik. ROA menunjukkan efisiensi tinggi. ROE menunjukkan keuntungan yang tinggi.'))


    @Rule(Fact(warrant_valued='bad'), Fact(net_income_valued='loss'), Fact(per_valued='low'))
    def ipo_rule_1976(self):
        self.declare(Fact(recommendation='Warrant menunjukkan kondisi buruk. Laba bersih menunjukkan kerugian. PER berada di tingkat yang rendah.'))


    @Rule(Fact(warrant_valued='bad'), Fact(net_income_valued='loss'), Fact(der_valued='high'))
    def ipo_rule_1977(self):
        self.declare(Fact(recommendation='Warrant menunjukkan kondisi buruk. Laba bersih menunjukkan kerugian. DER menunjukkan tingkat hutang yang tinggi.'))


    @Rule(Fact(warrant_valued='bad'), Fact(net_income_valued='loss'), Fact(roa_valued='high'))
    def ipo_rule_1978(self):
        self.declare(Fact(recommendation='Warrant menunjukkan kondisi buruk. Laba bersih menunjukkan kerugian. ROA menunjukkan efisiensi tinggi.'))


    @Rule(Fact(warrant_valued='bad'), Fact(net_income_valued='loss'), Fact(roe_valued='high'))
    def ipo_rule_1979(self):
        self.declare(Fact(recommendation='Warrant menunjukkan kondisi buruk. Laba bersih menunjukkan kerugian. ROE menunjukkan keuntungan yang tinggi.'))


    @Rule(Fact(warrant_valued='bad'), Fact(per_valued='low'), Fact(der_valued='high'))
    def ipo_rule_1980(self):
        self.declare(Fact(recommendation='Warrant menunjukkan kondisi buruk. PER berada di tingkat yang rendah. DER menunjukkan tingkat hutang yang tinggi.'))


    @Rule(Fact(warrant_valued='bad'), Fact(per_valued='low'), Fact(roa_valued='high'))
    def ipo_rule_1981(self):
        self.declare(Fact(recommendation='Warrant menunjukkan kondisi buruk. PER berada di tingkat yang rendah. ROA menunjukkan efisiensi tinggi.'))


    @Rule(Fact(warrant_valued='bad'), Fact(per_valued='low'), Fact(roe_valued='high'))
    def ipo_rule_1982(self):
        self.declare(Fact(recommendation='Warrant menunjukkan kondisi buruk. PER berada di tingkat yang rendah. ROE menunjukkan keuntungan yang tinggi.'))


    @Rule(Fact(warrant_valued='bad'), Fact(der_valued='high'), Fact(roa_valued='high'))
    def ipo_rule_1983(self):
        self.declare(Fact(recommendation='Warrant menunjukkan kondisi buruk. DER menunjukkan tingkat hutang yang tinggi. ROA menunjukkan efisiensi tinggi.'))


    @Rule(Fact(warrant_valued='bad'), Fact(der_valued='high'), Fact(roe_valued='high'))
    def ipo_rule_1984(self):
        self.declare(Fact(recommendation='Warrant menunjukkan kondisi buruk. DER menunjukkan tingkat hutang yang tinggi. ROE menunjukkan keuntungan yang tinggi.'))


    @Rule(Fact(warrant_valued='bad'), Fact(roa_valued='high'), Fact(roe_valued='high'))
    def ipo_rule_1985(self):
        self.declare(Fact(recommendation='Warrant menunjukkan kondisi buruk. ROA menunjukkan efisiensi tinggi. ROE menunjukkan keuntungan yang tinggi.'))


    @Rule(Fact(net_income_valued='loss'), Fact(per_valued='low'), Fact(der_valued='high'))
    def ipo_rule_1986(self):
        self.declare(Fact(recommendation='Laba bersih menunjukkan kerugian. PER berada di tingkat yang rendah. DER menunjukkan tingkat hutang yang tinggi.'))


    @Rule(Fact(net_income_valued='loss'), Fact(per_valued='low'), Fact(roa_valued='high'))
    def ipo_rule_1987(self):
        self.declare(Fact(recommendation='Laba bersih menunjukkan kerugian. PER berada di tingkat yang rendah. ROA menunjukkan efisiensi tinggi.'))


    @Rule(Fact(net_income_valued='loss'), Fact(per_valued='low'), Fact(roe_valued='high'))
    def ipo_rule_1988(self):
        self.declare(Fact(recommendation='Laba bersih menunjukkan kerugian. PER berada di tingkat yang rendah. ROE menunjukkan keuntungan yang tinggi.'))


    @Rule(Fact(net_income_valued='loss'), Fact(der_valued='high'), Fact(roa_valued='high'))
    def ipo_rule_1989(self):
        self.declare(Fact(recommendation='Laba bersih menunjukkan kerugian. DER menunjukkan tingkat hutang yang tinggi. ROA menunjukkan efisiensi tinggi.'))


    @Rule(Fact(net_income_valued='loss'), Fact(der_valued='high'), Fact(roe_valued='high'))
    def ipo_rule_1990(self):
        self.declare(Fact(recommendation='Laba bersih menunjukkan kerugian. DER menunjukkan tingkat hutang yang tinggi. ROE menunjukkan keuntungan yang tinggi.'))


    @Rule(Fact(net_income_valued='loss'), Fact(roa_valued='high'), Fact(roe_valued='high'))
    def ipo_rule_1991(self):
        self.declare(Fact(recommendation='Laba bersih menunjukkan kerugian. ROA menunjukkan efisiensi tinggi. ROE menunjukkan keuntungan yang tinggi.'))


    @Rule(Fact(per_valued='low'), Fact(der_valued='high'), Fact(roa_valued='high'))
    def ipo_rule_1992(self):
        self.declare(Fact(recommendation='PER berada di tingkat yang rendah. DER menunjukkan tingkat hutang yang tinggi. ROA menunjukkan efisiensi tinggi.'))


    @Rule(Fact(per_valued='low'), Fact(der_valued='high'), Fact(roe_valued='high'))
    def ipo_rule_1993(self):
        self.declare(Fact(recommendation='PER berada di tingkat yang rendah. DER menunjukkan tingkat hutang yang tinggi. ROE menunjukkan keuntungan yang tinggi.'))


    @Rule(Fact(per_valued='low'), Fact(roa_valued='high'), Fact(roe_valued='high'))
    def ipo_rule_1994(self):
        self.declare(Fact(recommendation='PER berada di tingkat yang rendah. ROA menunjukkan efisiensi tinggi. ROE menunjukkan keuntungan yang tinggi.'))


    @Rule(Fact(der_valued='high'), Fact(roa_valued='high'), Fact(roe_valued='high'))
    def ipo_rule_1995(self):
        self.declare(Fact(recommendation='DER menunjukkan tingkat hutang yang tinggi. ROA menunjukkan efisiensi tinggi. ROE menunjukkan keuntungan yang tinggi.'))


    @Rule(Fact(underwriter_valued='good'), Fact(warrant_valued='bad'), Fact(net_income_valued='loss'))
    def ipo_rule_1996(self):
        self.declare(Fact(recommendation='Underwriter berkualitas baik. Warrant menunjukkan kondisi buruk. Laba bersih menunjukkan kerugian.'))


    @Rule(Fact(underwriter_valued='good'), Fact(warrant_valued='bad'), Fact(per_valued='low'))
    def ipo_rule_1997(self):
        self.declare(Fact(recommendation='Underwriter berkualitas baik. Warrant menunjukkan kondisi buruk. PER berada di tingkat yang rendah.'))


    @Rule(Fact(underwriter_valued='good'), Fact(warrant_valued='bad'), Fact(der_valued='high'))
    def ipo_rule_1998(self):
        self.declare(Fact(recommendation='Underwriter berkualitas baik. Warrant menunjukkan kondisi buruk. DER menunjukkan tingkat hutang yang tinggi.'))


    @Rule(Fact(underwriter_valued='good'), Fact(warrant_valued='bad'), Fact(roa_valued='high'))
    def ipo_rule_1999(self):
        self.declare(Fact(recommendation='Underwriter berkualitas baik. Warrant menunjukkan kondisi buruk. ROA menunjukkan efisiensi tinggi.'))


    @Rule(Fact(underwriter_valued='good'), Fact(warrant_valued='bad'), Fact(roe_valued='low'))
    def ipo_rule_2000(self):
        self.declare(Fact(recommendation='Underwriter berkualitas baik. Warrant menunjukkan kondisi buruk. ROE menunjukkan keuntungan yang rendah.'))


    @Rule(Fact(underwriter_valued='good'), Fact(net_income_valued='loss'), Fact(per_valued='low'))
    def ipo_rule_2001(self):
        self.declare(Fact(recommendation='Underwriter berkualitas baik. Laba bersih menunjukkan kerugian. PER berada di tingkat yang rendah.'))


    @Rule(Fact(underwriter_valued='good'), Fact(net_income_valued='loss'), Fact(der_valued='high'))
    def ipo_rule_2002(self):
        self.declare(Fact(recommendation='Underwriter berkualitas baik. Laba bersih menunjukkan kerugian. DER menunjukkan tingkat hutang yang tinggi.'))


    @Rule(Fact(underwriter_valued='good'), Fact(net_income_valued='loss'), Fact(roa_valued='high'))
    def ipo_rule_2003(self):
        self.declare(Fact(recommendation='Underwriter berkualitas baik. Laba bersih menunjukkan kerugian. ROA menunjukkan efisiensi tinggi.'))


    @Rule(Fact(underwriter_valued='good'), Fact(net_income_valued='loss'), Fact(roe_valued='low'))
    def ipo_rule_2004(self):
        self.declare(Fact(recommendation='Underwriter berkualitas baik. Laba bersih menunjukkan kerugian. ROE menunjukkan keuntungan yang rendah.'))


    @Rule(Fact(underwriter_valued='good'), Fact(per_valued='low'), Fact(der_valued='high'))
    def ipo_rule_2005(self):
        self.declare(Fact(recommendation='Underwriter berkualitas baik. PER berada di tingkat yang rendah. DER menunjukkan tingkat hutang yang tinggi.'))


    @Rule(Fact(underwriter_valued='good'), Fact(per_valued='low'), Fact(roa_valued='high'))
    def ipo_rule_2006(self):
        self.declare(Fact(recommendation='Underwriter berkualitas baik. PER berada di tingkat yang rendah. ROA menunjukkan efisiensi tinggi.'))


    @Rule(Fact(underwriter_valued='good'), Fact(per_valued='low'), Fact(roe_valued='low'))
    def ipo_rule_2007(self):
        self.declare(Fact(recommendation='Underwriter berkualitas baik. PER berada di tingkat yang rendah. ROE menunjukkan keuntungan yang rendah.'))


    @Rule(Fact(underwriter_valued='good'), Fact(der_valued='high'), Fact(roa_valued='high'))
    def ipo_rule_2008(self):
        self.declare(Fact(recommendation='Underwriter berkualitas baik. DER menunjukkan tingkat hutang yang tinggi. ROA menunjukkan efisiensi tinggi.'))


    @Rule(Fact(underwriter_valued='good'), Fact(der_valued='high'), Fact(roe_valued='low'))
    def ipo_rule_2009(self):
        self.declare(Fact(recommendation='Underwriter berkualitas baik. DER menunjukkan tingkat hutang yang tinggi. ROE menunjukkan keuntungan yang rendah.'))


    @Rule(Fact(underwriter_valued='good'), Fact(roa_valued='high'), Fact(roe_valued='low'))
    def ipo_rule_2010(self):
        self.declare(Fact(recommendation='Underwriter berkualitas baik. ROA menunjukkan efisiensi tinggi. ROE menunjukkan keuntungan yang rendah.'))


    @Rule(Fact(warrant_valued='bad'), Fact(net_income_valued='loss'), Fact(per_valued='low'))
    def ipo_rule_2011(self):
        self.declare(Fact(recommendation='Warrant menunjukkan kondisi buruk. Laba bersih menunjukkan kerugian. PER berada di tingkat yang rendah.'))


    @Rule(Fact(warrant_valued='bad'), Fact(net_income_valued='loss'), Fact(der_valued='high'))
    def ipo_rule_2012(self):
        self.declare(Fact(recommendation='Warrant menunjukkan kondisi buruk. Laba bersih menunjukkan kerugian. DER menunjukkan tingkat hutang yang tinggi.'))


    @Rule(Fact(warrant_valued='bad'), Fact(net_income_valued='loss'), Fact(roa_valued='high'))
    def ipo_rule_2013(self):
        self.declare(Fact(recommendation='Warrant menunjukkan kondisi buruk. Laba bersih menunjukkan kerugian. ROA menunjukkan efisiensi tinggi.'))


    @Rule(Fact(warrant_valued='bad'), Fact(net_income_valued='loss'), Fact(roe_valued='low'))
    def ipo_rule_2014(self):
        self.declare(Fact(recommendation='Warrant menunjukkan kondisi buruk. Laba bersih menunjukkan kerugian. ROE menunjukkan keuntungan yang rendah.'))


    @Rule(Fact(warrant_valued='bad'), Fact(per_valued='low'), Fact(der_valued='high'))
    def ipo_rule_2015(self):
        self.declare(Fact(recommendation='Warrant menunjukkan kondisi buruk. PER berada di tingkat yang rendah. DER menunjukkan tingkat hutang yang tinggi.'))


    @Rule(Fact(warrant_valued='bad'), Fact(per_valued='low'), Fact(roa_valued='high'))
    def ipo_rule_2016(self):
        self.declare(Fact(recommendation='Warrant menunjukkan kondisi buruk. PER berada di tingkat yang rendah. ROA menunjukkan efisiensi tinggi.'))


    @Rule(Fact(warrant_valued='bad'), Fact(per_valued='low'), Fact(roe_valued='low'))
    def ipo_rule_2017(self):
        self.declare(Fact(recommendation='Warrant menunjukkan kondisi buruk. PER berada di tingkat yang rendah. ROE menunjukkan keuntungan yang rendah.'))


    @Rule(Fact(warrant_valued='bad'), Fact(der_valued='high'), Fact(roa_valued='high'))
    def ipo_rule_2018(self):
        self.declare(Fact(recommendation='Warrant menunjukkan kondisi buruk. DER menunjukkan tingkat hutang yang tinggi. ROA menunjukkan efisiensi tinggi.'))


    @Rule(Fact(warrant_valued='bad'), Fact(der_valued='high'), Fact(roe_valued='low'))
    def ipo_rule_2019(self):
        self.declare(Fact(recommendation='Warrant menunjukkan kondisi buruk. DER menunjukkan tingkat hutang yang tinggi. ROE menunjukkan keuntungan yang rendah.'))


    @Rule(Fact(warrant_valued='bad'), Fact(roa_valued='high'), Fact(roe_valued='low'))
    def ipo_rule_2020(self):
        self.declare(Fact(recommendation='Warrant menunjukkan kondisi buruk. ROA menunjukkan efisiensi tinggi. ROE menunjukkan keuntungan yang rendah.'))


    @Rule(Fact(net_income_valued='loss'), Fact(per_valued='low'), Fact(der_valued='high'))
    def ipo_rule_2021(self):
        self.declare(Fact(recommendation='Laba bersih menunjukkan kerugian. PER berada di tingkat yang rendah. DER menunjukkan tingkat hutang yang tinggi.'))


    @Rule(Fact(net_income_valued='loss'), Fact(per_valued='low'), Fact(roa_valued='high'))
    def ipo_rule_2022(self):
        self.declare(Fact(recommendation='Laba bersih menunjukkan kerugian. PER berada di tingkat yang rendah. ROA menunjukkan efisiensi tinggi.'))


    @Rule(Fact(net_income_valued='loss'), Fact(per_valued='low'), Fact(roe_valued='low'))
    def ipo_rule_2023(self):
        self.declare(Fact(recommendation='Laba bersih menunjukkan kerugian. PER berada di tingkat yang rendah. ROE menunjukkan keuntungan yang rendah.'))


    @Rule(Fact(net_income_valued='loss'), Fact(der_valued='high'), Fact(roa_valued='high'))
    def ipo_rule_2024(self):
        self.declare(Fact(recommendation='Laba bersih menunjukkan kerugian. DER menunjukkan tingkat hutang yang tinggi. ROA menunjukkan efisiensi tinggi.'))


    @Rule(Fact(net_income_valued='loss'), Fact(der_valued='high'), Fact(roe_valued='low'))
    def ipo_rule_2025(self):
        self.declare(Fact(recommendation='Laba bersih menunjukkan kerugian. DER menunjukkan tingkat hutang yang tinggi. ROE menunjukkan keuntungan yang rendah.'))


    @Rule(Fact(net_income_valued='loss'), Fact(roa_valued='high'), Fact(roe_valued='low'))
    def ipo_rule_2026(self):
        self.declare(Fact(recommendation='Laba bersih menunjukkan kerugian. ROA menunjukkan efisiensi tinggi. ROE menunjukkan keuntungan yang rendah.'))


    @Rule(Fact(per_valued='low'), Fact(der_valued='high'), Fact(roa_valued='high'))
    def ipo_rule_2027(self):
        self.declare(Fact(recommendation='PER berada di tingkat yang rendah. DER menunjukkan tingkat hutang yang tinggi. ROA menunjukkan efisiensi tinggi.'))


    @Rule(Fact(per_valued='low'), Fact(der_valued='high'), Fact(roe_valued='low'))
    def ipo_rule_2028(self):
        self.declare(Fact(recommendation='PER berada di tingkat yang rendah. DER menunjukkan tingkat hutang yang tinggi. ROE menunjukkan keuntungan yang rendah.'))


    @Rule(Fact(per_valued='low'), Fact(roa_valued='high'), Fact(roe_valued='low'))
    def ipo_rule_2029(self):
        self.declare(Fact(recommendation='PER berada di tingkat yang rendah. ROA menunjukkan efisiensi tinggi. ROE menunjukkan keuntungan yang rendah.'))


    @Rule(Fact(der_valued='high'), Fact(roa_valued='high'), Fact(roe_valued='low'))
    def ipo_rule_2030(self):
        self.declare(Fact(recommendation='DER menunjukkan tingkat hutang yang tinggi. ROA menunjukkan efisiensi tinggi. ROE menunjukkan keuntungan yang rendah.'))


    @Rule(Fact(underwriter_valued='good'), Fact(warrant_valued='bad'), Fact(net_income_valued='loss'))
    def ipo_rule_2031(self):
        self.declare(Fact(recommendation='Underwriter berkualitas baik. Warrant menunjukkan kondisi buruk. Laba bersih menunjukkan kerugian.'))


    @Rule(Fact(underwriter_valued='good'), Fact(warrant_valued='bad'), Fact(per_valued='low'))
    def ipo_rule_2032(self):
        self.declare(Fact(recommendation='Underwriter berkualitas baik. Warrant menunjukkan kondisi buruk. PER berada di tingkat yang rendah.'))


    @Rule(Fact(underwriter_valued='good'), Fact(warrant_valued='bad'), Fact(der_valued='high'))
    def ipo_rule_2033(self):
        self.declare(Fact(recommendation='Underwriter berkualitas baik. Warrant menunjukkan kondisi buruk. DER menunjukkan tingkat hutang yang tinggi.'))


    @Rule(Fact(underwriter_valued='good'), Fact(warrant_valued='bad'), Fact(roa_valued='low'))
    def ipo_rule_2034(self):
        self.declare(Fact(recommendation='Underwriter berkualitas baik. Warrant menunjukkan kondisi buruk. ROA menunjukkan efisiensi rendah.'))


    @Rule(Fact(underwriter_valued='good'), Fact(warrant_valued='bad'), Fact(roe_valued='high'))
    def ipo_rule_2035(self):
        self.declare(Fact(recommendation='Underwriter berkualitas baik. Warrant menunjukkan kondisi buruk. ROE menunjukkan keuntungan yang tinggi.'))


    @Rule(Fact(underwriter_valued='good'), Fact(net_income_valued='loss'), Fact(per_valued='low'))
    def ipo_rule_2036(self):
        self.declare(Fact(recommendation='Underwriter berkualitas baik. Laba bersih menunjukkan kerugian. PER berada di tingkat yang rendah.'))


    @Rule(Fact(underwriter_valued='good'), Fact(net_income_valued='loss'), Fact(der_valued='high'))
    def ipo_rule_2037(self):
        self.declare(Fact(recommendation='Underwriter berkualitas baik. Laba bersih menunjukkan kerugian. DER menunjukkan tingkat hutang yang tinggi.'))


    @Rule(Fact(underwriter_valued='good'), Fact(net_income_valued='loss'), Fact(roa_valued='low'))
    def ipo_rule_2038(self):
        self.declare(Fact(recommendation='Underwriter berkualitas baik. Laba bersih menunjukkan kerugian. ROA menunjukkan efisiensi rendah.'))


    @Rule(Fact(underwriter_valued='good'), Fact(net_income_valued='loss'), Fact(roe_valued='high'))
    def ipo_rule_2039(self):
        self.declare(Fact(recommendation='Underwriter berkualitas baik. Laba bersih menunjukkan kerugian. ROE menunjukkan keuntungan yang tinggi.'))


    @Rule(Fact(underwriter_valued='good'), Fact(per_valued='low'), Fact(der_valued='high'))
    def ipo_rule_2040(self):
        self.declare(Fact(recommendation='Underwriter berkualitas baik. PER berada di tingkat yang rendah. DER menunjukkan tingkat hutang yang tinggi.'))


    @Rule(Fact(underwriter_valued='good'), Fact(per_valued='low'), Fact(roa_valued='low'))
    def ipo_rule_2041(self):
        self.declare(Fact(recommendation='Underwriter berkualitas baik. PER berada di tingkat yang rendah. ROA menunjukkan efisiensi rendah.'))


    @Rule(Fact(underwriter_valued='good'), Fact(per_valued='low'), Fact(roe_valued='high'))
    def ipo_rule_2042(self):
        self.declare(Fact(recommendation='Underwriter berkualitas baik. PER berada di tingkat yang rendah. ROE menunjukkan keuntungan yang tinggi.'))


    @Rule(Fact(underwriter_valued='good'), Fact(der_valued='high'), Fact(roa_valued='low'))
    def ipo_rule_2043(self):
        self.declare(Fact(recommendation='Underwriter berkualitas baik. DER menunjukkan tingkat hutang yang tinggi. ROA menunjukkan efisiensi rendah.'))


    @Rule(Fact(underwriter_valued='good'), Fact(der_valued='high'), Fact(roe_valued='high'))
    def ipo_rule_2044(self):
        self.declare(Fact(recommendation='Underwriter berkualitas baik. DER menunjukkan tingkat hutang yang tinggi. ROE menunjukkan keuntungan yang tinggi.'))


    @Rule(Fact(underwriter_valued='good'), Fact(roa_valued='low'), Fact(roe_valued='high'))
    def ipo_rule_2045(self):
        self.declare(Fact(recommendation='Underwriter berkualitas baik. ROA menunjukkan efisiensi rendah. ROE menunjukkan keuntungan yang tinggi.'))


    @Rule(Fact(warrant_valued='bad'), Fact(net_income_valued='loss'), Fact(per_valued='low'))
    def ipo_rule_2046(self):
        self.declare(Fact(recommendation='Warrant menunjukkan kondisi buruk. Laba bersih menunjukkan kerugian. PER berada di tingkat yang rendah.'))


    @Rule(Fact(warrant_valued='bad'), Fact(net_income_valued='loss'), Fact(der_valued='high'))
    def ipo_rule_2047(self):
        self.declare(Fact(recommendation='Warrant menunjukkan kondisi buruk. Laba bersih menunjukkan kerugian. DER menunjukkan tingkat hutang yang tinggi.'))


    @Rule(Fact(warrant_valued='bad'), Fact(net_income_valued='loss'), Fact(roa_valued='low'))
    def ipo_rule_2048(self):
        self.declare(Fact(recommendation='Warrant menunjukkan kondisi buruk. Laba bersih menunjukkan kerugian. ROA menunjukkan efisiensi rendah.'))


    @Rule(Fact(warrant_valued='bad'), Fact(net_income_valued='loss'), Fact(roe_valued='high'))
    def ipo_rule_2049(self):
        self.declare(Fact(recommendation='Warrant menunjukkan kondisi buruk. Laba bersih menunjukkan kerugian. ROE menunjukkan keuntungan yang tinggi.'))


    @Rule(Fact(warrant_valued='bad'), Fact(per_valued='low'), Fact(der_valued='high'))
    def ipo_rule_2050(self):
        self.declare(Fact(recommendation='Warrant menunjukkan kondisi buruk. PER berada di tingkat yang rendah. DER menunjukkan tingkat hutang yang tinggi.'))


    @Rule(Fact(warrant_valued='bad'), Fact(per_valued='low'), Fact(roa_valued='low'))
    def ipo_rule_2051(self):
        self.declare(Fact(recommendation='Warrant menunjukkan kondisi buruk. PER berada di tingkat yang rendah. ROA menunjukkan efisiensi rendah.'))


    @Rule(Fact(warrant_valued='bad'), Fact(per_valued='low'), Fact(roe_valued='high'))
    def ipo_rule_2052(self):
        self.declare(Fact(recommendation='Warrant menunjukkan kondisi buruk. PER berada di tingkat yang rendah. ROE menunjukkan keuntungan yang tinggi.'))


    @Rule(Fact(warrant_valued='bad'), Fact(der_valued='high'), Fact(roa_valued='low'))
    def ipo_rule_2053(self):
        self.declare(Fact(recommendation='Warrant menunjukkan kondisi buruk. DER menunjukkan tingkat hutang yang tinggi. ROA menunjukkan efisiensi rendah.'))


    @Rule(Fact(warrant_valued='bad'), Fact(der_valued='high'), Fact(roe_valued='high'))
    def ipo_rule_2054(self):
        self.declare(Fact(recommendation='Warrant menunjukkan kondisi buruk. DER menunjukkan tingkat hutang yang tinggi. ROE menunjukkan keuntungan yang tinggi.'))


    @Rule(Fact(warrant_valued='bad'), Fact(roa_valued='low'), Fact(roe_valued='high'))
    def ipo_rule_2055(self):
        self.declare(Fact(recommendation='Warrant menunjukkan kondisi buruk. ROA menunjukkan efisiensi rendah. ROE menunjukkan keuntungan yang tinggi.'))


    @Rule(Fact(net_income_valued='loss'), Fact(per_valued='low'), Fact(der_valued='high'))
    def ipo_rule_2056(self):
        self.declare(Fact(recommendation='Laba bersih menunjukkan kerugian. PER berada di tingkat yang rendah. DER menunjukkan tingkat hutang yang tinggi.'))


    @Rule(Fact(net_income_valued='loss'), Fact(per_valued='low'), Fact(roa_valued='low'))
    def ipo_rule_2057(self):
        self.declare(Fact(recommendation='Laba bersih menunjukkan kerugian. PER berada di tingkat yang rendah. ROA menunjukkan efisiensi rendah.'))


    @Rule(Fact(net_income_valued='loss'), Fact(per_valued='low'), Fact(roe_valued='high'))
    def ipo_rule_2058(self):
        self.declare(Fact(recommendation='Laba bersih menunjukkan kerugian. PER berada di tingkat yang rendah. ROE menunjukkan keuntungan yang tinggi.'))


    @Rule(Fact(net_income_valued='loss'), Fact(der_valued='high'), Fact(roa_valued='low'))
    def ipo_rule_2059(self):
        self.declare(Fact(recommendation='Laba bersih menunjukkan kerugian. DER menunjukkan tingkat hutang yang tinggi. ROA menunjukkan efisiensi rendah.'))


    @Rule(Fact(net_income_valued='loss'), Fact(der_valued='high'), Fact(roe_valued='high'))
    def ipo_rule_2060(self):
        self.declare(Fact(recommendation='Laba bersih menunjukkan kerugian. DER menunjukkan tingkat hutang yang tinggi. ROE menunjukkan keuntungan yang tinggi.'))


    @Rule(Fact(net_income_valued='loss'), Fact(roa_valued='low'), Fact(roe_valued='high'))
    def ipo_rule_2061(self):
        self.declare(Fact(recommendation='Laba bersih menunjukkan kerugian. ROA menunjukkan efisiensi rendah. ROE menunjukkan keuntungan yang tinggi.'))


    @Rule(Fact(per_valued='low'), Fact(der_valued='high'), Fact(roa_valued='low'))
    def ipo_rule_2062(self):
        self.declare(Fact(recommendation='PER berada di tingkat yang rendah. DER menunjukkan tingkat hutang yang tinggi. ROA menunjukkan efisiensi rendah.'))


    @Rule(Fact(per_valued='low'), Fact(der_valued='high'), Fact(roe_valued='high'))
    def ipo_rule_2063(self):
        self.declare(Fact(recommendation='PER berada di tingkat yang rendah. DER menunjukkan tingkat hutang yang tinggi. ROE menunjukkan keuntungan yang tinggi.'))


    @Rule(Fact(per_valued='low'), Fact(roa_valued='low'), Fact(roe_valued='high'))
    def ipo_rule_2064(self):
        self.declare(Fact(recommendation='PER berada di tingkat yang rendah. ROA menunjukkan efisiensi rendah. ROE menunjukkan keuntungan yang tinggi.'))


    @Rule(Fact(der_valued='high'), Fact(roa_valued='low'), Fact(roe_valued='high'))
    def ipo_rule_2065(self):
        self.declare(Fact(recommendation='DER menunjukkan tingkat hutang yang tinggi. ROA menunjukkan efisiensi rendah. ROE menunjukkan keuntungan yang tinggi.'))


    @Rule(Fact(underwriter_valued='good'), Fact(warrant_valued='bad'), Fact(net_income_valued='loss'))
    def ipo_rule_2066(self):
        self.declare(Fact(recommendation='Underwriter berkualitas baik. Warrant menunjukkan kondisi buruk. Laba bersih menunjukkan kerugian.'))


    @Rule(Fact(underwriter_valued='good'), Fact(warrant_valued='bad'), Fact(per_valued='low'))
    def ipo_rule_2067(self):
        self.declare(Fact(recommendation='Underwriter berkualitas baik. Warrant menunjukkan kondisi buruk. PER berada di tingkat yang rendah.'))


    @Rule(Fact(underwriter_valued='good'), Fact(warrant_valued='bad'), Fact(der_valued='high'))
    def ipo_rule_2068(self):
        self.declare(Fact(recommendation='Underwriter berkualitas baik. Warrant menunjukkan kondisi buruk. DER menunjukkan tingkat hutang yang tinggi.'))


    @Rule(Fact(underwriter_valued='good'), Fact(warrant_valued='bad'), Fact(roa_valued='low'))
    def ipo_rule_2069(self):
        self.declare(Fact(recommendation='Underwriter berkualitas baik. Warrant menunjukkan kondisi buruk. ROA menunjukkan efisiensi rendah.'))


    @Rule(Fact(underwriter_valued='good'), Fact(warrant_valued='bad'), Fact(roe_valued='low'))
    def ipo_rule_2070(self):
        self.declare(Fact(recommendation='Underwriter berkualitas baik. Warrant menunjukkan kondisi buruk. ROE menunjukkan keuntungan yang rendah.'))


    @Rule(Fact(underwriter_valued='good'), Fact(net_income_valued='loss'), Fact(per_valued='low'))
    def ipo_rule_2071(self):
        self.declare(Fact(recommendation='Underwriter berkualitas baik. Laba bersih menunjukkan kerugian. PER berada di tingkat yang rendah.'))


    @Rule(Fact(underwriter_valued='good'), Fact(net_income_valued='loss'), Fact(der_valued='high'))
    def ipo_rule_2072(self):
        self.declare(Fact(recommendation='Underwriter berkualitas baik. Laba bersih menunjukkan kerugian. DER menunjukkan tingkat hutang yang tinggi.'))


    @Rule(Fact(underwriter_valued='good'), Fact(net_income_valued='loss'), Fact(roa_valued='low'))
    def ipo_rule_2073(self):
        self.declare(Fact(recommendation='Underwriter berkualitas baik. Laba bersih menunjukkan kerugian. ROA menunjukkan efisiensi rendah.'))


    @Rule(Fact(underwriter_valued='good'), Fact(net_income_valued='loss'), Fact(roe_valued='low'))
    def ipo_rule_2074(self):
        self.declare(Fact(recommendation='Underwriter berkualitas baik. Laba bersih menunjukkan kerugian. ROE menunjukkan keuntungan yang rendah.'))


    @Rule(Fact(underwriter_valued='good'), Fact(per_valued='low'), Fact(der_valued='high'))
    def ipo_rule_2075(self):
        self.declare(Fact(recommendation='Underwriter berkualitas baik. PER berada di tingkat yang rendah. DER menunjukkan tingkat hutang yang tinggi.'))


    @Rule(Fact(underwriter_valued='good'), Fact(per_valued='low'), Fact(roa_valued='low'))
    def ipo_rule_2076(self):
        self.declare(Fact(recommendation='Underwriter berkualitas baik. PER berada di tingkat yang rendah. ROA menunjukkan efisiensi rendah.'))


    @Rule(Fact(underwriter_valued='good'), Fact(per_valued='low'), Fact(roe_valued='low'))
    def ipo_rule_2077(self):
        self.declare(Fact(recommendation='Underwriter berkualitas baik. PER berada di tingkat yang rendah. ROE menunjukkan keuntungan yang rendah.'))


    @Rule(Fact(underwriter_valued='good'), Fact(der_valued='high'), Fact(roa_valued='low'))
    def ipo_rule_2078(self):
        self.declare(Fact(recommendation='Underwriter berkualitas baik. DER menunjukkan tingkat hutang yang tinggi. ROA menunjukkan efisiensi rendah.'))


    @Rule(Fact(underwriter_valued='good'), Fact(der_valued='high'), Fact(roe_valued='low'))
    def ipo_rule_2079(self):
        self.declare(Fact(recommendation='Underwriter berkualitas baik. DER menunjukkan tingkat hutang yang tinggi. ROE menunjukkan keuntungan yang rendah.'))


    @Rule(Fact(underwriter_valued='good'), Fact(roa_valued='low'), Fact(roe_valued='low'))
    def ipo_rule_2080(self):
        self.declare(Fact(recommendation='Underwriter berkualitas baik. ROA menunjukkan efisiensi rendah. ROE menunjukkan keuntungan yang rendah.'))


    @Rule(Fact(warrant_valued='bad'), Fact(net_income_valued='loss'), Fact(per_valued='low'))
    def ipo_rule_2081(self):
        self.declare(Fact(recommendation='Warrant menunjukkan kondisi buruk. Laba bersih menunjukkan kerugian. PER berada di tingkat yang rendah.'))


    @Rule(Fact(warrant_valued='bad'), Fact(net_income_valued='loss'), Fact(der_valued='high'))
    def ipo_rule_2082(self):
        self.declare(Fact(recommendation='Warrant menunjukkan kondisi buruk. Laba bersih menunjukkan kerugian. DER menunjukkan tingkat hutang yang tinggi.'))


    @Rule(Fact(warrant_valued='bad'), Fact(net_income_valued='loss'), Fact(roa_valued='low'))
    def ipo_rule_2083(self):
        self.declare(Fact(recommendation='Warrant menunjukkan kondisi buruk. Laba bersih menunjukkan kerugian. ROA menunjukkan efisiensi rendah.'))


    @Rule(Fact(warrant_valued='bad'), Fact(net_income_valued='loss'), Fact(roe_valued='low'))
    def ipo_rule_2084(self):
        self.declare(Fact(recommendation='Warrant menunjukkan kondisi buruk. Laba bersih menunjukkan kerugian. ROE menunjukkan keuntungan yang rendah.'))


    @Rule(Fact(warrant_valued='bad'), Fact(per_valued='low'), Fact(der_valued='high'))
    def ipo_rule_2085(self):
        self.declare(Fact(recommendation='Warrant menunjukkan kondisi buruk. PER berada di tingkat yang rendah. DER menunjukkan tingkat hutang yang tinggi.'))


    @Rule(Fact(warrant_valued='bad'), Fact(per_valued='low'), Fact(roa_valued='low'))
    def ipo_rule_2086(self):
        self.declare(Fact(recommendation='Warrant menunjukkan kondisi buruk. PER berada di tingkat yang rendah. ROA menunjukkan efisiensi rendah.'))


    @Rule(Fact(warrant_valued='bad'), Fact(per_valued='low'), Fact(roe_valued='low'))
    def ipo_rule_2087(self):
        self.declare(Fact(recommendation='Warrant menunjukkan kondisi buruk. PER berada di tingkat yang rendah. ROE menunjukkan keuntungan yang rendah.'))


    @Rule(Fact(warrant_valued='bad'), Fact(der_valued='high'), Fact(roa_valued='low'))
    def ipo_rule_2088(self):
        self.declare(Fact(recommendation='Warrant menunjukkan kondisi buruk. DER menunjukkan tingkat hutang yang tinggi. ROA menunjukkan efisiensi rendah.'))


    @Rule(Fact(warrant_valued='bad'), Fact(der_valued='high'), Fact(roe_valued='low'))
    def ipo_rule_2089(self):
        self.declare(Fact(recommendation='Warrant menunjukkan kondisi buruk. DER menunjukkan tingkat hutang yang tinggi. ROE menunjukkan keuntungan yang rendah.'))


    @Rule(Fact(warrant_valued='bad'), Fact(roa_valued='low'), Fact(roe_valued='low'))
    def ipo_rule_2090(self):
        self.declare(Fact(recommendation='Warrant menunjukkan kondisi buruk. ROA menunjukkan efisiensi rendah. ROE menunjukkan keuntungan yang rendah.'))


    @Rule(Fact(net_income_valued='loss'), Fact(per_valued='low'), Fact(der_valued='high'))
    def ipo_rule_2091(self):
        self.declare(Fact(recommendation='Laba bersih menunjukkan kerugian. PER berada di tingkat yang rendah. DER menunjukkan tingkat hutang yang tinggi.'))


    @Rule(Fact(net_income_valued='loss'), Fact(per_valued='low'), Fact(roa_valued='low'))
    def ipo_rule_2092(self):
        self.declare(Fact(recommendation='Laba bersih menunjukkan kerugian. PER berada di tingkat yang rendah. ROA menunjukkan efisiensi rendah.'))


    @Rule(Fact(net_income_valued='loss'), Fact(per_valued='low'), Fact(roe_valued='low'))
    def ipo_rule_2093(self):
        self.declare(Fact(recommendation='Laba bersih menunjukkan kerugian. PER berada di tingkat yang rendah. ROE menunjukkan keuntungan yang rendah.'))


    @Rule(Fact(net_income_valued='loss'), Fact(der_valued='high'), Fact(roa_valued='low'))
    def ipo_rule_2094(self):
        self.declare(Fact(recommendation='Laba bersih menunjukkan kerugian. DER menunjukkan tingkat hutang yang tinggi. ROA menunjukkan efisiensi rendah.'))


    @Rule(Fact(net_income_valued='loss'), Fact(der_valued='high'), Fact(roe_valued='low'))
    def ipo_rule_2095(self):
        self.declare(Fact(recommendation='Laba bersih menunjukkan kerugian. DER menunjukkan tingkat hutang yang tinggi. ROE menunjukkan keuntungan yang rendah.'))


    @Rule(Fact(net_income_valued='loss'), Fact(roa_valued='low'), Fact(roe_valued='low'))
    def ipo_rule_2096(self):
        self.declare(Fact(recommendation='Laba bersih menunjukkan kerugian. ROA menunjukkan efisiensi rendah. ROE menunjukkan keuntungan yang rendah.'))


    @Rule(Fact(per_valued='low'), Fact(der_valued='high'), Fact(roa_valued='low'))
    def ipo_rule_2097(self):
        self.declare(Fact(recommendation='PER berada di tingkat yang rendah. DER menunjukkan tingkat hutang yang tinggi. ROA menunjukkan efisiensi rendah.'))


    @Rule(Fact(per_valued='low'), Fact(der_valued='high'), Fact(roe_valued='low'))
    def ipo_rule_2098(self):
        self.declare(Fact(recommendation='PER berada di tingkat yang rendah. DER menunjukkan tingkat hutang yang tinggi. ROE menunjukkan keuntungan yang rendah.'))


    @Rule(Fact(per_valued='low'), Fact(roa_valued='low'), Fact(roe_valued='low'))
    def ipo_rule_2099(self):
        self.declare(Fact(recommendation='PER berada di tingkat yang rendah. ROA menunjukkan efisiensi rendah. ROE menunjukkan keuntungan yang rendah.'))


    @Rule(Fact(der_valued='high'), Fact(roa_valued='low'), Fact(roe_valued='low'))
    def ipo_rule_2100(self):
        self.declare(Fact(recommendation='DER menunjukkan tingkat hutang yang tinggi. ROA menunjukkan efisiensi rendah. ROE menunjukkan keuntungan yang rendah.'))


    @Rule(Fact(underwriter_valued='good'), Fact(warrant_valued='bad'), Fact(net_income_valued='loss'))
    def ipo_rule_2101(self):
        self.declare(Fact(recommendation='Underwriter berkualitas baik. Warrant menunjukkan kondisi buruk. Laba bersih menunjukkan kerugian.'))


    @Rule(Fact(underwriter_valued='good'), Fact(warrant_valued='bad'), Fact(per_valued='low'))
    def ipo_rule_2102(self):
        self.declare(Fact(recommendation='Underwriter berkualitas baik. Warrant menunjukkan kondisi buruk. PER berada di tingkat yang rendah.'))


    @Rule(Fact(underwriter_valued='good'), Fact(warrant_valued='bad'), Fact(der_valued='low'))
    def ipo_rule_2103(self):
        self.declare(Fact(recommendation='Underwriter berkualitas baik. Warrant menunjukkan kondisi buruk. DER menunjukkan tingkat hutang yang rendah.'))


    @Rule(Fact(underwriter_valued='good'), Fact(warrant_valued='bad'), Fact(roa_valued='high'))
    def ipo_rule_2104(self):
        self.declare(Fact(recommendation='Underwriter berkualitas baik. Warrant menunjukkan kondisi buruk. ROA menunjukkan efisiensi tinggi.'))


    @Rule(Fact(underwriter_valued='good'), Fact(warrant_valued='bad'), Fact(roe_valued='high'))
    def ipo_rule_2105(self):
        self.declare(Fact(recommendation='Underwriter berkualitas baik. Warrant menunjukkan kondisi buruk. ROE menunjukkan keuntungan yang tinggi.'))


    @Rule(Fact(underwriter_valued='good'), Fact(net_income_valued='loss'), Fact(per_valued='low'))
    def ipo_rule_2106(self):
        self.declare(Fact(recommendation='Underwriter berkualitas baik. Laba bersih menunjukkan kerugian. PER berada di tingkat yang rendah.'))


    @Rule(Fact(underwriter_valued='good'), Fact(net_income_valued='loss'), Fact(der_valued='low'))
    def ipo_rule_2107(self):
        self.declare(Fact(recommendation='Underwriter berkualitas baik. Laba bersih menunjukkan kerugian. DER menunjukkan tingkat hutang yang rendah.'))


    @Rule(Fact(underwriter_valued='good'), Fact(net_income_valued='loss'), Fact(roa_valued='high'))
    def ipo_rule_2108(self):
        self.declare(Fact(recommendation='Underwriter berkualitas baik. Laba bersih menunjukkan kerugian. ROA menunjukkan efisiensi tinggi.'))


    @Rule(Fact(underwriter_valued='good'), Fact(net_income_valued='loss'), Fact(roe_valued='high'))
    def ipo_rule_2109(self):
        self.declare(Fact(recommendation='Underwriter berkualitas baik. Laba bersih menunjukkan kerugian. ROE menunjukkan keuntungan yang tinggi.'))


    @Rule(Fact(underwriter_valued='good'), Fact(per_valued='low'), Fact(der_valued='low'))
    def ipo_rule_2110(self):
        self.declare(Fact(recommendation='Underwriter berkualitas baik. PER berada di tingkat yang rendah. DER menunjukkan tingkat hutang yang rendah.'))


    @Rule(Fact(underwriter_valued='good'), Fact(per_valued='low'), Fact(roa_valued='high'))
    def ipo_rule_2111(self):
        self.declare(Fact(recommendation='Underwriter berkualitas baik. PER berada di tingkat yang rendah. ROA menunjukkan efisiensi tinggi.'))


    @Rule(Fact(underwriter_valued='good'), Fact(per_valued='low'), Fact(roe_valued='high'))
    def ipo_rule_2112(self):
        self.declare(Fact(recommendation='Underwriter berkualitas baik. PER berada di tingkat yang rendah. ROE menunjukkan keuntungan yang tinggi.'))


    @Rule(Fact(underwriter_valued='good'), Fact(der_valued='low'), Fact(roa_valued='high'))
    def ipo_rule_2113(self):
        self.declare(Fact(recommendation='Underwriter berkualitas baik. DER menunjukkan tingkat hutang yang rendah. ROA menunjukkan efisiensi tinggi.'))


    @Rule(Fact(underwriter_valued='good'), Fact(der_valued='low'), Fact(roe_valued='high'))
    def ipo_rule_2114(self):
        self.declare(Fact(recommendation='Underwriter berkualitas baik. DER menunjukkan tingkat hutang yang rendah. ROE menunjukkan keuntungan yang tinggi.'))


    @Rule(Fact(underwriter_valued='good'), Fact(roa_valued='high'), Fact(roe_valued='high'))
    def ipo_rule_2115(self):
        self.declare(Fact(recommendation='Underwriter berkualitas baik. ROA menunjukkan efisiensi tinggi. ROE menunjukkan keuntungan yang tinggi.'))


    @Rule(Fact(warrant_valued='bad'), Fact(net_income_valued='loss'), Fact(per_valued='low'))
    def ipo_rule_2116(self):
        self.declare(Fact(recommendation='Warrant menunjukkan kondisi buruk. Laba bersih menunjukkan kerugian. PER berada di tingkat yang rendah.'))


    @Rule(Fact(warrant_valued='bad'), Fact(net_income_valued='loss'), Fact(der_valued='low'))
    def ipo_rule_2117(self):
        self.declare(Fact(recommendation='Warrant menunjukkan kondisi buruk. Laba bersih menunjukkan kerugian. DER menunjukkan tingkat hutang yang rendah.'))


    @Rule(Fact(warrant_valued='bad'), Fact(net_income_valued='loss'), Fact(roa_valued='high'))
    def ipo_rule_2118(self):
        self.declare(Fact(recommendation='Warrant menunjukkan kondisi buruk. Laba bersih menunjukkan kerugian. ROA menunjukkan efisiensi tinggi.'))


    @Rule(Fact(warrant_valued='bad'), Fact(net_income_valued='loss'), Fact(roe_valued='high'))
    def ipo_rule_2119(self):
        self.declare(Fact(recommendation='Warrant menunjukkan kondisi buruk. Laba bersih menunjukkan kerugian. ROE menunjukkan keuntungan yang tinggi.'))


    @Rule(Fact(warrant_valued='bad'), Fact(per_valued='low'), Fact(der_valued='low'))
    def ipo_rule_2120(self):
        self.declare(Fact(recommendation='Warrant menunjukkan kondisi buruk. PER berada di tingkat yang rendah. DER menunjukkan tingkat hutang yang rendah.'))


    @Rule(Fact(warrant_valued='bad'), Fact(per_valued='low'), Fact(roa_valued='high'))
    def ipo_rule_2121(self):
        self.declare(Fact(recommendation='Warrant menunjukkan kondisi buruk. PER berada di tingkat yang rendah. ROA menunjukkan efisiensi tinggi.'))


    @Rule(Fact(warrant_valued='bad'), Fact(per_valued='low'), Fact(roe_valued='high'))
    def ipo_rule_2122(self):
        self.declare(Fact(recommendation='Warrant menunjukkan kondisi buruk. PER berada di tingkat yang rendah. ROE menunjukkan keuntungan yang tinggi.'))


    @Rule(Fact(warrant_valued='bad'), Fact(der_valued='low'), Fact(roa_valued='high'))
    def ipo_rule_2123(self):
        self.declare(Fact(recommendation='Warrant menunjukkan kondisi buruk. DER menunjukkan tingkat hutang yang rendah. ROA menunjukkan efisiensi tinggi.'))


    @Rule(Fact(warrant_valued='bad'), Fact(der_valued='low'), Fact(roe_valued='high'))
    def ipo_rule_2124(self):
        self.declare(Fact(recommendation='Warrant menunjukkan kondisi buruk. DER menunjukkan tingkat hutang yang rendah. ROE menunjukkan keuntungan yang tinggi.'))


    @Rule(Fact(warrant_valued='bad'), Fact(roa_valued='high'), Fact(roe_valued='high'))
    def ipo_rule_2125(self):
        self.declare(Fact(recommendation='Warrant menunjukkan kondisi buruk. ROA menunjukkan efisiensi tinggi. ROE menunjukkan keuntungan yang tinggi.'))


    @Rule(Fact(net_income_valued='loss'), Fact(per_valued='low'), Fact(der_valued='low'))
    def ipo_rule_2126(self):
        self.declare(Fact(recommendation='Laba bersih menunjukkan kerugian. PER berada di tingkat yang rendah. DER menunjukkan tingkat hutang yang rendah.'))


    @Rule(Fact(net_income_valued='loss'), Fact(per_valued='low'), Fact(roa_valued='high'))
    def ipo_rule_2127(self):
        self.declare(Fact(recommendation='Laba bersih menunjukkan kerugian. PER berada di tingkat yang rendah. ROA menunjukkan efisiensi tinggi.'))


    @Rule(Fact(net_income_valued='loss'), Fact(per_valued='low'), Fact(roe_valued='high'))
    def ipo_rule_2128(self):
        self.declare(Fact(recommendation='Laba bersih menunjukkan kerugian. PER berada di tingkat yang rendah. ROE menunjukkan keuntungan yang tinggi.'))


    @Rule(Fact(net_income_valued='loss'), Fact(der_valued='low'), Fact(roa_valued='high'))
    def ipo_rule_2129(self):
        self.declare(Fact(recommendation='Laba bersih menunjukkan kerugian. DER menunjukkan tingkat hutang yang rendah. ROA menunjukkan efisiensi tinggi.'))


    @Rule(Fact(net_income_valued='loss'), Fact(der_valued='low'), Fact(roe_valued='high'))
    def ipo_rule_2130(self):
        self.declare(Fact(recommendation='Laba bersih menunjukkan kerugian. DER menunjukkan tingkat hutang yang rendah. ROE menunjukkan keuntungan yang tinggi.'))


    @Rule(Fact(net_income_valued='loss'), Fact(roa_valued='high'), Fact(roe_valued='high'))
    def ipo_rule_2131(self):
        self.declare(Fact(recommendation='Laba bersih menunjukkan kerugian. ROA menunjukkan efisiensi tinggi. ROE menunjukkan keuntungan yang tinggi.'))


    @Rule(Fact(per_valued='low'), Fact(der_valued='low'), Fact(roa_valued='high'))
    def ipo_rule_2132(self):
        self.declare(Fact(recommendation='PER berada di tingkat yang rendah. DER menunjukkan tingkat hutang yang rendah. ROA menunjukkan efisiensi tinggi.'))


    @Rule(Fact(per_valued='low'), Fact(der_valued='low'), Fact(roe_valued='high'))
    def ipo_rule_2133(self):
        self.declare(Fact(recommendation='PER berada di tingkat yang rendah. DER menunjukkan tingkat hutang yang rendah. ROE menunjukkan keuntungan yang tinggi.'))


    @Rule(Fact(per_valued='low'), Fact(roa_valued='high'), Fact(roe_valued='high'))
    def ipo_rule_2134(self):
        self.declare(Fact(recommendation='PER berada di tingkat yang rendah. ROA menunjukkan efisiensi tinggi. ROE menunjukkan keuntungan yang tinggi.'))


    @Rule(Fact(der_valued='low'), Fact(roa_valued='high'), Fact(roe_valued='high'))
    def ipo_rule_2135(self):
        self.declare(Fact(recommendation='DER menunjukkan tingkat hutang yang rendah. ROA menunjukkan efisiensi tinggi. ROE menunjukkan keuntungan yang tinggi.'))


    @Rule(Fact(underwriter_valued='good'), Fact(warrant_valued='bad'), Fact(net_income_valued='loss'))
    def ipo_rule_2136(self):
        self.declare(Fact(recommendation='Underwriter berkualitas baik. Warrant menunjukkan kondisi buruk. Laba bersih menunjukkan kerugian.'))


    @Rule(Fact(underwriter_valued='good'), Fact(warrant_valued='bad'), Fact(per_valued='low'))
    def ipo_rule_2137(self):
        self.declare(Fact(recommendation='Underwriter berkualitas baik. Warrant menunjukkan kondisi buruk. PER berada di tingkat yang rendah.'))


    @Rule(Fact(underwriter_valued='good'), Fact(warrant_valued='bad'), Fact(der_valued='low'))
    def ipo_rule_2138(self):
        self.declare(Fact(recommendation='Underwriter berkualitas baik. Warrant menunjukkan kondisi buruk. DER menunjukkan tingkat hutang yang rendah.'))


    @Rule(Fact(underwriter_valued='good'), Fact(warrant_valued='bad'), Fact(roa_valued='high'))
    def ipo_rule_2139(self):
        self.declare(Fact(recommendation='Underwriter berkualitas baik. Warrant menunjukkan kondisi buruk. ROA menunjukkan efisiensi tinggi.'))


    @Rule(Fact(underwriter_valued='good'), Fact(warrant_valued='bad'), Fact(roe_valued='low'))
    def ipo_rule_2140(self):
        self.declare(Fact(recommendation='Underwriter berkualitas baik. Warrant menunjukkan kondisi buruk. ROE menunjukkan keuntungan yang rendah.'))


    @Rule(Fact(underwriter_valued='good'), Fact(net_income_valued='loss'), Fact(per_valued='low'))
    def ipo_rule_2141(self):
        self.declare(Fact(recommendation='Underwriter berkualitas baik. Laba bersih menunjukkan kerugian. PER berada di tingkat yang rendah.'))


    @Rule(Fact(underwriter_valued='good'), Fact(net_income_valued='loss'), Fact(der_valued='low'))
    def ipo_rule_2142(self):
        self.declare(Fact(recommendation='Underwriter berkualitas baik. Laba bersih menunjukkan kerugian. DER menunjukkan tingkat hutang yang rendah.'))


    @Rule(Fact(underwriter_valued='good'), Fact(net_income_valued='loss'), Fact(roa_valued='high'))
    def ipo_rule_2143(self):
        self.declare(Fact(recommendation='Underwriter berkualitas baik. Laba bersih menunjukkan kerugian. ROA menunjukkan efisiensi tinggi.'))


    @Rule(Fact(underwriter_valued='good'), Fact(net_income_valued='loss'), Fact(roe_valued='low'))
    def ipo_rule_2144(self):
        self.declare(Fact(recommendation='Underwriter berkualitas baik. Laba bersih menunjukkan kerugian. ROE menunjukkan keuntungan yang rendah.'))


    @Rule(Fact(underwriter_valued='good'), Fact(per_valued='low'), Fact(der_valued='low'))
    def ipo_rule_2145(self):
        self.declare(Fact(recommendation='Underwriter berkualitas baik. PER berada di tingkat yang rendah. DER menunjukkan tingkat hutang yang rendah.'))


    @Rule(Fact(underwriter_valued='good'), Fact(per_valued='low'), Fact(roa_valued='high'))
    def ipo_rule_2146(self):
        self.declare(Fact(recommendation='Underwriter berkualitas baik. PER berada di tingkat yang rendah. ROA menunjukkan efisiensi tinggi.'))


    @Rule(Fact(underwriter_valued='good'), Fact(per_valued='low'), Fact(roe_valued='low'))
    def ipo_rule_2147(self):
        self.declare(Fact(recommendation='Underwriter berkualitas baik. PER berada di tingkat yang rendah. ROE menunjukkan keuntungan yang rendah.'))


    @Rule(Fact(underwriter_valued='good'), Fact(der_valued='low'), Fact(roa_valued='high'))
    def ipo_rule_2148(self):
        self.declare(Fact(recommendation='Underwriter berkualitas baik. DER menunjukkan tingkat hutang yang rendah. ROA menunjukkan efisiensi tinggi.'))


    @Rule(Fact(underwriter_valued='good'), Fact(der_valued='low'), Fact(roe_valued='low'))
    def ipo_rule_2149(self):
        self.declare(Fact(recommendation='Underwriter berkualitas baik. DER menunjukkan tingkat hutang yang rendah. ROE menunjukkan keuntungan yang rendah.'))


    @Rule(Fact(underwriter_valued='good'), Fact(roa_valued='high'), Fact(roe_valued='low'))
    def ipo_rule_2150(self):
        self.declare(Fact(recommendation='Underwriter berkualitas baik. ROA menunjukkan efisiensi tinggi. ROE menunjukkan keuntungan yang rendah.'))


    @Rule(Fact(warrant_valued='bad'), Fact(net_income_valued='loss'), Fact(per_valued='low'))
    def ipo_rule_2151(self):
        self.declare(Fact(recommendation='Warrant menunjukkan kondisi buruk. Laba bersih menunjukkan kerugian. PER berada di tingkat yang rendah.'))


    @Rule(Fact(warrant_valued='bad'), Fact(net_income_valued='loss'), Fact(der_valued='low'))
    def ipo_rule_2152(self):
        self.declare(Fact(recommendation='Warrant menunjukkan kondisi buruk. Laba bersih menunjukkan kerugian. DER menunjukkan tingkat hutang yang rendah.'))


    @Rule(Fact(warrant_valued='bad'), Fact(net_income_valued='loss'), Fact(roa_valued='high'))
    def ipo_rule_2153(self):
        self.declare(Fact(recommendation='Warrant menunjukkan kondisi buruk. Laba bersih menunjukkan kerugian. ROA menunjukkan efisiensi tinggi.'))


    @Rule(Fact(warrant_valued='bad'), Fact(net_income_valued='loss'), Fact(roe_valued='low'))
    def ipo_rule_2154(self):
        self.declare(Fact(recommendation='Warrant menunjukkan kondisi buruk. Laba bersih menunjukkan kerugian. ROE menunjukkan keuntungan yang rendah.'))


    @Rule(Fact(warrant_valued='bad'), Fact(per_valued='low'), Fact(der_valued='low'))
    def ipo_rule_2155(self):
        self.declare(Fact(recommendation='Warrant menunjukkan kondisi buruk. PER berada di tingkat yang rendah. DER menunjukkan tingkat hutang yang rendah.'))


    @Rule(Fact(warrant_valued='bad'), Fact(per_valued='low'), Fact(roa_valued='high'))
    def ipo_rule_2156(self):
        self.declare(Fact(recommendation='Warrant menunjukkan kondisi buruk. PER berada di tingkat yang rendah. ROA menunjukkan efisiensi tinggi.'))


    @Rule(Fact(warrant_valued='bad'), Fact(per_valued='low'), Fact(roe_valued='low'))
    def ipo_rule_2157(self):
        self.declare(Fact(recommendation='Warrant menunjukkan kondisi buruk. PER berada di tingkat yang rendah. ROE menunjukkan keuntungan yang rendah.'))


    @Rule(Fact(warrant_valued='bad'), Fact(der_valued='low'), Fact(roa_valued='high'))
    def ipo_rule_2158(self):
        self.declare(Fact(recommendation='Warrant menunjukkan kondisi buruk. DER menunjukkan tingkat hutang yang rendah. ROA menunjukkan efisiensi tinggi.'))


    @Rule(Fact(warrant_valued='bad'), Fact(der_valued='low'), Fact(roe_valued='low'))
    def ipo_rule_2159(self):
        self.declare(Fact(recommendation='Warrant menunjukkan kondisi buruk. DER menunjukkan tingkat hutang yang rendah. ROE menunjukkan keuntungan yang rendah.'))


    @Rule(Fact(warrant_valued='bad'), Fact(roa_valued='high'), Fact(roe_valued='low'))
    def ipo_rule_2160(self):
        self.declare(Fact(recommendation='Warrant menunjukkan kondisi buruk. ROA menunjukkan efisiensi tinggi. ROE menunjukkan keuntungan yang rendah.'))


    @Rule(Fact(net_income_valued='loss'), Fact(per_valued='low'), Fact(der_valued='low'))
    def ipo_rule_2161(self):
        self.declare(Fact(recommendation='Laba bersih menunjukkan kerugian. PER berada di tingkat yang rendah. DER menunjukkan tingkat hutang yang rendah.'))


    @Rule(Fact(net_income_valued='loss'), Fact(per_valued='low'), Fact(roa_valued='high'))
    def ipo_rule_2162(self):
        self.declare(Fact(recommendation='Laba bersih menunjukkan kerugian. PER berada di tingkat yang rendah. ROA menunjukkan efisiensi tinggi.'))


    @Rule(Fact(net_income_valued='loss'), Fact(per_valued='low'), Fact(roe_valued='low'))
    def ipo_rule_2163(self):
        self.declare(Fact(recommendation='Laba bersih menunjukkan kerugian. PER berada di tingkat yang rendah. ROE menunjukkan keuntungan yang rendah.'))


    @Rule(Fact(net_income_valued='loss'), Fact(der_valued='low'), Fact(roa_valued='high'))
    def ipo_rule_2164(self):
        self.declare(Fact(recommendation='Laba bersih menunjukkan kerugian. DER menunjukkan tingkat hutang yang rendah. ROA menunjukkan efisiensi tinggi.'))


    @Rule(Fact(net_income_valued='loss'), Fact(der_valued='low'), Fact(roe_valued='low'))
    def ipo_rule_2165(self):
        self.declare(Fact(recommendation='Laba bersih menunjukkan kerugian. DER menunjukkan tingkat hutang yang rendah. ROE menunjukkan keuntungan yang rendah.'))


    @Rule(Fact(net_income_valued='loss'), Fact(roa_valued='high'), Fact(roe_valued='low'))
    def ipo_rule_2166(self):
        self.declare(Fact(recommendation='Laba bersih menunjukkan kerugian. ROA menunjukkan efisiensi tinggi. ROE menunjukkan keuntungan yang rendah.'))


    @Rule(Fact(per_valued='low'), Fact(der_valued='low'), Fact(roa_valued='high'))
    def ipo_rule_2167(self):
        self.declare(Fact(recommendation='PER berada di tingkat yang rendah. DER menunjukkan tingkat hutang yang rendah. ROA menunjukkan efisiensi tinggi.'))


    @Rule(Fact(per_valued='low'), Fact(der_valued='low'), Fact(roe_valued='low'))
    def ipo_rule_2168(self):
        self.declare(Fact(recommendation='PER berada di tingkat yang rendah. DER menunjukkan tingkat hutang yang rendah. ROE menunjukkan keuntungan yang rendah.'))


    @Rule(Fact(per_valued='low'), Fact(roa_valued='high'), Fact(roe_valued='low'))
    def ipo_rule_2169(self):
        self.declare(Fact(recommendation='PER berada di tingkat yang rendah. ROA menunjukkan efisiensi tinggi. ROE menunjukkan keuntungan yang rendah.'))


    @Rule(Fact(der_valued='low'), Fact(roa_valued='high'), Fact(roe_valued='low'))
    def ipo_rule_2170(self):
        self.declare(Fact(recommendation='DER menunjukkan tingkat hutang yang rendah. ROA menunjukkan efisiensi tinggi. ROE menunjukkan keuntungan yang rendah.'))


    @Rule(Fact(underwriter_valued='good'), Fact(warrant_valued='bad'), Fact(net_income_valued='loss'))
    def ipo_rule_2171(self):
        self.declare(Fact(recommendation='Underwriter berkualitas baik. Warrant menunjukkan kondisi buruk. Laba bersih menunjukkan kerugian.'))


    @Rule(Fact(underwriter_valued='good'), Fact(warrant_valued='bad'), Fact(per_valued='low'))
    def ipo_rule_2172(self):
        self.declare(Fact(recommendation='Underwriter berkualitas baik. Warrant menunjukkan kondisi buruk. PER berada di tingkat yang rendah.'))


    @Rule(Fact(underwriter_valued='good'), Fact(warrant_valued='bad'), Fact(der_valued='low'))
    def ipo_rule_2173(self):
        self.declare(Fact(recommendation='Underwriter berkualitas baik. Warrant menunjukkan kondisi buruk. DER menunjukkan tingkat hutang yang rendah.'))


    @Rule(Fact(underwriter_valued='good'), Fact(warrant_valued='bad'), Fact(roa_valued='low'))
    def ipo_rule_2174(self):
        self.declare(Fact(recommendation='Underwriter berkualitas baik. Warrant menunjukkan kondisi buruk. ROA menunjukkan efisiensi rendah.'))


    @Rule(Fact(underwriter_valued='good'), Fact(warrant_valued='bad'), Fact(roe_valued='high'))
    def ipo_rule_2175(self):
        self.declare(Fact(recommendation='Underwriter berkualitas baik. Warrant menunjukkan kondisi buruk. ROE menunjukkan keuntungan yang tinggi.'))


    @Rule(Fact(underwriter_valued='good'), Fact(net_income_valued='loss'), Fact(per_valued='low'))
    def ipo_rule_2176(self):
        self.declare(Fact(recommendation='Underwriter berkualitas baik. Laba bersih menunjukkan kerugian. PER berada di tingkat yang rendah.'))


    @Rule(Fact(underwriter_valued='good'), Fact(net_income_valued='loss'), Fact(der_valued='low'))
    def ipo_rule_2177(self):
        self.declare(Fact(recommendation='Underwriter berkualitas baik. Laba bersih menunjukkan kerugian. DER menunjukkan tingkat hutang yang rendah.'))


    @Rule(Fact(underwriter_valued='good'), Fact(net_income_valued='loss'), Fact(roa_valued='low'))
    def ipo_rule_2178(self):
        self.declare(Fact(recommendation='Underwriter berkualitas baik. Laba bersih menunjukkan kerugian. ROA menunjukkan efisiensi rendah.'))


    @Rule(Fact(underwriter_valued='good'), Fact(net_income_valued='loss'), Fact(roe_valued='high'))
    def ipo_rule_2179(self):
        self.declare(Fact(recommendation='Underwriter berkualitas baik. Laba bersih menunjukkan kerugian. ROE menunjukkan keuntungan yang tinggi.'))


    @Rule(Fact(underwriter_valued='good'), Fact(per_valued='low'), Fact(der_valued='low'))
    def ipo_rule_2180(self):
        self.declare(Fact(recommendation='Underwriter berkualitas baik. PER berada di tingkat yang rendah. DER menunjukkan tingkat hutang yang rendah.'))


    @Rule(Fact(underwriter_valued='good'), Fact(per_valued='low'), Fact(roa_valued='low'))
    def ipo_rule_2181(self):
        self.declare(Fact(recommendation='Underwriter berkualitas baik. PER berada di tingkat yang rendah. ROA menunjukkan efisiensi rendah.'))


    @Rule(Fact(underwriter_valued='good'), Fact(per_valued='low'), Fact(roe_valued='high'))
    def ipo_rule_2182(self):
        self.declare(Fact(recommendation='Underwriter berkualitas baik. PER berada di tingkat yang rendah. ROE menunjukkan keuntungan yang tinggi.'))


    @Rule(Fact(underwriter_valued='good'), Fact(der_valued='low'), Fact(roa_valued='low'))
    def ipo_rule_2183(self):
        self.declare(Fact(recommendation='Underwriter berkualitas baik. DER menunjukkan tingkat hutang yang rendah. ROA menunjukkan efisiensi rendah.'))


    @Rule(Fact(underwriter_valued='good'), Fact(der_valued='low'), Fact(roe_valued='high'))
    def ipo_rule_2184(self):
        self.declare(Fact(recommendation='Underwriter berkualitas baik. DER menunjukkan tingkat hutang yang rendah. ROE menunjukkan keuntungan yang tinggi.'))


    @Rule(Fact(underwriter_valued='good'), Fact(roa_valued='low'), Fact(roe_valued='high'))
    def ipo_rule_2185(self):
        self.declare(Fact(recommendation='Underwriter berkualitas baik. ROA menunjukkan efisiensi rendah. ROE menunjukkan keuntungan yang tinggi.'))


    @Rule(Fact(warrant_valued='bad'), Fact(net_income_valued='loss'), Fact(per_valued='low'))
    def ipo_rule_2186(self):
        self.declare(Fact(recommendation='Warrant menunjukkan kondisi buruk. Laba bersih menunjukkan kerugian. PER berada di tingkat yang rendah.'))


    @Rule(Fact(warrant_valued='bad'), Fact(net_income_valued='loss'), Fact(der_valued='low'))
    def ipo_rule_2187(self):
        self.declare(Fact(recommendation='Warrant menunjukkan kondisi buruk. Laba bersih menunjukkan kerugian. DER menunjukkan tingkat hutang yang rendah.'))


    @Rule(Fact(warrant_valued='bad'), Fact(net_income_valued='loss'), Fact(roa_valued='low'))
    def ipo_rule_2188(self):
        self.declare(Fact(recommendation='Warrant menunjukkan kondisi buruk. Laba bersih menunjukkan kerugian. ROA menunjukkan efisiensi rendah.'))


    @Rule(Fact(warrant_valued='bad'), Fact(net_income_valued='loss'), Fact(roe_valued='high'))
    def ipo_rule_2189(self):
        self.declare(Fact(recommendation='Warrant menunjukkan kondisi buruk. Laba bersih menunjukkan kerugian. ROE menunjukkan keuntungan yang tinggi.'))


    @Rule(Fact(warrant_valued='bad'), Fact(per_valued='low'), Fact(der_valued='low'))
    def ipo_rule_2190(self):
        self.declare(Fact(recommendation='Warrant menunjukkan kondisi buruk. PER berada di tingkat yang rendah. DER menunjukkan tingkat hutang yang rendah.'))


    @Rule(Fact(warrant_valued='bad'), Fact(per_valued='low'), Fact(roa_valued='low'))
    def ipo_rule_2191(self):
        self.declare(Fact(recommendation='Warrant menunjukkan kondisi buruk. PER berada di tingkat yang rendah. ROA menunjukkan efisiensi rendah.'))


    @Rule(Fact(warrant_valued='bad'), Fact(per_valued='low'), Fact(roe_valued='high'))
    def ipo_rule_2192(self):
        self.declare(Fact(recommendation='Warrant menunjukkan kondisi buruk. PER berada di tingkat yang rendah. ROE menunjukkan keuntungan yang tinggi.'))


    @Rule(Fact(warrant_valued='bad'), Fact(der_valued='low'), Fact(roa_valued='low'))
    def ipo_rule_2193(self):
        self.declare(Fact(recommendation='Warrant menunjukkan kondisi buruk. DER menunjukkan tingkat hutang yang rendah. ROA menunjukkan efisiensi rendah.'))


    @Rule(Fact(warrant_valued='bad'), Fact(der_valued='low'), Fact(roe_valued='high'))
    def ipo_rule_2194(self):
        self.declare(Fact(recommendation='Warrant menunjukkan kondisi buruk. DER menunjukkan tingkat hutang yang rendah. ROE menunjukkan keuntungan yang tinggi.'))


    @Rule(Fact(warrant_valued='bad'), Fact(roa_valued='low'), Fact(roe_valued='high'))
    def ipo_rule_2195(self):
        self.declare(Fact(recommendation='Warrant menunjukkan kondisi buruk. ROA menunjukkan efisiensi rendah. ROE menunjukkan keuntungan yang tinggi.'))


    @Rule(Fact(net_income_valued='loss'), Fact(per_valued='low'), Fact(der_valued='low'))
    def ipo_rule_2196(self):
        self.declare(Fact(recommendation='Laba bersih menunjukkan kerugian. PER berada di tingkat yang rendah. DER menunjukkan tingkat hutang yang rendah.'))


    @Rule(Fact(net_income_valued='loss'), Fact(per_valued='low'), Fact(roa_valued='low'))
    def ipo_rule_2197(self):
        self.declare(Fact(recommendation='Laba bersih menunjukkan kerugian. PER berada di tingkat yang rendah. ROA menunjukkan efisiensi rendah.'))


    @Rule(Fact(net_income_valued='loss'), Fact(per_valued='low'), Fact(roe_valued='high'))
    def ipo_rule_2198(self):
        self.declare(Fact(recommendation='Laba bersih menunjukkan kerugian. PER berada di tingkat yang rendah. ROE menunjukkan keuntungan yang tinggi.'))


    @Rule(Fact(net_income_valued='loss'), Fact(der_valued='low'), Fact(roa_valued='low'))
    def ipo_rule_2199(self):
        self.declare(Fact(recommendation='Laba bersih menunjukkan kerugian. DER menunjukkan tingkat hutang yang rendah. ROA menunjukkan efisiensi rendah.'))


    @Rule(Fact(net_income_valued='loss'), Fact(der_valued='low'), Fact(roe_valued='high'))
    def ipo_rule_2200(self):
        self.declare(Fact(recommendation='Laba bersih menunjukkan kerugian. DER menunjukkan tingkat hutang yang rendah. ROE menunjukkan keuntungan yang tinggi.'))


    @Rule(Fact(net_income_valued='loss'), Fact(roa_valued='low'), Fact(roe_valued='high'))
    def ipo_rule_2201(self):
        self.declare(Fact(recommendation='Laba bersih menunjukkan kerugian. ROA menunjukkan efisiensi rendah. ROE menunjukkan keuntungan yang tinggi.'))


    @Rule(Fact(per_valued='low'), Fact(der_valued='low'), Fact(roa_valued='low'))
    def ipo_rule_2202(self):
        self.declare(Fact(recommendation='PER berada di tingkat yang rendah. DER menunjukkan tingkat hutang yang rendah. ROA menunjukkan efisiensi rendah.'))


    @Rule(Fact(per_valued='low'), Fact(der_valued='low'), Fact(roe_valued='high'))
    def ipo_rule_2203(self):
        self.declare(Fact(recommendation='PER berada di tingkat yang rendah. DER menunjukkan tingkat hutang yang rendah. ROE menunjukkan keuntungan yang tinggi.'))


    @Rule(Fact(per_valued='low'), Fact(roa_valued='low'), Fact(roe_valued='high'))
    def ipo_rule_2204(self):
        self.declare(Fact(recommendation='PER berada di tingkat yang rendah. ROA menunjukkan efisiensi rendah. ROE menunjukkan keuntungan yang tinggi.'))


    @Rule(Fact(der_valued='low'), Fact(roa_valued='low'), Fact(roe_valued='high'))
    def ipo_rule_2205(self):
        self.declare(Fact(recommendation='DER menunjukkan tingkat hutang yang rendah. ROA menunjukkan efisiensi rendah. ROE menunjukkan keuntungan yang tinggi.'))


    @Rule(Fact(underwriter_valued='good'), Fact(warrant_valued='bad'), Fact(net_income_valued='loss'))
    def ipo_rule_2206(self):
        self.declare(Fact(recommendation='Underwriter berkualitas baik. Warrant menunjukkan kondisi buruk. Laba bersih menunjukkan kerugian.'))


    @Rule(Fact(underwriter_valued='good'), Fact(warrant_valued='bad'), Fact(per_valued='low'))
    def ipo_rule_2207(self):
        self.declare(Fact(recommendation='Underwriter berkualitas baik. Warrant menunjukkan kondisi buruk. PER berada di tingkat yang rendah.'))


    @Rule(Fact(underwriter_valued='good'), Fact(warrant_valued='bad'), Fact(der_valued='low'))
    def ipo_rule_2208(self):
        self.declare(Fact(recommendation='Underwriter berkualitas baik. Warrant menunjukkan kondisi buruk. DER menunjukkan tingkat hutang yang rendah.'))


    @Rule(Fact(underwriter_valued='good'), Fact(warrant_valued='bad'), Fact(roa_valued='low'))
    def ipo_rule_2209(self):
        self.declare(Fact(recommendation='Underwriter berkualitas baik. Warrant menunjukkan kondisi buruk. ROA menunjukkan efisiensi rendah.'))


    @Rule(Fact(underwriter_valued='good'), Fact(warrant_valued='bad'), Fact(roe_valued='low'))
    def ipo_rule_2210(self):
        self.declare(Fact(recommendation='Underwriter berkualitas baik. Warrant menunjukkan kondisi buruk. ROE menunjukkan keuntungan yang rendah.'))


    @Rule(Fact(underwriter_valued='good'), Fact(net_income_valued='loss'), Fact(per_valued='low'))
    def ipo_rule_2211(self):
        self.declare(Fact(recommendation='Underwriter berkualitas baik. Laba bersih menunjukkan kerugian. PER berada di tingkat yang rendah.'))


    @Rule(Fact(underwriter_valued='good'), Fact(net_income_valued='loss'), Fact(der_valued='low'))
    def ipo_rule_2212(self):
        self.declare(Fact(recommendation='Underwriter berkualitas baik. Laba bersih menunjukkan kerugian. DER menunjukkan tingkat hutang yang rendah.'))


    @Rule(Fact(underwriter_valued='good'), Fact(net_income_valued='loss'), Fact(roa_valued='low'))
    def ipo_rule_2213(self):
        self.declare(Fact(recommendation='Underwriter berkualitas baik. Laba bersih menunjukkan kerugian. ROA menunjukkan efisiensi rendah.'))


    @Rule(Fact(underwriter_valued='good'), Fact(net_income_valued='loss'), Fact(roe_valued='low'))
    def ipo_rule_2214(self):
        self.declare(Fact(recommendation='Underwriter berkualitas baik. Laba bersih menunjukkan kerugian. ROE menunjukkan keuntungan yang rendah.'))


    @Rule(Fact(underwriter_valued='good'), Fact(per_valued='low'), Fact(der_valued='low'))
    def ipo_rule_2215(self):
        self.declare(Fact(recommendation='Underwriter berkualitas baik. PER berada di tingkat yang rendah. DER menunjukkan tingkat hutang yang rendah.'))


    @Rule(Fact(underwriter_valued='good'), Fact(per_valued='low'), Fact(roa_valued='low'))
    def ipo_rule_2216(self):
        self.declare(Fact(recommendation='Underwriter berkualitas baik. PER berada di tingkat yang rendah. ROA menunjukkan efisiensi rendah.'))


    @Rule(Fact(underwriter_valued='good'), Fact(per_valued='low'), Fact(roe_valued='low'))
    def ipo_rule_2217(self):
        self.declare(Fact(recommendation='Underwriter berkualitas baik. PER berada di tingkat yang rendah. ROE menunjukkan keuntungan yang rendah.'))


    @Rule(Fact(underwriter_valued='good'), Fact(der_valued='low'), Fact(roa_valued='low'))
    def ipo_rule_2218(self):
        self.declare(Fact(recommendation='Underwriter berkualitas baik. DER menunjukkan tingkat hutang yang rendah. ROA menunjukkan efisiensi rendah.'))


    @Rule(Fact(underwriter_valued='good'), Fact(der_valued='low'), Fact(roe_valued='low'))
    def ipo_rule_2219(self):
        self.declare(Fact(recommendation='Underwriter berkualitas baik. DER menunjukkan tingkat hutang yang rendah. ROE menunjukkan keuntungan yang rendah.'))


    @Rule(Fact(underwriter_valued='good'), Fact(roa_valued='low'), Fact(roe_valued='low'))
    def ipo_rule_2220(self):
        self.declare(Fact(recommendation='Underwriter berkualitas baik. ROA menunjukkan efisiensi rendah. ROE menunjukkan keuntungan yang rendah.'))


    @Rule(Fact(warrant_valued='bad'), Fact(net_income_valued='loss'), Fact(per_valued='low'))
    def ipo_rule_2221(self):
        self.declare(Fact(recommendation='Warrant menunjukkan kondisi buruk. Laba bersih menunjukkan kerugian. PER berada di tingkat yang rendah.'))


    @Rule(Fact(warrant_valued='bad'), Fact(net_income_valued='loss'), Fact(der_valued='low'))
    def ipo_rule_2222(self):
        self.declare(Fact(recommendation='Warrant menunjukkan kondisi buruk. Laba bersih menunjukkan kerugian. DER menunjukkan tingkat hutang yang rendah.'))


    @Rule(Fact(warrant_valued='bad'), Fact(net_income_valued='loss'), Fact(roa_valued='low'))
    def ipo_rule_2223(self):
        self.declare(Fact(recommendation='Warrant menunjukkan kondisi buruk. Laba bersih menunjukkan kerugian. ROA menunjukkan efisiensi rendah.'))


    @Rule(Fact(warrant_valued='bad'), Fact(net_income_valued='loss'), Fact(roe_valued='low'))
    def ipo_rule_2224(self):
        self.declare(Fact(recommendation='Warrant menunjukkan kondisi buruk. Laba bersih menunjukkan kerugian. ROE menunjukkan keuntungan yang rendah.'))


    @Rule(Fact(warrant_valued='bad'), Fact(per_valued='low'), Fact(der_valued='low'))
    def ipo_rule_2225(self):
        self.declare(Fact(recommendation='Warrant menunjukkan kondisi buruk. PER berada di tingkat yang rendah. DER menunjukkan tingkat hutang yang rendah.'))


    @Rule(Fact(warrant_valued='bad'), Fact(per_valued='low'), Fact(roa_valued='low'))
    def ipo_rule_2226(self):
        self.declare(Fact(recommendation='Warrant menunjukkan kondisi buruk. PER berada di tingkat yang rendah. ROA menunjukkan efisiensi rendah.'))


    @Rule(Fact(warrant_valued='bad'), Fact(per_valued='low'), Fact(roe_valued='low'))
    def ipo_rule_2227(self):
        self.declare(Fact(recommendation='Warrant menunjukkan kondisi buruk. PER berada di tingkat yang rendah. ROE menunjukkan keuntungan yang rendah.'))


    @Rule(Fact(warrant_valued='bad'), Fact(der_valued='low'), Fact(roa_valued='low'))
    def ipo_rule_2228(self):
        self.declare(Fact(recommendation='Warrant menunjukkan kondisi buruk. DER menunjukkan tingkat hutang yang rendah. ROA menunjukkan efisiensi rendah.'))


    @Rule(Fact(warrant_valued='bad'), Fact(der_valued='low'), Fact(roe_valued='low'))
    def ipo_rule_2229(self):
        self.declare(Fact(recommendation='Warrant menunjukkan kondisi buruk. DER menunjukkan tingkat hutang yang rendah. ROE menunjukkan keuntungan yang rendah.'))


    @Rule(Fact(warrant_valued='bad'), Fact(roa_valued='low'), Fact(roe_valued='low'))
    def ipo_rule_2230(self):
        self.declare(Fact(recommendation='Warrant menunjukkan kondisi buruk. ROA menunjukkan efisiensi rendah. ROE menunjukkan keuntungan yang rendah.'))


    @Rule(Fact(net_income_valued='loss'), Fact(per_valued='low'), Fact(der_valued='low'))
    def ipo_rule_2231(self):
        self.declare(Fact(recommendation='Laba bersih menunjukkan kerugian. PER berada di tingkat yang rendah. DER menunjukkan tingkat hutang yang rendah.'))


    @Rule(Fact(net_income_valued='loss'), Fact(per_valued='low'), Fact(roa_valued='low'))
    def ipo_rule_2232(self):
        self.declare(Fact(recommendation='Laba bersih menunjukkan kerugian. PER berada di tingkat yang rendah. ROA menunjukkan efisiensi rendah.'))


    @Rule(Fact(net_income_valued='loss'), Fact(per_valued='low'), Fact(roe_valued='low'))
    def ipo_rule_2233(self):
        self.declare(Fact(recommendation='Laba bersih menunjukkan kerugian. PER berada di tingkat yang rendah. ROE menunjukkan keuntungan yang rendah.'))


    @Rule(Fact(net_income_valued='loss'), Fact(der_valued='low'), Fact(roa_valued='low'))
    def ipo_rule_2234(self):
        self.declare(Fact(recommendation='Laba bersih menunjukkan kerugian. DER menunjukkan tingkat hutang yang rendah. ROA menunjukkan efisiensi rendah.'))


    @Rule(Fact(net_income_valued='loss'), Fact(der_valued='low'), Fact(roe_valued='low'))
    def ipo_rule_2235(self):
        self.declare(Fact(recommendation='Laba bersih menunjukkan kerugian. DER menunjukkan tingkat hutang yang rendah. ROE menunjukkan keuntungan yang rendah.'))


    @Rule(Fact(net_income_valued='loss'), Fact(roa_valued='low'), Fact(roe_valued='low'))
    def ipo_rule_2236(self):
        self.declare(Fact(recommendation='Laba bersih menunjukkan kerugian. ROA menunjukkan efisiensi rendah. ROE menunjukkan keuntungan yang rendah.'))


    @Rule(Fact(per_valued='low'), Fact(der_valued='low'), Fact(roa_valued='low'))
    def ipo_rule_2237(self):
        self.declare(Fact(recommendation='PER berada di tingkat yang rendah. DER menunjukkan tingkat hutang yang rendah. ROA menunjukkan efisiensi rendah.'))


    @Rule(Fact(per_valued='low'), Fact(der_valued='low'), Fact(roe_valued='low'))
    def ipo_rule_2238(self):
        self.declare(Fact(recommendation='PER berada di tingkat yang rendah. DER menunjukkan tingkat hutang yang rendah. ROE menunjukkan keuntungan yang rendah.'))


    @Rule(Fact(per_valued='low'), Fact(roa_valued='low'), Fact(roe_valued='low'))
    def ipo_rule_2239(self):
        self.declare(Fact(recommendation='PER berada di tingkat yang rendah. ROA menunjukkan efisiensi rendah. ROE menunjukkan keuntungan yang rendah.'))


    @Rule(Fact(der_valued='low'), Fact(roa_valued='low'), Fact(roe_valued='low'))
    def ipo_rule_2240(self):
        self.declare(Fact(recommendation='DER menunjukkan tingkat hutang yang rendah. ROA menunjukkan efisiensi rendah. ROE menunjukkan keuntungan yang rendah.'))


    @Rule(Fact(underwriter_valued='bad'), Fact(warrant_valued='good'), Fact(net_income_valued='profit'))
    def ipo_rule_2241(self):
        self.declare(Fact(recommendation='Underwriter berkualitas buruk. Warrant menunjukkan kondisi baik. Laba bersih menunjukkan keuntungan.'))


    @Rule(Fact(underwriter_valued='bad'), Fact(warrant_valued='good'), Fact(per_valued='high'))
    def ipo_rule_2242(self):
        self.declare(Fact(recommendation='Underwriter berkualitas buruk. Warrant menunjukkan kondisi baik. PER berada di tingkat yang tinggi.'))


    @Rule(Fact(underwriter_valued='bad'), Fact(warrant_valued='good'), Fact(der_valued='high'))
    def ipo_rule_2243(self):
        self.declare(Fact(recommendation='Underwriter berkualitas buruk. Warrant menunjukkan kondisi baik. DER menunjukkan tingkat hutang yang tinggi.'))


    @Rule(Fact(underwriter_valued='bad'), Fact(warrant_valued='good'), Fact(roa_valued='high'))
    def ipo_rule_2244(self):
        self.declare(Fact(recommendation='Underwriter berkualitas buruk. Warrant menunjukkan kondisi baik. ROA menunjukkan efisiensi tinggi.'))


    @Rule(Fact(underwriter_valued='bad'), Fact(warrant_valued='good'), Fact(roe_valued='high'))
    def ipo_rule_2245(self):
        self.declare(Fact(recommendation='Underwriter berkualitas buruk. Warrant menunjukkan kondisi baik. ROE menunjukkan keuntungan yang tinggi.'))


    @Rule(Fact(underwriter_valued='bad'), Fact(net_income_valued='profit'), Fact(per_valued='high'))
    def ipo_rule_2246(self):
        self.declare(Fact(recommendation='Underwriter berkualitas buruk. Laba bersih menunjukkan keuntungan. PER berada di tingkat yang tinggi.'))


    @Rule(Fact(underwriter_valued='bad'), Fact(net_income_valued='profit'), Fact(der_valued='high'))
    def ipo_rule_2247(self):
        self.declare(Fact(recommendation='Underwriter berkualitas buruk. Laba bersih menunjukkan keuntungan. DER menunjukkan tingkat hutang yang tinggi.'))


    @Rule(Fact(underwriter_valued='bad'), Fact(net_income_valued='profit'), Fact(roa_valued='high'))
    def ipo_rule_2248(self):
        self.declare(Fact(recommendation='Underwriter berkualitas buruk. Laba bersih menunjukkan keuntungan. ROA menunjukkan efisiensi tinggi.'))


    @Rule(Fact(underwriter_valued='bad'), Fact(net_income_valued='profit'), Fact(roe_valued='high'))
    def ipo_rule_2249(self):
        self.declare(Fact(recommendation='Underwriter berkualitas buruk. Laba bersih menunjukkan keuntungan. ROE menunjukkan keuntungan yang tinggi.'))


    @Rule(Fact(underwriter_valued='bad'), Fact(per_valued='high'), Fact(der_valued='high'))
    def ipo_rule_2250(self):
        self.declare(Fact(recommendation='Underwriter berkualitas buruk. PER berada di tingkat yang tinggi. DER menunjukkan tingkat hutang yang tinggi.'))


    @Rule(Fact(underwriter_valued='bad'), Fact(per_valued='high'), Fact(roa_valued='high'))
    def ipo_rule_2251(self):
        self.declare(Fact(recommendation='Underwriter berkualitas buruk. PER berada di tingkat yang tinggi. ROA menunjukkan efisiensi tinggi.'))


    @Rule(Fact(underwriter_valued='bad'), Fact(per_valued='high'), Fact(roe_valued='high'))
    def ipo_rule_2252(self):
        self.declare(Fact(recommendation='Underwriter berkualitas buruk. PER berada di tingkat yang tinggi. ROE menunjukkan keuntungan yang tinggi.'))


    @Rule(Fact(underwriter_valued='bad'), Fact(der_valued='high'), Fact(roa_valued='high'))
    def ipo_rule_2253(self):
        self.declare(Fact(recommendation='Underwriter berkualitas buruk. DER menunjukkan tingkat hutang yang tinggi. ROA menunjukkan efisiensi tinggi.'))


    @Rule(Fact(underwriter_valued='bad'), Fact(der_valued='high'), Fact(roe_valued='high'))
    def ipo_rule_2254(self):
        self.declare(Fact(recommendation='Underwriter berkualitas buruk. DER menunjukkan tingkat hutang yang tinggi. ROE menunjukkan keuntungan yang tinggi.'))


    @Rule(Fact(underwriter_valued='bad'), Fact(roa_valued='high'), Fact(roe_valued='high'))
    def ipo_rule_2255(self):
        self.declare(Fact(recommendation='Underwriter berkualitas buruk. ROA menunjukkan efisiensi tinggi. ROE menunjukkan keuntungan yang tinggi.'))


    @Rule(Fact(warrant_valued='good'), Fact(net_income_valued='profit'), Fact(per_valued='high'))
    def ipo_rule_2256(self):
        self.declare(Fact(recommendation='Warrant menunjukkan kondisi baik. Laba bersih menunjukkan keuntungan. PER berada di tingkat yang tinggi.'))


    @Rule(Fact(warrant_valued='good'), Fact(net_income_valued='profit'), Fact(der_valued='high'))
    def ipo_rule_2257(self):
        self.declare(Fact(recommendation='Warrant menunjukkan kondisi baik. Laba bersih menunjukkan keuntungan. DER menunjukkan tingkat hutang yang tinggi.'))


    @Rule(Fact(warrant_valued='good'), Fact(net_income_valued='profit'), Fact(roa_valued='high'))
    def ipo_rule_2258(self):
        self.declare(Fact(recommendation='Warrant menunjukkan kondisi baik. Laba bersih menunjukkan keuntungan. ROA menunjukkan efisiensi tinggi.'))


    @Rule(Fact(warrant_valued='good'), Fact(net_income_valued='profit'), Fact(roe_valued='high'))
    def ipo_rule_2259(self):
        self.declare(Fact(recommendation='Warrant menunjukkan kondisi baik. Laba bersih menunjukkan keuntungan. ROE menunjukkan keuntungan yang tinggi.'))


    @Rule(Fact(warrant_valued='good'), Fact(per_valued='high'), Fact(der_valued='high'))
    def ipo_rule_2260(self):
        self.declare(Fact(recommendation='Warrant menunjukkan kondisi baik. PER berada di tingkat yang tinggi. DER menunjukkan tingkat hutang yang tinggi.'))


    @Rule(Fact(warrant_valued='good'), Fact(per_valued='high'), Fact(roa_valued='high'))
    def ipo_rule_2261(self):
        self.declare(Fact(recommendation='Warrant menunjukkan kondisi baik. PER berada di tingkat yang tinggi. ROA menunjukkan efisiensi tinggi.'))


    @Rule(Fact(warrant_valued='good'), Fact(per_valued='high'), Fact(roe_valued='high'))
    def ipo_rule_2262(self):
        self.declare(Fact(recommendation='Warrant menunjukkan kondisi baik. PER berada di tingkat yang tinggi. ROE menunjukkan keuntungan yang tinggi.'))


    @Rule(Fact(warrant_valued='good'), Fact(der_valued='high'), Fact(roa_valued='high'))
    def ipo_rule_2263(self):
        self.declare(Fact(recommendation='Warrant menunjukkan kondisi baik. DER menunjukkan tingkat hutang yang tinggi. ROA menunjukkan efisiensi tinggi.'))


    @Rule(Fact(warrant_valued='good'), Fact(der_valued='high'), Fact(roe_valued='high'))
    def ipo_rule_2264(self):
        self.declare(Fact(recommendation='Warrant menunjukkan kondisi baik. DER menunjukkan tingkat hutang yang tinggi. ROE menunjukkan keuntungan yang tinggi.'))


    @Rule(Fact(warrant_valued='good'), Fact(roa_valued='high'), Fact(roe_valued='high'))
    def ipo_rule_2265(self):
        self.declare(Fact(recommendation='Warrant menunjukkan kondisi baik. ROA menunjukkan efisiensi tinggi. ROE menunjukkan keuntungan yang tinggi.'))


    @Rule(Fact(net_income_valued='profit'), Fact(per_valued='high'), Fact(der_valued='high'))
    def ipo_rule_2266(self):
        self.declare(Fact(recommendation='Laba bersih menunjukkan keuntungan. PER berada di tingkat yang tinggi. DER menunjukkan tingkat hutang yang tinggi.'))


    @Rule(Fact(net_income_valued='profit'), Fact(per_valued='high'), Fact(roa_valued='high'))
    def ipo_rule_2267(self):
        self.declare(Fact(recommendation='Laba bersih menunjukkan keuntungan. PER berada di tingkat yang tinggi. ROA menunjukkan efisiensi tinggi.'))


    @Rule(Fact(net_income_valued='profit'), Fact(per_valued='high'), Fact(roe_valued='high'))
    def ipo_rule_2268(self):
        self.declare(Fact(recommendation='Laba bersih menunjukkan keuntungan. PER berada di tingkat yang tinggi. ROE menunjukkan keuntungan yang tinggi.'))


    @Rule(Fact(net_income_valued='profit'), Fact(der_valued='high'), Fact(roa_valued='high'))
    def ipo_rule_2269(self):
        self.declare(Fact(recommendation='Laba bersih menunjukkan keuntungan. DER menunjukkan tingkat hutang yang tinggi. ROA menunjukkan efisiensi tinggi.'))


    @Rule(Fact(net_income_valued='profit'), Fact(der_valued='high'), Fact(roe_valued='high'))
    def ipo_rule_2270(self):
        self.declare(Fact(recommendation='Laba bersih menunjukkan keuntungan. DER menunjukkan tingkat hutang yang tinggi. ROE menunjukkan keuntungan yang tinggi.'))


    @Rule(Fact(net_income_valued='profit'), Fact(roa_valued='high'), Fact(roe_valued='high'))
    def ipo_rule_2271(self):
        self.declare(Fact(recommendation='Laba bersih menunjukkan keuntungan. ROA menunjukkan efisiensi tinggi. ROE menunjukkan keuntungan yang tinggi.'))


    @Rule(Fact(per_valued='high'), Fact(der_valued='high'), Fact(roa_valued='high'))
    def ipo_rule_2272(self):
        self.declare(Fact(recommendation='PER berada di tingkat yang tinggi. DER menunjukkan tingkat hutang yang tinggi. ROA menunjukkan efisiensi tinggi.'))


    @Rule(Fact(per_valued='high'), Fact(der_valued='high'), Fact(roe_valued='high'))
    def ipo_rule_2273(self):
        self.declare(Fact(recommendation='PER berada di tingkat yang tinggi. DER menunjukkan tingkat hutang yang tinggi. ROE menunjukkan keuntungan yang tinggi.'))


    @Rule(Fact(per_valued='high'), Fact(roa_valued='high'), Fact(roe_valued='high'))
    def ipo_rule_2274(self):
        self.declare(Fact(recommendation='PER berada di tingkat yang tinggi. ROA menunjukkan efisiensi tinggi. ROE menunjukkan keuntungan yang tinggi.'))


    @Rule(Fact(der_valued='high'), Fact(roa_valued='high'), Fact(roe_valued='high'))
    def ipo_rule_2275(self):
        self.declare(Fact(recommendation='DER menunjukkan tingkat hutang yang tinggi. ROA menunjukkan efisiensi tinggi. ROE menunjukkan keuntungan yang tinggi.'))


    @Rule(Fact(underwriter_valued='bad'), Fact(warrant_valued='good'), Fact(net_income_valued='profit'))
    def ipo_rule_2276(self):
        self.declare(Fact(recommendation='Underwriter berkualitas buruk. Warrant menunjukkan kondisi baik. Laba bersih menunjukkan keuntungan.'))


    @Rule(Fact(underwriter_valued='bad'), Fact(warrant_valued='good'), Fact(per_valued='high'))
    def ipo_rule_2277(self):
        self.declare(Fact(recommendation='Underwriter berkualitas buruk. Warrant menunjukkan kondisi baik. PER berada di tingkat yang tinggi.'))


    @Rule(Fact(underwriter_valued='bad'), Fact(warrant_valued='good'), Fact(der_valued='high'))
    def ipo_rule_2278(self):
        self.declare(Fact(recommendation='Underwriter berkualitas buruk. Warrant menunjukkan kondisi baik. DER menunjukkan tingkat hutang yang tinggi.'))


    @Rule(Fact(underwriter_valued='bad'), Fact(warrant_valued='good'), Fact(roa_valued='high'))
    def ipo_rule_2279(self):
        self.declare(Fact(recommendation='Underwriter berkualitas buruk. Warrant menunjukkan kondisi baik. ROA menunjukkan efisiensi tinggi.'))


    @Rule(Fact(underwriter_valued='bad'), Fact(warrant_valued='good'), Fact(roe_valued='low'))
    def ipo_rule_2280(self):
        self.declare(Fact(recommendation='Underwriter berkualitas buruk. Warrant menunjukkan kondisi baik. ROE menunjukkan keuntungan yang rendah.'))


    @Rule(Fact(underwriter_valued='bad'), Fact(net_income_valued='profit'), Fact(per_valued='high'))
    def ipo_rule_2281(self):
        self.declare(Fact(recommendation='Underwriter berkualitas buruk. Laba bersih menunjukkan keuntungan. PER berada di tingkat yang tinggi.'))


    @Rule(Fact(underwriter_valued='bad'), Fact(net_income_valued='profit'), Fact(der_valued='high'))
    def ipo_rule_2282(self):
        self.declare(Fact(recommendation='Underwriter berkualitas buruk. Laba bersih menunjukkan keuntungan. DER menunjukkan tingkat hutang yang tinggi.'))


    @Rule(Fact(underwriter_valued='bad'), Fact(net_income_valued='profit'), Fact(roa_valued='high'))
    def ipo_rule_2283(self):
        self.declare(Fact(recommendation='Underwriter berkualitas buruk. Laba bersih menunjukkan keuntungan. ROA menunjukkan efisiensi tinggi.'))


    @Rule(Fact(underwriter_valued='bad'), Fact(net_income_valued='profit'), Fact(roe_valued='low'))
    def ipo_rule_2284(self):
        self.declare(Fact(recommendation='Underwriter berkualitas buruk. Laba bersih menunjukkan keuntungan. ROE menunjukkan keuntungan yang rendah.'))


    @Rule(Fact(underwriter_valued='bad'), Fact(per_valued='high'), Fact(der_valued='high'))
    def ipo_rule_2285(self):
        self.declare(Fact(recommendation='Underwriter berkualitas buruk. PER berada di tingkat yang tinggi. DER menunjukkan tingkat hutang yang tinggi.'))


    @Rule(Fact(underwriter_valued='bad'), Fact(per_valued='high'), Fact(roa_valued='high'))
    def ipo_rule_2286(self):
        self.declare(Fact(recommendation='Underwriter berkualitas buruk. PER berada di tingkat yang tinggi. ROA menunjukkan efisiensi tinggi.'))


    @Rule(Fact(underwriter_valued='bad'), Fact(per_valued='high'), Fact(roe_valued='low'))
    def ipo_rule_2287(self):
        self.declare(Fact(recommendation='Underwriter berkualitas buruk. PER berada di tingkat yang tinggi. ROE menunjukkan keuntungan yang rendah.'))


    @Rule(Fact(underwriter_valued='bad'), Fact(der_valued='high'), Fact(roa_valued='high'))
    def ipo_rule_2288(self):
        self.declare(Fact(recommendation='Underwriter berkualitas buruk. DER menunjukkan tingkat hutang yang tinggi. ROA menunjukkan efisiensi tinggi.'))


    @Rule(Fact(underwriter_valued='bad'), Fact(der_valued='high'), Fact(roe_valued='low'))
    def ipo_rule_2289(self):
        self.declare(Fact(recommendation='Underwriter berkualitas buruk. DER menunjukkan tingkat hutang yang tinggi. ROE menunjukkan keuntungan yang rendah.'))


    @Rule(Fact(underwriter_valued='bad'), Fact(roa_valued='high'), Fact(roe_valued='low'))
    def ipo_rule_2290(self):
        self.declare(Fact(recommendation='Underwriter berkualitas buruk. ROA menunjukkan efisiensi tinggi. ROE menunjukkan keuntungan yang rendah.'))


    @Rule(Fact(warrant_valued='good'), Fact(net_income_valued='profit'), Fact(per_valued='high'))
    def ipo_rule_2291(self):
        self.declare(Fact(recommendation='Warrant menunjukkan kondisi baik. Laba bersih menunjukkan keuntungan. PER berada di tingkat yang tinggi.'))


    @Rule(Fact(warrant_valued='good'), Fact(net_income_valued='profit'), Fact(der_valued='high'))
    def ipo_rule_2292(self):
        self.declare(Fact(recommendation='Warrant menunjukkan kondisi baik. Laba bersih menunjukkan keuntungan. DER menunjukkan tingkat hutang yang tinggi.'))


    @Rule(Fact(warrant_valued='good'), Fact(net_income_valued='profit'), Fact(roa_valued='high'))
    def ipo_rule_2293(self):
        self.declare(Fact(recommendation='Warrant menunjukkan kondisi baik. Laba bersih menunjukkan keuntungan. ROA menunjukkan efisiensi tinggi.'))


    @Rule(Fact(warrant_valued='good'), Fact(net_income_valued='profit'), Fact(roe_valued='low'))
    def ipo_rule_2294(self):
        self.declare(Fact(recommendation='Warrant menunjukkan kondisi baik. Laba bersih menunjukkan keuntungan. ROE menunjukkan keuntungan yang rendah.'))


    @Rule(Fact(warrant_valued='good'), Fact(per_valued='high'), Fact(der_valued='high'))
    def ipo_rule_2295(self):
        self.declare(Fact(recommendation='Warrant menunjukkan kondisi baik. PER berada di tingkat yang tinggi. DER menunjukkan tingkat hutang yang tinggi.'))


    @Rule(Fact(warrant_valued='good'), Fact(per_valued='high'), Fact(roa_valued='high'))
    def ipo_rule_2296(self):
        self.declare(Fact(recommendation='Warrant menunjukkan kondisi baik. PER berada di tingkat yang tinggi. ROA menunjukkan efisiensi tinggi.'))


    @Rule(Fact(warrant_valued='good'), Fact(per_valued='high'), Fact(roe_valued='low'))
    def ipo_rule_2297(self):
        self.declare(Fact(recommendation='Warrant menunjukkan kondisi baik. PER berada di tingkat yang tinggi. ROE menunjukkan keuntungan yang rendah.'))


    @Rule(Fact(warrant_valued='good'), Fact(der_valued='high'), Fact(roa_valued='high'))
    def ipo_rule_2298(self):
        self.declare(Fact(recommendation='Warrant menunjukkan kondisi baik. DER menunjukkan tingkat hutang yang tinggi. ROA menunjukkan efisiensi tinggi.'))


    @Rule(Fact(warrant_valued='good'), Fact(der_valued='high'), Fact(roe_valued='low'))
    def ipo_rule_2299(self):
        self.declare(Fact(recommendation='Warrant menunjukkan kondisi baik. DER menunjukkan tingkat hutang yang tinggi. ROE menunjukkan keuntungan yang rendah.'))


    @Rule(Fact(warrant_valued='good'), Fact(roa_valued='high'), Fact(roe_valued='low'))
    def ipo_rule_2300(self):
        self.declare(Fact(recommendation='Warrant menunjukkan kondisi baik. ROA menunjukkan efisiensi tinggi. ROE menunjukkan keuntungan yang rendah.'))


    @Rule(Fact(net_income_valued='profit'), Fact(per_valued='high'), Fact(der_valued='high'))
    def ipo_rule_2301(self):
        self.declare(Fact(recommendation='Laba bersih menunjukkan keuntungan. PER berada di tingkat yang tinggi. DER menunjukkan tingkat hutang yang tinggi.'))


    @Rule(Fact(net_income_valued='profit'), Fact(per_valued='high'), Fact(roa_valued='high'))
    def ipo_rule_2302(self):
        self.declare(Fact(recommendation='Laba bersih menunjukkan keuntungan. PER berada di tingkat yang tinggi. ROA menunjukkan efisiensi tinggi.'))


    @Rule(Fact(net_income_valued='profit'), Fact(per_valued='high'), Fact(roe_valued='low'))
    def ipo_rule_2303(self):
        self.declare(Fact(recommendation='Laba bersih menunjukkan keuntungan. PER berada di tingkat yang tinggi. ROE menunjukkan keuntungan yang rendah.'))


    @Rule(Fact(net_income_valued='profit'), Fact(der_valued='high'), Fact(roa_valued='high'))
    def ipo_rule_2304(self):
        self.declare(Fact(recommendation='Laba bersih menunjukkan keuntungan. DER menunjukkan tingkat hutang yang tinggi. ROA menunjukkan efisiensi tinggi.'))


    @Rule(Fact(net_income_valued='profit'), Fact(der_valued='high'), Fact(roe_valued='low'))
    def ipo_rule_2305(self):
        self.declare(Fact(recommendation='Laba bersih menunjukkan keuntungan. DER menunjukkan tingkat hutang yang tinggi. ROE menunjukkan keuntungan yang rendah.'))


    @Rule(Fact(net_income_valued='profit'), Fact(roa_valued='high'), Fact(roe_valued='low'))
    def ipo_rule_2306(self):
        self.declare(Fact(recommendation='Laba bersih menunjukkan keuntungan. ROA menunjukkan efisiensi tinggi. ROE menunjukkan keuntungan yang rendah.'))


    @Rule(Fact(per_valued='high'), Fact(der_valued='high'), Fact(roa_valued='high'))
    def ipo_rule_2307(self):
        self.declare(Fact(recommendation='PER berada di tingkat yang tinggi. DER menunjukkan tingkat hutang yang tinggi. ROA menunjukkan efisiensi tinggi.'))


    @Rule(Fact(per_valued='high'), Fact(der_valued='high'), Fact(roe_valued='low'))
    def ipo_rule_2308(self):
        self.declare(Fact(recommendation='PER berada di tingkat yang tinggi. DER menunjukkan tingkat hutang yang tinggi. ROE menunjukkan keuntungan yang rendah.'))


    @Rule(Fact(per_valued='high'), Fact(roa_valued='high'), Fact(roe_valued='low'))
    def ipo_rule_2309(self):
        self.declare(Fact(recommendation='PER berada di tingkat yang tinggi. ROA menunjukkan efisiensi tinggi. ROE menunjukkan keuntungan yang rendah.'))


    @Rule(Fact(der_valued='high'), Fact(roa_valued='high'), Fact(roe_valued='low'))
    def ipo_rule_2310(self):
        self.declare(Fact(recommendation='DER menunjukkan tingkat hutang yang tinggi. ROA menunjukkan efisiensi tinggi. ROE menunjukkan keuntungan yang rendah.'))


    @Rule(Fact(underwriter_valued='bad'), Fact(warrant_valued='good'), Fact(net_income_valued='profit'))
    def ipo_rule_2311(self):
        self.declare(Fact(recommendation='Underwriter berkualitas buruk. Warrant menunjukkan kondisi baik. Laba bersih menunjukkan keuntungan.'))


    @Rule(Fact(underwriter_valued='bad'), Fact(warrant_valued='good'), Fact(per_valued='high'))
    def ipo_rule_2312(self):
        self.declare(Fact(recommendation='Underwriter berkualitas buruk. Warrant menunjukkan kondisi baik. PER berada di tingkat yang tinggi.'))


    @Rule(Fact(underwriter_valued='bad'), Fact(warrant_valued='good'), Fact(der_valued='high'))
    def ipo_rule_2313(self):
        self.declare(Fact(recommendation='Underwriter berkualitas buruk. Warrant menunjukkan kondisi baik. DER menunjukkan tingkat hutang yang tinggi.'))


    @Rule(Fact(underwriter_valued='bad'), Fact(warrant_valued='good'), Fact(roa_valued='low'))
    def ipo_rule_2314(self):
        self.declare(Fact(recommendation='Underwriter berkualitas buruk. Warrant menunjukkan kondisi baik. ROA menunjukkan efisiensi rendah.'))


    @Rule(Fact(underwriter_valued='bad'), Fact(warrant_valued='good'), Fact(roe_valued='high'))
    def ipo_rule_2315(self):
        self.declare(Fact(recommendation='Underwriter berkualitas buruk. Warrant menunjukkan kondisi baik. ROE menunjukkan keuntungan yang tinggi.'))


    @Rule(Fact(underwriter_valued='bad'), Fact(net_income_valued='profit'), Fact(per_valued='high'))
    def ipo_rule_2316(self):
        self.declare(Fact(recommendation='Underwriter berkualitas buruk. Laba bersih menunjukkan keuntungan. PER berada di tingkat yang tinggi.'))


    @Rule(Fact(underwriter_valued='bad'), Fact(net_income_valued='profit'), Fact(der_valued='high'))
    def ipo_rule_2317(self):
        self.declare(Fact(recommendation='Underwriter berkualitas buruk. Laba bersih menunjukkan keuntungan. DER menunjukkan tingkat hutang yang tinggi.'))


    @Rule(Fact(underwriter_valued='bad'), Fact(net_income_valued='profit'), Fact(roa_valued='low'))
    def ipo_rule_2318(self):
        self.declare(Fact(recommendation='Underwriter berkualitas buruk. Laba bersih menunjukkan keuntungan. ROA menunjukkan efisiensi rendah.'))


    @Rule(Fact(underwriter_valued='bad'), Fact(net_income_valued='profit'), Fact(roe_valued='high'))
    def ipo_rule_2319(self):
        self.declare(Fact(recommendation='Underwriter berkualitas buruk. Laba bersih menunjukkan keuntungan. ROE menunjukkan keuntungan yang tinggi.'))


    @Rule(Fact(underwriter_valued='bad'), Fact(per_valued='high'), Fact(der_valued='high'))
    def ipo_rule_2320(self):
        self.declare(Fact(recommendation='Underwriter berkualitas buruk. PER berada di tingkat yang tinggi. DER menunjukkan tingkat hutang yang tinggi.'))


    @Rule(Fact(underwriter_valued='bad'), Fact(per_valued='high'), Fact(roa_valued='low'))
    def ipo_rule_2321(self):
        self.declare(Fact(recommendation='Underwriter berkualitas buruk. PER berada di tingkat yang tinggi. ROA menunjukkan efisiensi rendah.'))


    @Rule(Fact(underwriter_valued='bad'), Fact(per_valued='high'), Fact(roe_valued='high'))
    def ipo_rule_2322(self):
        self.declare(Fact(recommendation='Underwriter berkualitas buruk. PER berada di tingkat yang tinggi. ROE menunjukkan keuntungan yang tinggi.'))


    @Rule(Fact(underwriter_valued='bad'), Fact(der_valued='high'), Fact(roa_valued='low'))
    def ipo_rule_2323(self):
        self.declare(Fact(recommendation='Underwriter berkualitas buruk. DER menunjukkan tingkat hutang yang tinggi. ROA menunjukkan efisiensi rendah.'))


    @Rule(Fact(underwriter_valued='bad'), Fact(der_valued='high'), Fact(roe_valued='high'))
    def ipo_rule_2324(self):
        self.declare(Fact(recommendation='Underwriter berkualitas buruk. DER menunjukkan tingkat hutang yang tinggi. ROE menunjukkan keuntungan yang tinggi.'))


    @Rule(Fact(underwriter_valued='bad'), Fact(roa_valued='low'), Fact(roe_valued='high'))
    def ipo_rule_2325(self):
        self.declare(Fact(recommendation='Underwriter berkualitas buruk. ROA menunjukkan efisiensi rendah. ROE menunjukkan keuntungan yang tinggi.'))


    @Rule(Fact(warrant_valued='good'), Fact(net_income_valued='profit'), Fact(per_valued='high'))
    def ipo_rule_2326(self):
        self.declare(Fact(recommendation='Warrant menunjukkan kondisi baik. Laba bersih menunjukkan keuntungan. PER berada di tingkat yang tinggi.'))


    @Rule(Fact(warrant_valued='good'), Fact(net_income_valued='profit'), Fact(der_valued='high'))
    def ipo_rule_2327(self):
        self.declare(Fact(recommendation='Warrant menunjukkan kondisi baik. Laba bersih menunjukkan keuntungan. DER menunjukkan tingkat hutang yang tinggi.'))


    @Rule(Fact(warrant_valued='good'), Fact(net_income_valued='profit'), Fact(roa_valued='low'))
    def ipo_rule_2328(self):
        self.declare(Fact(recommendation='Warrant menunjukkan kondisi baik. Laba bersih menunjukkan keuntungan. ROA menunjukkan efisiensi rendah.'))


    @Rule(Fact(warrant_valued='good'), Fact(net_income_valued='profit'), Fact(roe_valued='high'))
    def ipo_rule_2329(self):
        self.declare(Fact(recommendation='Warrant menunjukkan kondisi baik. Laba bersih menunjukkan keuntungan. ROE menunjukkan keuntungan yang tinggi.'))


    @Rule(Fact(warrant_valued='good'), Fact(per_valued='high'), Fact(der_valued='high'))
    def ipo_rule_2330(self):
        self.declare(Fact(recommendation='Warrant menunjukkan kondisi baik. PER berada di tingkat yang tinggi. DER menunjukkan tingkat hutang yang tinggi.'))


    @Rule(Fact(warrant_valued='good'), Fact(per_valued='high'), Fact(roa_valued='low'))
    def ipo_rule_2331(self):
        self.declare(Fact(recommendation='Warrant menunjukkan kondisi baik. PER berada di tingkat yang tinggi. ROA menunjukkan efisiensi rendah.'))


    @Rule(Fact(warrant_valued='good'), Fact(per_valued='high'), Fact(roe_valued='high'))
    def ipo_rule_2332(self):
        self.declare(Fact(recommendation='Warrant menunjukkan kondisi baik. PER berada di tingkat yang tinggi. ROE menunjukkan keuntungan yang tinggi.'))


    @Rule(Fact(warrant_valued='good'), Fact(der_valued='high'), Fact(roa_valued='low'))
    def ipo_rule_2333(self):
        self.declare(Fact(recommendation='Warrant menunjukkan kondisi baik. DER menunjukkan tingkat hutang yang tinggi. ROA menunjukkan efisiensi rendah.'))


    @Rule(Fact(warrant_valued='good'), Fact(der_valued='high'), Fact(roe_valued='high'))
    def ipo_rule_2334(self):
        self.declare(Fact(recommendation='Warrant menunjukkan kondisi baik. DER menunjukkan tingkat hutang yang tinggi. ROE menunjukkan keuntungan yang tinggi.'))


    @Rule(Fact(warrant_valued='good'), Fact(roa_valued='low'), Fact(roe_valued='high'))
    def ipo_rule_2335(self):
        self.declare(Fact(recommendation='Warrant menunjukkan kondisi baik. ROA menunjukkan efisiensi rendah. ROE menunjukkan keuntungan yang tinggi.'))


    @Rule(Fact(net_income_valued='profit'), Fact(per_valued='high'), Fact(der_valued='high'))
    def ipo_rule_2336(self):
        self.declare(Fact(recommendation='Laba bersih menunjukkan keuntungan. PER berada di tingkat yang tinggi. DER menunjukkan tingkat hutang yang tinggi.'))


    @Rule(Fact(net_income_valued='profit'), Fact(per_valued='high'), Fact(roa_valued='low'))
    def ipo_rule_2337(self):
        self.declare(Fact(recommendation='Laba bersih menunjukkan keuntungan. PER berada di tingkat yang tinggi. ROA menunjukkan efisiensi rendah.'))


    @Rule(Fact(net_income_valued='profit'), Fact(per_valued='high'), Fact(roe_valued='high'))
    def ipo_rule_2338(self):
        self.declare(Fact(recommendation='Laba bersih menunjukkan keuntungan. PER berada di tingkat yang tinggi. ROE menunjukkan keuntungan yang tinggi.'))


    @Rule(Fact(net_income_valued='profit'), Fact(der_valued='high'), Fact(roa_valued='low'))
    def ipo_rule_2339(self):
        self.declare(Fact(recommendation='Laba bersih menunjukkan keuntungan. DER menunjukkan tingkat hutang yang tinggi. ROA menunjukkan efisiensi rendah.'))


    @Rule(Fact(net_income_valued='profit'), Fact(der_valued='high'), Fact(roe_valued='high'))
    def ipo_rule_2340(self):
        self.declare(Fact(recommendation='Laba bersih menunjukkan keuntungan. DER menunjukkan tingkat hutang yang tinggi. ROE menunjukkan keuntungan yang tinggi.'))


    @Rule(Fact(net_income_valued='profit'), Fact(roa_valued='low'), Fact(roe_valued='high'))
    def ipo_rule_2341(self):
        self.declare(Fact(recommendation='Laba bersih menunjukkan keuntungan. ROA menunjukkan efisiensi rendah. ROE menunjukkan keuntungan yang tinggi.'))


    @Rule(Fact(per_valued='high'), Fact(der_valued='high'), Fact(roa_valued='low'))
    def ipo_rule_2342(self):
        self.declare(Fact(recommendation='PER berada di tingkat yang tinggi. DER menunjukkan tingkat hutang yang tinggi. ROA menunjukkan efisiensi rendah.'))


    @Rule(Fact(per_valued='high'), Fact(der_valued='high'), Fact(roe_valued='high'))
    def ipo_rule_2343(self):
        self.declare(Fact(recommendation='PER berada di tingkat yang tinggi. DER menunjukkan tingkat hutang yang tinggi. ROE menunjukkan keuntungan yang tinggi.'))


    @Rule(Fact(per_valued='high'), Fact(roa_valued='low'), Fact(roe_valued='high'))
    def ipo_rule_2344(self):
        self.declare(Fact(recommendation='PER berada di tingkat yang tinggi. ROA menunjukkan efisiensi rendah. ROE menunjukkan keuntungan yang tinggi.'))


    @Rule(Fact(der_valued='high'), Fact(roa_valued='low'), Fact(roe_valued='high'))
    def ipo_rule_2345(self):
        self.declare(Fact(recommendation='DER menunjukkan tingkat hutang yang tinggi. ROA menunjukkan efisiensi rendah. ROE menunjukkan keuntungan yang tinggi.'))


    @Rule(Fact(underwriter_valued='bad'), Fact(warrant_valued='good'), Fact(net_income_valued='profit'))
    def ipo_rule_2346(self):
        self.declare(Fact(recommendation='Underwriter berkualitas buruk. Warrant menunjukkan kondisi baik. Laba bersih menunjukkan keuntungan.'))


    @Rule(Fact(underwriter_valued='bad'), Fact(warrant_valued='good'), Fact(per_valued='high'))
    def ipo_rule_2347(self):
        self.declare(Fact(recommendation='Underwriter berkualitas buruk. Warrant menunjukkan kondisi baik. PER berada di tingkat yang tinggi.'))


    @Rule(Fact(underwriter_valued='bad'), Fact(warrant_valued='good'), Fact(der_valued='high'))
    def ipo_rule_2348(self):
        self.declare(Fact(recommendation='Underwriter berkualitas buruk. Warrant menunjukkan kondisi baik. DER menunjukkan tingkat hutang yang tinggi.'))


    @Rule(Fact(underwriter_valued='bad'), Fact(warrant_valued='good'), Fact(roa_valued='low'))
    def ipo_rule_2349(self):
        self.declare(Fact(recommendation='Underwriter berkualitas buruk. Warrant menunjukkan kondisi baik. ROA menunjukkan efisiensi rendah.'))


    @Rule(Fact(underwriter_valued='bad'), Fact(warrant_valued='good'), Fact(roe_valued='low'))
    def ipo_rule_2350(self):
        self.declare(Fact(recommendation='Underwriter berkualitas buruk. Warrant menunjukkan kondisi baik. ROE menunjukkan keuntungan yang rendah.'))


    @Rule(Fact(underwriter_valued='bad'), Fact(net_income_valued='profit'), Fact(per_valued='high'))
    def ipo_rule_2351(self):
        self.declare(Fact(recommendation='Underwriter berkualitas buruk. Laba bersih menunjukkan keuntungan. PER berada di tingkat yang tinggi.'))


    @Rule(Fact(underwriter_valued='bad'), Fact(net_income_valued='profit'), Fact(der_valued='high'))
    def ipo_rule_2352(self):
        self.declare(Fact(recommendation='Underwriter berkualitas buruk. Laba bersih menunjukkan keuntungan. DER menunjukkan tingkat hutang yang tinggi.'))


    @Rule(Fact(underwriter_valued='bad'), Fact(net_income_valued='profit'), Fact(roa_valued='low'))
    def ipo_rule_2353(self):
        self.declare(Fact(recommendation='Underwriter berkualitas buruk. Laba bersih menunjukkan keuntungan. ROA menunjukkan efisiensi rendah.'))


    @Rule(Fact(underwriter_valued='bad'), Fact(net_income_valued='profit'), Fact(roe_valued='low'))
    def ipo_rule_2354(self):
        self.declare(Fact(recommendation='Underwriter berkualitas buruk. Laba bersih menunjukkan keuntungan. ROE menunjukkan keuntungan yang rendah.'))


    @Rule(Fact(underwriter_valued='bad'), Fact(per_valued='high'), Fact(der_valued='high'))
    def ipo_rule_2355(self):
        self.declare(Fact(recommendation='Underwriter berkualitas buruk. PER berada di tingkat yang tinggi. DER menunjukkan tingkat hutang yang tinggi.'))


    @Rule(Fact(underwriter_valued='bad'), Fact(per_valued='high'), Fact(roa_valued='low'))
    def ipo_rule_2356(self):
        self.declare(Fact(recommendation='Underwriter berkualitas buruk. PER berada di tingkat yang tinggi. ROA menunjukkan efisiensi rendah.'))


    @Rule(Fact(underwriter_valued='bad'), Fact(per_valued='high'), Fact(roe_valued='low'))
    def ipo_rule_2357(self):
        self.declare(Fact(recommendation='Underwriter berkualitas buruk. PER berada di tingkat yang tinggi. ROE menunjukkan keuntungan yang rendah.'))


    @Rule(Fact(underwriter_valued='bad'), Fact(der_valued='high'), Fact(roa_valued='low'))
    def ipo_rule_2358(self):
        self.declare(Fact(recommendation='Underwriter berkualitas buruk. DER menunjukkan tingkat hutang yang tinggi. ROA menunjukkan efisiensi rendah.'))


    @Rule(Fact(underwriter_valued='bad'), Fact(der_valued='high'), Fact(roe_valued='low'))
    def ipo_rule_2359(self):
        self.declare(Fact(recommendation='Underwriter berkualitas buruk. DER menunjukkan tingkat hutang yang tinggi. ROE menunjukkan keuntungan yang rendah.'))


    @Rule(Fact(underwriter_valued='bad'), Fact(roa_valued='low'), Fact(roe_valued='low'))
    def ipo_rule_2360(self):
        self.declare(Fact(recommendation='Underwriter berkualitas buruk. ROA menunjukkan efisiensi rendah. ROE menunjukkan keuntungan yang rendah.'))


    @Rule(Fact(warrant_valued='good'), Fact(net_income_valued='profit'), Fact(per_valued='high'))
    def ipo_rule_2361(self):
        self.declare(Fact(recommendation='Warrant menunjukkan kondisi baik. Laba bersih menunjukkan keuntungan. PER berada di tingkat yang tinggi.'))


    @Rule(Fact(warrant_valued='good'), Fact(net_income_valued='profit'), Fact(der_valued='high'))
    def ipo_rule_2362(self):
        self.declare(Fact(recommendation='Warrant menunjukkan kondisi baik. Laba bersih menunjukkan keuntungan. DER menunjukkan tingkat hutang yang tinggi.'))


    @Rule(Fact(warrant_valued='good'), Fact(net_income_valued='profit'), Fact(roa_valued='low'))
    def ipo_rule_2363(self):
        self.declare(Fact(recommendation='Warrant menunjukkan kondisi baik. Laba bersih menunjukkan keuntungan. ROA menunjukkan efisiensi rendah.'))


    @Rule(Fact(warrant_valued='good'), Fact(net_income_valued='profit'), Fact(roe_valued='low'))
    def ipo_rule_2364(self):
        self.declare(Fact(recommendation='Warrant menunjukkan kondisi baik. Laba bersih menunjukkan keuntungan. ROE menunjukkan keuntungan yang rendah.'))


    @Rule(Fact(warrant_valued='good'), Fact(per_valued='high'), Fact(der_valued='high'))
    def ipo_rule_2365(self):
        self.declare(Fact(recommendation='Warrant menunjukkan kondisi baik. PER berada di tingkat yang tinggi. DER menunjukkan tingkat hutang yang tinggi.'))


    @Rule(Fact(warrant_valued='good'), Fact(per_valued='high'), Fact(roa_valued='low'))
    def ipo_rule_2366(self):
        self.declare(Fact(recommendation='Warrant menunjukkan kondisi baik. PER berada di tingkat yang tinggi. ROA menunjukkan efisiensi rendah.'))


    @Rule(Fact(warrant_valued='good'), Fact(per_valued='high'), Fact(roe_valued='low'))
    def ipo_rule_2367(self):
        self.declare(Fact(recommendation='Warrant menunjukkan kondisi baik. PER berada di tingkat yang tinggi. ROE menunjukkan keuntungan yang rendah.'))


    @Rule(Fact(warrant_valued='good'), Fact(der_valued='high'), Fact(roa_valued='low'))
    def ipo_rule_2368(self):
        self.declare(Fact(recommendation='Warrant menunjukkan kondisi baik. DER menunjukkan tingkat hutang yang tinggi. ROA menunjukkan efisiensi rendah.'))


    @Rule(Fact(warrant_valued='good'), Fact(der_valued='high'), Fact(roe_valued='low'))
    def ipo_rule_2369(self):
        self.declare(Fact(recommendation='Warrant menunjukkan kondisi baik. DER menunjukkan tingkat hutang yang tinggi. ROE menunjukkan keuntungan yang rendah.'))


    @Rule(Fact(warrant_valued='good'), Fact(roa_valued='low'), Fact(roe_valued='low'))
    def ipo_rule_2370(self):
        self.declare(Fact(recommendation='Warrant menunjukkan kondisi baik. ROA menunjukkan efisiensi rendah. ROE menunjukkan keuntungan yang rendah.'))


    @Rule(Fact(net_income_valued='profit'), Fact(per_valued='high'), Fact(der_valued='high'))
    def ipo_rule_2371(self):
        self.declare(Fact(recommendation='Laba bersih menunjukkan keuntungan. PER berada di tingkat yang tinggi. DER menunjukkan tingkat hutang yang tinggi.'))


    @Rule(Fact(net_income_valued='profit'), Fact(per_valued='high'), Fact(roa_valued='low'))
    def ipo_rule_2372(self):
        self.declare(Fact(recommendation='Laba bersih menunjukkan keuntungan. PER berada di tingkat yang tinggi. ROA menunjukkan efisiensi rendah.'))


    @Rule(Fact(net_income_valued='profit'), Fact(per_valued='high'), Fact(roe_valued='low'))
    def ipo_rule_2373(self):
        self.declare(Fact(recommendation='Laba bersih menunjukkan keuntungan. PER berada di tingkat yang tinggi. ROE menunjukkan keuntungan yang rendah.'))


    @Rule(Fact(net_income_valued='profit'), Fact(der_valued='high'), Fact(roa_valued='low'))
    def ipo_rule_2374(self):
        self.declare(Fact(recommendation='Laba bersih menunjukkan keuntungan. DER menunjukkan tingkat hutang yang tinggi. ROA menunjukkan efisiensi rendah.'))


    @Rule(Fact(net_income_valued='profit'), Fact(der_valued='high'), Fact(roe_valued='low'))
    def ipo_rule_2375(self):
        self.declare(Fact(recommendation='Laba bersih menunjukkan keuntungan. DER menunjukkan tingkat hutang yang tinggi. ROE menunjukkan keuntungan yang rendah.'))


    @Rule(Fact(net_income_valued='profit'), Fact(roa_valued='low'), Fact(roe_valued='low'))
    def ipo_rule_2376(self):
        self.declare(Fact(recommendation='Laba bersih menunjukkan keuntungan. ROA menunjukkan efisiensi rendah. ROE menunjukkan keuntungan yang rendah.'))


    @Rule(Fact(per_valued='high'), Fact(der_valued='high'), Fact(roa_valued='low'))
    def ipo_rule_2377(self):
        self.declare(Fact(recommendation='PER berada di tingkat yang tinggi. DER menunjukkan tingkat hutang yang tinggi. ROA menunjukkan efisiensi rendah.'))


    @Rule(Fact(per_valued='high'), Fact(der_valued='high'), Fact(roe_valued='low'))
    def ipo_rule_2378(self):
        self.declare(Fact(recommendation='PER berada di tingkat yang tinggi. DER menunjukkan tingkat hutang yang tinggi. ROE menunjukkan keuntungan yang rendah.'))


    @Rule(Fact(per_valued='high'), Fact(roa_valued='low'), Fact(roe_valued='low'))
    def ipo_rule_2379(self):
        self.declare(Fact(recommendation='PER berada di tingkat yang tinggi. ROA menunjukkan efisiensi rendah. ROE menunjukkan keuntungan yang rendah.'))


    @Rule(Fact(der_valued='high'), Fact(roa_valued='low'), Fact(roe_valued='low'))
    def ipo_rule_2380(self):
        self.declare(Fact(recommendation='DER menunjukkan tingkat hutang yang tinggi. ROA menunjukkan efisiensi rendah. ROE menunjukkan keuntungan yang rendah.'))


    @Rule(Fact(underwriter_valued='bad'), Fact(warrant_valued='good'), Fact(net_income_valued='profit'))
    def ipo_rule_2381(self):
        self.declare(Fact(recommendation='Underwriter berkualitas buruk. Warrant menunjukkan kondisi baik. Laba bersih menunjukkan keuntungan.'))


    @Rule(Fact(underwriter_valued='bad'), Fact(warrant_valued='good'), Fact(per_valued='high'))
    def ipo_rule_2382(self):
        self.declare(Fact(recommendation='Underwriter berkualitas buruk. Warrant menunjukkan kondisi baik. PER berada di tingkat yang tinggi.'))


    @Rule(Fact(underwriter_valued='bad'), Fact(warrant_valued='good'), Fact(der_valued='low'))
    def ipo_rule_2383(self):
        self.declare(Fact(recommendation='Underwriter berkualitas buruk. Warrant menunjukkan kondisi baik. DER menunjukkan tingkat hutang yang rendah.'))


    @Rule(Fact(underwriter_valued='bad'), Fact(warrant_valued='good'), Fact(roa_valued='high'))
    def ipo_rule_2384(self):
        self.declare(Fact(recommendation='Underwriter berkualitas buruk. Warrant menunjukkan kondisi baik. ROA menunjukkan efisiensi tinggi.'))


    @Rule(Fact(underwriter_valued='bad'), Fact(warrant_valued='good'), Fact(roe_valued='high'))
    def ipo_rule_2385(self):
        self.declare(Fact(recommendation='Underwriter berkualitas buruk. Warrant menunjukkan kondisi baik. ROE menunjukkan keuntungan yang tinggi.'))


    @Rule(Fact(underwriter_valued='bad'), Fact(net_income_valued='profit'), Fact(per_valued='high'))
    def ipo_rule_2386(self):
        self.declare(Fact(recommendation='Underwriter berkualitas buruk. Laba bersih menunjukkan keuntungan. PER berada di tingkat yang tinggi.'))


    @Rule(Fact(underwriter_valued='bad'), Fact(net_income_valued='profit'), Fact(der_valued='low'))
    def ipo_rule_2387(self):
        self.declare(Fact(recommendation='Underwriter berkualitas buruk. Laba bersih menunjukkan keuntungan. DER menunjukkan tingkat hutang yang rendah.'))


    @Rule(Fact(underwriter_valued='bad'), Fact(net_income_valued='profit'), Fact(roa_valued='high'))
    def ipo_rule_2388(self):
        self.declare(Fact(recommendation='Underwriter berkualitas buruk. Laba bersih menunjukkan keuntungan. ROA menunjukkan efisiensi tinggi.'))


    @Rule(Fact(underwriter_valued='bad'), Fact(net_income_valued='profit'), Fact(roe_valued='high'))
    def ipo_rule_2389(self):
        self.declare(Fact(recommendation='Underwriter berkualitas buruk. Laba bersih menunjukkan keuntungan. ROE menunjukkan keuntungan yang tinggi.'))


    @Rule(Fact(underwriter_valued='bad'), Fact(per_valued='high'), Fact(der_valued='low'))
    def ipo_rule_2390(self):
        self.declare(Fact(recommendation='Underwriter berkualitas buruk. PER berada di tingkat yang tinggi. DER menunjukkan tingkat hutang yang rendah.'))


    @Rule(Fact(underwriter_valued='bad'), Fact(per_valued='high'), Fact(roa_valued='high'))
    def ipo_rule_2391(self):
        self.declare(Fact(recommendation='Underwriter berkualitas buruk. PER berada di tingkat yang tinggi. ROA menunjukkan efisiensi tinggi.'))


    @Rule(Fact(underwriter_valued='bad'), Fact(per_valued='high'), Fact(roe_valued='high'))
    def ipo_rule_2392(self):
        self.declare(Fact(recommendation='Underwriter berkualitas buruk. PER berada di tingkat yang tinggi. ROE menunjukkan keuntungan yang tinggi.'))


    @Rule(Fact(underwriter_valued='bad'), Fact(der_valued='low'), Fact(roa_valued='high'))
    def ipo_rule_2393(self):
        self.declare(Fact(recommendation='Underwriter berkualitas buruk. DER menunjukkan tingkat hutang yang rendah. ROA menunjukkan efisiensi tinggi.'))


    @Rule(Fact(underwriter_valued='bad'), Fact(der_valued='low'), Fact(roe_valued='high'))
    def ipo_rule_2394(self):
        self.declare(Fact(recommendation='Underwriter berkualitas buruk. DER menunjukkan tingkat hutang yang rendah. ROE menunjukkan keuntungan yang tinggi.'))


    @Rule(Fact(underwriter_valued='bad'), Fact(roa_valued='high'), Fact(roe_valued='high'))
    def ipo_rule_2395(self):
        self.declare(Fact(recommendation='Underwriter berkualitas buruk. ROA menunjukkan efisiensi tinggi. ROE menunjukkan keuntungan yang tinggi.'))


    @Rule(Fact(warrant_valued='good'), Fact(net_income_valued='profit'), Fact(per_valued='high'))
    def ipo_rule_2396(self):
        self.declare(Fact(recommendation='Warrant menunjukkan kondisi baik. Laba bersih menunjukkan keuntungan. PER berada di tingkat yang tinggi.'))


    @Rule(Fact(warrant_valued='good'), Fact(net_income_valued='profit'), Fact(der_valued='low'))
    def ipo_rule_2397(self):
        self.declare(Fact(recommendation='Warrant menunjukkan kondisi baik. Laba bersih menunjukkan keuntungan. DER menunjukkan tingkat hutang yang rendah.'))


    @Rule(Fact(warrant_valued='good'), Fact(net_income_valued='profit'), Fact(roa_valued='high'))
    def ipo_rule_2398(self):
        self.declare(Fact(recommendation='Warrant menunjukkan kondisi baik. Laba bersih menunjukkan keuntungan. ROA menunjukkan efisiensi tinggi.'))


    @Rule(Fact(warrant_valued='good'), Fact(net_income_valued='profit'), Fact(roe_valued='high'))
    def ipo_rule_2399(self):
        self.declare(Fact(recommendation='Warrant menunjukkan kondisi baik. Laba bersih menunjukkan keuntungan. ROE menunjukkan keuntungan yang tinggi.'))


    @Rule(Fact(warrant_valued='good'), Fact(per_valued='high'), Fact(der_valued='low'))
    def ipo_rule_2400(self):
        self.declare(Fact(recommendation='Warrant menunjukkan kondisi baik. PER berada di tingkat yang tinggi. DER menunjukkan tingkat hutang yang rendah.'))


    @Rule(Fact(warrant_valued='good'), Fact(per_valued='high'), Fact(roa_valued='high'))
    def ipo_rule_2401(self):
        self.declare(Fact(recommendation='Warrant menunjukkan kondisi baik. PER berada di tingkat yang tinggi. ROA menunjukkan efisiensi tinggi.'))


    @Rule(Fact(warrant_valued='good'), Fact(per_valued='high'), Fact(roe_valued='high'))
    def ipo_rule_2402(self):
        self.declare(Fact(recommendation='Warrant menunjukkan kondisi baik. PER berada di tingkat yang tinggi. ROE menunjukkan keuntungan yang tinggi.'))


    @Rule(Fact(warrant_valued='good'), Fact(der_valued='low'), Fact(roa_valued='high'))
    def ipo_rule_2403(self):
        self.declare(Fact(recommendation='Warrant menunjukkan kondisi baik. DER menunjukkan tingkat hutang yang rendah. ROA menunjukkan efisiensi tinggi.'))


    @Rule(Fact(warrant_valued='good'), Fact(der_valued='low'), Fact(roe_valued='high'))
    def ipo_rule_2404(self):
        self.declare(Fact(recommendation='Warrant menunjukkan kondisi baik. DER menunjukkan tingkat hutang yang rendah. ROE menunjukkan keuntungan yang tinggi.'))


    @Rule(Fact(warrant_valued='good'), Fact(roa_valued='high'), Fact(roe_valued='high'))
    def ipo_rule_2405(self):
        self.declare(Fact(recommendation='Warrant menunjukkan kondisi baik. ROA menunjukkan efisiensi tinggi. ROE menunjukkan keuntungan yang tinggi.'))


    @Rule(Fact(net_income_valued='profit'), Fact(per_valued='high'), Fact(der_valued='low'))
    def ipo_rule_2406(self):
        self.declare(Fact(recommendation='Laba bersih menunjukkan keuntungan. PER berada di tingkat yang tinggi. DER menunjukkan tingkat hutang yang rendah.'))


    @Rule(Fact(net_income_valued='profit'), Fact(per_valued='high'), Fact(roa_valued='high'))
    def ipo_rule_2407(self):
        self.declare(Fact(recommendation='Laba bersih menunjukkan keuntungan. PER berada di tingkat yang tinggi. ROA menunjukkan efisiensi tinggi.'))


    @Rule(Fact(net_income_valued='profit'), Fact(per_valued='high'), Fact(roe_valued='high'))
    def ipo_rule_2408(self):
        self.declare(Fact(recommendation='Laba bersih menunjukkan keuntungan. PER berada di tingkat yang tinggi. ROE menunjukkan keuntungan yang tinggi.'))


    @Rule(Fact(net_income_valued='profit'), Fact(der_valued='low'), Fact(roa_valued='high'))
    def ipo_rule_2409(self):
        self.declare(Fact(recommendation='Laba bersih menunjukkan keuntungan. DER menunjukkan tingkat hutang yang rendah. ROA menunjukkan efisiensi tinggi.'))


    @Rule(Fact(net_income_valued='profit'), Fact(der_valued='low'), Fact(roe_valued='high'))
    def ipo_rule_2410(self):
        self.declare(Fact(recommendation='Laba bersih menunjukkan keuntungan. DER menunjukkan tingkat hutang yang rendah. ROE menunjukkan keuntungan yang tinggi.'))


    @Rule(Fact(net_income_valued='profit'), Fact(roa_valued='high'), Fact(roe_valued='high'))
    def ipo_rule_2411(self):
        self.declare(Fact(recommendation='Laba bersih menunjukkan keuntungan. ROA menunjukkan efisiensi tinggi. ROE menunjukkan keuntungan yang tinggi.'))


    @Rule(Fact(per_valued='high'), Fact(der_valued='low'), Fact(roa_valued='high'))
    def ipo_rule_2412(self):
        self.declare(Fact(recommendation='PER berada di tingkat yang tinggi. DER menunjukkan tingkat hutang yang rendah. ROA menunjukkan efisiensi tinggi.'))


    @Rule(Fact(per_valued='high'), Fact(der_valued='low'), Fact(roe_valued='high'))
    def ipo_rule_2413(self):
        self.declare(Fact(recommendation='PER berada di tingkat yang tinggi. DER menunjukkan tingkat hutang yang rendah. ROE menunjukkan keuntungan yang tinggi.'))


    @Rule(Fact(per_valued='high'), Fact(roa_valued='high'), Fact(roe_valued='high'))
    def ipo_rule_2414(self):
        self.declare(Fact(recommendation='PER berada di tingkat yang tinggi. ROA menunjukkan efisiensi tinggi. ROE menunjukkan keuntungan yang tinggi.'))


    @Rule(Fact(der_valued='low'), Fact(roa_valued='high'), Fact(roe_valued='high'))
    def ipo_rule_2415(self):
        self.declare(Fact(recommendation='DER menunjukkan tingkat hutang yang rendah. ROA menunjukkan efisiensi tinggi. ROE menunjukkan keuntungan yang tinggi.'))


    @Rule(Fact(underwriter_valued='bad'), Fact(warrant_valued='good'), Fact(net_income_valued='profit'))
    def ipo_rule_2416(self):
        self.declare(Fact(recommendation='Underwriter berkualitas buruk. Warrant menunjukkan kondisi baik. Laba bersih menunjukkan keuntungan.'))


    @Rule(Fact(underwriter_valued='bad'), Fact(warrant_valued='good'), Fact(per_valued='high'))
    def ipo_rule_2417(self):
        self.declare(Fact(recommendation='Underwriter berkualitas buruk. Warrant menunjukkan kondisi baik. PER berada di tingkat yang tinggi.'))


    @Rule(Fact(underwriter_valued='bad'), Fact(warrant_valued='good'), Fact(der_valued='low'))
    def ipo_rule_2418(self):
        self.declare(Fact(recommendation='Underwriter berkualitas buruk. Warrant menunjukkan kondisi baik. DER menunjukkan tingkat hutang yang rendah.'))


    @Rule(Fact(underwriter_valued='bad'), Fact(warrant_valued='good'), Fact(roa_valued='high'))
    def ipo_rule_2419(self):
        self.declare(Fact(recommendation='Underwriter berkualitas buruk. Warrant menunjukkan kondisi baik. ROA menunjukkan efisiensi tinggi.'))


    @Rule(Fact(underwriter_valued='bad'), Fact(warrant_valued='good'), Fact(roe_valued='low'))
    def ipo_rule_2420(self):
        self.declare(Fact(recommendation='Underwriter berkualitas buruk. Warrant menunjukkan kondisi baik. ROE menunjukkan keuntungan yang rendah.'))


    @Rule(Fact(underwriter_valued='bad'), Fact(net_income_valued='profit'), Fact(per_valued='high'))
    def ipo_rule_2421(self):
        self.declare(Fact(recommendation='Underwriter berkualitas buruk. Laba bersih menunjukkan keuntungan. PER berada di tingkat yang tinggi.'))


    @Rule(Fact(underwriter_valued='bad'), Fact(net_income_valued='profit'), Fact(der_valued='low'))
    def ipo_rule_2422(self):
        self.declare(Fact(recommendation='Underwriter berkualitas buruk. Laba bersih menunjukkan keuntungan. DER menunjukkan tingkat hutang yang rendah.'))


    @Rule(Fact(underwriter_valued='bad'), Fact(net_income_valued='profit'), Fact(roa_valued='high'))
    def ipo_rule_2423(self):
        self.declare(Fact(recommendation='Underwriter berkualitas buruk. Laba bersih menunjukkan keuntungan. ROA menunjukkan efisiensi tinggi.'))


    @Rule(Fact(underwriter_valued='bad'), Fact(net_income_valued='profit'), Fact(roe_valued='low'))
    def ipo_rule_2424(self):
        self.declare(Fact(recommendation='Underwriter berkualitas buruk. Laba bersih menunjukkan keuntungan. ROE menunjukkan keuntungan yang rendah.'))


    @Rule(Fact(underwriter_valued='bad'), Fact(per_valued='high'), Fact(der_valued='low'))
    def ipo_rule_2425(self):
        self.declare(Fact(recommendation='Underwriter berkualitas buruk. PER berada di tingkat yang tinggi. DER menunjukkan tingkat hutang yang rendah.'))


    @Rule(Fact(underwriter_valued='bad'), Fact(per_valued='high'), Fact(roa_valued='high'))
    def ipo_rule_2426(self):
        self.declare(Fact(recommendation='Underwriter berkualitas buruk. PER berada di tingkat yang tinggi. ROA menunjukkan efisiensi tinggi.'))


    @Rule(Fact(underwriter_valued='bad'), Fact(per_valued='high'), Fact(roe_valued='low'))
    def ipo_rule_2427(self):
        self.declare(Fact(recommendation='Underwriter berkualitas buruk. PER berada di tingkat yang tinggi. ROE menunjukkan keuntungan yang rendah.'))


    @Rule(Fact(underwriter_valued='bad'), Fact(der_valued='low'), Fact(roa_valued='high'))
    def ipo_rule_2428(self):
        self.declare(Fact(recommendation='Underwriter berkualitas buruk. DER menunjukkan tingkat hutang yang rendah. ROA menunjukkan efisiensi tinggi.'))


    @Rule(Fact(underwriter_valued='bad'), Fact(der_valued='low'), Fact(roe_valued='low'))
    def ipo_rule_2429(self):
        self.declare(Fact(recommendation='Underwriter berkualitas buruk. DER menunjukkan tingkat hutang yang rendah. ROE menunjukkan keuntungan yang rendah.'))


    @Rule(Fact(underwriter_valued='bad'), Fact(roa_valued='high'), Fact(roe_valued='low'))
    def ipo_rule_2430(self):
        self.declare(Fact(recommendation='Underwriter berkualitas buruk. ROA menunjukkan efisiensi tinggi. ROE menunjukkan keuntungan yang rendah.'))


    @Rule(Fact(warrant_valued='good'), Fact(net_income_valued='profit'), Fact(per_valued='high'))
    def ipo_rule_2431(self):
        self.declare(Fact(recommendation='Warrant menunjukkan kondisi baik. Laba bersih menunjukkan keuntungan. PER berada di tingkat yang tinggi.'))


    @Rule(Fact(warrant_valued='good'), Fact(net_income_valued='profit'), Fact(der_valued='low'))
    def ipo_rule_2432(self):
        self.declare(Fact(recommendation='Warrant menunjukkan kondisi baik. Laba bersih menunjukkan keuntungan. DER menunjukkan tingkat hutang yang rendah.'))


    @Rule(Fact(warrant_valued='good'), Fact(net_income_valued='profit'), Fact(roa_valued='high'))
    def ipo_rule_2433(self):
        self.declare(Fact(recommendation='Warrant menunjukkan kondisi baik. Laba bersih menunjukkan keuntungan. ROA menunjukkan efisiensi tinggi.'))


    @Rule(Fact(warrant_valued='good'), Fact(net_income_valued='profit'), Fact(roe_valued='low'))
    def ipo_rule_2434(self):
        self.declare(Fact(recommendation='Warrant menunjukkan kondisi baik. Laba bersih menunjukkan keuntungan. ROE menunjukkan keuntungan yang rendah.'))


    @Rule(Fact(warrant_valued='good'), Fact(per_valued='high'), Fact(der_valued='low'))
    def ipo_rule_2435(self):
        self.declare(Fact(recommendation='Warrant menunjukkan kondisi baik. PER berada di tingkat yang tinggi. DER menunjukkan tingkat hutang yang rendah.'))


    @Rule(Fact(warrant_valued='good'), Fact(per_valued='high'), Fact(roa_valued='high'))
    def ipo_rule_2436(self):
        self.declare(Fact(recommendation='Warrant menunjukkan kondisi baik. PER berada di tingkat yang tinggi. ROA menunjukkan efisiensi tinggi.'))


    @Rule(Fact(warrant_valued='good'), Fact(per_valued='high'), Fact(roe_valued='low'))
    def ipo_rule_2437(self):
        self.declare(Fact(recommendation='Warrant menunjukkan kondisi baik. PER berada di tingkat yang tinggi. ROE menunjukkan keuntungan yang rendah.'))


    @Rule(Fact(warrant_valued='good'), Fact(der_valued='low'), Fact(roa_valued='high'))
    def ipo_rule_2438(self):
        self.declare(Fact(recommendation='Warrant menunjukkan kondisi baik. DER menunjukkan tingkat hutang yang rendah. ROA menunjukkan efisiensi tinggi.'))


    @Rule(Fact(warrant_valued='good'), Fact(der_valued='low'), Fact(roe_valued='low'))
    def ipo_rule_2439(self):
        self.declare(Fact(recommendation='Warrant menunjukkan kondisi baik. DER menunjukkan tingkat hutang yang rendah. ROE menunjukkan keuntungan yang rendah.'))


    @Rule(Fact(warrant_valued='good'), Fact(roa_valued='high'), Fact(roe_valued='low'))
    def ipo_rule_2440(self):
        self.declare(Fact(recommendation='Warrant menunjukkan kondisi baik. ROA menunjukkan efisiensi tinggi. ROE menunjukkan keuntungan yang rendah.'))


    @Rule(Fact(net_income_valued='profit'), Fact(per_valued='high'), Fact(der_valued='low'))
    def ipo_rule_2441(self):
        self.declare(Fact(recommendation='Laba bersih menunjukkan keuntungan. PER berada di tingkat yang tinggi. DER menunjukkan tingkat hutang yang rendah.'))


    @Rule(Fact(net_income_valued='profit'), Fact(per_valued='high'), Fact(roa_valued='high'))
    def ipo_rule_2442(self):
        self.declare(Fact(recommendation='Laba bersih menunjukkan keuntungan. PER berada di tingkat yang tinggi. ROA menunjukkan efisiensi tinggi.'))


    @Rule(Fact(net_income_valued='profit'), Fact(per_valued='high'), Fact(roe_valued='low'))
    def ipo_rule_2443(self):
        self.declare(Fact(recommendation='Laba bersih menunjukkan keuntungan. PER berada di tingkat yang tinggi. ROE menunjukkan keuntungan yang rendah.'))


    @Rule(Fact(net_income_valued='profit'), Fact(der_valued='low'), Fact(roa_valued='high'))
    def ipo_rule_2444(self):
        self.declare(Fact(recommendation='Laba bersih menunjukkan keuntungan. DER menunjukkan tingkat hutang yang rendah. ROA menunjukkan efisiensi tinggi.'))


    @Rule(Fact(net_income_valued='profit'), Fact(der_valued='low'), Fact(roe_valued='low'))
    def ipo_rule_2445(self):
        self.declare(Fact(recommendation='Laba bersih menunjukkan keuntungan. DER menunjukkan tingkat hutang yang rendah. ROE menunjukkan keuntungan yang rendah.'))


    @Rule(Fact(net_income_valued='profit'), Fact(roa_valued='high'), Fact(roe_valued='low'))
    def ipo_rule_2446(self):
        self.declare(Fact(recommendation='Laba bersih menunjukkan keuntungan. ROA menunjukkan efisiensi tinggi. ROE menunjukkan keuntungan yang rendah.'))


    @Rule(Fact(per_valued='high'), Fact(der_valued='low'), Fact(roa_valued='high'))
    def ipo_rule_2447(self):
        self.declare(Fact(recommendation='PER berada di tingkat yang tinggi. DER menunjukkan tingkat hutang yang rendah. ROA menunjukkan efisiensi tinggi.'))


    @Rule(Fact(per_valued='high'), Fact(der_valued='low'), Fact(roe_valued='low'))
    def ipo_rule_2448(self):
        self.declare(Fact(recommendation='PER berada di tingkat yang tinggi. DER menunjukkan tingkat hutang yang rendah. ROE menunjukkan keuntungan yang rendah.'))


    @Rule(Fact(per_valued='high'), Fact(roa_valued='high'), Fact(roe_valued='low'))
    def ipo_rule_2449(self):
        self.declare(Fact(recommendation='PER berada di tingkat yang tinggi. ROA menunjukkan efisiensi tinggi. ROE menunjukkan keuntungan yang rendah.'))


    @Rule(Fact(der_valued='low'), Fact(roa_valued='high'), Fact(roe_valued='low'))
    def ipo_rule_2450(self):
        self.declare(Fact(recommendation='DER menunjukkan tingkat hutang yang rendah. ROA menunjukkan efisiensi tinggi. ROE menunjukkan keuntungan yang rendah.'))


    @Rule(Fact(underwriter_valued='bad'), Fact(warrant_valued='good'), Fact(net_income_valued='profit'))
    def ipo_rule_2451(self):
        self.declare(Fact(recommendation='Underwriter berkualitas buruk. Warrant menunjukkan kondisi baik. Laba bersih menunjukkan keuntungan.'))


    @Rule(Fact(underwriter_valued='bad'), Fact(warrant_valued='good'), Fact(per_valued='high'))
    def ipo_rule_2452(self):
        self.declare(Fact(recommendation='Underwriter berkualitas buruk. Warrant menunjukkan kondisi baik. PER berada di tingkat yang tinggi.'))


    @Rule(Fact(underwriter_valued='bad'), Fact(warrant_valued='good'), Fact(der_valued='low'))
    def ipo_rule_2453(self):
        self.declare(Fact(recommendation='Underwriter berkualitas buruk. Warrant menunjukkan kondisi baik. DER menunjukkan tingkat hutang yang rendah.'))


    @Rule(Fact(underwriter_valued='bad'), Fact(warrant_valued='good'), Fact(roa_valued='low'))
    def ipo_rule_2454(self):
        self.declare(Fact(recommendation='Underwriter berkualitas buruk. Warrant menunjukkan kondisi baik. ROA menunjukkan efisiensi rendah.'))


    @Rule(Fact(underwriter_valued='bad'), Fact(warrant_valued='good'), Fact(roe_valued='high'))
    def ipo_rule_2455(self):
        self.declare(Fact(recommendation='Underwriter berkualitas buruk. Warrant menunjukkan kondisi baik. ROE menunjukkan keuntungan yang tinggi.'))


    @Rule(Fact(underwriter_valued='bad'), Fact(net_income_valued='profit'), Fact(per_valued='high'))
    def ipo_rule_2456(self):
        self.declare(Fact(recommendation='Underwriter berkualitas buruk. Laba bersih menunjukkan keuntungan. PER berada di tingkat yang tinggi.'))


    @Rule(Fact(underwriter_valued='bad'), Fact(net_income_valued='profit'), Fact(der_valued='low'))
    def ipo_rule_2457(self):
        self.declare(Fact(recommendation='Underwriter berkualitas buruk. Laba bersih menunjukkan keuntungan. DER menunjukkan tingkat hutang yang rendah.'))


    @Rule(Fact(underwriter_valued='bad'), Fact(net_income_valued='profit'), Fact(roa_valued='low'))
    def ipo_rule_2458(self):
        self.declare(Fact(recommendation='Underwriter berkualitas buruk. Laba bersih menunjukkan keuntungan. ROA menunjukkan efisiensi rendah.'))


    @Rule(Fact(underwriter_valued='bad'), Fact(net_income_valued='profit'), Fact(roe_valued='high'))
    def ipo_rule_2459(self):
        self.declare(Fact(recommendation='Underwriter berkualitas buruk. Laba bersih menunjukkan keuntungan. ROE menunjukkan keuntungan yang tinggi.'))


    @Rule(Fact(underwriter_valued='bad'), Fact(per_valued='high'), Fact(der_valued='low'))
    def ipo_rule_2460(self):
        self.declare(Fact(recommendation='Underwriter berkualitas buruk. PER berada di tingkat yang tinggi. DER menunjukkan tingkat hutang yang rendah.'))


    @Rule(Fact(underwriter_valued='bad'), Fact(per_valued='high'), Fact(roa_valued='low'))
    def ipo_rule_2461(self):
        self.declare(Fact(recommendation='Underwriter berkualitas buruk. PER berada di tingkat yang tinggi. ROA menunjukkan efisiensi rendah.'))


    @Rule(Fact(underwriter_valued='bad'), Fact(per_valued='high'), Fact(roe_valued='high'))
    def ipo_rule_2462(self):
        self.declare(Fact(recommendation='Underwriter berkualitas buruk. PER berada di tingkat yang tinggi. ROE menunjukkan keuntungan yang tinggi.'))


    @Rule(Fact(underwriter_valued='bad'), Fact(der_valued='low'), Fact(roa_valued='low'))
    def ipo_rule_2463(self):
        self.declare(Fact(recommendation='Underwriter berkualitas buruk. DER menunjukkan tingkat hutang yang rendah. ROA menunjukkan efisiensi rendah.'))


    @Rule(Fact(underwriter_valued='bad'), Fact(der_valued='low'), Fact(roe_valued='high'))
    def ipo_rule_2464(self):
        self.declare(Fact(recommendation='Underwriter berkualitas buruk. DER menunjukkan tingkat hutang yang rendah. ROE menunjukkan keuntungan yang tinggi.'))


    @Rule(Fact(underwriter_valued='bad'), Fact(roa_valued='low'), Fact(roe_valued='high'))
    def ipo_rule_2465(self):
        self.declare(Fact(recommendation='Underwriter berkualitas buruk. ROA menunjukkan efisiensi rendah. ROE menunjukkan keuntungan yang tinggi.'))


    @Rule(Fact(warrant_valued='good'), Fact(net_income_valued='profit'), Fact(per_valued='high'))
    def ipo_rule_2466(self):
        self.declare(Fact(recommendation='Warrant menunjukkan kondisi baik. Laba bersih menunjukkan keuntungan. PER berada di tingkat yang tinggi.'))


    @Rule(Fact(warrant_valued='good'), Fact(net_income_valued='profit'), Fact(der_valued='low'))
    def ipo_rule_2467(self):
        self.declare(Fact(recommendation='Warrant menunjukkan kondisi baik. Laba bersih menunjukkan keuntungan. DER menunjukkan tingkat hutang yang rendah.'))


    @Rule(Fact(warrant_valued='good'), Fact(net_income_valued='profit'), Fact(roa_valued='low'))
    def ipo_rule_2468(self):
        self.declare(Fact(recommendation='Warrant menunjukkan kondisi baik. Laba bersih menunjukkan keuntungan. ROA menunjukkan efisiensi rendah.'))


    @Rule(Fact(warrant_valued='good'), Fact(net_income_valued='profit'), Fact(roe_valued='high'))
    def ipo_rule_2469(self):
        self.declare(Fact(recommendation='Warrant menunjukkan kondisi baik. Laba bersih menunjukkan keuntungan. ROE menunjukkan keuntungan yang tinggi.'))


    @Rule(Fact(warrant_valued='good'), Fact(per_valued='high'), Fact(der_valued='low'))
    def ipo_rule_2470(self):
        self.declare(Fact(recommendation='Warrant menunjukkan kondisi baik. PER berada di tingkat yang tinggi. DER menunjukkan tingkat hutang yang rendah.'))


    @Rule(Fact(warrant_valued='good'), Fact(per_valued='high'), Fact(roa_valued='low'))
    def ipo_rule_2471(self):
        self.declare(Fact(recommendation='Warrant menunjukkan kondisi baik. PER berada di tingkat yang tinggi. ROA menunjukkan efisiensi rendah.'))


    @Rule(Fact(warrant_valued='good'), Fact(per_valued='high'), Fact(roe_valued='high'))
    def ipo_rule_2472(self):
        self.declare(Fact(recommendation='Warrant menunjukkan kondisi baik. PER berada di tingkat yang tinggi. ROE menunjukkan keuntungan yang tinggi.'))


    @Rule(Fact(warrant_valued='good'), Fact(der_valued='low'), Fact(roa_valued='low'))
    def ipo_rule_2473(self):
        self.declare(Fact(recommendation='Warrant menunjukkan kondisi baik. DER menunjukkan tingkat hutang yang rendah. ROA menunjukkan efisiensi rendah.'))


    @Rule(Fact(warrant_valued='good'), Fact(der_valued='low'), Fact(roe_valued='high'))
    def ipo_rule_2474(self):
        self.declare(Fact(recommendation='Warrant menunjukkan kondisi baik. DER menunjukkan tingkat hutang yang rendah. ROE menunjukkan keuntungan yang tinggi.'))


    @Rule(Fact(warrant_valued='good'), Fact(roa_valued='low'), Fact(roe_valued='high'))
    def ipo_rule_2475(self):
        self.declare(Fact(recommendation='Warrant menunjukkan kondisi baik. ROA menunjukkan efisiensi rendah. ROE menunjukkan keuntungan yang tinggi.'))


    @Rule(Fact(net_income_valued='profit'), Fact(per_valued='high'), Fact(der_valued='low'))
    def ipo_rule_2476(self):
        self.declare(Fact(recommendation='Laba bersih menunjukkan keuntungan. PER berada di tingkat yang tinggi. DER menunjukkan tingkat hutang yang rendah.'))


    @Rule(Fact(net_income_valued='profit'), Fact(per_valued='high'), Fact(roa_valued='low'))
    def ipo_rule_2477(self):
        self.declare(Fact(recommendation='Laba bersih menunjukkan keuntungan. PER berada di tingkat yang tinggi. ROA menunjukkan efisiensi rendah.'))


    @Rule(Fact(net_income_valued='profit'), Fact(per_valued='high'), Fact(roe_valued='high'))
    def ipo_rule_2478(self):
        self.declare(Fact(recommendation='Laba bersih menunjukkan keuntungan. PER berada di tingkat yang tinggi. ROE menunjukkan keuntungan yang tinggi.'))


    @Rule(Fact(net_income_valued='profit'), Fact(der_valued='low'), Fact(roa_valued='low'))
    def ipo_rule_2479(self):
        self.declare(Fact(recommendation='Laba bersih menunjukkan keuntungan. DER menunjukkan tingkat hutang yang rendah. ROA menunjukkan efisiensi rendah.'))


    @Rule(Fact(net_income_valued='profit'), Fact(der_valued='low'), Fact(roe_valued='high'))
    def ipo_rule_2480(self):
        self.declare(Fact(recommendation='Laba bersih menunjukkan keuntungan. DER menunjukkan tingkat hutang yang rendah. ROE menunjukkan keuntungan yang tinggi.'))


    @Rule(Fact(net_income_valued='profit'), Fact(roa_valued='low'), Fact(roe_valued='high'))
    def ipo_rule_2481(self):
        self.declare(Fact(recommendation='Laba bersih menunjukkan keuntungan. ROA menunjukkan efisiensi rendah. ROE menunjukkan keuntungan yang tinggi.'))


    @Rule(Fact(per_valued='high'), Fact(der_valued='low'), Fact(roa_valued='low'))
    def ipo_rule_2482(self):
        self.declare(Fact(recommendation='PER berada di tingkat yang tinggi. DER menunjukkan tingkat hutang yang rendah. ROA menunjukkan efisiensi rendah.'))


    @Rule(Fact(per_valued='high'), Fact(der_valued='low'), Fact(roe_valued='high'))
    def ipo_rule_2483(self):
        self.declare(Fact(recommendation='PER berada di tingkat yang tinggi. DER menunjukkan tingkat hutang yang rendah. ROE menunjukkan keuntungan yang tinggi.'))


    @Rule(Fact(per_valued='high'), Fact(roa_valued='low'), Fact(roe_valued='high'))
    def ipo_rule_2484(self):
        self.declare(Fact(recommendation='PER berada di tingkat yang tinggi. ROA menunjukkan efisiensi rendah. ROE menunjukkan keuntungan yang tinggi.'))


    @Rule(Fact(der_valued='low'), Fact(roa_valued='low'), Fact(roe_valued='high'))
    def ipo_rule_2485(self):
        self.declare(Fact(recommendation='DER menunjukkan tingkat hutang yang rendah. ROA menunjukkan efisiensi rendah. ROE menunjukkan keuntungan yang tinggi.'))


    @Rule(Fact(underwriter_valued='bad'), Fact(warrant_valued='good'), Fact(net_income_valued='profit'))
    def ipo_rule_2486(self):
        self.declare(Fact(recommendation='Underwriter berkualitas buruk. Warrant menunjukkan kondisi baik. Laba bersih menunjukkan keuntungan.'))


    @Rule(Fact(underwriter_valued='bad'), Fact(warrant_valued='good'), Fact(per_valued='high'))
    def ipo_rule_2487(self):
        self.declare(Fact(recommendation='Underwriter berkualitas buruk. Warrant menunjukkan kondisi baik. PER berada di tingkat yang tinggi.'))


    @Rule(Fact(underwriter_valued='bad'), Fact(warrant_valued='good'), Fact(der_valued='low'))
    def ipo_rule_2488(self):
        self.declare(Fact(recommendation='Underwriter berkualitas buruk. Warrant menunjukkan kondisi baik. DER menunjukkan tingkat hutang yang rendah.'))


    @Rule(Fact(underwriter_valued='bad'), Fact(warrant_valued='good'), Fact(roa_valued='low'))
    def ipo_rule_2489(self):
        self.declare(Fact(recommendation='Underwriter berkualitas buruk. Warrant menunjukkan kondisi baik. ROA menunjukkan efisiensi rendah.'))


    @Rule(Fact(underwriter_valued='bad'), Fact(warrant_valued='good'), Fact(roe_valued='low'))
    def ipo_rule_2490(self):
        self.declare(Fact(recommendation='Underwriter berkualitas buruk. Warrant menunjukkan kondisi baik. ROE menunjukkan keuntungan yang rendah.'))


    @Rule(Fact(underwriter_valued='bad'), Fact(net_income_valued='profit'), Fact(per_valued='high'))
    def ipo_rule_2491(self):
        self.declare(Fact(recommendation='Underwriter berkualitas buruk. Laba bersih menunjukkan keuntungan. PER berada di tingkat yang tinggi.'))


    @Rule(Fact(underwriter_valued='bad'), Fact(net_income_valued='profit'), Fact(der_valued='low'))
    def ipo_rule_2492(self):
        self.declare(Fact(recommendation='Underwriter berkualitas buruk. Laba bersih menunjukkan keuntungan. DER menunjukkan tingkat hutang yang rendah.'))


    @Rule(Fact(underwriter_valued='bad'), Fact(net_income_valued='profit'), Fact(roa_valued='low'))
    def ipo_rule_2493(self):
        self.declare(Fact(recommendation='Underwriter berkualitas buruk. Laba bersih menunjukkan keuntungan. ROA menunjukkan efisiensi rendah.'))


    @Rule(Fact(underwriter_valued='bad'), Fact(net_income_valued='profit'), Fact(roe_valued='low'))
    def ipo_rule_2494(self):
        self.declare(Fact(recommendation='Underwriter berkualitas buruk. Laba bersih menunjukkan keuntungan. ROE menunjukkan keuntungan yang rendah.'))


    @Rule(Fact(underwriter_valued='bad'), Fact(per_valued='high'), Fact(der_valued='low'))
    def ipo_rule_2495(self):
        self.declare(Fact(recommendation='Underwriter berkualitas buruk. PER berada di tingkat yang tinggi. DER menunjukkan tingkat hutang yang rendah.'))


    @Rule(Fact(underwriter_valued='bad'), Fact(per_valued='high'), Fact(roa_valued='low'))
    def ipo_rule_2496(self):
        self.declare(Fact(recommendation='Underwriter berkualitas buruk. PER berada di tingkat yang tinggi. ROA menunjukkan efisiensi rendah.'))


    @Rule(Fact(underwriter_valued='bad'), Fact(per_valued='high'), Fact(roe_valued='low'))
    def ipo_rule_2497(self):
        self.declare(Fact(recommendation='Underwriter berkualitas buruk. PER berada di tingkat yang tinggi. ROE menunjukkan keuntungan yang rendah.'))


    @Rule(Fact(underwriter_valued='bad'), Fact(der_valued='low'), Fact(roa_valued='low'))
    def ipo_rule_2498(self):
        self.declare(Fact(recommendation='Underwriter berkualitas buruk. DER menunjukkan tingkat hutang yang rendah. ROA menunjukkan efisiensi rendah.'))


    @Rule(Fact(underwriter_valued='bad'), Fact(der_valued='low'), Fact(roe_valued='low'))
    def ipo_rule_2499(self):
        self.declare(Fact(recommendation='Underwriter berkualitas buruk. DER menunjukkan tingkat hutang yang rendah. ROE menunjukkan keuntungan yang rendah.'))


    @Rule(Fact(underwriter_valued='bad'), Fact(roa_valued='low'), Fact(roe_valued='low'))
    def ipo_rule_2500(self):
        self.declare(Fact(recommendation='Underwriter berkualitas buruk. ROA menunjukkan efisiensi rendah. ROE menunjukkan keuntungan yang rendah.'))


    @Rule(Fact(warrant_valued='good'), Fact(net_income_valued='profit'), Fact(per_valued='high'))
    def ipo_rule_2501(self):
        self.declare(Fact(recommendation='Warrant menunjukkan kondisi baik. Laba bersih menunjukkan keuntungan. PER berada di tingkat yang tinggi.'))


    @Rule(Fact(warrant_valued='good'), Fact(net_income_valued='profit'), Fact(der_valued='low'))
    def ipo_rule_2502(self):
        self.declare(Fact(recommendation='Warrant menunjukkan kondisi baik. Laba bersih menunjukkan keuntungan. DER menunjukkan tingkat hutang yang rendah.'))


    @Rule(Fact(warrant_valued='good'), Fact(net_income_valued='profit'), Fact(roa_valued='low'))
    def ipo_rule_2503(self):
        self.declare(Fact(recommendation='Warrant menunjukkan kondisi baik. Laba bersih menunjukkan keuntungan. ROA menunjukkan efisiensi rendah.'))


    @Rule(Fact(warrant_valued='good'), Fact(net_income_valued='profit'), Fact(roe_valued='low'))
    def ipo_rule_2504(self):
        self.declare(Fact(recommendation='Warrant menunjukkan kondisi baik. Laba bersih menunjukkan keuntungan. ROE menunjukkan keuntungan yang rendah.'))


    @Rule(Fact(warrant_valued='good'), Fact(per_valued='high'), Fact(der_valued='low'))
    def ipo_rule_2505(self):
        self.declare(Fact(recommendation='Warrant menunjukkan kondisi baik. PER berada di tingkat yang tinggi. DER menunjukkan tingkat hutang yang rendah.'))


    @Rule(Fact(warrant_valued='good'), Fact(per_valued='high'), Fact(roa_valued='low'))
    def ipo_rule_2506(self):
        self.declare(Fact(recommendation='Warrant menunjukkan kondisi baik. PER berada di tingkat yang tinggi. ROA menunjukkan efisiensi rendah.'))


    @Rule(Fact(warrant_valued='good'), Fact(per_valued='high'), Fact(roe_valued='low'))
    def ipo_rule_2507(self):
        self.declare(Fact(recommendation='Warrant menunjukkan kondisi baik. PER berada di tingkat yang tinggi. ROE menunjukkan keuntungan yang rendah.'))


    @Rule(Fact(warrant_valued='good'), Fact(der_valued='low'), Fact(roa_valued='low'))
    def ipo_rule_2508(self):
        self.declare(Fact(recommendation='Warrant menunjukkan kondisi baik. DER menunjukkan tingkat hutang yang rendah. ROA menunjukkan efisiensi rendah.'))


    @Rule(Fact(warrant_valued='good'), Fact(der_valued='low'), Fact(roe_valued='low'))
    def ipo_rule_2509(self):
        self.declare(Fact(recommendation='Warrant menunjukkan kondisi baik. DER menunjukkan tingkat hutang yang rendah. ROE menunjukkan keuntungan yang rendah.'))


    @Rule(Fact(warrant_valued='good'), Fact(roa_valued='low'), Fact(roe_valued='low'))
    def ipo_rule_2510(self):
        self.declare(Fact(recommendation='Warrant menunjukkan kondisi baik. ROA menunjukkan efisiensi rendah. ROE menunjukkan keuntungan yang rendah.'))


    @Rule(Fact(net_income_valued='profit'), Fact(per_valued='high'), Fact(der_valued='low'))
    def ipo_rule_2511(self):
        self.declare(Fact(recommendation='Laba bersih menunjukkan keuntungan. PER berada di tingkat yang tinggi. DER menunjukkan tingkat hutang yang rendah.'))


    @Rule(Fact(net_income_valued='profit'), Fact(per_valued='high'), Fact(roa_valued='low'))
    def ipo_rule_2512(self):
        self.declare(Fact(recommendation='Laba bersih menunjukkan keuntungan. PER berada di tingkat yang tinggi. ROA menunjukkan efisiensi rendah.'))


    @Rule(Fact(net_income_valued='profit'), Fact(per_valued='high'), Fact(roe_valued='low'))
    def ipo_rule_2513(self):
        self.declare(Fact(recommendation='Laba bersih menunjukkan keuntungan. PER berada di tingkat yang tinggi. ROE menunjukkan keuntungan yang rendah.'))


    @Rule(Fact(net_income_valued='profit'), Fact(der_valued='low'), Fact(roa_valued='low'))
    def ipo_rule_2514(self):
        self.declare(Fact(recommendation='Laba bersih menunjukkan keuntungan. DER menunjukkan tingkat hutang yang rendah. ROA menunjukkan efisiensi rendah.'))


    @Rule(Fact(net_income_valued='profit'), Fact(der_valued='low'), Fact(roe_valued='low'))
    def ipo_rule_2515(self):
        self.declare(Fact(recommendation='Laba bersih menunjukkan keuntungan. DER menunjukkan tingkat hutang yang rendah. ROE menunjukkan keuntungan yang rendah.'))


    @Rule(Fact(net_income_valued='profit'), Fact(roa_valued='low'), Fact(roe_valued='low'))
    def ipo_rule_2516(self):
        self.declare(Fact(recommendation='Laba bersih menunjukkan keuntungan. ROA menunjukkan efisiensi rendah. ROE menunjukkan keuntungan yang rendah.'))


    @Rule(Fact(per_valued='high'), Fact(der_valued='low'), Fact(roa_valued='low'))
    def ipo_rule_2517(self):
        self.declare(Fact(recommendation='PER berada di tingkat yang tinggi. DER menunjukkan tingkat hutang yang rendah. ROA menunjukkan efisiensi rendah.'))


    @Rule(Fact(per_valued='high'), Fact(der_valued='low'), Fact(roe_valued='low'))
    def ipo_rule_2518(self):
        self.declare(Fact(recommendation='PER berada di tingkat yang tinggi. DER menunjukkan tingkat hutang yang rendah. ROE menunjukkan keuntungan yang rendah.'))


    @Rule(Fact(per_valued='high'), Fact(roa_valued='low'), Fact(roe_valued='low'))
    def ipo_rule_2519(self):
        self.declare(Fact(recommendation='PER berada di tingkat yang tinggi. ROA menunjukkan efisiensi rendah. ROE menunjukkan keuntungan yang rendah.'))


    @Rule(Fact(der_valued='low'), Fact(roa_valued='low'), Fact(roe_valued='low'))
    def ipo_rule_2520(self):
        self.declare(Fact(recommendation='DER menunjukkan tingkat hutang yang rendah. ROA menunjukkan efisiensi rendah. ROE menunjukkan keuntungan yang rendah.'))


    @Rule(Fact(underwriter_valued='bad'), Fact(warrant_valued='good'), Fact(net_income_valued='profit'))
    def ipo_rule_2521(self):
        self.declare(Fact(recommendation='Underwriter berkualitas buruk. Warrant menunjukkan kondisi baik. Laba bersih menunjukkan keuntungan.'))


    @Rule(Fact(underwriter_valued='bad'), Fact(warrant_valued='good'), Fact(per_valued='low'))
    def ipo_rule_2522(self):
        self.declare(Fact(recommendation='Underwriter berkualitas buruk. Warrant menunjukkan kondisi baik. PER berada di tingkat yang rendah.'))


    @Rule(Fact(underwriter_valued='bad'), Fact(warrant_valued='good'), Fact(der_valued='high'))
    def ipo_rule_2523(self):
        self.declare(Fact(recommendation='Underwriter berkualitas buruk. Warrant menunjukkan kondisi baik. DER menunjukkan tingkat hutang yang tinggi.'))


    @Rule(Fact(underwriter_valued='bad'), Fact(warrant_valued='good'), Fact(roa_valued='high'))
    def ipo_rule_2524(self):
        self.declare(Fact(recommendation='Underwriter berkualitas buruk. Warrant menunjukkan kondisi baik. ROA menunjukkan efisiensi tinggi.'))


    @Rule(Fact(underwriter_valued='bad'), Fact(warrant_valued='good'), Fact(roe_valued='high'))
    def ipo_rule_2525(self):
        self.declare(Fact(recommendation='Underwriter berkualitas buruk. Warrant menunjukkan kondisi baik. ROE menunjukkan keuntungan yang tinggi.'))


    @Rule(Fact(underwriter_valued='bad'), Fact(net_income_valued='profit'), Fact(per_valued='low'))
    def ipo_rule_2526(self):
        self.declare(Fact(recommendation='Underwriter berkualitas buruk. Laba bersih menunjukkan keuntungan. PER berada di tingkat yang rendah.'))


    @Rule(Fact(underwriter_valued='bad'), Fact(net_income_valued='profit'), Fact(der_valued='high'))
    def ipo_rule_2527(self):
        self.declare(Fact(recommendation='Underwriter berkualitas buruk. Laba bersih menunjukkan keuntungan. DER menunjukkan tingkat hutang yang tinggi.'))


    @Rule(Fact(underwriter_valued='bad'), Fact(net_income_valued='profit'), Fact(roa_valued='high'))
    def ipo_rule_2528(self):
        self.declare(Fact(recommendation='Underwriter berkualitas buruk. Laba bersih menunjukkan keuntungan. ROA menunjukkan efisiensi tinggi.'))


    @Rule(Fact(underwriter_valued='bad'), Fact(net_income_valued='profit'), Fact(roe_valued='high'))
    def ipo_rule_2529(self):
        self.declare(Fact(recommendation='Underwriter berkualitas buruk. Laba bersih menunjukkan keuntungan. ROE menunjukkan keuntungan yang tinggi.'))


    @Rule(Fact(underwriter_valued='bad'), Fact(per_valued='low'), Fact(der_valued='high'))
    def ipo_rule_2530(self):
        self.declare(Fact(recommendation='Underwriter berkualitas buruk. PER berada di tingkat yang rendah. DER menunjukkan tingkat hutang yang tinggi.'))


    @Rule(Fact(underwriter_valued='bad'), Fact(per_valued='low'), Fact(roa_valued='high'))
    def ipo_rule_2531(self):
        self.declare(Fact(recommendation='Underwriter berkualitas buruk. PER berada di tingkat yang rendah. ROA menunjukkan efisiensi tinggi.'))


    @Rule(Fact(underwriter_valued='bad'), Fact(per_valued='low'), Fact(roe_valued='high'))
    def ipo_rule_2532(self):
        self.declare(Fact(recommendation='Underwriter berkualitas buruk. PER berada di tingkat yang rendah. ROE menunjukkan keuntungan yang tinggi.'))


    @Rule(Fact(underwriter_valued='bad'), Fact(der_valued='high'), Fact(roa_valued='high'))
    def ipo_rule_2533(self):
        self.declare(Fact(recommendation='Underwriter berkualitas buruk. DER menunjukkan tingkat hutang yang tinggi. ROA menunjukkan efisiensi tinggi.'))


    @Rule(Fact(underwriter_valued='bad'), Fact(der_valued='high'), Fact(roe_valued='high'))
    def ipo_rule_2534(self):
        self.declare(Fact(recommendation='Underwriter berkualitas buruk. DER menunjukkan tingkat hutang yang tinggi. ROE menunjukkan keuntungan yang tinggi.'))


    @Rule(Fact(underwriter_valued='bad'), Fact(roa_valued='high'), Fact(roe_valued='high'))
    def ipo_rule_2535(self):
        self.declare(Fact(recommendation='Underwriter berkualitas buruk. ROA menunjukkan efisiensi tinggi. ROE menunjukkan keuntungan yang tinggi.'))


    @Rule(Fact(warrant_valued='good'), Fact(net_income_valued='profit'), Fact(per_valued='low'))
    def ipo_rule_2536(self):
        self.declare(Fact(recommendation='Warrant menunjukkan kondisi baik. Laba bersih menunjukkan keuntungan. PER berada di tingkat yang rendah.'))


    @Rule(Fact(warrant_valued='good'), Fact(net_income_valued='profit'), Fact(der_valued='high'))
    def ipo_rule_2537(self):
        self.declare(Fact(recommendation='Warrant menunjukkan kondisi baik. Laba bersih menunjukkan keuntungan. DER menunjukkan tingkat hutang yang tinggi.'))


    @Rule(Fact(warrant_valued='good'), Fact(net_income_valued='profit'), Fact(roa_valued='high'))
    def ipo_rule_2538(self):
        self.declare(Fact(recommendation='Warrant menunjukkan kondisi baik. Laba bersih menunjukkan keuntungan. ROA menunjukkan efisiensi tinggi.'))


    @Rule(Fact(warrant_valued='good'), Fact(net_income_valued='profit'), Fact(roe_valued='high'))
    def ipo_rule_2539(self):
        self.declare(Fact(recommendation='Warrant menunjukkan kondisi baik. Laba bersih menunjukkan keuntungan. ROE menunjukkan keuntungan yang tinggi.'))


    @Rule(Fact(warrant_valued='good'), Fact(per_valued='low'), Fact(der_valued='high'))
    def ipo_rule_2540(self):
        self.declare(Fact(recommendation='Warrant menunjukkan kondisi baik. PER berada di tingkat yang rendah. DER menunjukkan tingkat hutang yang tinggi.'))


    @Rule(Fact(warrant_valued='good'), Fact(per_valued='low'), Fact(roa_valued='high'))
    def ipo_rule_2541(self):
        self.declare(Fact(recommendation='Warrant menunjukkan kondisi baik. PER berada di tingkat yang rendah. ROA menunjukkan efisiensi tinggi.'))


    @Rule(Fact(warrant_valued='good'), Fact(per_valued='low'), Fact(roe_valued='high'))
    def ipo_rule_2542(self):
        self.declare(Fact(recommendation='Warrant menunjukkan kondisi baik. PER berada di tingkat yang rendah. ROE menunjukkan keuntungan yang tinggi.'))


    @Rule(Fact(warrant_valued='good'), Fact(der_valued='high'), Fact(roa_valued='high'))
    def ipo_rule_2543(self):
        self.declare(Fact(recommendation='Warrant menunjukkan kondisi baik. DER menunjukkan tingkat hutang yang tinggi. ROA menunjukkan efisiensi tinggi.'))


    @Rule(Fact(warrant_valued='good'), Fact(der_valued='high'), Fact(roe_valued='high'))
    def ipo_rule_2544(self):
        self.declare(Fact(recommendation='Warrant menunjukkan kondisi baik. DER menunjukkan tingkat hutang yang tinggi. ROE menunjukkan keuntungan yang tinggi.'))


    @Rule(Fact(warrant_valued='good'), Fact(roa_valued='high'), Fact(roe_valued='high'))
    def ipo_rule_2545(self):
        self.declare(Fact(recommendation='Warrant menunjukkan kondisi baik. ROA menunjukkan efisiensi tinggi. ROE menunjukkan keuntungan yang tinggi.'))


    @Rule(Fact(net_income_valued='profit'), Fact(per_valued='low'), Fact(der_valued='high'))
    def ipo_rule_2546(self):
        self.declare(Fact(recommendation='Laba bersih menunjukkan keuntungan. PER berada di tingkat yang rendah. DER menunjukkan tingkat hutang yang tinggi.'))


    @Rule(Fact(net_income_valued='profit'), Fact(per_valued='low'), Fact(roa_valued='high'))
    def ipo_rule_2547(self):
        self.declare(Fact(recommendation='Laba bersih menunjukkan keuntungan. PER berada di tingkat yang rendah. ROA menunjukkan efisiensi tinggi.'))


    @Rule(Fact(net_income_valued='profit'), Fact(per_valued='low'), Fact(roe_valued='high'))
    def ipo_rule_2548(self):
        self.declare(Fact(recommendation='Laba bersih menunjukkan keuntungan. PER berada di tingkat yang rendah. ROE menunjukkan keuntungan yang tinggi.'))


    @Rule(Fact(net_income_valued='profit'), Fact(der_valued='high'), Fact(roa_valued='high'))
    def ipo_rule_2549(self):
        self.declare(Fact(recommendation='Laba bersih menunjukkan keuntungan. DER menunjukkan tingkat hutang yang tinggi. ROA menunjukkan efisiensi tinggi.'))


    @Rule(Fact(net_income_valued='profit'), Fact(der_valued='high'), Fact(roe_valued='high'))
    def ipo_rule_2550(self):
        self.declare(Fact(recommendation='Laba bersih menunjukkan keuntungan. DER menunjukkan tingkat hutang yang tinggi. ROE menunjukkan keuntungan yang tinggi.'))


    @Rule(Fact(net_income_valued='profit'), Fact(roa_valued='high'), Fact(roe_valued='high'))
    def ipo_rule_2551(self):
        self.declare(Fact(recommendation='Laba bersih menunjukkan keuntungan. ROA menunjukkan efisiensi tinggi. ROE menunjukkan keuntungan yang tinggi.'))


    @Rule(Fact(per_valued='low'), Fact(der_valued='high'), Fact(roa_valued='high'))
    def ipo_rule_2552(self):
        self.declare(Fact(recommendation='PER berada di tingkat yang rendah. DER menunjukkan tingkat hutang yang tinggi. ROA menunjukkan efisiensi tinggi.'))


    @Rule(Fact(per_valued='low'), Fact(der_valued='high'), Fact(roe_valued='high'))
    def ipo_rule_2553(self):
        self.declare(Fact(recommendation='PER berada di tingkat yang rendah. DER menunjukkan tingkat hutang yang tinggi. ROE menunjukkan keuntungan yang tinggi.'))


    @Rule(Fact(per_valued='low'), Fact(roa_valued='high'), Fact(roe_valued='high'))
    def ipo_rule_2554(self):
        self.declare(Fact(recommendation='PER berada di tingkat yang rendah. ROA menunjukkan efisiensi tinggi. ROE menunjukkan keuntungan yang tinggi.'))


    @Rule(Fact(der_valued='high'), Fact(roa_valued='high'), Fact(roe_valued='high'))
    def ipo_rule_2555(self):
        self.declare(Fact(recommendation='DER menunjukkan tingkat hutang yang tinggi. ROA menunjukkan efisiensi tinggi. ROE menunjukkan keuntungan yang tinggi.'))


    @Rule(Fact(underwriter_valued='bad'), Fact(warrant_valued='good'), Fact(net_income_valued='profit'))
    def ipo_rule_2556(self):
        self.declare(Fact(recommendation='Underwriter berkualitas buruk. Warrant menunjukkan kondisi baik. Laba bersih menunjukkan keuntungan.'))


    @Rule(Fact(underwriter_valued='bad'), Fact(warrant_valued='good'), Fact(per_valued='low'))
    def ipo_rule_2557(self):
        self.declare(Fact(recommendation='Underwriter berkualitas buruk. Warrant menunjukkan kondisi baik. PER berada di tingkat yang rendah.'))


    @Rule(Fact(underwriter_valued='bad'), Fact(warrant_valued='good'), Fact(der_valued='high'))
    def ipo_rule_2558(self):
        self.declare(Fact(recommendation='Underwriter berkualitas buruk. Warrant menunjukkan kondisi baik. DER menunjukkan tingkat hutang yang tinggi.'))


    @Rule(Fact(underwriter_valued='bad'), Fact(warrant_valued='good'), Fact(roa_valued='high'))
    def ipo_rule_2559(self):
        self.declare(Fact(recommendation='Underwriter berkualitas buruk. Warrant menunjukkan kondisi baik. ROA menunjukkan efisiensi tinggi.'))


    @Rule(Fact(underwriter_valued='bad'), Fact(warrant_valued='good'), Fact(roe_valued='low'))
    def ipo_rule_2560(self):
        self.declare(Fact(recommendation='Underwriter berkualitas buruk. Warrant menunjukkan kondisi baik. ROE menunjukkan keuntungan yang rendah.'))


    @Rule(Fact(underwriter_valued='bad'), Fact(net_income_valued='profit'), Fact(per_valued='low'))
    def ipo_rule_2561(self):
        self.declare(Fact(recommendation='Underwriter berkualitas buruk. Laba bersih menunjukkan keuntungan. PER berada di tingkat yang rendah.'))


    @Rule(Fact(underwriter_valued='bad'), Fact(net_income_valued='profit'), Fact(der_valued='high'))
    def ipo_rule_2562(self):
        self.declare(Fact(recommendation='Underwriter berkualitas buruk. Laba bersih menunjukkan keuntungan. DER menunjukkan tingkat hutang yang tinggi.'))


    @Rule(Fact(underwriter_valued='bad'), Fact(net_income_valued='profit'), Fact(roa_valued='high'))
    def ipo_rule_2563(self):
        self.declare(Fact(recommendation='Underwriter berkualitas buruk. Laba bersih menunjukkan keuntungan. ROA menunjukkan efisiensi tinggi.'))


    @Rule(Fact(underwriter_valued='bad'), Fact(net_income_valued='profit'), Fact(roe_valued='low'))
    def ipo_rule_2564(self):
        self.declare(Fact(recommendation='Underwriter berkualitas buruk. Laba bersih menunjukkan keuntungan. ROE menunjukkan keuntungan yang rendah.'))


    @Rule(Fact(underwriter_valued='bad'), Fact(per_valued='low'), Fact(der_valued='high'))
    def ipo_rule_2565(self):
        self.declare(Fact(recommendation='Underwriter berkualitas buruk. PER berada di tingkat yang rendah. DER menunjukkan tingkat hutang yang tinggi.'))


    @Rule(Fact(underwriter_valued='bad'), Fact(per_valued='low'), Fact(roa_valued='high'))
    def ipo_rule_2566(self):
        self.declare(Fact(recommendation='Underwriter berkualitas buruk. PER berada di tingkat yang rendah. ROA menunjukkan efisiensi tinggi.'))


    @Rule(Fact(underwriter_valued='bad'), Fact(per_valued='low'), Fact(roe_valued='low'))
    def ipo_rule_2567(self):
        self.declare(Fact(recommendation='Underwriter berkualitas buruk. PER berada di tingkat yang rendah. ROE menunjukkan keuntungan yang rendah.'))


    @Rule(Fact(underwriter_valued='bad'), Fact(der_valued='high'), Fact(roa_valued='high'))
    def ipo_rule_2568(self):
        self.declare(Fact(recommendation='Underwriter berkualitas buruk. DER menunjukkan tingkat hutang yang tinggi. ROA menunjukkan efisiensi tinggi.'))


    @Rule(Fact(underwriter_valued='bad'), Fact(der_valued='high'), Fact(roe_valued='low'))
    def ipo_rule_2569(self):
        self.declare(Fact(recommendation='Underwriter berkualitas buruk. DER menunjukkan tingkat hutang yang tinggi. ROE menunjukkan keuntungan yang rendah.'))


    @Rule(Fact(underwriter_valued='bad'), Fact(roa_valued='high'), Fact(roe_valued='low'))
    def ipo_rule_2570(self):
        self.declare(Fact(recommendation='Underwriter berkualitas buruk. ROA menunjukkan efisiensi tinggi. ROE menunjukkan keuntungan yang rendah.'))


    @Rule(Fact(warrant_valued='good'), Fact(net_income_valued='profit'), Fact(per_valued='low'))
    def ipo_rule_2571(self):
        self.declare(Fact(recommendation='Warrant menunjukkan kondisi baik. Laba bersih menunjukkan keuntungan. PER berada di tingkat yang rendah.'))


    @Rule(Fact(warrant_valued='good'), Fact(net_income_valued='profit'), Fact(der_valued='high'))
    def ipo_rule_2572(self):
        self.declare(Fact(recommendation='Warrant menunjukkan kondisi baik. Laba bersih menunjukkan keuntungan. DER menunjukkan tingkat hutang yang tinggi.'))


    @Rule(Fact(warrant_valued='good'), Fact(net_income_valued='profit'), Fact(roa_valued='high'))
    def ipo_rule_2573(self):
        self.declare(Fact(recommendation='Warrant menunjukkan kondisi baik. Laba bersih menunjukkan keuntungan. ROA menunjukkan efisiensi tinggi.'))


    @Rule(Fact(warrant_valued='good'), Fact(net_income_valued='profit'), Fact(roe_valued='low'))
    def ipo_rule_2574(self):
        self.declare(Fact(recommendation='Warrant menunjukkan kondisi baik. Laba bersih menunjukkan keuntungan. ROE menunjukkan keuntungan yang rendah.'))


    @Rule(Fact(warrant_valued='good'), Fact(per_valued='low'), Fact(der_valued='high'))
    def ipo_rule_2575(self):
        self.declare(Fact(recommendation='Warrant menunjukkan kondisi baik. PER berada di tingkat yang rendah. DER menunjukkan tingkat hutang yang tinggi.'))


    @Rule(Fact(warrant_valued='good'), Fact(per_valued='low'), Fact(roa_valued='high'))
    def ipo_rule_2576(self):
        self.declare(Fact(recommendation='Warrant menunjukkan kondisi baik. PER berada di tingkat yang rendah. ROA menunjukkan efisiensi tinggi.'))


    @Rule(Fact(warrant_valued='good'), Fact(per_valued='low'), Fact(roe_valued='low'))
    def ipo_rule_2577(self):
        self.declare(Fact(recommendation='Warrant menunjukkan kondisi baik. PER berada di tingkat yang rendah. ROE menunjukkan keuntungan yang rendah.'))


    @Rule(Fact(warrant_valued='good'), Fact(der_valued='high'), Fact(roa_valued='high'))
    def ipo_rule_2578(self):
        self.declare(Fact(recommendation='Warrant menunjukkan kondisi baik. DER menunjukkan tingkat hutang yang tinggi. ROA menunjukkan efisiensi tinggi.'))


    @Rule(Fact(warrant_valued='good'), Fact(der_valued='high'), Fact(roe_valued='low'))
    def ipo_rule_2579(self):
        self.declare(Fact(recommendation='Warrant menunjukkan kondisi baik. DER menunjukkan tingkat hutang yang tinggi. ROE menunjukkan keuntungan yang rendah.'))


    @Rule(Fact(warrant_valued='good'), Fact(roa_valued='high'), Fact(roe_valued='low'))
    def ipo_rule_2580(self):
        self.declare(Fact(recommendation='Warrant menunjukkan kondisi baik. ROA menunjukkan efisiensi tinggi. ROE menunjukkan keuntungan yang rendah.'))


    @Rule(Fact(net_income_valued='profit'), Fact(per_valued='low'), Fact(der_valued='high'))
    def ipo_rule_2581(self):
        self.declare(Fact(recommendation='Laba bersih menunjukkan keuntungan. PER berada di tingkat yang rendah. DER menunjukkan tingkat hutang yang tinggi.'))


    @Rule(Fact(net_income_valued='profit'), Fact(per_valued='low'), Fact(roa_valued='high'))
    def ipo_rule_2582(self):
        self.declare(Fact(recommendation='Laba bersih menunjukkan keuntungan. PER berada di tingkat yang rendah. ROA menunjukkan efisiensi tinggi.'))


    @Rule(Fact(net_income_valued='profit'), Fact(per_valued='low'), Fact(roe_valued='low'))
    def ipo_rule_2583(self):
        self.declare(Fact(recommendation='Laba bersih menunjukkan keuntungan. PER berada di tingkat yang rendah. ROE menunjukkan keuntungan yang rendah.'))


    @Rule(Fact(net_income_valued='profit'), Fact(der_valued='high'), Fact(roa_valued='high'))
    def ipo_rule_2584(self):
        self.declare(Fact(recommendation='Laba bersih menunjukkan keuntungan. DER menunjukkan tingkat hutang yang tinggi. ROA menunjukkan efisiensi tinggi.'))


    @Rule(Fact(net_income_valued='profit'), Fact(der_valued='high'), Fact(roe_valued='low'))
    def ipo_rule_2585(self):
        self.declare(Fact(recommendation='Laba bersih menunjukkan keuntungan. DER menunjukkan tingkat hutang yang tinggi. ROE menunjukkan keuntungan yang rendah.'))


    @Rule(Fact(net_income_valued='profit'), Fact(roa_valued='high'), Fact(roe_valued='low'))
    def ipo_rule_2586(self):
        self.declare(Fact(recommendation='Laba bersih menunjukkan keuntungan. ROA menunjukkan efisiensi tinggi. ROE menunjukkan keuntungan yang rendah.'))


    @Rule(Fact(per_valued='low'), Fact(der_valued='high'), Fact(roa_valued='high'))
    def ipo_rule_2587(self):
        self.declare(Fact(recommendation='PER berada di tingkat yang rendah. DER menunjukkan tingkat hutang yang tinggi. ROA menunjukkan efisiensi tinggi.'))


    @Rule(Fact(per_valued='low'), Fact(der_valued='high'), Fact(roe_valued='low'))
    def ipo_rule_2588(self):
        self.declare(Fact(recommendation='PER berada di tingkat yang rendah. DER menunjukkan tingkat hutang yang tinggi. ROE menunjukkan keuntungan yang rendah.'))


    @Rule(Fact(per_valued='low'), Fact(roa_valued='high'), Fact(roe_valued='low'))
    def ipo_rule_2589(self):
        self.declare(Fact(recommendation='PER berada di tingkat yang rendah. ROA menunjukkan efisiensi tinggi. ROE menunjukkan keuntungan yang rendah.'))


    @Rule(Fact(der_valued='high'), Fact(roa_valued='high'), Fact(roe_valued='low'))
    def ipo_rule_2590(self):
        self.declare(Fact(recommendation='DER menunjukkan tingkat hutang yang tinggi. ROA menunjukkan efisiensi tinggi. ROE menunjukkan keuntungan yang rendah.'))


    @Rule(Fact(underwriter_valued='bad'), Fact(warrant_valued='good'), Fact(net_income_valued='profit'))
    def ipo_rule_2591(self):
        self.declare(Fact(recommendation='Underwriter berkualitas buruk. Warrant menunjukkan kondisi baik. Laba bersih menunjukkan keuntungan.'))


    @Rule(Fact(underwriter_valued='bad'), Fact(warrant_valued='good'), Fact(per_valued='low'))
    def ipo_rule_2592(self):
        self.declare(Fact(recommendation='Underwriter berkualitas buruk. Warrant menunjukkan kondisi baik. PER berada di tingkat yang rendah.'))


    @Rule(Fact(underwriter_valued='bad'), Fact(warrant_valued='good'), Fact(der_valued='high'))
    def ipo_rule_2593(self):
        self.declare(Fact(recommendation='Underwriter berkualitas buruk. Warrant menunjukkan kondisi baik. DER menunjukkan tingkat hutang yang tinggi.'))


    @Rule(Fact(underwriter_valued='bad'), Fact(warrant_valued='good'), Fact(roa_valued='low'))
    def ipo_rule_2594(self):
        self.declare(Fact(recommendation='Underwriter berkualitas buruk. Warrant menunjukkan kondisi baik. ROA menunjukkan efisiensi rendah.'))


    @Rule(Fact(underwriter_valued='bad'), Fact(warrant_valued='good'), Fact(roe_valued='high'))
    def ipo_rule_2595(self):
        self.declare(Fact(recommendation='Underwriter berkualitas buruk. Warrant menunjukkan kondisi baik. ROE menunjukkan keuntungan yang tinggi.'))


    @Rule(Fact(underwriter_valued='bad'), Fact(net_income_valued='profit'), Fact(per_valued='low'))
    def ipo_rule_2596(self):
        self.declare(Fact(recommendation='Underwriter berkualitas buruk. Laba bersih menunjukkan keuntungan. PER berada di tingkat yang rendah.'))


    @Rule(Fact(underwriter_valued='bad'), Fact(net_income_valued='profit'), Fact(der_valued='high'))
    def ipo_rule_2597(self):
        self.declare(Fact(recommendation='Underwriter berkualitas buruk. Laba bersih menunjukkan keuntungan. DER menunjukkan tingkat hutang yang tinggi.'))


    @Rule(Fact(underwriter_valued='bad'), Fact(net_income_valued='profit'), Fact(roa_valued='low'))
    def ipo_rule_2598(self):
        self.declare(Fact(recommendation='Underwriter berkualitas buruk. Laba bersih menunjukkan keuntungan. ROA menunjukkan efisiensi rendah.'))


    @Rule(Fact(underwriter_valued='bad'), Fact(net_income_valued='profit'), Fact(roe_valued='high'))
    def ipo_rule_2599(self):
        self.declare(Fact(recommendation='Underwriter berkualitas buruk. Laba bersih menunjukkan keuntungan. ROE menunjukkan keuntungan yang tinggi.'))


    @Rule(Fact(underwriter_valued='bad'), Fact(per_valued='low'), Fact(der_valued='high'))
    def ipo_rule_2600(self):
        self.declare(Fact(recommendation='Underwriter berkualitas buruk. PER berada di tingkat yang rendah. DER menunjukkan tingkat hutang yang tinggi.'))


    @Rule(Fact(underwriter_valued='bad'), Fact(per_valued='low'), Fact(roa_valued='low'))
    def ipo_rule_2601(self):
        self.declare(Fact(recommendation='Underwriter berkualitas buruk. PER berada di tingkat yang rendah. ROA menunjukkan efisiensi rendah.'))


    @Rule(Fact(underwriter_valued='bad'), Fact(per_valued='low'), Fact(roe_valued='high'))
    def ipo_rule_2602(self):
        self.declare(Fact(recommendation='Underwriter berkualitas buruk. PER berada di tingkat yang rendah. ROE menunjukkan keuntungan yang tinggi.'))


    @Rule(Fact(underwriter_valued='bad'), Fact(der_valued='high'), Fact(roa_valued='low'))
    def ipo_rule_2603(self):
        self.declare(Fact(recommendation='Underwriter berkualitas buruk. DER menunjukkan tingkat hutang yang tinggi. ROA menunjukkan efisiensi rendah.'))


    @Rule(Fact(underwriter_valued='bad'), Fact(der_valued='high'), Fact(roe_valued='high'))
    def ipo_rule_2604(self):
        self.declare(Fact(recommendation='Underwriter berkualitas buruk. DER menunjukkan tingkat hutang yang tinggi. ROE menunjukkan keuntungan yang tinggi.'))


    @Rule(Fact(underwriter_valued='bad'), Fact(roa_valued='low'), Fact(roe_valued='high'))
    def ipo_rule_2605(self):
        self.declare(Fact(recommendation='Underwriter berkualitas buruk. ROA menunjukkan efisiensi rendah. ROE menunjukkan keuntungan yang tinggi.'))


    @Rule(Fact(warrant_valued='good'), Fact(net_income_valued='profit'), Fact(per_valued='low'))
    def ipo_rule_2606(self):
        self.declare(Fact(recommendation='Warrant menunjukkan kondisi baik. Laba bersih menunjukkan keuntungan. PER berada di tingkat yang rendah.'))


    @Rule(Fact(warrant_valued='good'), Fact(net_income_valued='profit'), Fact(der_valued='high'))
    def ipo_rule_2607(self):
        self.declare(Fact(recommendation='Warrant menunjukkan kondisi baik. Laba bersih menunjukkan keuntungan. DER menunjukkan tingkat hutang yang tinggi.'))


    @Rule(Fact(warrant_valued='good'), Fact(net_income_valued='profit'), Fact(roa_valued='low'))
    def ipo_rule_2608(self):
        self.declare(Fact(recommendation='Warrant menunjukkan kondisi baik. Laba bersih menunjukkan keuntungan. ROA menunjukkan efisiensi rendah.'))


    @Rule(Fact(warrant_valued='good'), Fact(net_income_valued='profit'), Fact(roe_valued='high'))
    def ipo_rule_2609(self):
        self.declare(Fact(recommendation='Warrant menunjukkan kondisi baik. Laba bersih menunjukkan keuntungan. ROE menunjukkan keuntungan yang tinggi.'))


    @Rule(Fact(warrant_valued='good'), Fact(per_valued='low'), Fact(der_valued='high'))
    def ipo_rule_2610(self):
        self.declare(Fact(recommendation='Warrant menunjukkan kondisi baik. PER berada di tingkat yang rendah. DER menunjukkan tingkat hutang yang tinggi.'))


    @Rule(Fact(warrant_valued='good'), Fact(per_valued='low'), Fact(roa_valued='low'))
    def ipo_rule_2611(self):
        self.declare(Fact(recommendation='Warrant menunjukkan kondisi baik. PER berada di tingkat yang rendah. ROA menunjukkan efisiensi rendah.'))


    @Rule(Fact(warrant_valued='good'), Fact(per_valued='low'), Fact(roe_valued='high'))
    def ipo_rule_2612(self):
        self.declare(Fact(recommendation='Warrant menunjukkan kondisi baik. PER berada di tingkat yang rendah. ROE menunjukkan keuntungan yang tinggi.'))


    @Rule(Fact(warrant_valued='good'), Fact(der_valued='high'), Fact(roa_valued='low'))
    def ipo_rule_2613(self):
        self.declare(Fact(recommendation='Warrant menunjukkan kondisi baik. DER menunjukkan tingkat hutang yang tinggi. ROA menunjukkan efisiensi rendah.'))


    @Rule(Fact(warrant_valued='good'), Fact(der_valued='high'), Fact(roe_valued='high'))
    def ipo_rule_2614(self):
        self.declare(Fact(recommendation='Warrant menunjukkan kondisi baik. DER menunjukkan tingkat hutang yang tinggi. ROE menunjukkan keuntungan yang tinggi.'))


    @Rule(Fact(warrant_valued='good'), Fact(roa_valued='low'), Fact(roe_valued='high'))
    def ipo_rule_2615(self):
        self.declare(Fact(recommendation='Warrant menunjukkan kondisi baik. ROA menunjukkan efisiensi rendah. ROE menunjukkan keuntungan yang tinggi.'))


    @Rule(Fact(net_income_valued='profit'), Fact(per_valued='low'), Fact(der_valued='high'))
    def ipo_rule_2616(self):
        self.declare(Fact(recommendation='Laba bersih menunjukkan keuntungan. PER berada di tingkat yang rendah. DER menunjukkan tingkat hutang yang tinggi.'))


    @Rule(Fact(net_income_valued='profit'), Fact(per_valued='low'), Fact(roa_valued='low'))
    def ipo_rule_2617(self):
        self.declare(Fact(recommendation='Laba bersih menunjukkan keuntungan. PER berada di tingkat yang rendah. ROA menunjukkan efisiensi rendah.'))


    @Rule(Fact(net_income_valued='profit'), Fact(per_valued='low'), Fact(roe_valued='high'))
    def ipo_rule_2618(self):
        self.declare(Fact(recommendation='Laba bersih menunjukkan keuntungan. PER berada di tingkat yang rendah. ROE menunjukkan keuntungan yang tinggi.'))


    @Rule(Fact(net_income_valued='profit'), Fact(der_valued='high'), Fact(roa_valued='low'))
    def ipo_rule_2619(self):
        self.declare(Fact(recommendation='Laba bersih menunjukkan keuntungan. DER menunjukkan tingkat hutang yang tinggi. ROA menunjukkan efisiensi rendah.'))


    @Rule(Fact(net_income_valued='profit'), Fact(der_valued='high'), Fact(roe_valued='high'))
    def ipo_rule_2620(self):
        self.declare(Fact(recommendation='Laba bersih menunjukkan keuntungan. DER menunjukkan tingkat hutang yang tinggi. ROE menunjukkan keuntungan yang tinggi.'))


    @Rule(Fact(net_income_valued='profit'), Fact(roa_valued='low'), Fact(roe_valued='high'))
    def ipo_rule_2621(self):
        self.declare(Fact(recommendation='Laba bersih menunjukkan keuntungan. ROA menunjukkan efisiensi rendah. ROE menunjukkan keuntungan yang tinggi.'))


    @Rule(Fact(per_valued='low'), Fact(der_valued='high'), Fact(roa_valued='low'))
    def ipo_rule_2622(self):
        self.declare(Fact(recommendation='PER berada di tingkat yang rendah. DER menunjukkan tingkat hutang yang tinggi. ROA menunjukkan efisiensi rendah.'))


    @Rule(Fact(per_valued='low'), Fact(der_valued='high'), Fact(roe_valued='high'))
    def ipo_rule_2623(self):
        self.declare(Fact(recommendation='PER berada di tingkat yang rendah. DER menunjukkan tingkat hutang yang tinggi. ROE menunjukkan keuntungan yang tinggi.'))


    @Rule(Fact(per_valued='low'), Fact(roa_valued='low'), Fact(roe_valued='high'))
    def ipo_rule_2624(self):
        self.declare(Fact(recommendation='PER berada di tingkat yang rendah. ROA menunjukkan efisiensi rendah. ROE menunjukkan keuntungan yang tinggi.'))


    @Rule(Fact(der_valued='high'), Fact(roa_valued='low'), Fact(roe_valued='high'))
    def ipo_rule_2625(self):
        self.declare(Fact(recommendation='DER menunjukkan tingkat hutang yang tinggi. ROA menunjukkan efisiensi rendah. ROE menunjukkan keuntungan yang tinggi.'))


    @Rule(Fact(underwriter_valued='bad'), Fact(warrant_valued='good'), Fact(net_income_valued='profit'))
    def ipo_rule_2626(self):
        self.declare(Fact(recommendation='Underwriter berkualitas buruk. Warrant menunjukkan kondisi baik. Laba bersih menunjukkan keuntungan.'))


    @Rule(Fact(underwriter_valued='bad'), Fact(warrant_valued='good'), Fact(per_valued='low'))
    def ipo_rule_2627(self):
        self.declare(Fact(recommendation='Underwriter berkualitas buruk. Warrant menunjukkan kondisi baik. PER berada di tingkat yang rendah.'))


    @Rule(Fact(underwriter_valued='bad'), Fact(warrant_valued='good'), Fact(der_valued='high'))
    def ipo_rule_2628(self):
        self.declare(Fact(recommendation='Underwriter berkualitas buruk. Warrant menunjukkan kondisi baik. DER menunjukkan tingkat hutang yang tinggi.'))


    @Rule(Fact(underwriter_valued='bad'), Fact(warrant_valued='good'), Fact(roa_valued='low'))
    def ipo_rule_2629(self):
        self.declare(Fact(recommendation='Underwriter berkualitas buruk. Warrant menunjukkan kondisi baik. ROA menunjukkan efisiensi rendah.'))


    @Rule(Fact(underwriter_valued='bad'), Fact(warrant_valued='good'), Fact(roe_valued='low'))
    def ipo_rule_2630(self):
        self.declare(Fact(recommendation='Underwriter berkualitas buruk. Warrant menunjukkan kondisi baik. ROE menunjukkan keuntungan yang rendah.'))


    @Rule(Fact(underwriter_valued='bad'), Fact(net_income_valued='profit'), Fact(per_valued='low'))
    def ipo_rule_2631(self):
        self.declare(Fact(recommendation='Underwriter berkualitas buruk. Laba bersih menunjukkan keuntungan. PER berada di tingkat yang rendah.'))


    @Rule(Fact(underwriter_valued='bad'), Fact(net_income_valued='profit'), Fact(der_valued='high'))
    def ipo_rule_2632(self):
        self.declare(Fact(recommendation='Underwriter berkualitas buruk. Laba bersih menunjukkan keuntungan. DER menunjukkan tingkat hutang yang tinggi.'))


    @Rule(Fact(underwriter_valued='bad'), Fact(net_income_valued='profit'), Fact(roa_valued='low'))
    def ipo_rule_2633(self):
        self.declare(Fact(recommendation='Underwriter berkualitas buruk. Laba bersih menunjukkan keuntungan. ROA menunjukkan efisiensi rendah.'))


    @Rule(Fact(underwriter_valued='bad'), Fact(net_income_valued='profit'), Fact(roe_valued='low'))
    def ipo_rule_2634(self):
        self.declare(Fact(recommendation='Underwriter berkualitas buruk. Laba bersih menunjukkan keuntungan. ROE menunjukkan keuntungan yang rendah.'))


    @Rule(Fact(underwriter_valued='bad'), Fact(per_valued='low'), Fact(der_valued='high'))
    def ipo_rule_2635(self):
        self.declare(Fact(recommendation='Underwriter berkualitas buruk. PER berada di tingkat yang rendah. DER menunjukkan tingkat hutang yang tinggi.'))


    @Rule(Fact(underwriter_valued='bad'), Fact(per_valued='low'), Fact(roa_valued='low'))
    def ipo_rule_2636(self):
        self.declare(Fact(recommendation='Underwriter berkualitas buruk. PER berada di tingkat yang rendah. ROA menunjukkan efisiensi rendah.'))


    @Rule(Fact(underwriter_valued='bad'), Fact(per_valued='low'), Fact(roe_valued='low'))
    def ipo_rule_2637(self):
        self.declare(Fact(recommendation='Underwriter berkualitas buruk. PER berada di tingkat yang rendah. ROE menunjukkan keuntungan yang rendah.'))


    @Rule(Fact(underwriter_valued='bad'), Fact(der_valued='high'), Fact(roa_valued='low'))
    def ipo_rule_2638(self):
        self.declare(Fact(recommendation='Underwriter berkualitas buruk. DER menunjukkan tingkat hutang yang tinggi. ROA menunjukkan efisiensi rendah.'))


    @Rule(Fact(underwriter_valued='bad'), Fact(der_valued='high'), Fact(roe_valued='low'))
    def ipo_rule_2639(self):
        self.declare(Fact(recommendation='Underwriter berkualitas buruk. DER menunjukkan tingkat hutang yang tinggi. ROE menunjukkan keuntungan yang rendah.'))


    @Rule(Fact(underwriter_valued='bad'), Fact(roa_valued='low'), Fact(roe_valued='low'))
    def ipo_rule_2640(self):
        self.declare(Fact(recommendation='Underwriter berkualitas buruk. ROA menunjukkan efisiensi rendah. ROE menunjukkan keuntungan yang rendah.'))


    @Rule(Fact(warrant_valued='good'), Fact(net_income_valued='profit'), Fact(per_valued='low'))
    def ipo_rule_2641(self):
        self.declare(Fact(recommendation='Warrant menunjukkan kondisi baik. Laba bersih menunjukkan keuntungan. PER berada di tingkat yang rendah.'))


    @Rule(Fact(warrant_valued='good'), Fact(net_income_valued='profit'), Fact(der_valued='high'))
    def ipo_rule_2642(self):
        self.declare(Fact(recommendation='Warrant menunjukkan kondisi baik. Laba bersih menunjukkan keuntungan. DER menunjukkan tingkat hutang yang tinggi.'))


    @Rule(Fact(warrant_valued='good'), Fact(net_income_valued='profit'), Fact(roa_valued='low'))
    def ipo_rule_2643(self):
        self.declare(Fact(recommendation='Warrant menunjukkan kondisi baik. Laba bersih menunjukkan keuntungan. ROA menunjukkan efisiensi rendah.'))


    @Rule(Fact(warrant_valued='good'), Fact(net_income_valued='profit'), Fact(roe_valued='low'))
    def ipo_rule_2644(self):
        self.declare(Fact(recommendation='Warrant menunjukkan kondisi baik. Laba bersih menunjukkan keuntungan. ROE menunjukkan keuntungan yang rendah.'))


    @Rule(Fact(warrant_valued='good'), Fact(per_valued='low'), Fact(der_valued='high'))
    def ipo_rule_2645(self):
        self.declare(Fact(recommendation='Warrant menunjukkan kondisi baik. PER berada di tingkat yang rendah. DER menunjukkan tingkat hutang yang tinggi.'))


    @Rule(Fact(warrant_valued='good'), Fact(per_valued='low'), Fact(roa_valued='low'))
    def ipo_rule_2646(self):
        self.declare(Fact(recommendation='Warrant menunjukkan kondisi baik. PER berada di tingkat yang rendah. ROA menunjukkan efisiensi rendah.'))


    @Rule(Fact(warrant_valued='good'), Fact(per_valued='low'), Fact(roe_valued='low'))
    def ipo_rule_2647(self):
        self.declare(Fact(recommendation='Warrant menunjukkan kondisi baik. PER berada di tingkat yang rendah. ROE menunjukkan keuntungan yang rendah.'))


    @Rule(Fact(warrant_valued='good'), Fact(der_valued='high'), Fact(roa_valued='low'))
    def ipo_rule_2648(self):
        self.declare(Fact(recommendation='Warrant menunjukkan kondisi baik. DER menunjukkan tingkat hutang yang tinggi. ROA menunjukkan efisiensi rendah.'))


    @Rule(Fact(warrant_valued='good'), Fact(der_valued='high'), Fact(roe_valued='low'))
    def ipo_rule_2649(self):
        self.declare(Fact(recommendation='Warrant menunjukkan kondisi baik. DER menunjukkan tingkat hutang yang tinggi. ROE menunjukkan keuntungan yang rendah.'))


    @Rule(Fact(warrant_valued='good'), Fact(roa_valued='low'), Fact(roe_valued='low'))
    def ipo_rule_2650(self):
        self.declare(Fact(recommendation='Warrant menunjukkan kondisi baik. ROA menunjukkan efisiensi rendah. ROE menunjukkan keuntungan yang rendah.'))


    @Rule(Fact(net_income_valued='profit'), Fact(per_valued='low'), Fact(der_valued='high'))
    def ipo_rule_2651(self):
        self.declare(Fact(recommendation='Laba bersih menunjukkan keuntungan. PER berada di tingkat yang rendah. DER menunjukkan tingkat hutang yang tinggi.'))


    @Rule(Fact(net_income_valued='profit'), Fact(per_valued='low'), Fact(roa_valued='low'))
    def ipo_rule_2652(self):
        self.declare(Fact(recommendation='Laba bersih menunjukkan keuntungan. PER berada di tingkat yang rendah. ROA menunjukkan efisiensi rendah.'))


    @Rule(Fact(net_income_valued='profit'), Fact(per_valued='low'), Fact(roe_valued='low'))
    def ipo_rule_2653(self):
        self.declare(Fact(recommendation='Laba bersih menunjukkan keuntungan. PER berada di tingkat yang rendah. ROE menunjukkan keuntungan yang rendah.'))


    @Rule(Fact(net_income_valued='profit'), Fact(der_valued='high'), Fact(roa_valued='low'))
    def ipo_rule_2654(self):
        self.declare(Fact(recommendation='Laba bersih menunjukkan keuntungan. DER menunjukkan tingkat hutang yang tinggi. ROA menunjukkan efisiensi rendah.'))


    @Rule(Fact(net_income_valued='profit'), Fact(der_valued='high'), Fact(roe_valued='low'))
    def ipo_rule_2655(self):
        self.declare(Fact(recommendation='Laba bersih menunjukkan keuntungan. DER menunjukkan tingkat hutang yang tinggi. ROE menunjukkan keuntungan yang rendah.'))


    @Rule(Fact(net_income_valued='profit'), Fact(roa_valued='low'), Fact(roe_valued='low'))
    def ipo_rule_2656(self):
        self.declare(Fact(recommendation='Laba bersih menunjukkan keuntungan. ROA menunjukkan efisiensi rendah. ROE menunjukkan keuntungan yang rendah.'))


    @Rule(Fact(per_valued='low'), Fact(der_valued='high'), Fact(roa_valued='low'))
    def ipo_rule_2657(self):
        self.declare(Fact(recommendation='PER berada di tingkat yang rendah. DER menunjukkan tingkat hutang yang tinggi. ROA menunjukkan efisiensi rendah.'))


    @Rule(Fact(per_valued='low'), Fact(der_valued='high'), Fact(roe_valued='low'))
    def ipo_rule_2658(self):
        self.declare(Fact(recommendation='PER berada di tingkat yang rendah. DER menunjukkan tingkat hutang yang tinggi. ROE menunjukkan keuntungan yang rendah.'))


    @Rule(Fact(per_valued='low'), Fact(roa_valued='low'), Fact(roe_valued='low'))
    def ipo_rule_2659(self):
        self.declare(Fact(recommendation='PER berada di tingkat yang rendah. ROA menunjukkan efisiensi rendah. ROE menunjukkan keuntungan yang rendah.'))


    @Rule(Fact(der_valued='high'), Fact(roa_valued='low'), Fact(roe_valued='low'))
    def ipo_rule_2660(self):
        self.declare(Fact(recommendation='DER menunjukkan tingkat hutang yang tinggi. ROA menunjukkan efisiensi rendah. ROE menunjukkan keuntungan yang rendah.'))


    @Rule(Fact(underwriter_valued='bad'), Fact(warrant_valued='good'), Fact(net_income_valued='profit'))
    def ipo_rule_2661(self):
        self.declare(Fact(recommendation='Underwriter berkualitas buruk. Warrant menunjukkan kondisi baik. Laba bersih menunjukkan keuntungan.'))


    @Rule(Fact(underwriter_valued='bad'), Fact(warrant_valued='good'), Fact(per_valued='low'))
    def ipo_rule_2662(self):
        self.declare(Fact(recommendation='Underwriter berkualitas buruk. Warrant menunjukkan kondisi baik. PER berada di tingkat yang rendah.'))


    @Rule(Fact(underwriter_valued='bad'), Fact(warrant_valued='good'), Fact(der_valued='low'))
    def ipo_rule_2663(self):
        self.declare(Fact(recommendation='Underwriter berkualitas buruk. Warrant menunjukkan kondisi baik. DER menunjukkan tingkat hutang yang rendah.'))


    @Rule(Fact(underwriter_valued='bad'), Fact(warrant_valued='good'), Fact(roa_valued='high'))
    def ipo_rule_2664(self):
        self.declare(Fact(recommendation='Underwriter berkualitas buruk. Warrant menunjukkan kondisi baik. ROA menunjukkan efisiensi tinggi.'))


    @Rule(Fact(underwriter_valued='bad'), Fact(warrant_valued='good'), Fact(roe_valued='high'))
    def ipo_rule_2665(self):
        self.declare(Fact(recommendation='Underwriter berkualitas buruk. Warrant menunjukkan kondisi baik. ROE menunjukkan keuntungan yang tinggi.'))


    @Rule(Fact(underwriter_valued='bad'), Fact(net_income_valued='profit'), Fact(per_valued='low'))
    def ipo_rule_2666(self):
        self.declare(Fact(recommendation='Underwriter berkualitas buruk. Laba bersih menunjukkan keuntungan. PER berada di tingkat yang rendah.'))


    @Rule(Fact(underwriter_valued='bad'), Fact(net_income_valued='profit'), Fact(der_valued='low'))
    def ipo_rule_2667(self):
        self.declare(Fact(recommendation='Underwriter berkualitas buruk. Laba bersih menunjukkan keuntungan. DER menunjukkan tingkat hutang yang rendah.'))


    @Rule(Fact(underwriter_valued='bad'), Fact(net_income_valued='profit'), Fact(roa_valued='high'))
    def ipo_rule_2668(self):
        self.declare(Fact(recommendation='Underwriter berkualitas buruk. Laba bersih menunjukkan keuntungan. ROA menunjukkan efisiensi tinggi.'))


    @Rule(Fact(underwriter_valued='bad'), Fact(net_income_valued='profit'), Fact(roe_valued='high'))
    def ipo_rule_2669(self):
        self.declare(Fact(recommendation='Underwriter berkualitas buruk. Laba bersih menunjukkan keuntungan. ROE menunjukkan keuntungan yang tinggi.'))


    @Rule(Fact(underwriter_valued='bad'), Fact(per_valued='low'), Fact(der_valued='low'))
    def ipo_rule_2670(self):
        self.declare(Fact(recommendation='Underwriter berkualitas buruk. PER berada di tingkat yang rendah. DER menunjukkan tingkat hutang yang rendah.'))


    @Rule(Fact(underwriter_valued='bad'), Fact(per_valued='low'), Fact(roa_valued='high'))
    def ipo_rule_2671(self):
        self.declare(Fact(recommendation='Underwriter berkualitas buruk. PER berada di tingkat yang rendah. ROA menunjukkan efisiensi tinggi.'))


    @Rule(Fact(underwriter_valued='bad'), Fact(per_valued='low'), Fact(roe_valued='high'))
    def ipo_rule_2672(self):
        self.declare(Fact(recommendation='Underwriter berkualitas buruk. PER berada di tingkat yang rendah. ROE menunjukkan keuntungan yang tinggi.'))


    @Rule(Fact(underwriter_valued='bad'), Fact(der_valued='low'), Fact(roa_valued='high'))
    def ipo_rule_2673(self):
        self.declare(Fact(recommendation='Underwriter berkualitas buruk. DER menunjukkan tingkat hutang yang rendah. ROA menunjukkan efisiensi tinggi.'))


    @Rule(Fact(underwriter_valued='bad'), Fact(der_valued='low'), Fact(roe_valued='high'))
    def ipo_rule_2674(self):
        self.declare(Fact(recommendation='Underwriter berkualitas buruk. DER menunjukkan tingkat hutang yang rendah. ROE menunjukkan keuntungan yang tinggi.'))


    @Rule(Fact(underwriter_valued='bad'), Fact(roa_valued='high'), Fact(roe_valued='high'))
    def ipo_rule_2675(self):
        self.declare(Fact(recommendation='Underwriter berkualitas buruk. ROA menunjukkan efisiensi tinggi. ROE menunjukkan keuntungan yang tinggi.'))


    @Rule(Fact(warrant_valued='good'), Fact(net_income_valued='profit'), Fact(per_valued='low'))
    def ipo_rule_2676(self):
        self.declare(Fact(recommendation='Warrant menunjukkan kondisi baik. Laba bersih menunjukkan keuntungan. PER berada di tingkat yang rendah.'))


    @Rule(Fact(warrant_valued='good'), Fact(net_income_valued='profit'), Fact(der_valued='low'))
    def ipo_rule_2677(self):
        self.declare(Fact(recommendation='Warrant menunjukkan kondisi baik. Laba bersih menunjukkan keuntungan. DER menunjukkan tingkat hutang yang rendah.'))


    @Rule(Fact(warrant_valued='good'), Fact(net_income_valued='profit'), Fact(roa_valued='high'))
    def ipo_rule_2678(self):
        self.declare(Fact(recommendation='Warrant menunjukkan kondisi baik. Laba bersih menunjukkan keuntungan. ROA menunjukkan efisiensi tinggi.'))


    @Rule(Fact(warrant_valued='good'), Fact(net_income_valued='profit'), Fact(roe_valued='high'))
    def ipo_rule_2679(self):
        self.declare(Fact(recommendation='Warrant menunjukkan kondisi baik. Laba bersih menunjukkan keuntungan. ROE menunjukkan keuntungan yang tinggi.'))


    @Rule(Fact(warrant_valued='good'), Fact(per_valued='low'), Fact(der_valued='low'))
    def ipo_rule_2680(self):
        self.declare(Fact(recommendation='Warrant menunjukkan kondisi baik. PER berada di tingkat yang rendah. DER menunjukkan tingkat hutang yang rendah.'))


    @Rule(Fact(warrant_valued='good'), Fact(per_valued='low'), Fact(roa_valued='high'))
    def ipo_rule_2681(self):
        self.declare(Fact(recommendation='Warrant menunjukkan kondisi baik. PER berada di tingkat yang rendah. ROA menunjukkan efisiensi tinggi.'))


    @Rule(Fact(warrant_valued='good'), Fact(per_valued='low'), Fact(roe_valued='high'))
    def ipo_rule_2682(self):
        self.declare(Fact(recommendation='Warrant menunjukkan kondisi baik. PER berada di tingkat yang rendah. ROE menunjukkan keuntungan yang tinggi.'))


    @Rule(Fact(warrant_valued='good'), Fact(der_valued='low'), Fact(roa_valued='high'))
    def ipo_rule_2683(self):
        self.declare(Fact(recommendation='Warrant menunjukkan kondisi baik. DER menunjukkan tingkat hutang yang rendah. ROA menunjukkan efisiensi tinggi.'))


    @Rule(Fact(warrant_valued='good'), Fact(der_valued='low'), Fact(roe_valued='high'))
    def ipo_rule_2684(self):
        self.declare(Fact(recommendation='Warrant menunjukkan kondisi baik. DER menunjukkan tingkat hutang yang rendah. ROE menunjukkan keuntungan yang tinggi.'))


    @Rule(Fact(warrant_valued='good'), Fact(roa_valued='high'), Fact(roe_valued='high'))
    def ipo_rule_2685(self):
        self.declare(Fact(recommendation='Warrant menunjukkan kondisi baik. ROA menunjukkan efisiensi tinggi. ROE menunjukkan keuntungan yang tinggi.'))


    @Rule(Fact(net_income_valued='profit'), Fact(per_valued='low'), Fact(der_valued='low'))
    def ipo_rule_2686(self):
        self.declare(Fact(recommendation='Laba bersih menunjukkan keuntungan. PER berada di tingkat yang rendah. DER menunjukkan tingkat hutang yang rendah.'))


    @Rule(Fact(net_income_valued='profit'), Fact(per_valued='low'), Fact(roa_valued='high'))
    def ipo_rule_2687(self):
        self.declare(Fact(recommendation='Laba bersih menunjukkan keuntungan. PER berada di tingkat yang rendah. ROA menunjukkan efisiensi tinggi.'))


    @Rule(Fact(net_income_valued='profit'), Fact(per_valued='low'), Fact(roe_valued='high'))
    def ipo_rule_2688(self):
        self.declare(Fact(recommendation='Laba bersih menunjukkan keuntungan. PER berada di tingkat yang rendah. ROE menunjukkan keuntungan yang tinggi.'))


    @Rule(Fact(net_income_valued='profit'), Fact(der_valued='low'), Fact(roa_valued='high'))
    def ipo_rule_2689(self):
        self.declare(Fact(recommendation='Laba bersih menunjukkan keuntungan. DER menunjukkan tingkat hutang yang rendah. ROA menunjukkan efisiensi tinggi.'))


    @Rule(Fact(net_income_valued='profit'), Fact(der_valued='low'), Fact(roe_valued='high'))
    def ipo_rule_2690(self):
        self.declare(Fact(recommendation='Laba bersih menunjukkan keuntungan. DER menunjukkan tingkat hutang yang rendah. ROE menunjukkan keuntungan yang tinggi.'))


    @Rule(Fact(net_income_valued='profit'), Fact(roa_valued='high'), Fact(roe_valued='high'))
    def ipo_rule_2691(self):
        self.declare(Fact(recommendation='Laba bersih menunjukkan keuntungan. ROA menunjukkan efisiensi tinggi. ROE menunjukkan keuntungan yang tinggi.'))


    @Rule(Fact(per_valued='low'), Fact(der_valued='low'), Fact(roa_valued='high'))
    def ipo_rule_2692(self):
        self.declare(Fact(recommendation='PER berada di tingkat yang rendah. DER menunjukkan tingkat hutang yang rendah. ROA menunjukkan efisiensi tinggi.'))


    @Rule(Fact(per_valued='low'), Fact(der_valued='low'), Fact(roe_valued='high'))
    def ipo_rule_2693(self):
        self.declare(Fact(recommendation='PER berada di tingkat yang rendah. DER menunjukkan tingkat hutang yang rendah. ROE menunjukkan keuntungan yang tinggi.'))


    @Rule(Fact(per_valued='low'), Fact(roa_valued='high'), Fact(roe_valued='high'))
    def ipo_rule_2694(self):
        self.declare(Fact(recommendation='PER berada di tingkat yang rendah. ROA menunjukkan efisiensi tinggi. ROE menunjukkan keuntungan yang tinggi.'))


    @Rule(Fact(der_valued='low'), Fact(roa_valued='high'), Fact(roe_valued='high'))
    def ipo_rule_2695(self):
        self.declare(Fact(recommendation='DER menunjukkan tingkat hutang yang rendah. ROA menunjukkan efisiensi tinggi. ROE menunjukkan keuntungan yang tinggi.'))


    @Rule(Fact(underwriter_valued='bad'), Fact(warrant_valued='good'), Fact(net_income_valued='profit'))
    def ipo_rule_2696(self):
        self.declare(Fact(recommendation='Underwriter berkualitas buruk. Warrant menunjukkan kondisi baik. Laba bersih menunjukkan keuntungan.'))


    @Rule(Fact(underwriter_valued='bad'), Fact(warrant_valued='good'), Fact(per_valued='low'))
    def ipo_rule_2697(self):
        self.declare(Fact(recommendation='Underwriter berkualitas buruk. Warrant menunjukkan kondisi baik. PER berada di tingkat yang rendah.'))


    @Rule(Fact(underwriter_valued='bad'), Fact(warrant_valued='good'), Fact(der_valued='low'))
    def ipo_rule_2698(self):
        self.declare(Fact(recommendation='Underwriter berkualitas buruk. Warrant menunjukkan kondisi baik. DER menunjukkan tingkat hutang yang rendah.'))


    @Rule(Fact(underwriter_valued='bad'), Fact(warrant_valued='good'), Fact(roa_valued='high'))
    def ipo_rule_2699(self):
        self.declare(Fact(recommendation='Underwriter berkualitas buruk. Warrant menunjukkan kondisi baik. ROA menunjukkan efisiensi tinggi.'))


    @Rule(Fact(underwriter_valued='bad'), Fact(warrant_valued='good'), Fact(roe_valued='low'))
    def ipo_rule_2700(self):
        self.declare(Fact(recommendation='Underwriter berkualitas buruk. Warrant menunjukkan kondisi baik. ROE menunjukkan keuntungan yang rendah.'))


    @Rule(Fact(underwriter_valued='bad'), Fact(net_income_valued='profit'), Fact(per_valued='low'))
    def ipo_rule_2701(self):
        self.declare(Fact(recommendation='Underwriter berkualitas buruk. Laba bersih menunjukkan keuntungan. PER berada di tingkat yang rendah.'))


    @Rule(Fact(underwriter_valued='bad'), Fact(net_income_valued='profit'), Fact(der_valued='low'))
    def ipo_rule_2702(self):
        self.declare(Fact(recommendation='Underwriter berkualitas buruk. Laba bersih menunjukkan keuntungan. DER menunjukkan tingkat hutang yang rendah.'))


    @Rule(Fact(underwriter_valued='bad'), Fact(net_income_valued='profit'), Fact(roa_valued='high'))
    def ipo_rule_2703(self):
        self.declare(Fact(recommendation='Underwriter berkualitas buruk. Laba bersih menunjukkan keuntungan. ROA menunjukkan efisiensi tinggi.'))


    @Rule(Fact(underwriter_valued='bad'), Fact(net_income_valued='profit'), Fact(roe_valued='low'))
    def ipo_rule_2704(self):
        self.declare(Fact(recommendation='Underwriter berkualitas buruk. Laba bersih menunjukkan keuntungan. ROE menunjukkan keuntungan yang rendah.'))


    @Rule(Fact(underwriter_valued='bad'), Fact(per_valued='low'), Fact(der_valued='low'))
    def ipo_rule_2705(self):
        self.declare(Fact(recommendation='Underwriter berkualitas buruk. PER berada di tingkat yang rendah. DER menunjukkan tingkat hutang yang rendah.'))


    @Rule(Fact(underwriter_valued='bad'), Fact(per_valued='low'), Fact(roa_valued='high'))
    def ipo_rule_2706(self):
        self.declare(Fact(recommendation='Underwriter berkualitas buruk. PER berada di tingkat yang rendah. ROA menunjukkan efisiensi tinggi.'))


    @Rule(Fact(underwriter_valued='bad'), Fact(per_valued='low'), Fact(roe_valued='low'))
    def ipo_rule_2707(self):
        self.declare(Fact(recommendation='Underwriter berkualitas buruk. PER berada di tingkat yang rendah. ROE menunjukkan keuntungan yang rendah.'))


    @Rule(Fact(underwriter_valued='bad'), Fact(der_valued='low'), Fact(roa_valued='high'))
    def ipo_rule_2708(self):
        self.declare(Fact(recommendation='Underwriter berkualitas buruk. DER menunjukkan tingkat hutang yang rendah. ROA menunjukkan efisiensi tinggi.'))


    @Rule(Fact(underwriter_valued='bad'), Fact(der_valued='low'), Fact(roe_valued='low'))
    def ipo_rule_2709(self):
        self.declare(Fact(recommendation='Underwriter berkualitas buruk. DER menunjukkan tingkat hutang yang rendah. ROE menunjukkan keuntungan yang rendah.'))


    @Rule(Fact(underwriter_valued='bad'), Fact(roa_valued='high'), Fact(roe_valued='low'))
    def ipo_rule_2710(self):
        self.declare(Fact(recommendation='Underwriter berkualitas buruk. ROA menunjukkan efisiensi tinggi. ROE menunjukkan keuntungan yang rendah.'))


    @Rule(Fact(warrant_valued='good'), Fact(net_income_valued='profit'), Fact(per_valued='low'))
    def ipo_rule_2711(self):
        self.declare(Fact(recommendation='Warrant menunjukkan kondisi baik. Laba bersih menunjukkan keuntungan. PER berada di tingkat yang rendah.'))


    @Rule(Fact(warrant_valued='good'), Fact(net_income_valued='profit'), Fact(der_valued='low'))
    def ipo_rule_2712(self):
        self.declare(Fact(recommendation='Warrant menunjukkan kondisi baik. Laba bersih menunjukkan keuntungan. DER menunjukkan tingkat hutang yang rendah.'))


    @Rule(Fact(warrant_valued='good'), Fact(net_income_valued='profit'), Fact(roa_valued='high'))
    def ipo_rule_2713(self):
        self.declare(Fact(recommendation='Warrant menunjukkan kondisi baik. Laba bersih menunjukkan keuntungan. ROA menunjukkan efisiensi tinggi.'))


    @Rule(Fact(warrant_valued='good'), Fact(net_income_valued='profit'), Fact(roe_valued='low'))
    def ipo_rule_2714(self):
        self.declare(Fact(recommendation='Warrant menunjukkan kondisi baik. Laba bersih menunjukkan keuntungan. ROE menunjukkan keuntungan yang rendah.'))


    @Rule(Fact(warrant_valued='good'), Fact(per_valued='low'), Fact(der_valued='low'))
    def ipo_rule_2715(self):
        self.declare(Fact(recommendation='Warrant menunjukkan kondisi baik. PER berada di tingkat yang rendah. DER menunjukkan tingkat hutang yang rendah.'))


    @Rule(Fact(warrant_valued='good'), Fact(per_valued='low'), Fact(roa_valued='high'))
    def ipo_rule_2716(self):
        self.declare(Fact(recommendation='Warrant menunjukkan kondisi baik. PER berada di tingkat yang rendah. ROA menunjukkan efisiensi tinggi.'))


    @Rule(Fact(warrant_valued='good'), Fact(per_valued='low'), Fact(roe_valued='low'))
    def ipo_rule_2717(self):
        self.declare(Fact(recommendation='Warrant menunjukkan kondisi baik. PER berada di tingkat yang rendah. ROE menunjukkan keuntungan yang rendah.'))


    @Rule(Fact(warrant_valued='good'), Fact(der_valued='low'), Fact(roa_valued='high'))
    def ipo_rule_2718(self):
        self.declare(Fact(recommendation='Warrant menunjukkan kondisi baik. DER menunjukkan tingkat hutang yang rendah. ROA menunjukkan efisiensi tinggi.'))


    @Rule(Fact(warrant_valued='good'), Fact(der_valued='low'), Fact(roe_valued='low'))
    def ipo_rule_2719(self):
        self.declare(Fact(recommendation='Warrant menunjukkan kondisi baik. DER menunjukkan tingkat hutang yang rendah. ROE menunjukkan keuntungan yang rendah.'))


    @Rule(Fact(warrant_valued='good'), Fact(roa_valued='high'), Fact(roe_valued='low'))
    def ipo_rule_2720(self):
        self.declare(Fact(recommendation='Warrant menunjukkan kondisi baik. ROA menunjukkan efisiensi tinggi. ROE menunjukkan keuntungan yang rendah.'))


    @Rule(Fact(net_income_valued='profit'), Fact(per_valued='low'), Fact(der_valued='low'))
    def ipo_rule_2721(self):
        self.declare(Fact(recommendation='Laba bersih menunjukkan keuntungan. PER berada di tingkat yang rendah. DER menunjukkan tingkat hutang yang rendah.'))


    @Rule(Fact(net_income_valued='profit'), Fact(per_valued='low'), Fact(roa_valued='high'))
    def ipo_rule_2722(self):
        self.declare(Fact(recommendation='Laba bersih menunjukkan keuntungan. PER berada di tingkat yang rendah. ROA menunjukkan efisiensi tinggi.'))


    @Rule(Fact(net_income_valued='profit'), Fact(per_valued='low'), Fact(roe_valued='low'))
    def ipo_rule_2723(self):
        self.declare(Fact(recommendation='Laba bersih menunjukkan keuntungan. PER berada di tingkat yang rendah. ROE menunjukkan keuntungan yang rendah.'))


    @Rule(Fact(net_income_valued='profit'), Fact(der_valued='low'), Fact(roa_valued='high'))
    def ipo_rule_2724(self):
        self.declare(Fact(recommendation='Laba bersih menunjukkan keuntungan. DER menunjukkan tingkat hutang yang rendah. ROA menunjukkan efisiensi tinggi.'))


    @Rule(Fact(net_income_valued='profit'), Fact(der_valued='low'), Fact(roe_valued='low'))
    def ipo_rule_2725(self):
        self.declare(Fact(recommendation='Laba bersih menunjukkan keuntungan. DER menunjukkan tingkat hutang yang rendah. ROE menunjukkan keuntungan yang rendah.'))


    @Rule(Fact(net_income_valued='profit'), Fact(roa_valued='high'), Fact(roe_valued='low'))
    def ipo_rule_2726(self):
        self.declare(Fact(recommendation='Laba bersih menunjukkan keuntungan. ROA menunjukkan efisiensi tinggi. ROE menunjukkan keuntungan yang rendah.'))


    @Rule(Fact(per_valued='low'), Fact(der_valued='low'), Fact(roa_valued='high'))
    def ipo_rule_2727(self):
        self.declare(Fact(recommendation='PER berada di tingkat yang rendah. DER menunjukkan tingkat hutang yang rendah. ROA menunjukkan efisiensi tinggi.'))


    @Rule(Fact(per_valued='low'), Fact(der_valued='low'), Fact(roe_valued='low'))
    def ipo_rule_2728(self):
        self.declare(Fact(recommendation='PER berada di tingkat yang rendah. DER menunjukkan tingkat hutang yang rendah. ROE menunjukkan keuntungan yang rendah.'))


    @Rule(Fact(per_valued='low'), Fact(roa_valued='high'), Fact(roe_valued='low'))
    def ipo_rule_2729(self):
        self.declare(Fact(recommendation='PER berada di tingkat yang rendah. ROA menunjukkan efisiensi tinggi. ROE menunjukkan keuntungan yang rendah.'))


    @Rule(Fact(der_valued='low'), Fact(roa_valued='high'), Fact(roe_valued='low'))
    def ipo_rule_2730(self):
        self.declare(Fact(recommendation='DER menunjukkan tingkat hutang yang rendah. ROA menunjukkan efisiensi tinggi. ROE menunjukkan keuntungan yang rendah.'))


    @Rule(Fact(underwriter_valued='bad'), Fact(warrant_valued='good'), Fact(net_income_valued='profit'))
    def ipo_rule_2731(self):
        self.declare(Fact(recommendation='Underwriter berkualitas buruk. Warrant menunjukkan kondisi baik. Laba bersih menunjukkan keuntungan.'))


    @Rule(Fact(underwriter_valued='bad'), Fact(warrant_valued='good'), Fact(per_valued='low'))
    def ipo_rule_2732(self):
        self.declare(Fact(recommendation='Underwriter berkualitas buruk. Warrant menunjukkan kondisi baik. PER berada di tingkat yang rendah.'))


    @Rule(Fact(underwriter_valued='bad'), Fact(warrant_valued='good'), Fact(der_valued='low'))
    def ipo_rule_2733(self):
        self.declare(Fact(recommendation='Underwriter berkualitas buruk. Warrant menunjukkan kondisi baik. DER menunjukkan tingkat hutang yang rendah.'))


    @Rule(Fact(underwriter_valued='bad'), Fact(warrant_valued='good'), Fact(roa_valued='low'))
    def ipo_rule_2734(self):
        self.declare(Fact(recommendation='Underwriter berkualitas buruk. Warrant menunjukkan kondisi baik. ROA menunjukkan efisiensi rendah.'))


    @Rule(Fact(underwriter_valued='bad'), Fact(warrant_valued='good'), Fact(roe_valued='high'))
    def ipo_rule_2735(self):
        self.declare(Fact(recommendation='Underwriter berkualitas buruk. Warrant menunjukkan kondisi baik. ROE menunjukkan keuntungan yang tinggi.'))


    @Rule(Fact(underwriter_valued='bad'), Fact(net_income_valued='profit'), Fact(per_valued='low'))
    def ipo_rule_2736(self):
        self.declare(Fact(recommendation='Underwriter berkualitas buruk. Laba bersih menunjukkan keuntungan. PER berada di tingkat yang rendah.'))


    @Rule(Fact(underwriter_valued='bad'), Fact(net_income_valued='profit'), Fact(der_valued='low'))
    def ipo_rule_2737(self):
        self.declare(Fact(recommendation='Underwriter berkualitas buruk. Laba bersih menunjukkan keuntungan. DER menunjukkan tingkat hutang yang rendah.'))


    @Rule(Fact(underwriter_valued='bad'), Fact(net_income_valued='profit'), Fact(roa_valued='low'))
    def ipo_rule_2738(self):
        self.declare(Fact(recommendation='Underwriter berkualitas buruk. Laba bersih menunjukkan keuntungan. ROA menunjukkan efisiensi rendah.'))


    @Rule(Fact(underwriter_valued='bad'), Fact(net_income_valued='profit'), Fact(roe_valued='high'))
    def ipo_rule_2739(self):
        self.declare(Fact(recommendation='Underwriter berkualitas buruk. Laba bersih menunjukkan keuntungan. ROE menunjukkan keuntungan yang tinggi.'))


    @Rule(Fact(underwriter_valued='bad'), Fact(per_valued='low'), Fact(der_valued='low'))
    def ipo_rule_2740(self):
        self.declare(Fact(recommendation='Underwriter berkualitas buruk. PER berada di tingkat yang rendah. DER menunjukkan tingkat hutang yang rendah.'))


    @Rule(Fact(underwriter_valued='bad'), Fact(per_valued='low'), Fact(roa_valued='low'))
    def ipo_rule_2741(self):
        self.declare(Fact(recommendation='Underwriter berkualitas buruk. PER berada di tingkat yang rendah. ROA menunjukkan efisiensi rendah.'))


    @Rule(Fact(underwriter_valued='bad'), Fact(per_valued='low'), Fact(roe_valued='high'))
    def ipo_rule_2742(self):
        self.declare(Fact(recommendation='Underwriter berkualitas buruk. PER berada di tingkat yang rendah. ROE menunjukkan keuntungan yang tinggi.'))


    @Rule(Fact(underwriter_valued='bad'), Fact(der_valued='low'), Fact(roa_valued='low'))
    def ipo_rule_2743(self):
        self.declare(Fact(recommendation='Underwriter berkualitas buruk. DER menunjukkan tingkat hutang yang rendah. ROA menunjukkan efisiensi rendah.'))


    @Rule(Fact(underwriter_valued='bad'), Fact(der_valued='low'), Fact(roe_valued='high'))
    def ipo_rule_2744(self):
        self.declare(Fact(recommendation='Underwriter berkualitas buruk. DER menunjukkan tingkat hutang yang rendah. ROE menunjukkan keuntungan yang tinggi.'))


    @Rule(Fact(underwriter_valued='bad'), Fact(roa_valued='low'), Fact(roe_valued='high'))
    def ipo_rule_2745(self):
        self.declare(Fact(recommendation='Underwriter berkualitas buruk. ROA menunjukkan efisiensi rendah. ROE menunjukkan keuntungan yang tinggi.'))


    @Rule(Fact(warrant_valued='good'), Fact(net_income_valued='profit'), Fact(per_valued='low'))
    def ipo_rule_2746(self):
        self.declare(Fact(recommendation='Warrant menunjukkan kondisi baik. Laba bersih menunjukkan keuntungan. PER berada di tingkat yang rendah.'))


    @Rule(Fact(warrant_valued='good'), Fact(net_income_valued='profit'), Fact(der_valued='low'))
    def ipo_rule_2747(self):
        self.declare(Fact(recommendation='Warrant menunjukkan kondisi baik. Laba bersih menunjukkan keuntungan. DER menunjukkan tingkat hutang yang rendah.'))


    @Rule(Fact(warrant_valued='good'), Fact(net_income_valued='profit'), Fact(roa_valued='low'))
    def ipo_rule_2748(self):
        self.declare(Fact(recommendation='Warrant menunjukkan kondisi baik. Laba bersih menunjukkan keuntungan. ROA menunjukkan efisiensi rendah.'))


    @Rule(Fact(warrant_valued='good'), Fact(net_income_valued='profit'), Fact(roe_valued='high'))
    def ipo_rule_2749(self):
        self.declare(Fact(recommendation='Warrant menunjukkan kondisi baik. Laba bersih menunjukkan keuntungan. ROE menunjukkan keuntungan yang tinggi.'))


    @Rule(Fact(warrant_valued='good'), Fact(per_valued='low'), Fact(der_valued='low'))
    def ipo_rule_2750(self):
        self.declare(Fact(recommendation='Warrant menunjukkan kondisi baik. PER berada di tingkat yang rendah. DER menunjukkan tingkat hutang yang rendah.'))


    @Rule(Fact(warrant_valued='good'), Fact(per_valued='low'), Fact(roa_valued='low'))
    def ipo_rule_2751(self):
        self.declare(Fact(recommendation='Warrant menunjukkan kondisi baik. PER berada di tingkat yang rendah. ROA menunjukkan efisiensi rendah.'))


    @Rule(Fact(warrant_valued='good'), Fact(per_valued='low'), Fact(roe_valued='high'))
    def ipo_rule_2752(self):
        self.declare(Fact(recommendation='Warrant menunjukkan kondisi baik. PER berada di tingkat yang rendah. ROE menunjukkan keuntungan yang tinggi.'))


    @Rule(Fact(warrant_valued='good'), Fact(der_valued='low'), Fact(roa_valued='low'))
    def ipo_rule_2753(self):
        self.declare(Fact(recommendation='Warrant menunjukkan kondisi baik. DER menunjukkan tingkat hutang yang rendah. ROA menunjukkan efisiensi rendah.'))


    @Rule(Fact(warrant_valued='good'), Fact(der_valued='low'), Fact(roe_valued='high'))
    def ipo_rule_2754(self):
        self.declare(Fact(recommendation='Warrant menunjukkan kondisi baik. DER menunjukkan tingkat hutang yang rendah. ROE menunjukkan keuntungan yang tinggi.'))


    @Rule(Fact(warrant_valued='good'), Fact(roa_valued='low'), Fact(roe_valued='high'))
    def ipo_rule_2755(self):
        self.declare(Fact(recommendation='Warrant menunjukkan kondisi baik. ROA menunjukkan efisiensi rendah. ROE menunjukkan keuntungan yang tinggi.'))


    @Rule(Fact(net_income_valued='profit'), Fact(per_valued='low'), Fact(der_valued='low'))
    def ipo_rule_2756(self):
        self.declare(Fact(recommendation='Laba bersih menunjukkan keuntungan. PER berada di tingkat yang rendah. DER menunjukkan tingkat hutang yang rendah.'))


    @Rule(Fact(net_income_valued='profit'), Fact(per_valued='low'), Fact(roa_valued='low'))
    def ipo_rule_2757(self):
        self.declare(Fact(recommendation='Laba bersih menunjukkan keuntungan. PER berada di tingkat yang rendah. ROA menunjukkan efisiensi rendah.'))


    @Rule(Fact(net_income_valued='profit'), Fact(per_valued='low'), Fact(roe_valued='high'))
    def ipo_rule_2758(self):
        self.declare(Fact(recommendation='Laba bersih menunjukkan keuntungan. PER berada di tingkat yang rendah. ROE menunjukkan keuntungan yang tinggi.'))


    @Rule(Fact(net_income_valued='profit'), Fact(der_valued='low'), Fact(roa_valued='low'))
    def ipo_rule_2759(self):
        self.declare(Fact(recommendation='Laba bersih menunjukkan keuntungan. DER menunjukkan tingkat hutang yang rendah. ROA menunjukkan efisiensi rendah.'))


    @Rule(Fact(net_income_valued='profit'), Fact(der_valued='low'), Fact(roe_valued='high'))
    def ipo_rule_2760(self):
        self.declare(Fact(recommendation='Laba bersih menunjukkan keuntungan. DER menunjukkan tingkat hutang yang rendah. ROE menunjukkan keuntungan yang tinggi.'))


    @Rule(Fact(net_income_valued='profit'), Fact(roa_valued='low'), Fact(roe_valued='high'))
    def ipo_rule_2761(self):
        self.declare(Fact(recommendation='Laba bersih menunjukkan keuntungan. ROA menunjukkan efisiensi rendah. ROE menunjukkan keuntungan yang tinggi.'))


    @Rule(Fact(per_valued='low'), Fact(der_valued='low'), Fact(roa_valued='low'))
    def ipo_rule_2762(self):
        self.declare(Fact(recommendation='PER berada di tingkat yang rendah. DER menunjukkan tingkat hutang yang rendah. ROA menunjukkan efisiensi rendah.'))


    @Rule(Fact(per_valued='low'), Fact(der_valued='low'), Fact(roe_valued='high'))
    def ipo_rule_2763(self):
        self.declare(Fact(recommendation='PER berada di tingkat yang rendah. DER menunjukkan tingkat hutang yang rendah. ROE menunjukkan keuntungan yang tinggi.'))


    @Rule(Fact(per_valued='low'), Fact(roa_valued='low'), Fact(roe_valued='high'))
    def ipo_rule_2764(self):
        self.declare(Fact(recommendation='PER berada di tingkat yang rendah. ROA menunjukkan efisiensi rendah. ROE menunjukkan keuntungan yang tinggi.'))


    @Rule(Fact(der_valued='low'), Fact(roa_valued='low'), Fact(roe_valued='high'))
    def ipo_rule_2765(self):
        self.declare(Fact(recommendation='DER menunjukkan tingkat hutang yang rendah. ROA menunjukkan efisiensi rendah. ROE menunjukkan keuntungan yang tinggi.'))


    @Rule(Fact(underwriter_valued='bad'), Fact(warrant_valued='good'), Fact(net_income_valued='profit'))
    def ipo_rule_2766(self):
        self.declare(Fact(recommendation='Underwriter berkualitas buruk. Warrant menunjukkan kondisi baik. Laba bersih menunjukkan keuntungan.'))


    @Rule(Fact(underwriter_valued='bad'), Fact(warrant_valued='good'), Fact(per_valued='low'))
    def ipo_rule_2767(self):
        self.declare(Fact(recommendation='Underwriter berkualitas buruk. Warrant menunjukkan kondisi baik. PER berada di tingkat yang rendah.'))


    @Rule(Fact(underwriter_valued='bad'), Fact(warrant_valued='good'), Fact(der_valued='low'))
    def ipo_rule_2768(self):
        self.declare(Fact(recommendation='Underwriter berkualitas buruk. Warrant menunjukkan kondisi baik. DER menunjukkan tingkat hutang yang rendah.'))


    @Rule(Fact(underwriter_valued='bad'), Fact(warrant_valued='good'), Fact(roa_valued='low'))
    def ipo_rule_2769(self):
        self.declare(Fact(recommendation='Underwriter berkualitas buruk. Warrant menunjukkan kondisi baik. ROA menunjukkan efisiensi rendah.'))


    @Rule(Fact(underwriter_valued='bad'), Fact(warrant_valued='good'), Fact(roe_valued='low'))
    def ipo_rule_2770(self):
        self.declare(Fact(recommendation='Underwriter berkualitas buruk. Warrant menunjukkan kondisi baik. ROE menunjukkan keuntungan yang rendah.'))


    @Rule(Fact(underwriter_valued='bad'), Fact(net_income_valued='profit'), Fact(per_valued='low'))
    def ipo_rule_2771(self):
        self.declare(Fact(recommendation='Underwriter berkualitas buruk. Laba bersih menunjukkan keuntungan. PER berada di tingkat yang rendah.'))


    @Rule(Fact(underwriter_valued='bad'), Fact(net_income_valued='profit'), Fact(der_valued='low'))
    def ipo_rule_2772(self):
        self.declare(Fact(recommendation='Underwriter berkualitas buruk. Laba bersih menunjukkan keuntungan. DER menunjukkan tingkat hutang yang rendah.'))


    @Rule(Fact(underwriter_valued='bad'), Fact(net_income_valued='profit'), Fact(roa_valued='low'))
    def ipo_rule_2773(self):
        self.declare(Fact(recommendation='Underwriter berkualitas buruk. Laba bersih menunjukkan keuntungan. ROA menunjukkan efisiensi rendah.'))


    @Rule(Fact(underwriter_valued='bad'), Fact(net_income_valued='profit'), Fact(roe_valued='low'))
    def ipo_rule_2774(self):
        self.declare(Fact(recommendation='Underwriter berkualitas buruk. Laba bersih menunjukkan keuntungan. ROE menunjukkan keuntungan yang rendah.'))


    @Rule(Fact(underwriter_valued='bad'), Fact(per_valued='low'), Fact(der_valued='low'))
    def ipo_rule_2775(self):
        self.declare(Fact(recommendation='Underwriter berkualitas buruk. PER berada di tingkat yang rendah. DER menunjukkan tingkat hutang yang rendah.'))


    @Rule(Fact(underwriter_valued='bad'), Fact(per_valued='low'), Fact(roa_valued='low'))
    def ipo_rule_2776(self):
        self.declare(Fact(recommendation='Underwriter berkualitas buruk. PER berada di tingkat yang rendah. ROA menunjukkan efisiensi rendah.'))


    @Rule(Fact(underwriter_valued='bad'), Fact(per_valued='low'), Fact(roe_valued='low'))
    def ipo_rule_2777(self):
        self.declare(Fact(recommendation='Underwriter berkualitas buruk. PER berada di tingkat yang rendah. ROE menunjukkan keuntungan yang rendah.'))


    @Rule(Fact(underwriter_valued='bad'), Fact(der_valued='low'), Fact(roa_valued='low'))
    def ipo_rule_2778(self):
        self.declare(Fact(recommendation='Underwriter berkualitas buruk. DER menunjukkan tingkat hutang yang rendah. ROA menunjukkan efisiensi rendah.'))


    @Rule(Fact(underwriter_valued='bad'), Fact(der_valued='low'), Fact(roe_valued='low'))
    def ipo_rule_2779(self):
        self.declare(Fact(recommendation='Underwriter berkualitas buruk. DER menunjukkan tingkat hutang yang rendah. ROE menunjukkan keuntungan yang rendah.'))


    @Rule(Fact(underwriter_valued='bad'), Fact(roa_valued='low'), Fact(roe_valued='low'))
    def ipo_rule_2780(self):
        self.declare(Fact(recommendation='Underwriter berkualitas buruk. ROA menunjukkan efisiensi rendah. ROE menunjukkan keuntungan yang rendah.'))


    @Rule(Fact(warrant_valued='good'), Fact(net_income_valued='profit'), Fact(per_valued='low'))
    def ipo_rule_2781(self):
        self.declare(Fact(recommendation='Warrant menunjukkan kondisi baik. Laba bersih menunjukkan keuntungan. PER berada di tingkat yang rendah.'))


    @Rule(Fact(warrant_valued='good'), Fact(net_income_valued='profit'), Fact(der_valued='low'))
    def ipo_rule_2782(self):
        self.declare(Fact(recommendation='Warrant menunjukkan kondisi baik. Laba bersih menunjukkan keuntungan. DER menunjukkan tingkat hutang yang rendah.'))


    @Rule(Fact(warrant_valued='good'), Fact(net_income_valued='profit'), Fact(roa_valued='low'))
    def ipo_rule_2783(self):
        self.declare(Fact(recommendation='Warrant menunjukkan kondisi baik. Laba bersih menunjukkan keuntungan. ROA menunjukkan efisiensi rendah.'))


    @Rule(Fact(warrant_valued='good'), Fact(net_income_valued='profit'), Fact(roe_valued='low'))
    def ipo_rule_2784(self):
        self.declare(Fact(recommendation='Warrant menunjukkan kondisi baik. Laba bersih menunjukkan keuntungan. ROE menunjukkan keuntungan yang rendah.'))


    @Rule(Fact(warrant_valued='good'), Fact(per_valued='low'), Fact(der_valued='low'))
    def ipo_rule_2785(self):
        self.declare(Fact(recommendation='Warrant menunjukkan kondisi baik. PER berada di tingkat yang rendah. DER menunjukkan tingkat hutang yang rendah.'))


    @Rule(Fact(warrant_valued='good'), Fact(per_valued='low'), Fact(roa_valued='low'))
    def ipo_rule_2786(self):
        self.declare(Fact(recommendation='Warrant menunjukkan kondisi baik. PER berada di tingkat yang rendah. ROA menunjukkan efisiensi rendah.'))


    @Rule(Fact(warrant_valued='good'), Fact(per_valued='low'), Fact(roe_valued='low'))
    def ipo_rule_2787(self):
        self.declare(Fact(recommendation='Warrant menunjukkan kondisi baik. PER berada di tingkat yang rendah. ROE menunjukkan keuntungan yang rendah.'))


    @Rule(Fact(warrant_valued='good'), Fact(der_valued='low'), Fact(roa_valued='low'))
    def ipo_rule_2788(self):
        self.declare(Fact(recommendation='Warrant menunjukkan kondisi baik. DER menunjukkan tingkat hutang yang rendah. ROA menunjukkan efisiensi rendah.'))


    @Rule(Fact(warrant_valued='good'), Fact(der_valued='low'), Fact(roe_valued='low'))
    def ipo_rule_2789(self):
        self.declare(Fact(recommendation='Warrant menunjukkan kondisi baik. DER menunjukkan tingkat hutang yang rendah. ROE menunjukkan keuntungan yang rendah.'))


    @Rule(Fact(warrant_valued='good'), Fact(roa_valued='low'), Fact(roe_valued='low'))
    def ipo_rule_2790(self):
        self.declare(Fact(recommendation='Warrant menunjukkan kondisi baik. ROA menunjukkan efisiensi rendah. ROE menunjukkan keuntungan yang rendah.'))


    @Rule(Fact(net_income_valued='profit'), Fact(per_valued='low'), Fact(der_valued='low'))
    def ipo_rule_2791(self):
        self.declare(Fact(recommendation='Laba bersih menunjukkan keuntungan. PER berada di tingkat yang rendah. DER menunjukkan tingkat hutang yang rendah.'))


    @Rule(Fact(net_income_valued='profit'), Fact(per_valued='low'), Fact(roa_valued='low'))
    def ipo_rule_2792(self):
        self.declare(Fact(recommendation='Laba bersih menunjukkan keuntungan. PER berada di tingkat yang rendah. ROA menunjukkan efisiensi rendah.'))


    @Rule(Fact(net_income_valued='profit'), Fact(per_valued='low'), Fact(roe_valued='low'))
    def ipo_rule_2793(self):
        self.declare(Fact(recommendation='Laba bersih menunjukkan keuntungan. PER berada di tingkat yang rendah. ROE menunjukkan keuntungan yang rendah.'))


    @Rule(Fact(net_income_valued='profit'), Fact(der_valued='low'), Fact(roa_valued='low'))
    def ipo_rule_2794(self):
        self.declare(Fact(recommendation='Laba bersih menunjukkan keuntungan. DER menunjukkan tingkat hutang yang rendah. ROA menunjukkan efisiensi rendah.'))


    @Rule(Fact(net_income_valued='profit'), Fact(der_valued='low'), Fact(roe_valued='low'))
    def ipo_rule_2795(self):
        self.declare(Fact(recommendation='Laba bersih menunjukkan keuntungan. DER menunjukkan tingkat hutang yang rendah. ROE menunjukkan keuntungan yang rendah.'))


    @Rule(Fact(net_income_valued='profit'), Fact(roa_valued='low'), Fact(roe_valued='low'))
    def ipo_rule_2796(self):
        self.declare(Fact(recommendation='Laba bersih menunjukkan keuntungan. ROA menunjukkan efisiensi rendah. ROE menunjukkan keuntungan yang rendah.'))


    @Rule(Fact(per_valued='low'), Fact(der_valued='low'), Fact(roa_valued='low'))
    def ipo_rule_2797(self):
        self.declare(Fact(recommendation='PER berada di tingkat yang rendah. DER menunjukkan tingkat hutang yang rendah. ROA menunjukkan efisiensi rendah.'))


    @Rule(Fact(per_valued='low'), Fact(der_valued='low'), Fact(roe_valued='low'))
    def ipo_rule_2798(self):
        self.declare(Fact(recommendation='PER berada di tingkat yang rendah. DER menunjukkan tingkat hutang yang rendah. ROE menunjukkan keuntungan yang rendah.'))


    @Rule(Fact(per_valued='low'), Fact(roa_valued='low'), Fact(roe_valued='low'))
    def ipo_rule_2799(self):
        self.declare(Fact(recommendation='PER berada di tingkat yang rendah. ROA menunjukkan efisiensi rendah. ROE menunjukkan keuntungan yang rendah.'))


    @Rule(Fact(der_valued='low'), Fact(roa_valued='low'), Fact(roe_valued='low'))
    def ipo_rule_2800(self):
        self.declare(Fact(recommendation='DER menunjukkan tingkat hutang yang rendah. ROA menunjukkan efisiensi rendah. ROE menunjukkan keuntungan yang rendah.'))


    @Rule(Fact(underwriter_valued='bad'), Fact(warrant_valued='good'), Fact(net_income_valued='loss'))
    def ipo_rule_2801(self):
        self.declare(Fact(recommendation='Underwriter berkualitas buruk. Warrant menunjukkan kondisi baik. Laba bersih menunjukkan kerugian.'))


    @Rule(Fact(underwriter_valued='bad'), Fact(warrant_valued='good'), Fact(per_valued='high'))
    def ipo_rule_2802(self):
        self.declare(Fact(recommendation='Underwriter berkualitas buruk. Warrant menunjukkan kondisi baik. PER berada di tingkat yang tinggi.'))


    @Rule(Fact(underwriter_valued='bad'), Fact(warrant_valued='good'), Fact(der_valued='high'))
    def ipo_rule_2803(self):
        self.declare(Fact(recommendation='Underwriter berkualitas buruk. Warrant menunjukkan kondisi baik. DER menunjukkan tingkat hutang yang tinggi.'))


    @Rule(Fact(underwriter_valued='bad'), Fact(warrant_valued='good'), Fact(roa_valued='high'))
    def ipo_rule_2804(self):
        self.declare(Fact(recommendation='Underwriter berkualitas buruk. Warrant menunjukkan kondisi baik. ROA menunjukkan efisiensi tinggi.'))


    @Rule(Fact(underwriter_valued='bad'), Fact(warrant_valued='good'), Fact(roe_valued='high'))
    def ipo_rule_2805(self):
        self.declare(Fact(recommendation='Underwriter berkualitas buruk. Warrant menunjukkan kondisi baik. ROE menunjukkan keuntungan yang tinggi.'))


    @Rule(Fact(underwriter_valued='bad'), Fact(net_income_valued='loss'), Fact(per_valued='high'))
    def ipo_rule_2806(self):
        self.declare(Fact(recommendation='Underwriter berkualitas buruk. Laba bersih menunjukkan kerugian. PER berada di tingkat yang tinggi.'))


    @Rule(Fact(underwriter_valued='bad'), Fact(net_income_valued='loss'), Fact(der_valued='high'))
    def ipo_rule_2807(self):
        self.declare(Fact(recommendation='Underwriter berkualitas buruk. Laba bersih menunjukkan kerugian. DER menunjukkan tingkat hutang yang tinggi.'))


    @Rule(Fact(underwriter_valued='bad'), Fact(net_income_valued='loss'), Fact(roa_valued='high'))
    def ipo_rule_2808(self):
        self.declare(Fact(recommendation='Underwriter berkualitas buruk. Laba bersih menunjukkan kerugian. ROA menunjukkan efisiensi tinggi.'))


    @Rule(Fact(underwriter_valued='bad'), Fact(net_income_valued='loss'), Fact(roe_valued='high'))
    def ipo_rule_2809(self):
        self.declare(Fact(recommendation='Underwriter berkualitas buruk. Laba bersih menunjukkan kerugian. ROE menunjukkan keuntungan yang tinggi.'))


    @Rule(Fact(underwriter_valued='bad'), Fact(per_valued='high'), Fact(der_valued='high'))
    def ipo_rule_2810(self):
        self.declare(Fact(recommendation='Underwriter berkualitas buruk. PER berada di tingkat yang tinggi. DER menunjukkan tingkat hutang yang tinggi.'))


    @Rule(Fact(underwriter_valued='bad'), Fact(per_valued='high'), Fact(roa_valued='high'))
    def ipo_rule_2811(self):
        self.declare(Fact(recommendation='Underwriter berkualitas buruk. PER berada di tingkat yang tinggi. ROA menunjukkan efisiensi tinggi.'))


    @Rule(Fact(underwriter_valued='bad'), Fact(per_valued='high'), Fact(roe_valued='high'))
    def ipo_rule_2812(self):
        self.declare(Fact(recommendation='Underwriter berkualitas buruk. PER berada di tingkat yang tinggi. ROE menunjukkan keuntungan yang tinggi.'))


    @Rule(Fact(underwriter_valued='bad'), Fact(der_valued='high'), Fact(roa_valued='high'))
    def ipo_rule_2813(self):
        self.declare(Fact(recommendation='Underwriter berkualitas buruk. DER menunjukkan tingkat hutang yang tinggi. ROA menunjukkan efisiensi tinggi.'))


    @Rule(Fact(underwriter_valued='bad'), Fact(der_valued='high'), Fact(roe_valued='high'))
    def ipo_rule_2814(self):
        self.declare(Fact(recommendation='Underwriter berkualitas buruk. DER menunjukkan tingkat hutang yang tinggi. ROE menunjukkan keuntungan yang tinggi.'))


    @Rule(Fact(underwriter_valued='bad'), Fact(roa_valued='high'), Fact(roe_valued='high'))
    def ipo_rule_2815(self):
        self.declare(Fact(recommendation='Underwriter berkualitas buruk. ROA menunjukkan efisiensi tinggi. ROE menunjukkan keuntungan yang tinggi.'))


    @Rule(Fact(warrant_valued='good'), Fact(net_income_valued='loss'), Fact(per_valued='high'))
    def ipo_rule_2816(self):
        self.declare(Fact(recommendation='Warrant menunjukkan kondisi baik. Laba bersih menunjukkan kerugian. PER berada di tingkat yang tinggi.'))


    @Rule(Fact(warrant_valued='good'), Fact(net_income_valued='loss'), Fact(der_valued='high'))
    def ipo_rule_2817(self):
        self.declare(Fact(recommendation='Warrant menunjukkan kondisi baik. Laba bersih menunjukkan kerugian. DER menunjukkan tingkat hutang yang tinggi.'))


    @Rule(Fact(warrant_valued='good'), Fact(net_income_valued='loss'), Fact(roa_valued='high'))
    def ipo_rule_2818(self):
        self.declare(Fact(recommendation='Warrant menunjukkan kondisi baik. Laba bersih menunjukkan kerugian. ROA menunjukkan efisiensi tinggi.'))


    @Rule(Fact(warrant_valued='good'), Fact(net_income_valued='loss'), Fact(roe_valued='high'))
    def ipo_rule_2819(self):
        self.declare(Fact(recommendation='Warrant menunjukkan kondisi baik. Laba bersih menunjukkan kerugian. ROE menunjukkan keuntungan yang tinggi.'))


    @Rule(Fact(warrant_valued='good'), Fact(per_valued='high'), Fact(der_valued='high'))
    def ipo_rule_2820(self):
        self.declare(Fact(recommendation='Warrant menunjukkan kondisi baik. PER berada di tingkat yang tinggi. DER menunjukkan tingkat hutang yang tinggi.'))


    @Rule(Fact(warrant_valued='good'), Fact(per_valued='high'), Fact(roa_valued='high'))
    def ipo_rule_2821(self):
        self.declare(Fact(recommendation='Warrant menunjukkan kondisi baik. PER berada di tingkat yang tinggi. ROA menunjukkan efisiensi tinggi.'))


    @Rule(Fact(warrant_valued='good'), Fact(per_valued='high'), Fact(roe_valued='high'))
    def ipo_rule_2822(self):
        self.declare(Fact(recommendation='Warrant menunjukkan kondisi baik. PER berada di tingkat yang tinggi. ROE menunjukkan keuntungan yang tinggi.'))


    @Rule(Fact(warrant_valued='good'), Fact(der_valued='high'), Fact(roa_valued='high'))
    def ipo_rule_2823(self):
        self.declare(Fact(recommendation='Warrant menunjukkan kondisi baik. DER menunjukkan tingkat hutang yang tinggi. ROA menunjukkan efisiensi tinggi.'))


    @Rule(Fact(warrant_valued='good'), Fact(der_valued='high'), Fact(roe_valued='high'))
    def ipo_rule_2824(self):
        self.declare(Fact(recommendation='Warrant menunjukkan kondisi baik. DER menunjukkan tingkat hutang yang tinggi. ROE menunjukkan keuntungan yang tinggi.'))


    @Rule(Fact(warrant_valued='good'), Fact(roa_valued='high'), Fact(roe_valued='high'))
    def ipo_rule_2825(self):
        self.declare(Fact(recommendation='Warrant menunjukkan kondisi baik. ROA menunjukkan efisiensi tinggi. ROE menunjukkan keuntungan yang tinggi.'))


    @Rule(Fact(net_income_valued='loss'), Fact(per_valued='high'), Fact(der_valued='high'))
    def ipo_rule_2826(self):
        self.declare(Fact(recommendation='Laba bersih menunjukkan kerugian. PER berada di tingkat yang tinggi. DER menunjukkan tingkat hutang yang tinggi.'))


    @Rule(Fact(net_income_valued='loss'), Fact(per_valued='high'), Fact(roa_valued='high'))
    def ipo_rule_2827(self):
        self.declare(Fact(recommendation='Laba bersih menunjukkan kerugian. PER berada di tingkat yang tinggi. ROA menunjukkan efisiensi tinggi.'))


    @Rule(Fact(net_income_valued='loss'), Fact(per_valued='high'), Fact(roe_valued='high'))
    def ipo_rule_2828(self):
        self.declare(Fact(recommendation='Laba bersih menunjukkan kerugian. PER berada di tingkat yang tinggi. ROE menunjukkan keuntungan yang tinggi.'))


    @Rule(Fact(net_income_valued='loss'), Fact(der_valued='high'), Fact(roa_valued='high'))
    def ipo_rule_2829(self):
        self.declare(Fact(recommendation='Laba bersih menunjukkan kerugian. DER menunjukkan tingkat hutang yang tinggi. ROA menunjukkan efisiensi tinggi.'))


    @Rule(Fact(net_income_valued='loss'), Fact(der_valued='high'), Fact(roe_valued='high'))
    def ipo_rule_2830(self):
        self.declare(Fact(recommendation='Laba bersih menunjukkan kerugian. DER menunjukkan tingkat hutang yang tinggi. ROE menunjukkan keuntungan yang tinggi.'))


    @Rule(Fact(net_income_valued='loss'), Fact(roa_valued='high'), Fact(roe_valued='high'))
    def ipo_rule_2831(self):
        self.declare(Fact(recommendation='Laba bersih menunjukkan kerugian. ROA menunjukkan efisiensi tinggi. ROE menunjukkan keuntungan yang tinggi.'))


    @Rule(Fact(per_valued='high'), Fact(der_valued='high'), Fact(roa_valued='high'))
    def ipo_rule_2832(self):
        self.declare(Fact(recommendation='PER berada di tingkat yang tinggi. DER menunjukkan tingkat hutang yang tinggi. ROA menunjukkan efisiensi tinggi.'))


    @Rule(Fact(per_valued='high'), Fact(der_valued='high'), Fact(roe_valued='high'))
    def ipo_rule_2833(self):
        self.declare(Fact(recommendation='PER berada di tingkat yang tinggi. DER menunjukkan tingkat hutang yang tinggi. ROE menunjukkan keuntungan yang tinggi.'))


    @Rule(Fact(per_valued='high'), Fact(roa_valued='high'), Fact(roe_valued='high'))
    def ipo_rule_2834(self):
        self.declare(Fact(recommendation='PER berada di tingkat yang tinggi. ROA menunjukkan efisiensi tinggi. ROE menunjukkan keuntungan yang tinggi.'))


    @Rule(Fact(der_valued='high'), Fact(roa_valued='high'), Fact(roe_valued='high'))
    def ipo_rule_2835(self):
        self.declare(Fact(recommendation='DER menunjukkan tingkat hutang yang tinggi. ROA menunjukkan efisiensi tinggi. ROE menunjukkan keuntungan yang tinggi.'))


    @Rule(Fact(underwriter_valued='bad'), Fact(warrant_valued='good'), Fact(net_income_valued='loss'))
    def ipo_rule_2836(self):
        self.declare(Fact(recommendation='Underwriter berkualitas buruk. Warrant menunjukkan kondisi baik. Laba bersih menunjukkan kerugian.'))


    @Rule(Fact(underwriter_valued='bad'), Fact(warrant_valued='good'), Fact(per_valued='high'))
    def ipo_rule_2837(self):
        self.declare(Fact(recommendation='Underwriter berkualitas buruk. Warrant menunjukkan kondisi baik. PER berada di tingkat yang tinggi.'))


    @Rule(Fact(underwriter_valued='bad'), Fact(warrant_valued='good'), Fact(der_valued='high'))
    def ipo_rule_2838(self):
        self.declare(Fact(recommendation='Underwriter berkualitas buruk. Warrant menunjukkan kondisi baik. DER menunjukkan tingkat hutang yang tinggi.'))


    @Rule(Fact(underwriter_valued='bad'), Fact(warrant_valued='good'), Fact(roa_valued='high'))
    def ipo_rule_2839(self):
        self.declare(Fact(recommendation='Underwriter berkualitas buruk. Warrant menunjukkan kondisi baik. ROA menunjukkan efisiensi tinggi.'))


    @Rule(Fact(underwriter_valued='bad'), Fact(warrant_valued='good'), Fact(roe_valued='low'))
    def ipo_rule_2840(self):
        self.declare(Fact(recommendation='Underwriter berkualitas buruk. Warrant menunjukkan kondisi baik. ROE menunjukkan keuntungan yang rendah.'))


    @Rule(Fact(underwriter_valued='bad'), Fact(net_income_valued='loss'), Fact(per_valued='high'))
    def ipo_rule_2841(self):
        self.declare(Fact(recommendation='Underwriter berkualitas buruk. Laba bersih menunjukkan kerugian. PER berada di tingkat yang tinggi.'))


    @Rule(Fact(underwriter_valued='bad'), Fact(net_income_valued='loss'), Fact(der_valued='high'))
    def ipo_rule_2842(self):
        self.declare(Fact(recommendation='Underwriter berkualitas buruk. Laba bersih menunjukkan kerugian. DER menunjukkan tingkat hutang yang tinggi.'))


    @Rule(Fact(underwriter_valued='bad'), Fact(net_income_valued='loss'), Fact(roa_valued='high'))
    def ipo_rule_2843(self):
        self.declare(Fact(recommendation='Underwriter berkualitas buruk. Laba bersih menunjukkan kerugian. ROA menunjukkan efisiensi tinggi.'))


    @Rule(Fact(underwriter_valued='bad'), Fact(net_income_valued='loss'), Fact(roe_valued='low'))
    def ipo_rule_2844(self):
        self.declare(Fact(recommendation='Underwriter berkualitas buruk. Laba bersih menunjukkan kerugian. ROE menunjukkan keuntungan yang rendah.'))


    @Rule(Fact(underwriter_valued='bad'), Fact(per_valued='high'), Fact(der_valued='high'))
    def ipo_rule_2845(self):
        self.declare(Fact(recommendation='Underwriter berkualitas buruk. PER berada di tingkat yang tinggi. DER menunjukkan tingkat hutang yang tinggi.'))


    @Rule(Fact(underwriter_valued='bad'), Fact(per_valued='high'), Fact(roa_valued='high'))
    def ipo_rule_2846(self):
        self.declare(Fact(recommendation='Underwriter berkualitas buruk. PER berada di tingkat yang tinggi. ROA menunjukkan efisiensi tinggi.'))


    @Rule(Fact(underwriter_valued='bad'), Fact(per_valued='high'), Fact(roe_valued='low'))
    def ipo_rule_2847(self):
        self.declare(Fact(recommendation='Underwriter berkualitas buruk. PER berada di tingkat yang tinggi. ROE menunjukkan keuntungan yang rendah.'))


    @Rule(Fact(underwriter_valued='bad'), Fact(der_valued='high'), Fact(roa_valued='high'))
    def ipo_rule_2848(self):
        self.declare(Fact(recommendation='Underwriter berkualitas buruk. DER menunjukkan tingkat hutang yang tinggi. ROA menunjukkan efisiensi tinggi.'))


    @Rule(Fact(underwriter_valued='bad'), Fact(der_valued='high'), Fact(roe_valued='low'))
    def ipo_rule_2849(self):
        self.declare(Fact(recommendation='Underwriter berkualitas buruk. DER menunjukkan tingkat hutang yang tinggi. ROE menunjukkan keuntungan yang rendah.'))


    @Rule(Fact(underwriter_valued='bad'), Fact(roa_valued='high'), Fact(roe_valued='low'))
    def ipo_rule_2850(self):
        self.declare(Fact(recommendation='Underwriter berkualitas buruk. ROA menunjukkan efisiensi tinggi. ROE menunjukkan keuntungan yang rendah.'))


    @Rule(Fact(warrant_valued='good'), Fact(net_income_valued='loss'), Fact(per_valued='high'))
    def ipo_rule_2851(self):
        self.declare(Fact(recommendation='Warrant menunjukkan kondisi baik. Laba bersih menunjukkan kerugian. PER berada di tingkat yang tinggi.'))


    @Rule(Fact(warrant_valued='good'), Fact(net_income_valued='loss'), Fact(der_valued='high'))
    def ipo_rule_2852(self):
        self.declare(Fact(recommendation='Warrant menunjukkan kondisi baik. Laba bersih menunjukkan kerugian. DER menunjukkan tingkat hutang yang tinggi.'))


    @Rule(Fact(warrant_valued='good'), Fact(net_income_valued='loss'), Fact(roa_valued='high'))
    def ipo_rule_2853(self):
        self.declare(Fact(recommendation='Warrant menunjukkan kondisi baik. Laba bersih menunjukkan kerugian. ROA menunjukkan efisiensi tinggi.'))


    @Rule(Fact(warrant_valued='good'), Fact(net_income_valued='loss'), Fact(roe_valued='low'))
    def ipo_rule_2854(self):
        self.declare(Fact(recommendation='Warrant menunjukkan kondisi baik. Laba bersih menunjukkan kerugian. ROE menunjukkan keuntungan yang rendah.'))


    @Rule(Fact(warrant_valued='good'), Fact(per_valued='high'), Fact(der_valued='high'))
    def ipo_rule_2855(self):
        self.declare(Fact(recommendation='Warrant menunjukkan kondisi baik. PER berada di tingkat yang tinggi. DER menunjukkan tingkat hutang yang tinggi.'))


    @Rule(Fact(warrant_valued='good'), Fact(per_valued='high'), Fact(roa_valued='high'))
    def ipo_rule_2856(self):
        self.declare(Fact(recommendation='Warrant menunjukkan kondisi baik. PER berada di tingkat yang tinggi. ROA menunjukkan efisiensi tinggi.'))


    @Rule(Fact(warrant_valued='good'), Fact(per_valued='high'), Fact(roe_valued='low'))
    def ipo_rule_2857(self):
        self.declare(Fact(recommendation='Warrant menunjukkan kondisi baik. PER berada di tingkat yang tinggi. ROE menunjukkan keuntungan yang rendah.'))


    @Rule(Fact(warrant_valued='good'), Fact(der_valued='high'), Fact(roa_valued='high'))
    def ipo_rule_2858(self):
        self.declare(Fact(recommendation='Warrant menunjukkan kondisi baik. DER menunjukkan tingkat hutang yang tinggi. ROA menunjukkan efisiensi tinggi.'))


    @Rule(Fact(warrant_valued='good'), Fact(der_valued='high'), Fact(roe_valued='low'))
    def ipo_rule_2859(self):
        self.declare(Fact(recommendation='Warrant menunjukkan kondisi baik. DER menunjukkan tingkat hutang yang tinggi. ROE menunjukkan keuntungan yang rendah.'))


    @Rule(Fact(warrant_valued='good'), Fact(roa_valued='high'), Fact(roe_valued='low'))
    def ipo_rule_2860(self):
        self.declare(Fact(recommendation='Warrant menunjukkan kondisi baik. ROA menunjukkan efisiensi tinggi. ROE menunjukkan keuntungan yang rendah.'))


    @Rule(Fact(net_income_valued='loss'), Fact(per_valued='high'), Fact(der_valued='high'))
    def ipo_rule_2861(self):
        self.declare(Fact(recommendation='Laba bersih menunjukkan kerugian. PER berada di tingkat yang tinggi. DER menunjukkan tingkat hutang yang tinggi.'))


    @Rule(Fact(net_income_valued='loss'), Fact(per_valued='high'), Fact(roa_valued='high'))
    def ipo_rule_2862(self):
        self.declare(Fact(recommendation='Laba bersih menunjukkan kerugian. PER berada di tingkat yang tinggi. ROA menunjukkan efisiensi tinggi.'))


    @Rule(Fact(net_income_valued='loss'), Fact(per_valued='high'), Fact(roe_valued='low'))
    def ipo_rule_2863(self):
        self.declare(Fact(recommendation='Laba bersih menunjukkan kerugian. PER berada di tingkat yang tinggi. ROE menunjukkan keuntungan yang rendah.'))


    @Rule(Fact(net_income_valued='loss'), Fact(der_valued='high'), Fact(roa_valued='high'))
    def ipo_rule_2864(self):
        self.declare(Fact(recommendation='Laba bersih menunjukkan kerugian. DER menunjukkan tingkat hutang yang tinggi. ROA menunjukkan efisiensi tinggi.'))


    @Rule(Fact(net_income_valued='loss'), Fact(der_valued='high'), Fact(roe_valued='low'))
    def ipo_rule_2865(self):
        self.declare(Fact(recommendation='Laba bersih menunjukkan kerugian. DER menunjukkan tingkat hutang yang tinggi. ROE menunjukkan keuntungan yang rendah.'))


    @Rule(Fact(net_income_valued='loss'), Fact(roa_valued='high'), Fact(roe_valued='low'))
    def ipo_rule_2866(self):
        self.declare(Fact(recommendation='Laba bersih menunjukkan kerugian. ROA menunjukkan efisiensi tinggi. ROE menunjukkan keuntungan yang rendah.'))


    @Rule(Fact(per_valued='high'), Fact(der_valued='high'), Fact(roa_valued='high'))
    def ipo_rule_2867(self):
        self.declare(Fact(recommendation='PER berada di tingkat yang tinggi. DER menunjukkan tingkat hutang yang tinggi. ROA menunjukkan efisiensi tinggi.'))


    @Rule(Fact(per_valued='high'), Fact(der_valued='high'), Fact(roe_valued='low'))
    def ipo_rule_2868(self):
        self.declare(Fact(recommendation='PER berada di tingkat yang tinggi. DER menunjukkan tingkat hutang yang tinggi. ROE menunjukkan keuntungan yang rendah.'))


    @Rule(Fact(per_valued='high'), Fact(roa_valued='high'), Fact(roe_valued='low'))
    def ipo_rule_2869(self):
        self.declare(Fact(recommendation='PER berada di tingkat yang tinggi. ROA menunjukkan efisiensi tinggi. ROE menunjukkan keuntungan yang rendah.'))


    @Rule(Fact(der_valued='high'), Fact(roa_valued='high'), Fact(roe_valued='low'))
    def ipo_rule_2870(self):
        self.declare(Fact(recommendation='DER menunjukkan tingkat hutang yang tinggi. ROA menunjukkan efisiensi tinggi. ROE menunjukkan keuntungan yang rendah.'))


    @Rule(Fact(underwriter_valued='bad'), Fact(warrant_valued='good'), Fact(net_income_valued='loss'))
    def ipo_rule_2871(self):
        self.declare(Fact(recommendation='Underwriter berkualitas buruk. Warrant menunjukkan kondisi baik. Laba bersih menunjukkan kerugian.'))


    @Rule(Fact(underwriter_valued='bad'), Fact(warrant_valued='good'), Fact(per_valued='high'))
    def ipo_rule_2872(self):
        self.declare(Fact(recommendation='Underwriter berkualitas buruk. Warrant menunjukkan kondisi baik. PER berada di tingkat yang tinggi.'))


    @Rule(Fact(underwriter_valued='bad'), Fact(warrant_valued='good'), Fact(der_valued='high'))
    def ipo_rule_2873(self):
        self.declare(Fact(recommendation='Underwriter berkualitas buruk. Warrant menunjukkan kondisi baik. DER menunjukkan tingkat hutang yang tinggi.'))


    @Rule(Fact(underwriter_valued='bad'), Fact(warrant_valued='good'), Fact(roa_valued='low'))
    def ipo_rule_2874(self):
        self.declare(Fact(recommendation='Underwriter berkualitas buruk. Warrant menunjukkan kondisi baik. ROA menunjukkan efisiensi rendah.'))


    @Rule(Fact(underwriter_valued='bad'), Fact(warrant_valued='good'), Fact(roe_valued='high'))
    def ipo_rule_2875(self):
        self.declare(Fact(recommendation='Underwriter berkualitas buruk. Warrant menunjukkan kondisi baik. ROE menunjukkan keuntungan yang tinggi.'))


    @Rule(Fact(underwriter_valued='bad'), Fact(net_income_valued='loss'), Fact(per_valued='high'))
    def ipo_rule_2876(self):
        self.declare(Fact(recommendation='Underwriter berkualitas buruk. Laba bersih menunjukkan kerugian. PER berada di tingkat yang tinggi.'))


    @Rule(Fact(underwriter_valued='bad'), Fact(net_income_valued='loss'), Fact(der_valued='high'))
    def ipo_rule_2877(self):
        self.declare(Fact(recommendation='Underwriter berkualitas buruk. Laba bersih menunjukkan kerugian. DER menunjukkan tingkat hutang yang tinggi.'))


    @Rule(Fact(underwriter_valued='bad'), Fact(net_income_valued='loss'), Fact(roa_valued='low'))
    def ipo_rule_2878(self):
        self.declare(Fact(recommendation='Underwriter berkualitas buruk. Laba bersih menunjukkan kerugian. ROA menunjukkan efisiensi rendah.'))


    @Rule(Fact(underwriter_valued='bad'), Fact(net_income_valued='loss'), Fact(roe_valued='high'))
    def ipo_rule_2879(self):
        self.declare(Fact(recommendation='Underwriter berkualitas buruk. Laba bersih menunjukkan kerugian. ROE menunjukkan keuntungan yang tinggi.'))


    @Rule(Fact(underwriter_valued='bad'), Fact(per_valued='high'), Fact(der_valued='high'))
    def ipo_rule_2880(self):
        self.declare(Fact(recommendation='Underwriter berkualitas buruk. PER berada di tingkat yang tinggi. DER menunjukkan tingkat hutang yang tinggi.'))


    @Rule(Fact(underwriter_valued='bad'), Fact(per_valued='high'), Fact(roa_valued='low'))
    def ipo_rule_2881(self):
        self.declare(Fact(recommendation='Underwriter berkualitas buruk. PER berada di tingkat yang tinggi. ROA menunjukkan efisiensi rendah.'))


    @Rule(Fact(underwriter_valued='bad'), Fact(per_valued='high'), Fact(roe_valued='high'))
    def ipo_rule_2882(self):
        self.declare(Fact(recommendation='Underwriter berkualitas buruk. PER berada di tingkat yang tinggi. ROE menunjukkan keuntungan yang tinggi.'))


    @Rule(Fact(underwriter_valued='bad'), Fact(der_valued='high'), Fact(roa_valued='low'))
    def ipo_rule_2883(self):
        self.declare(Fact(recommendation='Underwriter berkualitas buruk. DER menunjukkan tingkat hutang yang tinggi. ROA menunjukkan efisiensi rendah.'))


    @Rule(Fact(underwriter_valued='bad'), Fact(der_valued='high'), Fact(roe_valued='high'))
    def ipo_rule_2884(self):
        self.declare(Fact(recommendation='Underwriter berkualitas buruk. DER menunjukkan tingkat hutang yang tinggi. ROE menunjukkan keuntungan yang tinggi.'))


    @Rule(Fact(underwriter_valued='bad'), Fact(roa_valued='low'), Fact(roe_valued='high'))
    def ipo_rule_2885(self):
        self.declare(Fact(recommendation='Underwriter berkualitas buruk. ROA menunjukkan efisiensi rendah. ROE menunjukkan keuntungan yang tinggi.'))


    @Rule(Fact(warrant_valued='good'), Fact(net_income_valued='loss'), Fact(per_valued='high'))
    def ipo_rule_2886(self):
        self.declare(Fact(recommendation='Warrant menunjukkan kondisi baik. Laba bersih menunjukkan kerugian. PER berada di tingkat yang tinggi.'))


    @Rule(Fact(warrant_valued='good'), Fact(net_income_valued='loss'), Fact(der_valued='high'))
    def ipo_rule_2887(self):
        self.declare(Fact(recommendation='Warrant menunjukkan kondisi baik. Laba bersih menunjukkan kerugian. DER menunjukkan tingkat hutang yang tinggi.'))


    @Rule(Fact(warrant_valued='good'), Fact(net_income_valued='loss'), Fact(roa_valued='low'))
    def ipo_rule_2888(self):
        self.declare(Fact(recommendation='Warrant menunjukkan kondisi baik. Laba bersih menunjukkan kerugian. ROA menunjukkan efisiensi rendah.'))


    @Rule(Fact(warrant_valued='good'), Fact(net_income_valued='loss'), Fact(roe_valued='high'))
    def ipo_rule_2889(self):
        self.declare(Fact(recommendation='Warrant menunjukkan kondisi baik. Laba bersih menunjukkan kerugian. ROE menunjukkan keuntungan yang tinggi.'))


    @Rule(Fact(warrant_valued='good'), Fact(per_valued='high'), Fact(der_valued='high'))
    def ipo_rule_2890(self):
        self.declare(Fact(recommendation='Warrant menunjukkan kondisi baik. PER berada di tingkat yang tinggi. DER menunjukkan tingkat hutang yang tinggi.'))


    @Rule(Fact(warrant_valued='good'), Fact(per_valued='high'), Fact(roa_valued='low'))
    def ipo_rule_2891(self):
        self.declare(Fact(recommendation='Warrant menunjukkan kondisi baik. PER berada di tingkat yang tinggi. ROA menunjukkan efisiensi rendah.'))


    @Rule(Fact(warrant_valued='good'), Fact(per_valued='high'), Fact(roe_valued='high'))
    def ipo_rule_2892(self):
        self.declare(Fact(recommendation='Warrant menunjukkan kondisi baik. PER berada di tingkat yang tinggi. ROE menunjukkan keuntungan yang tinggi.'))


    @Rule(Fact(warrant_valued='good'), Fact(der_valued='high'), Fact(roa_valued='low'))
    def ipo_rule_2893(self):
        self.declare(Fact(recommendation='Warrant menunjukkan kondisi baik. DER menunjukkan tingkat hutang yang tinggi. ROA menunjukkan efisiensi rendah.'))


    @Rule(Fact(warrant_valued='good'), Fact(der_valued='high'), Fact(roe_valued='high'))
    def ipo_rule_2894(self):
        self.declare(Fact(recommendation='Warrant menunjukkan kondisi baik. DER menunjukkan tingkat hutang yang tinggi. ROE menunjukkan keuntungan yang tinggi.'))


    @Rule(Fact(warrant_valued='good'), Fact(roa_valued='low'), Fact(roe_valued='high'))
    def ipo_rule_2895(self):
        self.declare(Fact(recommendation='Warrant menunjukkan kondisi baik. ROA menunjukkan efisiensi rendah. ROE menunjukkan keuntungan yang tinggi.'))


    @Rule(Fact(net_income_valued='loss'), Fact(per_valued='high'), Fact(der_valued='high'))
    def ipo_rule_2896(self):
        self.declare(Fact(recommendation='Laba bersih menunjukkan kerugian. PER berada di tingkat yang tinggi. DER menunjukkan tingkat hutang yang tinggi.'))


    @Rule(Fact(net_income_valued='loss'), Fact(per_valued='high'), Fact(roa_valued='low'))
    def ipo_rule_2897(self):
        self.declare(Fact(recommendation='Laba bersih menunjukkan kerugian. PER berada di tingkat yang tinggi. ROA menunjukkan efisiensi rendah.'))


    @Rule(Fact(net_income_valued='loss'), Fact(per_valued='high'), Fact(roe_valued='high'))
    def ipo_rule_2898(self):
        self.declare(Fact(recommendation='Laba bersih menunjukkan kerugian. PER berada di tingkat yang tinggi. ROE menunjukkan keuntungan yang tinggi.'))


    @Rule(Fact(net_income_valued='loss'), Fact(der_valued='high'), Fact(roa_valued='low'))
    def ipo_rule_2899(self):
        self.declare(Fact(recommendation='Laba bersih menunjukkan kerugian. DER menunjukkan tingkat hutang yang tinggi. ROA menunjukkan efisiensi rendah.'))


    @Rule(Fact(net_income_valued='loss'), Fact(der_valued='high'), Fact(roe_valued='high'))
    def ipo_rule_2900(self):
        self.declare(Fact(recommendation='Laba bersih menunjukkan kerugian. DER menunjukkan tingkat hutang yang tinggi. ROE menunjukkan keuntungan yang tinggi.'))


    @Rule(Fact(net_income_valued='loss'), Fact(roa_valued='low'), Fact(roe_valued='high'))
    def ipo_rule_2901(self):
        self.declare(Fact(recommendation='Laba bersih menunjukkan kerugian. ROA menunjukkan efisiensi rendah. ROE menunjukkan keuntungan yang tinggi.'))


    @Rule(Fact(per_valued='high'), Fact(der_valued='high'), Fact(roa_valued='low'))
    def ipo_rule_2902(self):
        self.declare(Fact(recommendation='PER berada di tingkat yang tinggi. DER menunjukkan tingkat hutang yang tinggi. ROA menunjukkan efisiensi rendah.'))


    @Rule(Fact(per_valued='high'), Fact(der_valued='high'), Fact(roe_valued='high'))
    def ipo_rule_2903(self):
        self.declare(Fact(recommendation='PER berada di tingkat yang tinggi. DER menunjukkan tingkat hutang yang tinggi. ROE menunjukkan keuntungan yang tinggi.'))


    @Rule(Fact(per_valued='high'), Fact(roa_valued='low'), Fact(roe_valued='high'))
    def ipo_rule_2904(self):
        self.declare(Fact(recommendation='PER berada di tingkat yang tinggi. ROA menunjukkan efisiensi rendah. ROE menunjukkan keuntungan yang tinggi.'))


    @Rule(Fact(der_valued='high'), Fact(roa_valued='low'), Fact(roe_valued='high'))
    def ipo_rule_2905(self):
        self.declare(Fact(recommendation='DER menunjukkan tingkat hutang yang tinggi. ROA menunjukkan efisiensi rendah. ROE menunjukkan keuntungan yang tinggi.'))


    @Rule(Fact(underwriter_valued='bad'), Fact(warrant_valued='good'), Fact(net_income_valued='loss'))
    def ipo_rule_2906(self):
        self.declare(Fact(recommendation='Underwriter berkualitas buruk. Warrant menunjukkan kondisi baik. Laba bersih menunjukkan kerugian.'))


    @Rule(Fact(underwriter_valued='bad'), Fact(warrant_valued='good'), Fact(per_valued='high'))
    def ipo_rule_2907(self):
        self.declare(Fact(recommendation='Underwriter berkualitas buruk. Warrant menunjukkan kondisi baik. PER berada di tingkat yang tinggi.'))


    @Rule(Fact(underwriter_valued='bad'), Fact(warrant_valued='good'), Fact(der_valued='high'))
    def ipo_rule_2908(self):
        self.declare(Fact(recommendation='Underwriter berkualitas buruk. Warrant menunjukkan kondisi baik. DER menunjukkan tingkat hutang yang tinggi.'))


    @Rule(Fact(underwriter_valued='bad'), Fact(warrant_valued='good'), Fact(roa_valued='low'))
    def ipo_rule_2909(self):
        self.declare(Fact(recommendation='Underwriter berkualitas buruk. Warrant menunjukkan kondisi baik. ROA menunjukkan efisiensi rendah.'))


    @Rule(Fact(underwriter_valued='bad'), Fact(warrant_valued='good'), Fact(roe_valued='low'))
    def ipo_rule_2910(self):
        self.declare(Fact(recommendation='Underwriter berkualitas buruk. Warrant menunjukkan kondisi baik. ROE menunjukkan keuntungan yang rendah.'))


    @Rule(Fact(underwriter_valued='bad'), Fact(net_income_valued='loss'), Fact(per_valued='high'))
    def ipo_rule_2911(self):
        self.declare(Fact(recommendation='Underwriter berkualitas buruk. Laba bersih menunjukkan kerugian. PER berada di tingkat yang tinggi.'))


    @Rule(Fact(underwriter_valued='bad'), Fact(net_income_valued='loss'), Fact(der_valued='high'))
    def ipo_rule_2912(self):
        self.declare(Fact(recommendation='Underwriter berkualitas buruk. Laba bersih menunjukkan kerugian. DER menunjukkan tingkat hutang yang tinggi.'))


    @Rule(Fact(underwriter_valued='bad'), Fact(net_income_valued='loss'), Fact(roa_valued='low'))
    def ipo_rule_2913(self):
        self.declare(Fact(recommendation='Underwriter berkualitas buruk. Laba bersih menunjukkan kerugian. ROA menunjukkan efisiensi rendah.'))


    @Rule(Fact(underwriter_valued='bad'), Fact(net_income_valued='loss'), Fact(roe_valued='low'))
    def ipo_rule_2914(self):
        self.declare(Fact(recommendation='Underwriter berkualitas buruk. Laba bersih menunjukkan kerugian. ROE menunjukkan keuntungan yang rendah.'))


    @Rule(Fact(underwriter_valued='bad'), Fact(per_valued='high'), Fact(der_valued='high'))
    def ipo_rule_2915(self):
        self.declare(Fact(recommendation='Underwriter berkualitas buruk. PER berada di tingkat yang tinggi. DER menunjukkan tingkat hutang yang tinggi.'))


    @Rule(Fact(underwriter_valued='bad'), Fact(per_valued='high'), Fact(roa_valued='low'))
    def ipo_rule_2916(self):
        self.declare(Fact(recommendation='Underwriter berkualitas buruk. PER berada di tingkat yang tinggi. ROA menunjukkan efisiensi rendah.'))


    @Rule(Fact(underwriter_valued='bad'), Fact(per_valued='high'), Fact(roe_valued='low'))
    def ipo_rule_2917(self):
        self.declare(Fact(recommendation='Underwriter berkualitas buruk. PER berada di tingkat yang tinggi. ROE menunjukkan keuntungan yang rendah.'))


    @Rule(Fact(underwriter_valued='bad'), Fact(der_valued='high'), Fact(roa_valued='low'))
    def ipo_rule_2918(self):
        self.declare(Fact(recommendation='Underwriter berkualitas buruk. DER menunjukkan tingkat hutang yang tinggi. ROA menunjukkan efisiensi rendah.'))


    @Rule(Fact(underwriter_valued='bad'), Fact(der_valued='high'), Fact(roe_valued='low'))
    def ipo_rule_2919(self):
        self.declare(Fact(recommendation='Underwriter berkualitas buruk. DER menunjukkan tingkat hutang yang tinggi. ROE menunjukkan keuntungan yang rendah.'))


    @Rule(Fact(underwriter_valued='bad'), Fact(roa_valued='low'), Fact(roe_valued='low'))
    def ipo_rule_2920(self):
        self.declare(Fact(recommendation='Underwriter berkualitas buruk. ROA menunjukkan efisiensi rendah. ROE menunjukkan keuntungan yang rendah.'))


    @Rule(Fact(warrant_valued='good'), Fact(net_income_valued='loss'), Fact(per_valued='high'))
    def ipo_rule_2921(self):
        self.declare(Fact(recommendation='Warrant menunjukkan kondisi baik. Laba bersih menunjukkan kerugian. PER berada di tingkat yang tinggi.'))


    @Rule(Fact(warrant_valued='good'), Fact(net_income_valued='loss'), Fact(der_valued='high'))
    def ipo_rule_2922(self):
        self.declare(Fact(recommendation='Warrant menunjukkan kondisi baik. Laba bersih menunjukkan kerugian. DER menunjukkan tingkat hutang yang tinggi.'))


    @Rule(Fact(warrant_valued='good'), Fact(net_income_valued='loss'), Fact(roa_valued='low'))
    def ipo_rule_2923(self):
        self.declare(Fact(recommendation='Warrant menunjukkan kondisi baik. Laba bersih menunjukkan kerugian. ROA menunjukkan efisiensi rendah.'))


    @Rule(Fact(warrant_valued='good'), Fact(net_income_valued='loss'), Fact(roe_valued='low'))
    def ipo_rule_2924(self):
        self.declare(Fact(recommendation='Warrant menunjukkan kondisi baik. Laba bersih menunjukkan kerugian. ROE menunjukkan keuntungan yang rendah.'))


    @Rule(Fact(warrant_valued='good'), Fact(per_valued='high'), Fact(der_valued='high'))
    def ipo_rule_2925(self):
        self.declare(Fact(recommendation='Warrant menunjukkan kondisi baik. PER berada di tingkat yang tinggi. DER menunjukkan tingkat hutang yang tinggi.'))


    @Rule(Fact(warrant_valued='good'), Fact(per_valued='high'), Fact(roa_valued='low'))
    def ipo_rule_2926(self):
        self.declare(Fact(recommendation='Warrant menunjukkan kondisi baik. PER berada di tingkat yang tinggi. ROA menunjukkan efisiensi rendah.'))


    @Rule(Fact(warrant_valued='good'), Fact(per_valued='high'), Fact(roe_valued='low'))
    def ipo_rule_2927(self):
        self.declare(Fact(recommendation='Warrant menunjukkan kondisi baik. PER berada di tingkat yang tinggi. ROE menunjukkan keuntungan yang rendah.'))


    @Rule(Fact(warrant_valued='good'), Fact(der_valued='high'), Fact(roa_valued='low'))
    def ipo_rule_2928(self):
        self.declare(Fact(recommendation='Warrant menunjukkan kondisi baik. DER menunjukkan tingkat hutang yang tinggi. ROA menunjukkan efisiensi rendah.'))


    @Rule(Fact(warrant_valued='good'), Fact(der_valued='high'), Fact(roe_valued='low'))
    def ipo_rule_2929(self):
        self.declare(Fact(recommendation='Warrant menunjukkan kondisi baik. DER menunjukkan tingkat hutang yang tinggi. ROE menunjukkan keuntungan yang rendah.'))


    @Rule(Fact(warrant_valued='good'), Fact(roa_valued='low'), Fact(roe_valued='low'))
    def ipo_rule_2930(self):
        self.declare(Fact(recommendation='Warrant menunjukkan kondisi baik. ROA menunjukkan efisiensi rendah. ROE menunjukkan keuntungan yang rendah.'))


    @Rule(Fact(net_income_valued='loss'), Fact(per_valued='high'), Fact(der_valued='high'))
    def ipo_rule_2931(self):
        self.declare(Fact(recommendation='Laba bersih menunjukkan kerugian. PER berada di tingkat yang tinggi. DER menunjukkan tingkat hutang yang tinggi.'))


    @Rule(Fact(net_income_valued='loss'), Fact(per_valued='high'), Fact(roa_valued='low'))
    def ipo_rule_2932(self):
        self.declare(Fact(recommendation='Laba bersih menunjukkan kerugian. PER berada di tingkat yang tinggi. ROA menunjukkan efisiensi rendah.'))


    @Rule(Fact(net_income_valued='loss'), Fact(per_valued='high'), Fact(roe_valued='low'))
    def ipo_rule_2933(self):
        self.declare(Fact(recommendation='Laba bersih menunjukkan kerugian. PER berada di tingkat yang tinggi. ROE menunjukkan keuntungan yang rendah.'))


    @Rule(Fact(net_income_valued='loss'), Fact(der_valued='high'), Fact(roa_valued='low'))
    def ipo_rule_2934(self):
        self.declare(Fact(recommendation='Laba bersih menunjukkan kerugian. DER menunjukkan tingkat hutang yang tinggi. ROA menunjukkan efisiensi rendah.'))


    @Rule(Fact(net_income_valued='loss'), Fact(der_valued='high'), Fact(roe_valued='low'))
    def ipo_rule_2935(self):
        self.declare(Fact(recommendation='Laba bersih menunjukkan kerugian. DER menunjukkan tingkat hutang yang tinggi. ROE menunjukkan keuntungan yang rendah.'))


    @Rule(Fact(net_income_valued='loss'), Fact(roa_valued='low'), Fact(roe_valued='low'))
    def ipo_rule_2936(self):
        self.declare(Fact(recommendation='Laba bersih menunjukkan kerugian. ROA menunjukkan efisiensi rendah. ROE menunjukkan keuntungan yang rendah.'))


    @Rule(Fact(per_valued='high'), Fact(der_valued='high'), Fact(roa_valued='low'))
    def ipo_rule_2937(self):
        self.declare(Fact(recommendation='PER berada di tingkat yang tinggi. DER menunjukkan tingkat hutang yang tinggi. ROA menunjukkan efisiensi rendah.'))


    @Rule(Fact(per_valued='high'), Fact(der_valued='high'), Fact(roe_valued='low'))
    def ipo_rule_2938(self):
        self.declare(Fact(recommendation='PER berada di tingkat yang tinggi. DER menunjukkan tingkat hutang yang tinggi. ROE menunjukkan keuntungan yang rendah.'))


    @Rule(Fact(per_valued='high'), Fact(roa_valued='low'), Fact(roe_valued='low'))
    def ipo_rule_2939(self):
        self.declare(Fact(recommendation='PER berada di tingkat yang tinggi. ROA menunjukkan efisiensi rendah. ROE menunjukkan keuntungan yang rendah.'))


    @Rule(Fact(der_valued='high'), Fact(roa_valued='low'), Fact(roe_valued='low'))
    def ipo_rule_2940(self):
        self.declare(Fact(recommendation='DER menunjukkan tingkat hutang yang tinggi. ROA menunjukkan efisiensi rendah. ROE menunjukkan keuntungan yang rendah.'))


    @Rule(Fact(underwriter_valued='bad'), Fact(warrant_valued='good'), Fact(net_income_valued='loss'))
    def ipo_rule_2941(self):
        self.declare(Fact(recommendation='Underwriter berkualitas buruk. Warrant menunjukkan kondisi baik. Laba bersih menunjukkan kerugian.'))


    @Rule(Fact(underwriter_valued='bad'), Fact(warrant_valued='good'), Fact(per_valued='high'))
    def ipo_rule_2942(self):
        self.declare(Fact(recommendation='Underwriter berkualitas buruk. Warrant menunjukkan kondisi baik. PER berada di tingkat yang tinggi.'))


    @Rule(Fact(underwriter_valued='bad'), Fact(warrant_valued='good'), Fact(der_valued='low'))
    def ipo_rule_2943(self):
        self.declare(Fact(recommendation='Underwriter berkualitas buruk. Warrant menunjukkan kondisi baik. DER menunjukkan tingkat hutang yang rendah.'))


    @Rule(Fact(underwriter_valued='bad'), Fact(warrant_valued='good'), Fact(roa_valued='high'))
    def ipo_rule_2944(self):
        self.declare(Fact(recommendation='Underwriter berkualitas buruk. Warrant menunjukkan kondisi baik. ROA menunjukkan efisiensi tinggi.'))


    @Rule(Fact(underwriter_valued='bad'), Fact(warrant_valued='good'), Fact(roe_valued='high'))
    def ipo_rule_2945(self):
        self.declare(Fact(recommendation='Underwriter berkualitas buruk. Warrant menunjukkan kondisi baik. ROE menunjukkan keuntungan yang tinggi.'))


    @Rule(Fact(underwriter_valued='bad'), Fact(net_income_valued='loss'), Fact(per_valued='high'))
    def ipo_rule_2946(self):
        self.declare(Fact(recommendation='Underwriter berkualitas buruk. Laba bersih menunjukkan kerugian. PER berada di tingkat yang tinggi.'))


    @Rule(Fact(underwriter_valued='bad'), Fact(net_income_valued='loss'), Fact(der_valued='low'))
    def ipo_rule_2947(self):
        self.declare(Fact(recommendation='Underwriter berkualitas buruk. Laba bersih menunjukkan kerugian. DER menunjukkan tingkat hutang yang rendah.'))


    @Rule(Fact(underwriter_valued='bad'), Fact(net_income_valued='loss'), Fact(roa_valued='high'))
    def ipo_rule_2948(self):
        self.declare(Fact(recommendation='Underwriter berkualitas buruk. Laba bersih menunjukkan kerugian. ROA menunjukkan efisiensi tinggi.'))


    @Rule(Fact(underwriter_valued='bad'), Fact(net_income_valued='loss'), Fact(roe_valued='high'))
    def ipo_rule_2949(self):
        self.declare(Fact(recommendation='Underwriter berkualitas buruk. Laba bersih menunjukkan kerugian. ROE menunjukkan keuntungan yang tinggi.'))


    @Rule(Fact(underwriter_valued='bad'), Fact(per_valued='high'), Fact(der_valued='low'))
    def ipo_rule_2950(self):
        self.declare(Fact(recommendation='Underwriter berkualitas buruk. PER berada di tingkat yang tinggi. DER menunjukkan tingkat hutang yang rendah.'))


    @Rule(Fact(underwriter_valued='bad'), Fact(per_valued='high'), Fact(roa_valued='high'))
    def ipo_rule_2951(self):
        self.declare(Fact(recommendation='Underwriter berkualitas buruk. PER berada di tingkat yang tinggi. ROA menunjukkan efisiensi tinggi.'))


    @Rule(Fact(underwriter_valued='bad'), Fact(per_valued='high'), Fact(roe_valued='high'))
    def ipo_rule_2952(self):
        self.declare(Fact(recommendation='Underwriter berkualitas buruk. PER berada di tingkat yang tinggi. ROE menunjukkan keuntungan yang tinggi.'))


    @Rule(Fact(underwriter_valued='bad'), Fact(der_valued='low'), Fact(roa_valued='high'))
    def ipo_rule_2953(self):
        self.declare(Fact(recommendation='Underwriter berkualitas buruk. DER menunjukkan tingkat hutang yang rendah. ROA menunjukkan efisiensi tinggi.'))


    @Rule(Fact(underwriter_valued='bad'), Fact(der_valued='low'), Fact(roe_valued='high'))
    def ipo_rule_2954(self):
        self.declare(Fact(recommendation='Underwriter berkualitas buruk. DER menunjukkan tingkat hutang yang rendah. ROE menunjukkan keuntungan yang tinggi.'))


    @Rule(Fact(underwriter_valued='bad'), Fact(roa_valued='high'), Fact(roe_valued='high'))
    def ipo_rule_2955(self):
        self.declare(Fact(recommendation='Underwriter berkualitas buruk. ROA menunjukkan efisiensi tinggi. ROE menunjukkan keuntungan yang tinggi.'))


    @Rule(Fact(warrant_valued='good'), Fact(net_income_valued='loss'), Fact(per_valued='high'))
    def ipo_rule_2956(self):
        self.declare(Fact(recommendation='Warrant menunjukkan kondisi baik. Laba bersih menunjukkan kerugian. PER berada di tingkat yang tinggi.'))


    @Rule(Fact(warrant_valued='good'), Fact(net_income_valued='loss'), Fact(der_valued='low'))
    def ipo_rule_2957(self):
        self.declare(Fact(recommendation='Warrant menunjukkan kondisi baik. Laba bersih menunjukkan kerugian. DER menunjukkan tingkat hutang yang rendah.'))


    @Rule(Fact(warrant_valued='good'), Fact(net_income_valued='loss'), Fact(roa_valued='high'))
    def ipo_rule_2958(self):
        self.declare(Fact(recommendation='Warrant menunjukkan kondisi baik. Laba bersih menunjukkan kerugian. ROA menunjukkan efisiensi tinggi.'))


    @Rule(Fact(warrant_valued='good'), Fact(net_income_valued='loss'), Fact(roe_valued='high'))
    def ipo_rule_2959(self):
        self.declare(Fact(recommendation='Warrant menunjukkan kondisi baik. Laba bersih menunjukkan kerugian. ROE menunjukkan keuntungan yang tinggi.'))


    @Rule(Fact(warrant_valued='good'), Fact(per_valued='high'), Fact(der_valued='low'))
    def ipo_rule_2960(self):
        self.declare(Fact(recommendation='Warrant menunjukkan kondisi baik. PER berada di tingkat yang tinggi. DER menunjukkan tingkat hutang yang rendah.'))


    @Rule(Fact(warrant_valued='good'), Fact(per_valued='high'), Fact(roa_valued='high'))
    def ipo_rule_2961(self):
        self.declare(Fact(recommendation='Warrant menunjukkan kondisi baik. PER berada di tingkat yang tinggi. ROA menunjukkan efisiensi tinggi.'))


    @Rule(Fact(warrant_valued='good'), Fact(per_valued='high'), Fact(roe_valued='high'))
    def ipo_rule_2962(self):
        self.declare(Fact(recommendation='Warrant menunjukkan kondisi baik. PER berada di tingkat yang tinggi. ROE menunjukkan keuntungan yang tinggi.'))


    @Rule(Fact(warrant_valued='good'), Fact(der_valued='low'), Fact(roa_valued='high'))
    def ipo_rule_2963(self):
        self.declare(Fact(recommendation='Warrant menunjukkan kondisi baik. DER menunjukkan tingkat hutang yang rendah. ROA menunjukkan efisiensi tinggi.'))


    @Rule(Fact(warrant_valued='good'), Fact(der_valued='low'), Fact(roe_valued='high'))
    def ipo_rule_2964(self):
        self.declare(Fact(recommendation='Warrant menunjukkan kondisi baik. DER menunjukkan tingkat hutang yang rendah. ROE menunjukkan keuntungan yang tinggi.'))


    @Rule(Fact(warrant_valued='good'), Fact(roa_valued='high'), Fact(roe_valued='high'))
    def ipo_rule_2965(self):
        self.declare(Fact(recommendation='Warrant menunjukkan kondisi baik. ROA menunjukkan efisiensi tinggi. ROE menunjukkan keuntungan yang tinggi.'))


    @Rule(Fact(net_income_valued='loss'), Fact(per_valued='high'), Fact(der_valued='low'))
    def ipo_rule_2966(self):
        self.declare(Fact(recommendation='Laba bersih menunjukkan kerugian. PER berada di tingkat yang tinggi. DER menunjukkan tingkat hutang yang rendah.'))


    @Rule(Fact(net_income_valued='loss'), Fact(per_valued='high'), Fact(roa_valued='high'))
    def ipo_rule_2967(self):
        self.declare(Fact(recommendation='Laba bersih menunjukkan kerugian. PER berada di tingkat yang tinggi. ROA menunjukkan efisiensi tinggi.'))


    @Rule(Fact(net_income_valued='loss'), Fact(per_valued='high'), Fact(roe_valued='high'))
    def ipo_rule_2968(self):
        self.declare(Fact(recommendation='Laba bersih menunjukkan kerugian. PER berada di tingkat yang tinggi. ROE menunjukkan keuntungan yang tinggi.'))


    @Rule(Fact(net_income_valued='loss'), Fact(der_valued='low'), Fact(roa_valued='high'))
    def ipo_rule_2969(self):
        self.declare(Fact(recommendation='Laba bersih menunjukkan kerugian. DER menunjukkan tingkat hutang yang rendah. ROA menunjukkan efisiensi tinggi.'))


    @Rule(Fact(net_income_valued='loss'), Fact(der_valued='low'), Fact(roe_valued='high'))
    def ipo_rule_2970(self):
        self.declare(Fact(recommendation='Laba bersih menunjukkan kerugian. DER menunjukkan tingkat hutang yang rendah. ROE menunjukkan keuntungan yang tinggi.'))


    @Rule(Fact(net_income_valued='loss'), Fact(roa_valued='high'), Fact(roe_valued='high'))
    def ipo_rule_2971(self):
        self.declare(Fact(recommendation='Laba bersih menunjukkan kerugian. ROA menunjukkan efisiensi tinggi. ROE menunjukkan keuntungan yang tinggi.'))


    @Rule(Fact(per_valued='high'), Fact(der_valued='low'), Fact(roa_valued='high'))
    def ipo_rule_2972(self):
        self.declare(Fact(recommendation='PER berada di tingkat yang tinggi. DER menunjukkan tingkat hutang yang rendah. ROA menunjukkan efisiensi tinggi.'))


    @Rule(Fact(per_valued='high'), Fact(der_valued='low'), Fact(roe_valued='high'))
    def ipo_rule_2973(self):
        self.declare(Fact(recommendation='PER berada di tingkat yang tinggi. DER menunjukkan tingkat hutang yang rendah. ROE menunjukkan keuntungan yang tinggi.'))


    @Rule(Fact(per_valued='high'), Fact(roa_valued='high'), Fact(roe_valued='high'))
    def ipo_rule_2974(self):
        self.declare(Fact(recommendation='PER berada di tingkat yang tinggi. ROA menunjukkan efisiensi tinggi. ROE menunjukkan keuntungan yang tinggi.'))


    @Rule(Fact(der_valued='low'), Fact(roa_valued='high'), Fact(roe_valued='high'))
    def ipo_rule_2975(self):
        self.declare(Fact(recommendation='DER menunjukkan tingkat hutang yang rendah. ROA menunjukkan efisiensi tinggi. ROE menunjukkan keuntungan yang tinggi.'))


    @Rule(Fact(underwriter_valued='bad'), Fact(warrant_valued='good'), Fact(net_income_valued='loss'))
    def ipo_rule_2976(self):
        self.declare(Fact(recommendation='Underwriter berkualitas buruk. Warrant menunjukkan kondisi baik. Laba bersih menunjukkan kerugian.'))


    @Rule(Fact(underwriter_valued='bad'), Fact(warrant_valued='good'), Fact(per_valued='high'))
    def ipo_rule_2977(self):
        self.declare(Fact(recommendation='Underwriter berkualitas buruk. Warrant menunjukkan kondisi baik. PER berada di tingkat yang tinggi.'))


    @Rule(Fact(underwriter_valued='bad'), Fact(warrant_valued='good'), Fact(der_valued='low'))
    def ipo_rule_2978(self):
        self.declare(Fact(recommendation='Underwriter berkualitas buruk. Warrant menunjukkan kondisi baik. DER menunjukkan tingkat hutang yang rendah.'))


    @Rule(Fact(underwriter_valued='bad'), Fact(warrant_valued='good'), Fact(roa_valued='high'))
    def ipo_rule_2979(self):
        self.declare(Fact(recommendation='Underwriter berkualitas buruk. Warrant menunjukkan kondisi baik. ROA menunjukkan efisiensi tinggi.'))


    @Rule(Fact(underwriter_valued='bad'), Fact(warrant_valued='good'), Fact(roe_valued='low'))
    def ipo_rule_2980(self):
        self.declare(Fact(recommendation='Underwriter berkualitas buruk. Warrant menunjukkan kondisi baik. ROE menunjukkan keuntungan yang rendah.'))


    @Rule(Fact(underwriter_valued='bad'), Fact(net_income_valued='loss'), Fact(per_valued='high'))
    def ipo_rule_2981(self):
        self.declare(Fact(recommendation='Underwriter berkualitas buruk. Laba bersih menunjukkan kerugian. PER berada di tingkat yang tinggi.'))


    @Rule(Fact(underwriter_valued='bad'), Fact(net_income_valued='loss'), Fact(der_valued='low'))
    def ipo_rule_2982(self):
        self.declare(Fact(recommendation='Underwriter berkualitas buruk. Laba bersih menunjukkan kerugian. DER menunjukkan tingkat hutang yang rendah.'))


    @Rule(Fact(underwriter_valued='bad'), Fact(net_income_valued='loss'), Fact(roa_valued='high'))
    def ipo_rule_2983(self):
        self.declare(Fact(recommendation='Underwriter berkualitas buruk. Laba bersih menunjukkan kerugian. ROA menunjukkan efisiensi tinggi.'))


    @Rule(Fact(underwriter_valued='bad'), Fact(net_income_valued='loss'), Fact(roe_valued='low'))
    def ipo_rule_2984(self):
        self.declare(Fact(recommendation='Underwriter berkualitas buruk. Laba bersih menunjukkan kerugian. ROE menunjukkan keuntungan yang rendah.'))


    @Rule(Fact(underwriter_valued='bad'), Fact(per_valued='high'), Fact(der_valued='low'))
    def ipo_rule_2985(self):
        self.declare(Fact(recommendation='Underwriter berkualitas buruk. PER berada di tingkat yang tinggi. DER menunjukkan tingkat hutang yang rendah.'))


    @Rule(Fact(underwriter_valued='bad'), Fact(per_valued='high'), Fact(roa_valued='high'))
    def ipo_rule_2986(self):
        self.declare(Fact(recommendation='Underwriter berkualitas buruk. PER berada di tingkat yang tinggi. ROA menunjukkan efisiensi tinggi.'))


    @Rule(Fact(underwriter_valued='bad'), Fact(per_valued='high'), Fact(roe_valued='low'))
    def ipo_rule_2987(self):
        self.declare(Fact(recommendation='Underwriter berkualitas buruk. PER berada di tingkat yang tinggi. ROE menunjukkan keuntungan yang rendah.'))


    @Rule(Fact(underwriter_valued='bad'), Fact(der_valued='low'), Fact(roa_valued='high'))
    def ipo_rule_2988(self):
        self.declare(Fact(recommendation='Underwriter berkualitas buruk. DER menunjukkan tingkat hutang yang rendah. ROA menunjukkan efisiensi tinggi.'))


    @Rule(Fact(underwriter_valued='bad'), Fact(der_valued='low'), Fact(roe_valued='low'))
    def ipo_rule_2989(self):
        self.declare(Fact(recommendation='Underwriter berkualitas buruk. DER menunjukkan tingkat hutang yang rendah. ROE menunjukkan keuntungan yang rendah.'))


    @Rule(Fact(underwriter_valued='bad'), Fact(roa_valued='high'), Fact(roe_valued='low'))
    def ipo_rule_2990(self):
        self.declare(Fact(recommendation='Underwriter berkualitas buruk. ROA menunjukkan efisiensi tinggi. ROE menunjukkan keuntungan yang rendah.'))


    @Rule(Fact(warrant_valued='good'), Fact(net_income_valued='loss'), Fact(per_valued='high'))
    def ipo_rule_2991(self):
        self.declare(Fact(recommendation='Warrant menunjukkan kondisi baik. Laba bersih menunjukkan kerugian. PER berada di tingkat yang tinggi.'))


    @Rule(Fact(warrant_valued='good'), Fact(net_income_valued='loss'), Fact(der_valued='low'))
    def ipo_rule_2992(self):
        self.declare(Fact(recommendation='Warrant menunjukkan kondisi baik. Laba bersih menunjukkan kerugian. DER menunjukkan tingkat hutang yang rendah.'))


    @Rule(Fact(warrant_valued='good'), Fact(net_income_valued='loss'), Fact(roa_valued='high'))
    def ipo_rule_2993(self):
        self.declare(Fact(recommendation='Warrant menunjukkan kondisi baik. Laba bersih menunjukkan kerugian. ROA menunjukkan efisiensi tinggi.'))


    @Rule(Fact(warrant_valued='good'), Fact(net_income_valued='loss'), Fact(roe_valued='low'))
    def ipo_rule_2994(self):
        self.declare(Fact(recommendation='Warrant menunjukkan kondisi baik. Laba bersih menunjukkan kerugian. ROE menunjukkan keuntungan yang rendah.'))


    @Rule(Fact(warrant_valued='good'), Fact(per_valued='high'), Fact(der_valued='low'))
    def ipo_rule_2995(self):
        self.declare(Fact(recommendation='Warrant menunjukkan kondisi baik. PER berada di tingkat yang tinggi. DER menunjukkan tingkat hutang yang rendah.'))


    @Rule(Fact(warrant_valued='good'), Fact(per_valued='high'), Fact(roa_valued='high'))
    def ipo_rule_2996(self):
        self.declare(Fact(recommendation='Warrant menunjukkan kondisi baik. PER berada di tingkat yang tinggi. ROA menunjukkan efisiensi tinggi.'))


    @Rule(Fact(warrant_valued='good'), Fact(per_valued='high'), Fact(roe_valued='low'))
    def ipo_rule_2997(self):
        self.declare(Fact(recommendation='Warrant menunjukkan kondisi baik. PER berada di tingkat yang tinggi. ROE menunjukkan keuntungan yang rendah.'))


    @Rule(Fact(warrant_valued='good'), Fact(der_valued='low'), Fact(roa_valued='high'))
    def ipo_rule_2998(self):
        self.declare(Fact(recommendation='Warrant menunjukkan kondisi baik. DER menunjukkan tingkat hutang yang rendah. ROA menunjukkan efisiensi tinggi.'))


    @Rule(Fact(warrant_valued='good'), Fact(der_valued='low'), Fact(roe_valued='low'))
    def ipo_rule_2999(self):
        self.declare(Fact(recommendation='Warrant menunjukkan kondisi baik. DER menunjukkan tingkat hutang yang rendah. ROE menunjukkan keuntungan yang rendah.'))


    @Rule(Fact(warrant_valued='good'), Fact(roa_valued='high'), Fact(roe_valued='low'))
    def ipo_rule_3000(self):
        self.declare(Fact(recommendation='Warrant menunjukkan kondisi baik. ROA menunjukkan efisiensi tinggi. ROE menunjukkan keuntungan yang rendah.'))


    @Rule(Fact(net_income_valued='loss'), Fact(per_valued='high'), Fact(der_valued='low'))
    def ipo_rule_3001(self):
        self.declare(Fact(recommendation='Laba bersih menunjukkan kerugian. PER berada di tingkat yang tinggi. DER menunjukkan tingkat hutang yang rendah.'))


    @Rule(Fact(net_income_valued='loss'), Fact(per_valued='high'), Fact(roa_valued='high'))
    def ipo_rule_3002(self):
        self.declare(Fact(recommendation='Laba bersih menunjukkan kerugian. PER berada di tingkat yang tinggi. ROA menunjukkan efisiensi tinggi.'))


    @Rule(Fact(net_income_valued='loss'), Fact(per_valued='high'), Fact(roe_valued='low'))
    def ipo_rule_3003(self):
        self.declare(Fact(recommendation='Laba bersih menunjukkan kerugian. PER berada di tingkat yang tinggi. ROE menunjukkan keuntungan yang rendah.'))


    @Rule(Fact(net_income_valued='loss'), Fact(der_valued='low'), Fact(roa_valued='high'))
    def ipo_rule_3004(self):
        self.declare(Fact(recommendation='Laba bersih menunjukkan kerugian. DER menunjukkan tingkat hutang yang rendah. ROA menunjukkan efisiensi tinggi.'))


    @Rule(Fact(net_income_valued='loss'), Fact(der_valued='low'), Fact(roe_valued='low'))
    def ipo_rule_3005(self):
        self.declare(Fact(recommendation='Laba bersih menunjukkan kerugian. DER menunjukkan tingkat hutang yang rendah. ROE menunjukkan keuntungan yang rendah.'))


    @Rule(Fact(net_income_valued='loss'), Fact(roa_valued='high'), Fact(roe_valued='low'))
    def ipo_rule_3006(self):
        self.declare(Fact(recommendation='Laba bersih menunjukkan kerugian. ROA menunjukkan efisiensi tinggi. ROE menunjukkan keuntungan yang rendah.'))


    @Rule(Fact(per_valued='high'), Fact(der_valued='low'), Fact(roa_valued='high'))
    def ipo_rule_3007(self):
        self.declare(Fact(recommendation='PER berada di tingkat yang tinggi. DER menunjukkan tingkat hutang yang rendah. ROA menunjukkan efisiensi tinggi.'))


    @Rule(Fact(per_valued='high'), Fact(der_valued='low'), Fact(roe_valued='low'))
    def ipo_rule_3008(self):
        self.declare(Fact(recommendation='PER berada di tingkat yang tinggi. DER menunjukkan tingkat hutang yang rendah. ROE menunjukkan keuntungan yang rendah.'))


    @Rule(Fact(per_valued='high'), Fact(roa_valued='high'), Fact(roe_valued='low'))
    def ipo_rule_3009(self):
        self.declare(Fact(recommendation='PER berada di tingkat yang tinggi. ROA menunjukkan efisiensi tinggi. ROE menunjukkan keuntungan yang rendah.'))


    @Rule(Fact(der_valued='low'), Fact(roa_valued='high'), Fact(roe_valued='low'))
    def ipo_rule_3010(self):
        self.declare(Fact(recommendation='DER menunjukkan tingkat hutang yang rendah. ROA menunjukkan efisiensi tinggi. ROE menunjukkan keuntungan yang rendah.'))


    @Rule(Fact(underwriter_valued='bad'), Fact(warrant_valued='good'), Fact(net_income_valued='loss'))
    def ipo_rule_3011(self):
        self.declare(Fact(recommendation='Underwriter berkualitas buruk. Warrant menunjukkan kondisi baik. Laba bersih menunjukkan kerugian.'))


    @Rule(Fact(underwriter_valued='bad'), Fact(warrant_valued='good'), Fact(per_valued='high'))
    def ipo_rule_3012(self):
        self.declare(Fact(recommendation='Underwriter berkualitas buruk. Warrant menunjukkan kondisi baik. PER berada di tingkat yang tinggi.'))


    @Rule(Fact(underwriter_valued='bad'), Fact(warrant_valued='good'), Fact(der_valued='low'))
    def ipo_rule_3013(self):
        self.declare(Fact(recommendation='Underwriter berkualitas buruk. Warrant menunjukkan kondisi baik. DER menunjukkan tingkat hutang yang rendah.'))


    @Rule(Fact(underwriter_valued='bad'), Fact(warrant_valued='good'), Fact(roa_valued='low'))
    def ipo_rule_3014(self):
        self.declare(Fact(recommendation='Underwriter berkualitas buruk. Warrant menunjukkan kondisi baik. ROA menunjukkan efisiensi rendah.'))


    @Rule(Fact(underwriter_valued='bad'), Fact(warrant_valued='good'), Fact(roe_valued='high'))
    def ipo_rule_3015(self):
        self.declare(Fact(recommendation='Underwriter berkualitas buruk. Warrant menunjukkan kondisi baik. ROE menunjukkan keuntungan yang tinggi.'))


    @Rule(Fact(underwriter_valued='bad'), Fact(net_income_valued='loss'), Fact(per_valued='high'))
    def ipo_rule_3016(self):
        self.declare(Fact(recommendation='Underwriter berkualitas buruk. Laba bersih menunjukkan kerugian. PER berada di tingkat yang tinggi.'))


    @Rule(Fact(underwriter_valued='bad'), Fact(net_income_valued='loss'), Fact(der_valued='low'))
    def ipo_rule_3017(self):
        self.declare(Fact(recommendation='Underwriter berkualitas buruk. Laba bersih menunjukkan kerugian. DER menunjukkan tingkat hutang yang rendah.'))


    @Rule(Fact(underwriter_valued='bad'), Fact(net_income_valued='loss'), Fact(roa_valued='low'))
    def ipo_rule_3018(self):
        self.declare(Fact(recommendation='Underwriter berkualitas buruk. Laba bersih menunjukkan kerugian. ROA menunjukkan efisiensi rendah.'))


    @Rule(Fact(underwriter_valued='bad'), Fact(net_income_valued='loss'), Fact(roe_valued='high'))
    def ipo_rule_3019(self):
        self.declare(Fact(recommendation='Underwriter berkualitas buruk. Laba bersih menunjukkan kerugian. ROE menunjukkan keuntungan yang tinggi.'))


    @Rule(Fact(underwriter_valued='bad'), Fact(per_valued='high'), Fact(der_valued='low'))
    def ipo_rule_3020(self):
        self.declare(Fact(recommendation='Underwriter berkualitas buruk. PER berada di tingkat yang tinggi. DER menunjukkan tingkat hutang yang rendah.'))


    @Rule(Fact(underwriter_valued='bad'), Fact(per_valued='high'), Fact(roa_valued='low'))
    def ipo_rule_3021(self):
        self.declare(Fact(recommendation='Underwriter berkualitas buruk. PER berada di tingkat yang tinggi. ROA menunjukkan efisiensi rendah.'))


    @Rule(Fact(underwriter_valued='bad'), Fact(per_valued='high'), Fact(roe_valued='high'))
    def ipo_rule_3022(self):
        self.declare(Fact(recommendation='Underwriter berkualitas buruk. PER berada di tingkat yang tinggi. ROE menunjukkan keuntungan yang tinggi.'))


    @Rule(Fact(underwriter_valued='bad'), Fact(der_valued='low'), Fact(roa_valued='low'))
    def ipo_rule_3023(self):
        self.declare(Fact(recommendation='Underwriter berkualitas buruk. DER menunjukkan tingkat hutang yang rendah. ROA menunjukkan efisiensi rendah.'))


    @Rule(Fact(underwriter_valued='bad'), Fact(der_valued='low'), Fact(roe_valued='high'))
    def ipo_rule_3024(self):
        self.declare(Fact(recommendation='Underwriter berkualitas buruk. DER menunjukkan tingkat hutang yang rendah. ROE menunjukkan keuntungan yang tinggi.'))


    @Rule(Fact(underwriter_valued='bad'), Fact(roa_valued='low'), Fact(roe_valued='high'))
    def ipo_rule_3025(self):
        self.declare(Fact(recommendation='Underwriter berkualitas buruk. ROA menunjukkan efisiensi rendah. ROE menunjukkan keuntungan yang tinggi.'))


    @Rule(Fact(warrant_valued='good'), Fact(net_income_valued='loss'), Fact(per_valued='high'))
    def ipo_rule_3026(self):
        self.declare(Fact(recommendation='Warrant menunjukkan kondisi baik. Laba bersih menunjukkan kerugian. PER berada di tingkat yang tinggi.'))


    @Rule(Fact(warrant_valued='good'), Fact(net_income_valued='loss'), Fact(der_valued='low'))
    def ipo_rule_3027(self):
        self.declare(Fact(recommendation='Warrant menunjukkan kondisi baik. Laba bersih menunjukkan kerugian. DER menunjukkan tingkat hutang yang rendah.'))


    @Rule(Fact(warrant_valued='good'), Fact(net_income_valued='loss'), Fact(roa_valued='low'))
    def ipo_rule_3028(self):
        self.declare(Fact(recommendation='Warrant menunjukkan kondisi baik. Laba bersih menunjukkan kerugian. ROA menunjukkan efisiensi rendah.'))


    @Rule(Fact(warrant_valued='good'), Fact(net_income_valued='loss'), Fact(roe_valued='high'))
    def ipo_rule_3029(self):
        self.declare(Fact(recommendation='Warrant menunjukkan kondisi baik. Laba bersih menunjukkan kerugian. ROE menunjukkan keuntungan yang tinggi.'))


    @Rule(Fact(warrant_valued='good'), Fact(per_valued='high'), Fact(der_valued='low'))
    def ipo_rule_3030(self):
        self.declare(Fact(recommendation='Warrant menunjukkan kondisi baik. PER berada di tingkat yang tinggi. DER menunjukkan tingkat hutang yang rendah.'))


    @Rule(Fact(warrant_valued='good'), Fact(per_valued='high'), Fact(roa_valued='low'))
    def ipo_rule_3031(self):
        self.declare(Fact(recommendation='Warrant menunjukkan kondisi baik. PER berada di tingkat yang tinggi. ROA menunjukkan efisiensi rendah.'))


    @Rule(Fact(warrant_valued='good'), Fact(per_valued='high'), Fact(roe_valued='high'))
    def ipo_rule_3032(self):
        self.declare(Fact(recommendation='Warrant menunjukkan kondisi baik. PER berada di tingkat yang tinggi. ROE menunjukkan keuntungan yang tinggi.'))


    @Rule(Fact(warrant_valued='good'), Fact(der_valued='low'), Fact(roa_valued='low'))
    def ipo_rule_3033(self):
        self.declare(Fact(recommendation='Warrant menunjukkan kondisi baik. DER menunjukkan tingkat hutang yang rendah. ROA menunjukkan efisiensi rendah.'))


    @Rule(Fact(warrant_valued='good'), Fact(der_valued='low'), Fact(roe_valued='high'))
    def ipo_rule_3034(self):
        self.declare(Fact(recommendation='Warrant menunjukkan kondisi baik. DER menunjukkan tingkat hutang yang rendah. ROE menunjukkan keuntungan yang tinggi.'))


    @Rule(Fact(warrant_valued='good'), Fact(roa_valued='low'), Fact(roe_valued='high'))
    def ipo_rule_3035(self):
        self.declare(Fact(recommendation='Warrant menunjukkan kondisi baik. ROA menunjukkan efisiensi rendah. ROE menunjukkan keuntungan yang tinggi.'))


    @Rule(Fact(net_income_valued='loss'), Fact(per_valued='high'), Fact(der_valued='low'))
    def ipo_rule_3036(self):
        self.declare(Fact(recommendation='Laba bersih menunjukkan kerugian. PER berada di tingkat yang tinggi. DER menunjukkan tingkat hutang yang rendah.'))


    @Rule(Fact(net_income_valued='loss'), Fact(per_valued='high'), Fact(roa_valued='low'))
    def ipo_rule_3037(self):
        self.declare(Fact(recommendation='Laba bersih menunjukkan kerugian. PER berada di tingkat yang tinggi. ROA menunjukkan efisiensi rendah.'))


    @Rule(Fact(net_income_valued='loss'), Fact(per_valued='high'), Fact(roe_valued='high'))
    def ipo_rule_3038(self):
        self.declare(Fact(recommendation='Laba bersih menunjukkan kerugian. PER berada di tingkat yang tinggi. ROE menunjukkan keuntungan yang tinggi.'))


    @Rule(Fact(net_income_valued='loss'), Fact(der_valued='low'), Fact(roa_valued='low'))
    def ipo_rule_3039(self):
        self.declare(Fact(recommendation='Laba bersih menunjukkan kerugian. DER menunjukkan tingkat hutang yang rendah. ROA menunjukkan efisiensi rendah.'))


    @Rule(Fact(net_income_valued='loss'), Fact(der_valued='low'), Fact(roe_valued='high'))
    def ipo_rule_3040(self):
        self.declare(Fact(recommendation='Laba bersih menunjukkan kerugian. DER menunjukkan tingkat hutang yang rendah. ROE menunjukkan keuntungan yang tinggi.'))


    @Rule(Fact(net_income_valued='loss'), Fact(roa_valued='low'), Fact(roe_valued='high'))
    def ipo_rule_3041(self):
        self.declare(Fact(recommendation='Laba bersih menunjukkan kerugian. ROA menunjukkan efisiensi rendah. ROE menunjukkan keuntungan yang tinggi.'))


    @Rule(Fact(per_valued='high'), Fact(der_valued='low'), Fact(roa_valued='low'))
    def ipo_rule_3042(self):
        self.declare(Fact(recommendation='PER berada di tingkat yang tinggi. DER menunjukkan tingkat hutang yang rendah. ROA menunjukkan efisiensi rendah.'))


    @Rule(Fact(per_valued='high'), Fact(der_valued='low'), Fact(roe_valued='high'))
    def ipo_rule_3043(self):
        self.declare(Fact(recommendation='PER berada di tingkat yang tinggi. DER menunjukkan tingkat hutang yang rendah. ROE menunjukkan keuntungan yang tinggi.'))


    @Rule(Fact(per_valued='high'), Fact(roa_valued='low'), Fact(roe_valued='high'))
    def ipo_rule_3044(self):
        self.declare(Fact(recommendation='PER berada di tingkat yang tinggi. ROA menunjukkan efisiensi rendah. ROE menunjukkan keuntungan yang tinggi.'))


    @Rule(Fact(der_valued='low'), Fact(roa_valued='low'), Fact(roe_valued='high'))
    def ipo_rule_3045(self):
        self.declare(Fact(recommendation='DER menunjukkan tingkat hutang yang rendah. ROA menunjukkan efisiensi rendah. ROE menunjukkan keuntungan yang tinggi.'))


    @Rule(Fact(underwriter_valued='bad'), Fact(warrant_valued='good'), Fact(net_income_valued='loss'))
    def ipo_rule_3046(self):
        self.declare(Fact(recommendation='Underwriter berkualitas buruk. Warrant menunjukkan kondisi baik. Laba bersih menunjukkan kerugian.'))


    @Rule(Fact(underwriter_valued='bad'), Fact(warrant_valued='good'), Fact(per_valued='high'))
    def ipo_rule_3047(self):
        self.declare(Fact(recommendation='Underwriter berkualitas buruk. Warrant menunjukkan kondisi baik. PER berada di tingkat yang tinggi.'))


    @Rule(Fact(underwriter_valued='bad'), Fact(warrant_valued='good'), Fact(der_valued='low'))
    def ipo_rule_3048(self):
        self.declare(Fact(recommendation='Underwriter berkualitas buruk. Warrant menunjukkan kondisi baik. DER menunjukkan tingkat hutang yang rendah.'))


    @Rule(Fact(underwriter_valued='bad'), Fact(warrant_valued='good'), Fact(roa_valued='low'))
    def ipo_rule_3049(self):
        self.declare(Fact(recommendation='Underwriter berkualitas buruk. Warrant menunjukkan kondisi baik. ROA menunjukkan efisiensi rendah.'))


    @Rule(Fact(underwriter_valued='bad'), Fact(warrant_valued='good'), Fact(roe_valued='low'))
    def ipo_rule_3050(self):
        self.declare(Fact(recommendation='Underwriter berkualitas buruk. Warrant menunjukkan kondisi baik. ROE menunjukkan keuntungan yang rendah.'))


    @Rule(Fact(underwriter_valued='bad'), Fact(net_income_valued='loss'), Fact(per_valued='high'))
    def ipo_rule_3051(self):
        self.declare(Fact(recommendation='Underwriter berkualitas buruk. Laba bersih menunjukkan kerugian. PER berada di tingkat yang tinggi.'))


    @Rule(Fact(underwriter_valued='bad'), Fact(net_income_valued='loss'), Fact(der_valued='low'))
    def ipo_rule_3052(self):
        self.declare(Fact(recommendation='Underwriter berkualitas buruk. Laba bersih menunjukkan kerugian. DER menunjukkan tingkat hutang yang rendah.'))


    @Rule(Fact(underwriter_valued='bad'), Fact(net_income_valued='loss'), Fact(roa_valued='low'))
    def ipo_rule_3053(self):
        self.declare(Fact(recommendation='Underwriter berkualitas buruk. Laba bersih menunjukkan kerugian. ROA menunjukkan efisiensi rendah.'))


    @Rule(Fact(underwriter_valued='bad'), Fact(net_income_valued='loss'), Fact(roe_valued='low'))
    def ipo_rule_3054(self):
        self.declare(Fact(recommendation='Underwriter berkualitas buruk. Laba bersih menunjukkan kerugian. ROE menunjukkan keuntungan yang rendah.'))


    @Rule(Fact(underwriter_valued='bad'), Fact(per_valued='high'), Fact(der_valued='low'))
    def ipo_rule_3055(self):
        self.declare(Fact(recommendation='Underwriter berkualitas buruk. PER berada di tingkat yang tinggi. DER menunjukkan tingkat hutang yang rendah.'))


    @Rule(Fact(underwriter_valued='bad'), Fact(per_valued='high'), Fact(roa_valued='low'))
    def ipo_rule_3056(self):
        self.declare(Fact(recommendation='Underwriter berkualitas buruk. PER berada di tingkat yang tinggi. ROA menunjukkan efisiensi rendah.'))


    @Rule(Fact(underwriter_valued='bad'), Fact(per_valued='high'), Fact(roe_valued='low'))
    def ipo_rule_3057(self):
        self.declare(Fact(recommendation='Underwriter berkualitas buruk. PER berada di tingkat yang tinggi. ROE menunjukkan keuntungan yang rendah.'))


    @Rule(Fact(underwriter_valued='bad'), Fact(der_valued='low'), Fact(roa_valued='low'))
    def ipo_rule_3058(self):
        self.declare(Fact(recommendation='Underwriter berkualitas buruk. DER menunjukkan tingkat hutang yang rendah. ROA menunjukkan efisiensi rendah.'))


    @Rule(Fact(underwriter_valued='bad'), Fact(der_valued='low'), Fact(roe_valued='low'))
    def ipo_rule_3059(self):
        self.declare(Fact(recommendation='Underwriter berkualitas buruk. DER menunjukkan tingkat hutang yang rendah. ROE menunjukkan keuntungan yang rendah.'))


    @Rule(Fact(underwriter_valued='bad'), Fact(roa_valued='low'), Fact(roe_valued='low'))
    def ipo_rule_3060(self):
        self.declare(Fact(recommendation='Underwriter berkualitas buruk. ROA menunjukkan efisiensi rendah. ROE menunjukkan keuntungan yang rendah.'))


    @Rule(Fact(warrant_valued='good'), Fact(net_income_valued='loss'), Fact(per_valued='high'))
    def ipo_rule_3061(self):
        self.declare(Fact(recommendation='Warrant menunjukkan kondisi baik. Laba bersih menunjukkan kerugian. PER berada di tingkat yang tinggi.'))


    @Rule(Fact(warrant_valued='good'), Fact(net_income_valued='loss'), Fact(der_valued='low'))
    def ipo_rule_3062(self):
        self.declare(Fact(recommendation='Warrant menunjukkan kondisi baik. Laba bersih menunjukkan kerugian. DER menunjukkan tingkat hutang yang rendah.'))


    @Rule(Fact(warrant_valued='good'), Fact(net_income_valued='loss'), Fact(roa_valued='low'))
    def ipo_rule_3063(self):
        self.declare(Fact(recommendation='Warrant menunjukkan kondisi baik. Laba bersih menunjukkan kerugian. ROA menunjukkan efisiensi rendah.'))


    @Rule(Fact(warrant_valued='good'), Fact(net_income_valued='loss'), Fact(roe_valued='low'))
    def ipo_rule_3064(self):
        self.declare(Fact(recommendation='Warrant menunjukkan kondisi baik. Laba bersih menunjukkan kerugian. ROE menunjukkan keuntungan yang rendah.'))


    @Rule(Fact(warrant_valued='good'), Fact(per_valued='high'), Fact(der_valued='low'))
    def ipo_rule_3065(self):
        self.declare(Fact(recommendation='Warrant menunjukkan kondisi baik. PER berada di tingkat yang tinggi. DER menunjukkan tingkat hutang yang rendah.'))


    @Rule(Fact(warrant_valued='good'), Fact(per_valued='high'), Fact(roa_valued='low'))
    def ipo_rule_3066(self):
        self.declare(Fact(recommendation='Warrant menunjukkan kondisi baik. PER berada di tingkat yang tinggi. ROA menunjukkan efisiensi rendah.'))


    @Rule(Fact(warrant_valued='good'), Fact(per_valued='high'), Fact(roe_valued='low'))
    def ipo_rule_3067(self):
        self.declare(Fact(recommendation='Warrant menunjukkan kondisi baik. PER berada di tingkat yang tinggi. ROE menunjukkan keuntungan yang rendah.'))


    @Rule(Fact(warrant_valued='good'), Fact(der_valued='low'), Fact(roa_valued='low'))
    def ipo_rule_3068(self):
        self.declare(Fact(recommendation='Warrant menunjukkan kondisi baik. DER menunjukkan tingkat hutang yang rendah. ROA menunjukkan efisiensi rendah.'))


    @Rule(Fact(warrant_valued='good'), Fact(der_valued='low'), Fact(roe_valued='low'))
    def ipo_rule_3069(self):
        self.declare(Fact(recommendation='Warrant menunjukkan kondisi baik. DER menunjukkan tingkat hutang yang rendah. ROE menunjukkan keuntungan yang rendah.'))


    @Rule(Fact(warrant_valued='good'), Fact(roa_valued='low'), Fact(roe_valued='low'))
    def ipo_rule_3070(self):
        self.declare(Fact(recommendation='Warrant menunjukkan kondisi baik. ROA menunjukkan efisiensi rendah. ROE menunjukkan keuntungan yang rendah.'))


    @Rule(Fact(net_income_valued='loss'), Fact(per_valued='high'), Fact(der_valued='low'))
    def ipo_rule_3071(self):
        self.declare(Fact(recommendation='Laba bersih menunjukkan kerugian. PER berada di tingkat yang tinggi. DER menunjukkan tingkat hutang yang rendah.'))


    @Rule(Fact(net_income_valued='loss'), Fact(per_valued='high'), Fact(roa_valued='low'))
    def ipo_rule_3072(self):
        self.declare(Fact(recommendation='Laba bersih menunjukkan kerugian. PER berada di tingkat yang tinggi. ROA menunjukkan efisiensi rendah.'))


    @Rule(Fact(net_income_valued='loss'), Fact(per_valued='high'), Fact(roe_valued='low'))
    def ipo_rule_3073(self):
        self.declare(Fact(recommendation='Laba bersih menunjukkan kerugian. PER berada di tingkat yang tinggi. ROE menunjukkan keuntungan yang rendah.'))


    @Rule(Fact(net_income_valued='loss'), Fact(der_valued='low'), Fact(roa_valued='low'))
    def ipo_rule_3074(self):
        self.declare(Fact(recommendation='Laba bersih menunjukkan kerugian. DER menunjukkan tingkat hutang yang rendah. ROA menunjukkan efisiensi rendah.'))


    @Rule(Fact(net_income_valued='loss'), Fact(der_valued='low'), Fact(roe_valued='low'))
    def ipo_rule_3075(self):
        self.declare(Fact(recommendation='Laba bersih menunjukkan kerugian. DER menunjukkan tingkat hutang yang rendah. ROE menunjukkan keuntungan yang rendah.'))


    @Rule(Fact(net_income_valued='loss'), Fact(roa_valued='low'), Fact(roe_valued='low'))
    def ipo_rule_3076(self):
        self.declare(Fact(recommendation='Laba bersih menunjukkan kerugian. ROA menunjukkan efisiensi rendah. ROE menunjukkan keuntungan yang rendah.'))


    @Rule(Fact(per_valued='high'), Fact(der_valued='low'), Fact(roa_valued='low'))
    def ipo_rule_3077(self):
        self.declare(Fact(recommendation='PER berada di tingkat yang tinggi. DER menunjukkan tingkat hutang yang rendah. ROA menunjukkan efisiensi rendah.'))


    @Rule(Fact(per_valued='high'), Fact(der_valued='low'), Fact(roe_valued='low'))
    def ipo_rule_3078(self):
        self.declare(Fact(recommendation='PER berada di tingkat yang tinggi. DER menunjukkan tingkat hutang yang rendah. ROE menunjukkan keuntungan yang rendah.'))


    @Rule(Fact(per_valued='high'), Fact(roa_valued='low'), Fact(roe_valued='low'))
    def ipo_rule_3079(self):
        self.declare(Fact(recommendation='PER berada di tingkat yang tinggi. ROA menunjukkan efisiensi rendah. ROE menunjukkan keuntungan yang rendah.'))


    @Rule(Fact(der_valued='low'), Fact(roa_valued='low'), Fact(roe_valued='low'))
    def ipo_rule_3080(self):
        self.declare(Fact(recommendation='DER menunjukkan tingkat hutang yang rendah. ROA menunjukkan efisiensi rendah. ROE menunjukkan keuntungan yang rendah.'))


    @Rule(Fact(underwriter_valued='bad'), Fact(warrant_valued='good'), Fact(net_income_valued='loss'))
    def ipo_rule_3081(self):
        self.declare(Fact(recommendation='Underwriter berkualitas buruk. Warrant menunjukkan kondisi baik. Laba bersih menunjukkan kerugian.'))


    @Rule(Fact(underwriter_valued='bad'), Fact(warrant_valued='good'), Fact(per_valued='low'))
    def ipo_rule_3082(self):
        self.declare(Fact(recommendation='Underwriter berkualitas buruk. Warrant menunjukkan kondisi baik. PER berada di tingkat yang rendah.'))


    @Rule(Fact(underwriter_valued='bad'), Fact(warrant_valued='good'), Fact(der_valued='high'))
    def ipo_rule_3083(self):
        self.declare(Fact(recommendation='Underwriter berkualitas buruk. Warrant menunjukkan kondisi baik. DER menunjukkan tingkat hutang yang tinggi.'))


    @Rule(Fact(underwriter_valued='bad'), Fact(warrant_valued='good'), Fact(roa_valued='high'))
    def ipo_rule_3084(self):
        self.declare(Fact(recommendation='Underwriter berkualitas buruk. Warrant menunjukkan kondisi baik. ROA menunjukkan efisiensi tinggi.'))


    @Rule(Fact(underwriter_valued='bad'), Fact(warrant_valued='good'), Fact(roe_valued='high'))
    def ipo_rule_3085(self):
        self.declare(Fact(recommendation='Underwriter berkualitas buruk. Warrant menunjukkan kondisi baik. ROE menunjukkan keuntungan yang tinggi.'))


    @Rule(Fact(underwriter_valued='bad'), Fact(net_income_valued='loss'), Fact(per_valued='low'))
    def ipo_rule_3086(self):
        self.declare(Fact(recommendation='Underwriter berkualitas buruk. Laba bersih menunjukkan kerugian. PER berada di tingkat yang rendah.'))


    @Rule(Fact(underwriter_valued='bad'), Fact(net_income_valued='loss'), Fact(der_valued='high'))
    def ipo_rule_3087(self):
        self.declare(Fact(recommendation='Underwriter berkualitas buruk. Laba bersih menunjukkan kerugian. DER menunjukkan tingkat hutang yang tinggi.'))


    @Rule(Fact(underwriter_valued='bad'), Fact(net_income_valued='loss'), Fact(roa_valued='high'))
    def ipo_rule_3088(self):
        self.declare(Fact(recommendation='Underwriter berkualitas buruk. Laba bersih menunjukkan kerugian. ROA menunjukkan efisiensi tinggi.'))


    @Rule(Fact(underwriter_valued='bad'), Fact(net_income_valued='loss'), Fact(roe_valued='high'))
    def ipo_rule_3089(self):
        self.declare(Fact(recommendation='Underwriter berkualitas buruk. Laba bersih menunjukkan kerugian. ROE menunjukkan keuntungan yang tinggi.'))


    @Rule(Fact(underwriter_valued='bad'), Fact(per_valued='low'), Fact(der_valued='high'))
    def ipo_rule_3090(self):
        self.declare(Fact(recommendation='Underwriter berkualitas buruk. PER berada di tingkat yang rendah. DER menunjukkan tingkat hutang yang tinggi.'))


    @Rule(Fact(underwriter_valued='bad'), Fact(per_valued='low'), Fact(roa_valued='high'))
    def ipo_rule_3091(self):
        self.declare(Fact(recommendation='Underwriter berkualitas buruk. PER berada di tingkat yang rendah. ROA menunjukkan efisiensi tinggi.'))


    @Rule(Fact(underwriter_valued='bad'), Fact(per_valued='low'), Fact(roe_valued='high'))
    def ipo_rule_3092(self):
        self.declare(Fact(recommendation='Underwriter berkualitas buruk. PER berada di tingkat yang rendah. ROE menunjukkan keuntungan yang tinggi.'))


    @Rule(Fact(underwriter_valued='bad'), Fact(der_valued='high'), Fact(roa_valued='high'))
    def ipo_rule_3093(self):
        self.declare(Fact(recommendation='Underwriter berkualitas buruk. DER menunjukkan tingkat hutang yang tinggi. ROA menunjukkan efisiensi tinggi.'))


    @Rule(Fact(underwriter_valued='bad'), Fact(der_valued='high'), Fact(roe_valued='high'))
    def ipo_rule_3094(self):
        self.declare(Fact(recommendation='Underwriter berkualitas buruk. DER menunjukkan tingkat hutang yang tinggi. ROE menunjukkan keuntungan yang tinggi.'))


    @Rule(Fact(underwriter_valued='bad'), Fact(roa_valued='high'), Fact(roe_valued='high'))
    def ipo_rule_3095(self):
        self.declare(Fact(recommendation='Underwriter berkualitas buruk. ROA menunjukkan efisiensi tinggi. ROE menunjukkan keuntungan yang tinggi.'))


    @Rule(Fact(warrant_valued='good'), Fact(net_income_valued='loss'), Fact(per_valued='low'))
    def ipo_rule_3096(self):
        self.declare(Fact(recommendation='Warrant menunjukkan kondisi baik. Laba bersih menunjukkan kerugian. PER berada di tingkat yang rendah.'))


    @Rule(Fact(warrant_valued='good'), Fact(net_income_valued='loss'), Fact(der_valued='high'))
    def ipo_rule_3097(self):
        self.declare(Fact(recommendation='Warrant menunjukkan kondisi baik. Laba bersih menunjukkan kerugian. DER menunjukkan tingkat hutang yang tinggi.'))


    @Rule(Fact(warrant_valued='good'), Fact(net_income_valued='loss'), Fact(roa_valued='high'))
    def ipo_rule_3098(self):
        self.declare(Fact(recommendation='Warrant menunjukkan kondisi baik. Laba bersih menunjukkan kerugian. ROA menunjukkan efisiensi tinggi.'))


    @Rule(Fact(warrant_valued='good'), Fact(net_income_valued='loss'), Fact(roe_valued='high'))
    def ipo_rule_3099(self):
        self.declare(Fact(recommendation='Warrant menunjukkan kondisi baik. Laba bersih menunjukkan kerugian. ROE menunjukkan keuntungan yang tinggi.'))


    @Rule(Fact(warrant_valued='good'), Fact(per_valued='low'), Fact(der_valued='high'))
    def ipo_rule_3100(self):
        self.declare(Fact(recommendation='Warrant menunjukkan kondisi baik. PER berada di tingkat yang rendah. DER menunjukkan tingkat hutang yang tinggi.'))


    @Rule(Fact(warrant_valued='good'), Fact(per_valued='low'), Fact(roa_valued='high'))
    def ipo_rule_3101(self):
        self.declare(Fact(recommendation='Warrant menunjukkan kondisi baik. PER berada di tingkat yang rendah. ROA menunjukkan efisiensi tinggi.'))


    @Rule(Fact(warrant_valued='good'), Fact(per_valued='low'), Fact(roe_valued='high'))
    def ipo_rule_3102(self):
        self.declare(Fact(recommendation='Warrant menunjukkan kondisi baik. PER berada di tingkat yang rendah. ROE menunjukkan keuntungan yang tinggi.'))


    @Rule(Fact(warrant_valued='good'), Fact(der_valued='high'), Fact(roa_valued='high'))
    def ipo_rule_3103(self):
        self.declare(Fact(recommendation='Warrant menunjukkan kondisi baik. DER menunjukkan tingkat hutang yang tinggi. ROA menunjukkan efisiensi tinggi.'))


    @Rule(Fact(warrant_valued='good'), Fact(der_valued='high'), Fact(roe_valued='high'))
    def ipo_rule_3104(self):
        self.declare(Fact(recommendation='Warrant menunjukkan kondisi baik. DER menunjukkan tingkat hutang yang tinggi. ROE menunjukkan keuntungan yang tinggi.'))


    @Rule(Fact(warrant_valued='good'), Fact(roa_valued='high'), Fact(roe_valued='high'))
    def ipo_rule_3105(self):
        self.declare(Fact(recommendation='Warrant menunjukkan kondisi baik. ROA menunjukkan efisiensi tinggi. ROE menunjukkan keuntungan yang tinggi.'))


    @Rule(Fact(net_income_valued='loss'), Fact(per_valued='low'), Fact(der_valued='high'))
    def ipo_rule_3106(self):
        self.declare(Fact(recommendation='Laba bersih menunjukkan kerugian. PER berada di tingkat yang rendah. DER menunjukkan tingkat hutang yang tinggi.'))


    @Rule(Fact(net_income_valued='loss'), Fact(per_valued='low'), Fact(roa_valued='high'))
    def ipo_rule_3107(self):
        self.declare(Fact(recommendation='Laba bersih menunjukkan kerugian. PER berada di tingkat yang rendah. ROA menunjukkan efisiensi tinggi.'))


    @Rule(Fact(net_income_valued='loss'), Fact(per_valued='low'), Fact(roe_valued='high'))
    def ipo_rule_3108(self):
        self.declare(Fact(recommendation='Laba bersih menunjukkan kerugian. PER berada di tingkat yang rendah. ROE menunjukkan keuntungan yang tinggi.'))


    @Rule(Fact(net_income_valued='loss'), Fact(der_valued='high'), Fact(roa_valued='high'))
    def ipo_rule_3109(self):
        self.declare(Fact(recommendation='Laba bersih menunjukkan kerugian. DER menunjukkan tingkat hutang yang tinggi. ROA menunjukkan efisiensi tinggi.'))


    @Rule(Fact(net_income_valued='loss'), Fact(der_valued='high'), Fact(roe_valued='high'))
    def ipo_rule_3110(self):
        self.declare(Fact(recommendation='Laba bersih menunjukkan kerugian. DER menunjukkan tingkat hutang yang tinggi. ROE menunjukkan keuntungan yang tinggi.'))


    @Rule(Fact(net_income_valued='loss'), Fact(roa_valued='high'), Fact(roe_valued='high'))
    def ipo_rule_3111(self):
        self.declare(Fact(recommendation='Laba bersih menunjukkan kerugian. ROA menunjukkan efisiensi tinggi. ROE menunjukkan keuntungan yang tinggi.'))


    @Rule(Fact(per_valued='low'), Fact(der_valued='high'), Fact(roa_valued='high'))
    def ipo_rule_3112(self):
        self.declare(Fact(recommendation='PER berada di tingkat yang rendah. DER menunjukkan tingkat hutang yang tinggi. ROA menunjukkan efisiensi tinggi.'))


    @Rule(Fact(per_valued='low'), Fact(der_valued='high'), Fact(roe_valued='high'))
    def ipo_rule_3113(self):
        self.declare(Fact(recommendation='PER berada di tingkat yang rendah. DER menunjukkan tingkat hutang yang tinggi. ROE menunjukkan keuntungan yang tinggi.'))


    @Rule(Fact(per_valued='low'), Fact(roa_valued='high'), Fact(roe_valued='high'))
    def ipo_rule_3114(self):
        self.declare(Fact(recommendation='PER berada di tingkat yang rendah. ROA menunjukkan efisiensi tinggi. ROE menunjukkan keuntungan yang tinggi.'))


    @Rule(Fact(der_valued='high'), Fact(roa_valued='high'), Fact(roe_valued='high'))
    def ipo_rule_3115(self):
        self.declare(Fact(recommendation='DER menunjukkan tingkat hutang yang tinggi. ROA menunjukkan efisiensi tinggi. ROE menunjukkan keuntungan yang tinggi.'))


    @Rule(Fact(underwriter_valued='bad'), Fact(warrant_valued='good'), Fact(net_income_valued='loss'))
    def ipo_rule_3116(self):
        self.declare(Fact(recommendation='Underwriter berkualitas buruk. Warrant menunjukkan kondisi baik. Laba bersih menunjukkan kerugian.'))


    @Rule(Fact(underwriter_valued='bad'), Fact(warrant_valued='good'), Fact(per_valued='low'))
    def ipo_rule_3117(self):
        self.declare(Fact(recommendation='Underwriter berkualitas buruk. Warrant menunjukkan kondisi baik. PER berada di tingkat yang rendah.'))


    @Rule(Fact(underwriter_valued='bad'), Fact(warrant_valued='good'), Fact(der_valued='high'))
    def ipo_rule_3118(self):
        self.declare(Fact(recommendation='Underwriter berkualitas buruk. Warrant menunjukkan kondisi baik. DER menunjukkan tingkat hutang yang tinggi.'))


    @Rule(Fact(underwriter_valued='bad'), Fact(warrant_valued='good'), Fact(roa_valued='high'))
    def ipo_rule_3119(self):
        self.declare(Fact(recommendation='Underwriter berkualitas buruk. Warrant menunjukkan kondisi baik. ROA menunjukkan efisiensi tinggi.'))


    @Rule(Fact(underwriter_valued='bad'), Fact(warrant_valued='good'), Fact(roe_valued='low'))
    def ipo_rule_3120(self):
        self.declare(Fact(recommendation='Underwriter berkualitas buruk. Warrant menunjukkan kondisi baik. ROE menunjukkan keuntungan yang rendah.'))


    @Rule(Fact(underwriter_valued='bad'), Fact(net_income_valued='loss'), Fact(per_valued='low'))
    def ipo_rule_3121(self):
        self.declare(Fact(recommendation='Underwriter berkualitas buruk. Laba bersih menunjukkan kerugian. PER berada di tingkat yang rendah.'))


    @Rule(Fact(underwriter_valued='bad'), Fact(net_income_valued='loss'), Fact(der_valued='high'))
    def ipo_rule_3122(self):
        self.declare(Fact(recommendation='Underwriter berkualitas buruk. Laba bersih menunjukkan kerugian. DER menunjukkan tingkat hutang yang tinggi.'))


    @Rule(Fact(underwriter_valued='bad'), Fact(net_income_valued='loss'), Fact(roa_valued='high'))
    def ipo_rule_3123(self):
        self.declare(Fact(recommendation='Underwriter berkualitas buruk. Laba bersih menunjukkan kerugian. ROA menunjukkan efisiensi tinggi.'))


    @Rule(Fact(underwriter_valued='bad'), Fact(net_income_valued='loss'), Fact(roe_valued='low'))
    def ipo_rule_3124(self):
        self.declare(Fact(recommendation='Underwriter berkualitas buruk. Laba bersih menunjukkan kerugian. ROE menunjukkan keuntungan yang rendah.'))


    @Rule(Fact(underwriter_valued='bad'), Fact(per_valued='low'), Fact(der_valued='high'))
    def ipo_rule_3125(self):
        self.declare(Fact(recommendation='Underwriter berkualitas buruk. PER berada di tingkat yang rendah. DER menunjukkan tingkat hutang yang tinggi.'))


    @Rule(Fact(underwriter_valued='bad'), Fact(per_valued='low'), Fact(roa_valued='high'))
    def ipo_rule_3126(self):
        self.declare(Fact(recommendation='Underwriter berkualitas buruk. PER berada di tingkat yang rendah. ROA menunjukkan efisiensi tinggi.'))


    @Rule(Fact(underwriter_valued='bad'), Fact(per_valued='low'), Fact(roe_valued='low'))
    def ipo_rule_3127(self):
        self.declare(Fact(recommendation='Underwriter berkualitas buruk. PER berada di tingkat yang rendah. ROE menunjukkan keuntungan yang rendah.'))


    @Rule(Fact(underwriter_valued='bad'), Fact(der_valued='high'), Fact(roa_valued='high'))
    def ipo_rule_3128(self):
        self.declare(Fact(recommendation='Underwriter berkualitas buruk. DER menunjukkan tingkat hutang yang tinggi. ROA menunjukkan efisiensi tinggi.'))


    @Rule(Fact(underwriter_valued='bad'), Fact(der_valued='high'), Fact(roe_valued='low'))
    def ipo_rule_3129(self):
        self.declare(Fact(recommendation='Underwriter berkualitas buruk. DER menunjukkan tingkat hutang yang tinggi. ROE menunjukkan keuntungan yang rendah.'))


    @Rule(Fact(underwriter_valued='bad'), Fact(roa_valued='high'), Fact(roe_valued='low'))
    def ipo_rule_3130(self):
        self.declare(Fact(recommendation='Underwriter berkualitas buruk. ROA menunjukkan efisiensi tinggi. ROE menunjukkan keuntungan yang rendah.'))


    @Rule(Fact(warrant_valued='good'), Fact(net_income_valued='loss'), Fact(per_valued='low'))
    def ipo_rule_3131(self):
        self.declare(Fact(recommendation='Warrant menunjukkan kondisi baik. Laba bersih menunjukkan kerugian. PER berada di tingkat yang rendah.'))


    @Rule(Fact(warrant_valued='good'), Fact(net_income_valued='loss'), Fact(der_valued='high'))
    def ipo_rule_3132(self):
        self.declare(Fact(recommendation='Warrant menunjukkan kondisi baik. Laba bersih menunjukkan kerugian. DER menunjukkan tingkat hutang yang tinggi.'))


    @Rule(Fact(warrant_valued='good'), Fact(net_income_valued='loss'), Fact(roa_valued='high'))
    def ipo_rule_3133(self):
        self.declare(Fact(recommendation='Warrant menunjukkan kondisi baik. Laba bersih menunjukkan kerugian. ROA menunjukkan efisiensi tinggi.'))


    @Rule(Fact(warrant_valued='good'), Fact(net_income_valued='loss'), Fact(roe_valued='low'))
    def ipo_rule_3134(self):
        self.declare(Fact(recommendation='Warrant menunjukkan kondisi baik. Laba bersih menunjukkan kerugian. ROE menunjukkan keuntungan yang rendah.'))


    @Rule(Fact(warrant_valued='good'), Fact(per_valued='low'), Fact(der_valued='high'))
    def ipo_rule_3135(self):
        self.declare(Fact(recommendation='Warrant menunjukkan kondisi baik. PER berada di tingkat yang rendah. DER menunjukkan tingkat hutang yang tinggi.'))


    @Rule(Fact(warrant_valued='good'), Fact(per_valued='low'), Fact(roa_valued='high'))
    def ipo_rule_3136(self):
        self.declare(Fact(recommendation='Warrant menunjukkan kondisi baik. PER berada di tingkat yang rendah. ROA menunjukkan efisiensi tinggi.'))


    @Rule(Fact(warrant_valued='good'), Fact(per_valued='low'), Fact(roe_valued='low'))
    def ipo_rule_3137(self):
        self.declare(Fact(recommendation='Warrant menunjukkan kondisi baik. PER berada di tingkat yang rendah. ROE menunjukkan keuntungan yang rendah.'))


    @Rule(Fact(warrant_valued='good'), Fact(der_valued='high'), Fact(roa_valued='high'))
    def ipo_rule_3138(self):
        self.declare(Fact(recommendation='Warrant menunjukkan kondisi baik. DER menunjukkan tingkat hutang yang tinggi. ROA menunjukkan efisiensi tinggi.'))


    @Rule(Fact(warrant_valued='good'), Fact(der_valued='high'), Fact(roe_valued='low'))
    def ipo_rule_3139(self):
        self.declare(Fact(recommendation='Warrant menunjukkan kondisi baik. DER menunjukkan tingkat hutang yang tinggi. ROE menunjukkan keuntungan yang rendah.'))


    @Rule(Fact(warrant_valued='good'), Fact(roa_valued='high'), Fact(roe_valued='low'))
    def ipo_rule_3140(self):
        self.declare(Fact(recommendation='Warrant menunjukkan kondisi baik. ROA menunjukkan efisiensi tinggi. ROE menunjukkan keuntungan yang rendah.'))


    @Rule(Fact(net_income_valued='loss'), Fact(per_valued='low'), Fact(der_valued='high'))
    def ipo_rule_3141(self):
        self.declare(Fact(recommendation='Laba bersih menunjukkan kerugian. PER berada di tingkat yang rendah. DER menunjukkan tingkat hutang yang tinggi.'))


    @Rule(Fact(net_income_valued='loss'), Fact(per_valued='low'), Fact(roa_valued='high'))
    def ipo_rule_3142(self):
        self.declare(Fact(recommendation='Laba bersih menunjukkan kerugian. PER berada di tingkat yang rendah. ROA menunjukkan efisiensi tinggi.'))


    @Rule(Fact(net_income_valued='loss'), Fact(per_valued='low'), Fact(roe_valued='low'))
    def ipo_rule_3143(self):
        self.declare(Fact(recommendation='Laba bersih menunjukkan kerugian. PER berada di tingkat yang rendah. ROE menunjukkan keuntungan yang rendah.'))


    @Rule(Fact(net_income_valued='loss'), Fact(der_valued='high'), Fact(roa_valued='high'))
    def ipo_rule_3144(self):
        self.declare(Fact(recommendation='Laba bersih menunjukkan kerugian. DER menunjukkan tingkat hutang yang tinggi. ROA menunjukkan efisiensi tinggi.'))


    @Rule(Fact(net_income_valued='loss'), Fact(der_valued='high'), Fact(roe_valued='low'))
    def ipo_rule_3145(self):
        self.declare(Fact(recommendation='Laba bersih menunjukkan kerugian. DER menunjukkan tingkat hutang yang tinggi. ROE menunjukkan keuntungan yang rendah.'))


    @Rule(Fact(net_income_valued='loss'), Fact(roa_valued='high'), Fact(roe_valued='low'))
    def ipo_rule_3146(self):
        self.declare(Fact(recommendation='Laba bersih menunjukkan kerugian. ROA menunjukkan efisiensi tinggi. ROE menunjukkan keuntungan yang rendah.'))


    @Rule(Fact(per_valued='low'), Fact(der_valued='high'), Fact(roa_valued='high'))
    def ipo_rule_3147(self):
        self.declare(Fact(recommendation='PER berada di tingkat yang rendah. DER menunjukkan tingkat hutang yang tinggi. ROA menunjukkan efisiensi tinggi.'))


    @Rule(Fact(per_valued='low'), Fact(der_valued='high'), Fact(roe_valued='low'))
    def ipo_rule_3148(self):
        self.declare(Fact(recommendation='PER berada di tingkat yang rendah. DER menunjukkan tingkat hutang yang tinggi. ROE menunjukkan keuntungan yang rendah.'))


    @Rule(Fact(per_valued='low'), Fact(roa_valued='high'), Fact(roe_valued='low'))
    def ipo_rule_3149(self):
        self.declare(Fact(recommendation='PER berada di tingkat yang rendah. ROA menunjukkan efisiensi tinggi. ROE menunjukkan keuntungan yang rendah.'))


    @Rule(Fact(der_valued='high'), Fact(roa_valued='high'), Fact(roe_valued='low'))
    def ipo_rule_3150(self):
        self.declare(Fact(recommendation='DER menunjukkan tingkat hutang yang tinggi. ROA menunjukkan efisiensi tinggi. ROE menunjukkan keuntungan yang rendah.'))


    @Rule(Fact(underwriter_valued='bad'), Fact(warrant_valued='good'), Fact(net_income_valued='loss'))
    def ipo_rule_3151(self):
        self.declare(Fact(recommendation='Underwriter berkualitas buruk. Warrant menunjukkan kondisi baik. Laba bersih menunjukkan kerugian.'))


    @Rule(Fact(underwriter_valued='bad'), Fact(warrant_valued='good'), Fact(per_valued='low'))
    def ipo_rule_3152(self):
        self.declare(Fact(recommendation='Underwriter berkualitas buruk. Warrant menunjukkan kondisi baik. PER berada di tingkat yang rendah.'))


    @Rule(Fact(underwriter_valued='bad'), Fact(warrant_valued='good'), Fact(der_valued='high'))
    def ipo_rule_3153(self):
        self.declare(Fact(recommendation='Underwriter berkualitas buruk. Warrant menunjukkan kondisi baik. DER menunjukkan tingkat hutang yang tinggi.'))


    @Rule(Fact(underwriter_valued='bad'), Fact(warrant_valued='good'), Fact(roa_valued='low'))
    def ipo_rule_3154(self):
        self.declare(Fact(recommendation='Underwriter berkualitas buruk. Warrant menunjukkan kondisi baik. ROA menunjukkan efisiensi rendah.'))


    @Rule(Fact(underwriter_valued='bad'), Fact(warrant_valued='good'), Fact(roe_valued='high'))
    def ipo_rule_3155(self):
        self.declare(Fact(recommendation='Underwriter berkualitas buruk. Warrant menunjukkan kondisi baik. ROE menunjukkan keuntungan yang tinggi.'))


    @Rule(Fact(underwriter_valued='bad'), Fact(net_income_valued='loss'), Fact(per_valued='low'))
    def ipo_rule_3156(self):
        self.declare(Fact(recommendation='Underwriter berkualitas buruk. Laba bersih menunjukkan kerugian. PER berada di tingkat yang rendah.'))


    @Rule(Fact(underwriter_valued='bad'), Fact(net_income_valued='loss'), Fact(der_valued='high'))
    def ipo_rule_3157(self):
        self.declare(Fact(recommendation='Underwriter berkualitas buruk. Laba bersih menunjukkan kerugian. DER menunjukkan tingkat hutang yang tinggi.'))


    @Rule(Fact(underwriter_valued='bad'), Fact(net_income_valued='loss'), Fact(roa_valued='low'))
    def ipo_rule_3158(self):
        self.declare(Fact(recommendation='Underwriter berkualitas buruk. Laba bersih menunjukkan kerugian. ROA menunjukkan efisiensi rendah.'))


    @Rule(Fact(underwriter_valued='bad'), Fact(net_income_valued='loss'), Fact(roe_valued='high'))
    def ipo_rule_3159(self):
        self.declare(Fact(recommendation='Underwriter berkualitas buruk. Laba bersih menunjukkan kerugian. ROE menunjukkan keuntungan yang tinggi.'))


    @Rule(Fact(underwriter_valued='bad'), Fact(per_valued='low'), Fact(der_valued='high'))
    def ipo_rule_3160(self):
        self.declare(Fact(recommendation='Underwriter berkualitas buruk. PER berada di tingkat yang rendah. DER menunjukkan tingkat hutang yang tinggi.'))


    @Rule(Fact(underwriter_valued='bad'), Fact(per_valued='low'), Fact(roa_valued='low'))
    def ipo_rule_3161(self):
        self.declare(Fact(recommendation='Underwriter berkualitas buruk. PER berada di tingkat yang rendah. ROA menunjukkan efisiensi rendah.'))


    @Rule(Fact(underwriter_valued='bad'), Fact(per_valued='low'), Fact(roe_valued='high'))
    def ipo_rule_3162(self):
        self.declare(Fact(recommendation='Underwriter berkualitas buruk. PER berada di tingkat yang rendah. ROE menunjukkan keuntungan yang tinggi.'))


    @Rule(Fact(underwriter_valued='bad'), Fact(der_valued='high'), Fact(roa_valued='low'))
    def ipo_rule_3163(self):
        self.declare(Fact(recommendation='Underwriter berkualitas buruk. DER menunjukkan tingkat hutang yang tinggi. ROA menunjukkan efisiensi rendah.'))


    @Rule(Fact(underwriter_valued='bad'), Fact(der_valued='high'), Fact(roe_valued='high'))
    def ipo_rule_3164(self):
        self.declare(Fact(recommendation='Underwriter berkualitas buruk. DER menunjukkan tingkat hutang yang tinggi. ROE menunjukkan keuntungan yang tinggi.'))


    @Rule(Fact(underwriter_valued='bad'), Fact(roa_valued='low'), Fact(roe_valued='high'))
    def ipo_rule_3165(self):
        self.declare(Fact(recommendation='Underwriter berkualitas buruk. ROA menunjukkan efisiensi rendah. ROE menunjukkan keuntungan yang tinggi.'))


    @Rule(Fact(warrant_valued='good'), Fact(net_income_valued='loss'), Fact(per_valued='low'))
    def ipo_rule_3166(self):
        self.declare(Fact(recommendation='Warrant menunjukkan kondisi baik. Laba bersih menunjukkan kerugian. PER berada di tingkat yang rendah.'))


    @Rule(Fact(warrant_valued='good'), Fact(net_income_valued='loss'), Fact(der_valued='high'))
    def ipo_rule_3167(self):
        self.declare(Fact(recommendation='Warrant menunjukkan kondisi baik. Laba bersih menunjukkan kerugian. DER menunjukkan tingkat hutang yang tinggi.'))


    @Rule(Fact(warrant_valued='good'), Fact(net_income_valued='loss'), Fact(roa_valued='low'))
    def ipo_rule_3168(self):
        self.declare(Fact(recommendation='Warrant menunjukkan kondisi baik. Laba bersih menunjukkan kerugian. ROA menunjukkan efisiensi rendah.'))


    @Rule(Fact(warrant_valued='good'), Fact(net_income_valued='loss'), Fact(roe_valued='high'))
    def ipo_rule_3169(self):
        self.declare(Fact(recommendation='Warrant menunjukkan kondisi baik. Laba bersih menunjukkan kerugian. ROE menunjukkan keuntungan yang tinggi.'))


    @Rule(Fact(warrant_valued='good'), Fact(per_valued='low'), Fact(der_valued='high'))
    def ipo_rule_3170(self):
        self.declare(Fact(recommendation='Warrant menunjukkan kondisi baik. PER berada di tingkat yang rendah. DER menunjukkan tingkat hutang yang tinggi.'))


    @Rule(Fact(warrant_valued='good'), Fact(per_valued='low'), Fact(roa_valued='low'))
    def ipo_rule_3171(self):
        self.declare(Fact(recommendation='Warrant menunjukkan kondisi baik. PER berada di tingkat yang rendah. ROA menunjukkan efisiensi rendah.'))


    @Rule(Fact(warrant_valued='good'), Fact(per_valued='low'), Fact(roe_valued='high'))
    def ipo_rule_3172(self):
        self.declare(Fact(recommendation='Warrant menunjukkan kondisi baik. PER berada di tingkat yang rendah. ROE menunjukkan keuntungan yang tinggi.'))


    @Rule(Fact(warrant_valued='good'), Fact(der_valued='high'), Fact(roa_valued='low'))
    def ipo_rule_3173(self):
        self.declare(Fact(recommendation='Warrant menunjukkan kondisi baik. DER menunjukkan tingkat hutang yang tinggi. ROA menunjukkan efisiensi rendah.'))


    @Rule(Fact(warrant_valued='good'), Fact(der_valued='high'), Fact(roe_valued='high'))
    def ipo_rule_3174(self):
        self.declare(Fact(recommendation='Warrant menunjukkan kondisi baik. DER menunjukkan tingkat hutang yang tinggi. ROE menunjukkan keuntungan yang tinggi.'))


    @Rule(Fact(warrant_valued='good'), Fact(roa_valued='low'), Fact(roe_valued='high'))
    def ipo_rule_3175(self):
        self.declare(Fact(recommendation='Warrant menunjukkan kondisi baik. ROA menunjukkan efisiensi rendah. ROE menunjukkan keuntungan yang tinggi.'))


    @Rule(Fact(net_income_valued='loss'), Fact(per_valued='low'), Fact(der_valued='high'))
    def ipo_rule_3176(self):
        self.declare(Fact(recommendation='Laba bersih menunjukkan kerugian. PER berada di tingkat yang rendah. DER menunjukkan tingkat hutang yang tinggi.'))


    @Rule(Fact(net_income_valued='loss'), Fact(per_valued='low'), Fact(roa_valued='low'))
    def ipo_rule_3177(self):
        self.declare(Fact(recommendation='Laba bersih menunjukkan kerugian. PER berada di tingkat yang rendah. ROA menunjukkan efisiensi rendah.'))


    @Rule(Fact(net_income_valued='loss'), Fact(per_valued='low'), Fact(roe_valued='high'))
    def ipo_rule_3178(self):
        self.declare(Fact(recommendation='Laba bersih menunjukkan kerugian. PER berada di tingkat yang rendah. ROE menunjukkan keuntungan yang tinggi.'))


    @Rule(Fact(net_income_valued='loss'), Fact(der_valued='high'), Fact(roa_valued='low'))
    def ipo_rule_3179(self):
        self.declare(Fact(recommendation='Laba bersih menunjukkan kerugian. DER menunjukkan tingkat hutang yang tinggi. ROA menunjukkan efisiensi rendah.'))


    @Rule(Fact(net_income_valued='loss'), Fact(der_valued='high'), Fact(roe_valued='high'))
    def ipo_rule_3180(self):
        self.declare(Fact(recommendation='Laba bersih menunjukkan kerugian. DER menunjukkan tingkat hutang yang tinggi. ROE menunjukkan keuntungan yang tinggi.'))


    @Rule(Fact(net_income_valued='loss'), Fact(roa_valued='low'), Fact(roe_valued='high'))
    def ipo_rule_3181(self):
        self.declare(Fact(recommendation='Laba bersih menunjukkan kerugian. ROA menunjukkan efisiensi rendah. ROE menunjukkan keuntungan yang tinggi.'))


    @Rule(Fact(per_valued='low'), Fact(der_valued='high'), Fact(roa_valued='low'))
    def ipo_rule_3182(self):
        self.declare(Fact(recommendation='PER berada di tingkat yang rendah. DER menunjukkan tingkat hutang yang tinggi. ROA menunjukkan efisiensi rendah.'))


    @Rule(Fact(per_valued='low'), Fact(der_valued='high'), Fact(roe_valued='high'))
    def ipo_rule_3183(self):
        self.declare(Fact(recommendation='PER berada di tingkat yang rendah. DER menunjukkan tingkat hutang yang tinggi. ROE menunjukkan keuntungan yang tinggi.'))


    @Rule(Fact(per_valued='low'), Fact(roa_valued='low'), Fact(roe_valued='high'))
    def ipo_rule_3184(self):
        self.declare(Fact(recommendation='PER berada di tingkat yang rendah. ROA menunjukkan efisiensi rendah. ROE menunjukkan keuntungan yang tinggi.'))


    @Rule(Fact(der_valued='high'), Fact(roa_valued='low'), Fact(roe_valued='high'))
    def ipo_rule_3185(self):
        self.declare(Fact(recommendation='DER menunjukkan tingkat hutang yang tinggi. ROA menunjukkan efisiensi rendah. ROE menunjukkan keuntungan yang tinggi.'))


    @Rule(Fact(underwriter_valued='bad'), Fact(warrant_valued='good'), Fact(net_income_valued='loss'))
    def ipo_rule_3186(self):
        self.declare(Fact(recommendation='Underwriter berkualitas buruk. Warrant menunjukkan kondisi baik. Laba bersih menunjukkan kerugian.'))


    @Rule(Fact(underwriter_valued='bad'), Fact(warrant_valued='good'), Fact(per_valued='low'))
    def ipo_rule_3187(self):
        self.declare(Fact(recommendation='Underwriter berkualitas buruk. Warrant menunjukkan kondisi baik. PER berada di tingkat yang rendah.'))


    @Rule(Fact(underwriter_valued='bad'), Fact(warrant_valued='good'), Fact(der_valued='high'))
    def ipo_rule_3188(self):
        self.declare(Fact(recommendation='Underwriter berkualitas buruk. Warrant menunjukkan kondisi baik. DER menunjukkan tingkat hutang yang tinggi.'))


    @Rule(Fact(underwriter_valued='bad'), Fact(warrant_valued='good'), Fact(roa_valued='low'))
    def ipo_rule_3189(self):
        self.declare(Fact(recommendation='Underwriter berkualitas buruk. Warrant menunjukkan kondisi baik. ROA menunjukkan efisiensi rendah.'))


    @Rule(Fact(underwriter_valued='bad'), Fact(warrant_valued='good'), Fact(roe_valued='low'))
    def ipo_rule_3190(self):
        self.declare(Fact(recommendation='Underwriter berkualitas buruk. Warrant menunjukkan kondisi baik. ROE menunjukkan keuntungan yang rendah.'))


    @Rule(Fact(underwriter_valued='bad'), Fact(net_income_valued='loss'), Fact(per_valued='low'))
    def ipo_rule_3191(self):
        self.declare(Fact(recommendation='Underwriter berkualitas buruk. Laba bersih menunjukkan kerugian. PER berada di tingkat yang rendah.'))


    @Rule(Fact(underwriter_valued='bad'), Fact(net_income_valued='loss'), Fact(der_valued='high'))
    def ipo_rule_3192(self):
        self.declare(Fact(recommendation='Underwriter berkualitas buruk. Laba bersih menunjukkan kerugian. DER menunjukkan tingkat hutang yang tinggi.'))


    @Rule(Fact(underwriter_valued='bad'), Fact(net_income_valued='loss'), Fact(roa_valued='low'))
    def ipo_rule_3193(self):
        self.declare(Fact(recommendation='Underwriter berkualitas buruk. Laba bersih menunjukkan kerugian. ROA menunjukkan efisiensi rendah.'))


    @Rule(Fact(underwriter_valued='bad'), Fact(net_income_valued='loss'), Fact(roe_valued='low'))
    def ipo_rule_3194(self):
        self.declare(Fact(recommendation='Underwriter berkualitas buruk. Laba bersih menunjukkan kerugian. ROE menunjukkan keuntungan yang rendah.'))


    @Rule(Fact(underwriter_valued='bad'), Fact(per_valued='low'), Fact(der_valued='high'))
    def ipo_rule_3195(self):
        self.declare(Fact(recommendation='Underwriter berkualitas buruk. PER berada di tingkat yang rendah. DER menunjukkan tingkat hutang yang tinggi.'))


    @Rule(Fact(underwriter_valued='bad'), Fact(per_valued='low'), Fact(roa_valued='low'))
    def ipo_rule_3196(self):
        self.declare(Fact(recommendation='Underwriter berkualitas buruk. PER berada di tingkat yang rendah. ROA menunjukkan efisiensi rendah.'))


    @Rule(Fact(underwriter_valued='bad'), Fact(per_valued='low'), Fact(roe_valued='low'))
    def ipo_rule_3197(self):
        self.declare(Fact(recommendation='Underwriter berkualitas buruk. PER berada di tingkat yang rendah. ROE menunjukkan keuntungan yang rendah.'))


    @Rule(Fact(underwriter_valued='bad'), Fact(der_valued='high'), Fact(roa_valued='low'))
    def ipo_rule_3198(self):
        self.declare(Fact(recommendation='Underwriter berkualitas buruk. DER menunjukkan tingkat hutang yang tinggi. ROA menunjukkan efisiensi rendah.'))


    @Rule(Fact(underwriter_valued='bad'), Fact(der_valued='high'), Fact(roe_valued='low'))
    def ipo_rule_3199(self):
        self.declare(Fact(recommendation='Underwriter berkualitas buruk. DER menunjukkan tingkat hutang yang tinggi. ROE menunjukkan keuntungan yang rendah.'))


    @Rule(Fact(underwriter_valued='bad'), Fact(roa_valued='low'), Fact(roe_valued='low'))
    def ipo_rule_3200(self):
        self.declare(Fact(recommendation='Underwriter berkualitas buruk. ROA menunjukkan efisiensi rendah. ROE menunjukkan keuntungan yang rendah.'))


    @Rule(Fact(warrant_valued='good'), Fact(net_income_valued='loss'), Fact(per_valued='low'))
    def ipo_rule_3201(self):
        self.declare(Fact(recommendation='Warrant menunjukkan kondisi baik. Laba bersih menunjukkan kerugian. PER berada di tingkat yang rendah.'))


    @Rule(Fact(warrant_valued='good'), Fact(net_income_valued='loss'), Fact(der_valued='high'))
    def ipo_rule_3202(self):
        self.declare(Fact(recommendation='Warrant menunjukkan kondisi baik. Laba bersih menunjukkan kerugian. DER menunjukkan tingkat hutang yang tinggi.'))


    @Rule(Fact(warrant_valued='good'), Fact(net_income_valued='loss'), Fact(roa_valued='low'))
    def ipo_rule_3203(self):
        self.declare(Fact(recommendation='Warrant menunjukkan kondisi baik. Laba bersih menunjukkan kerugian. ROA menunjukkan efisiensi rendah.'))


    @Rule(Fact(warrant_valued='good'), Fact(net_income_valued='loss'), Fact(roe_valued='low'))
    def ipo_rule_3204(self):
        self.declare(Fact(recommendation='Warrant menunjukkan kondisi baik. Laba bersih menunjukkan kerugian. ROE menunjukkan keuntungan yang rendah.'))


    @Rule(Fact(warrant_valued='good'), Fact(per_valued='low'), Fact(der_valued='high'))
    def ipo_rule_3205(self):
        self.declare(Fact(recommendation='Warrant menunjukkan kondisi baik. PER berada di tingkat yang rendah. DER menunjukkan tingkat hutang yang tinggi.'))


    @Rule(Fact(warrant_valued='good'), Fact(per_valued='low'), Fact(roa_valued='low'))
    def ipo_rule_3206(self):
        self.declare(Fact(recommendation='Warrant menunjukkan kondisi baik. PER berada di tingkat yang rendah. ROA menunjukkan efisiensi rendah.'))


    @Rule(Fact(warrant_valued='good'), Fact(per_valued='low'), Fact(roe_valued='low'))
    def ipo_rule_3207(self):
        self.declare(Fact(recommendation='Warrant menunjukkan kondisi baik. PER berada di tingkat yang rendah. ROE menunjukkan keuntungan yang rendah.'))


    @Rule(Fact(warrant_valued='good'), Fact(der_valued='high'), Fact(roa_valued='low'))
    def ipo_rule_3208(self):
        self.declare(Fact(recommendation='Warrant menunjukkan kondisi baik. DER menunjukkan tingkat hutang yang tinggi. ROA menunjukkan efisiensi rendah.'))


    @Rule(Fact(warrant_valued='good'), Fact(der_valued='high'), Fact(roe_valued='low'))
    def ipo_rule_3209(self):
        self.declare(Fact(recommendation='Warrant menunjukkan kondisi baik. DER menunjukkan tingkat hutang yang tinggi. ROE menunjukkan keuntungan yang rendah.'))


    @Rule(Fact(warrant_valued='good'), Fact(roa_valued='low'), Fact(roe_valued='low'))
    def ipo_rule_3210(self):
        self.declare(Fact(recommendation='Warrant menunjukkan kondisi baik. ROA menunjukkan efisiensi rendah. ROE menunjukkan keuntungan yang rendah.'))


    @Rule(Fact(net_income_valued='loss'), Fact(per_valued='low'), Fact(der_valued='high'))
    def ipo_rule_3211(self):
        self.declare(Fact(recommendation='Laba bersih menunjukkan kerugian. PER berada di tingkat yang rendah. DER menunjukkan tingkat hutang yang tinggi.'))


    @Rule(Fact(net_income_valued='loss'), Fact(per_valued='low'), Fact(roa_valued='low'))
    def ipo_rule_3212(self):
        self.declare(Fact(recommendation='Laba bersih menunjukkan kerugian. PER berada di tingkat yang rendah. ROA menunjukkan efisiensi rendah.'))


    @Rule(Fact(net_income_valued='loss'), Fact(per_valued='low'), Fact(roe_valued='low'))
    def ipo_rule_3213(self):
        self.declare(Fact(recommendation='Laba bersih menunjukkan kerugian. PER berada di tingkat yang rendah. ROE menunjukkan keuntungan yang rendah.'))


    @Rule(Fact(net_income_valued='loss'), Fact(der_valued='high'), Fact(roa_valued='low'))
    def ipo_rule_3214(self):
        self.declare(Fact(recommendation='Laba bersih menunjukkan kerugian. DER menunjukkan tingkat hutang yang tinggi. ROA menunjukkan efisiensi rendah.'))


    @Rule(Fact(net_income_valued='loss'), Fact(der_valued='high'), Fact(roe_valued='low'))
    def ipo_rule_3215(self):
        self.declare(Fact(recommendation='Laba bersih menunjukkan kerugian. DER menunjukkan tingkat hutang yang tinggi. ROE menunjukkan keuntungan yang rendah.'))


    @Rule(Fact(net_income_valued='loss'), Fact(roa_valued='low'), Fact(roe_valued='low'))
    def ipo_rule_3216(self):
        self.declare(Fact(recommendation='Laba bersih menunjukkan kerugian. ROA menunjukkan efisiensi rendah. ROE menunjukkan keuntungan yang rendah.'))


    @Rule(Fact(per_valued='low'), Fact(der_valued='high'), Fact(roa_valued='low'))
    def ipo_rule_3217(self):
        self.declare(Fact(recommendation='PER berada di tingkat yang rendah. DER menunjukkan tingkat hutang yang tinggi. ROA menunjukkan efisiensi rendah.'))


    @Rule(Fact(per_valued='low'), Fact(der_valued='high'), Fact(roe_valued='low'))
    def ipo_rule_3218(self):
        self.declare(Fact(recommendation='PER berada di tingkat yang rendah. DER menunjukkan tingkat hutang yang tinggi. ROE menunjukkan keuntungan yang rendah.'))


    @Rule(Fact(per_valued='low'), Fact(roa_valued='low'), Fact(roe_valued='low'))
    def ipo_rule_3219(self):
        self.declare(Fact(recommendation='PER berada di tingkat yang rendah. ROA menunjukkan efisiensi rendah. ROE menunjukkan keuntungan yang rendah.'))


    @Rule(Fact(der_valued='high'), Fact(roa_valued='low'), Fact(roe_valued='low'))
    def ipo_rule_3220(self):
        self.declare(Fact(recommendation='DER menunjukkan tingkat hutang yang tinggi. ROA menunjukkan efisiensi rendah. ROE menunjukkan keuntungan yang rendah.'))


    @Rule(Fact(underwriter_valued='bad'), Fact(warrant_valued='good'), Fact(net_income_valued='loss'))
    def ipo_rule_3221(self):
        self.declare(Fact(recommendation='Underwriter berkualitas buruk. Warrant menunjukkan kondisi baik. Laba bersih menunjukkan kerugian.'))


    @Rule(Fact(underwriter_valued='bad'), Fact(warrant_valued='good'), Fact(per_valued='low'))
    def ipo_rule_3222(self):
        self.declare(Fact(recommendation='Underwriter berkualitas buruk. Warrant menunjukkan kondisi baik. PER berada di tingkat yang rendah.'))


    @Rule(Fact(underwriter_valued='bad'), Fact(warrant_valued='good'), Fact(der_valued='low'))
    def ipo_rule_3223(self):
        self.declare(Fact(recommendation='Underwriter berkualitas buruk. Warrant menunjukkan kondisi baik. DER menunjukkan tingkat hutang yang rendah.'))


    @Rule(Fact(underwriter_valued='bad'), Fact(warrant_valued='good'), Fact(roa_valued='high'))
    def ipo_rule_3224(self):
        self.declare(Fact(recommendation='Underwriter berkualitas buruk. Warrant menunjukkan kondisi baik. ROA menunjukkan efisiensi tinggi.'))


    @Rule(Fact(underwriter_valued='bad'), Fact(warrant_valued='good'), Fact(roe_valued='high'))
    def ipo_rule_3225(self):
        self.declare(Fact(recommendation='Underwriter berkualitas buruk. Warrant menunjukkan kondisi baik. ROE menunjukkan keuntungan yang tinggi.'))


    @Rule(Fact(underwriter_valued='bad'), Fact(net_income_valued='loss'), Fact(per_valued='low'))
    def ipo_rule_3226(self):
        self.declare(Fact(recommendation='Underwriter berkualitas buruk. Laba bersih menunjukkan kerugian. PER berada di tingkat yang rendah.'))


    @Rule(Fact(underwriter_valued='bad'), Fact(net_income_valued='loss'), Fact(der_valued='low'))
    def ipo_rule_3227(self):
        self.declare(Fact(recommendation='Underwriter berkualitas buruk. Laba bersih menunjukkan kerugian. DER menunjukkan tingkat hutang yang rendah.'))


    @Rule(Fact(underwriter_valued='bad'), Fact(net_income_valued='loss'), Fact(roa_valued='high'))
    def ipo_rule_3228(self):
        self.declare(Fact(recommendation='Underwriter berkualitas buruk. Laba bersih menunjukkan kerugian. ROA menunjukkan efisiensi tinggi.'))


    @Rule(Fact(underwriter_valued='bad'), Fact(net_income_valued='loss'), Fact(roe_valued='high'))
    def ipo_rule_3229(self):
        self.declare(Fact(recommendation='Underwriter berkualitas buruk. Laba bersih menunjukkan kerugian. ROE menunjukkan keuntungan yang tinggi.'))


    @Rule(Fact(underwriter_valued='bad'), Fact(per_valued='low'), Fact(der_valued='low'))
    def ipo_rule_3230(self):
        self.declare(Fact(recommendation='Underwriter berkualitas buruk. PER berada di tingkat yang rendah. DER menunjukkan tingkat hutang yang rendah.'))


    @Rule(Fact(underwriter_valued='bad'), Fact(per_valued='low'), Fact(roa_valued='high'))
    def ipo_rule_3231(self):
        self.declare(Fact(recommendation='Underwriter berkualitas buruk. PER berada di tingkat yang rendah. ROA menunjukkan efisiensi tinggi.'))


    @Rule(Fact(underwriter_valued='bad'), Fact(per_valued='low'), Fact(roe_valued='high'))
    def ipo_rule_3232(self):
        self.declare(Fact(recommendation='Underwriter berkualitas buruk. PER berada di tingkat yang rendah. ROE menunjukkan keuntungan yang tinggi.'))


    @Rule(Fact(underwriter_valued='bad'), Fact(der_valued='low'), Fact(roa_valued='high'))
    def ipo_rule_3233(self):
        self.declare(Fact(recommendation='Underwriter berkualitas buruk. DER menunjukkan tingkat hutang yang rendah. ROA menunjukkan efisiensi tinggi.'))


    @Rule(Fact(underwriter_valued='bad'), Fact(der_valued='low'), Fact(roe_valued='high'))
    def ipo_rule_3234(self):
        self.declare(Fact(recommendation='Underwriter berkualitas buruk. DER menunjukkan tingkat hutang yang rendah. ROE menunjukkan keuntungan yang tinggi.'))


    @Rule(Fact(underwriter_valued='bad'), Fact(roa_valued='high'), Fact(roe_valued='high'))
    def ipo_rule_3235(self):
        self.declare(Fact(recommendation='Underwriter berkualitas buruk. ROA menunjukkan efisiensi tinggi. ROE menunjukkan keuntungan yang tinggi.'))


    @Rule(Fact(warrant_valued='good'), Fact(net_income_valued='loss'), Fact(per_valued='low'))
    def ipo_rule_3236(self):
        self.declare(Fact(recommendation='Warrant menunjukkan kondisi baik. Laba bersih menunjukkan kerugian. PER berada di tingkat yang rendah.'))


    @Rule(Fact(warrant_valued='good'), Fact(net_income_valued='loss'), Fact(der_valued='low'))
    def ipo_rule_3237(self):
        self.declare(Fact(recommendation='Warrant menunjukkan kondisi baik. Laba bersih menunjukkan kerugian. DER menunjukkan tingkat hutang yang rendah.'))


    @Rule(Fact(warrant_valued='good'), Fact(net_income_valued='loss'), Fact(roa_valued='high'))
    def ipo_rule_3238(self):
        self.declare(Fact(recommendation='Warrant menunjukkan kondisi baik. Laba bersih menunjukkan kerugian. ROA menunjukkan efisiensi tinggi.'))


    @Rule(Fact(warrant_valued='good'), Fact(net_income_valued='loss'), Fact(roe_valued='high'))
    def ipo_rule_3239(self):
        self.declare(Fact(recommendation='Warrant menunjukkan kondisi baik. Laba bersih menunjukkan kerugian. ROE menunjukkan keuntungan yang tinggi.'))


    @Rule(Fact(warrant_valued='good'), Fact(per_valued='low'), Fact(der_valued='low'))
    def ipo_rule_3240(self):
        self.declare(Fact(recommendation='Warrant menunjukkan kondisi baik. PER berada di tingkat yang rendah. DER menunjukkan tingkat hutang yang rendah.'))


    @Rule(Fact(warrant_valued='good'), Fact(per_valued='low'), Fact(roa_valued='high'))
    def ipo_rule_3241(self):
        self.declare(Fact(recommendation='Warrant menunjukkan kondisi baik. PER berada di tingkat yang rendah. ROA menunjukkan efisiensi tinggi.'))


    @Rule(Fact(warrant_valued='good'), Fact(per_valued='low'), Fact(roe_valued='high'))
    def ipo_rule_3242(self):
        self.declare(Fact(recommendation='Warrant menunjukkan kondisi baik. PER berada di tingkat yang rendah. ROE menunjukkan keuntungan yang tinggi.'))


    @Rule(Fact(warrant_valued='good'), Fact(der_valued='low'), Fact(roa_valued='high'))
    def ipo_rule_3243(self):
        self.declare(Fact(recommendation='Warrant menunjukkan kondisi baik. DER menunjukkan tingkat hutang yang rendah. ROA menunjukkan efisiensi tinggi.'))


    @Rule(Fact(warrant_valued='good'), Fact(der_valued='low'), Fact(roe_valued='high'))
    def ipo_rule_3244(self):
        self.declare(Fact(recommendation='Warrant menunjukkan kondisi baik. DER menunjukkan tingkat hutang yang rendah. ROE menunjukkan keuntungan yang tinggi.'))


    @Rule(Fact(warrant_valued='good'), Fact(roa_valued='high'), Fact(roe_valued='high'))
    def ipo_rule_3245(self):
        self.declare(Fact(recommendation='Warrant menunjukkan kondisi baik. ROA menunjukkan efisiensi tinggi. ROE menunjukkan keuntungan yang tinggi.'))


    @Rule(Fact(net_income_valued='loss'), Fact(per_valued='low'), Fact(der_valued='low'))
    def ipo_rule_3246(self):
        self.declare(Fact(recommendation='Laba bersih menunjukkan kerugian. PER berada di tingkat yang rendah. DER menunjukkan tingkat hutang yang rendah.'))


    @Rule(Fact(net_income_valued='loss'), Fact(per_valued='low'), Fact(roa_valued='high'))
    def ipo_rule_3247(self):
        self.declare(Fact(recommendation='Laba bersih menunjukkan kerugian. PER berada di tingkat yang rendah. ROA menunjukkan efisiensi tinggi.'))


    @Rule(Fact(net_income_valued='loss'), Fact(per_valued='low'), Fact(roe_valued='high'))
    def ipo_rule_3248(self):
        self.declare(Fact(recommendation='Laba bersih menunjukkan kerugian. PER berada di tingkat yang rendah. ROE menunjukkan keuntungan yang tinggi.'))


    @Rule(Fact(net_income_valued='loss'), Fact(der_valued='low'), Fact(roa_valued='high'))
    def ipo_rule_3249(self):
        self.declare(Fact(recommendation='Laba bersih menunjukkan kerugian. DER menunjukkan tingkat hutang yang rendah. ROA menunjukkan efisiensi tinggi.'))


    @Rule(Fact(net_income_valued='loss'), Fact(der_valued='low'), Fact(roe_valued='high'))
    def ipo_rule_3250(self):
        self.declare(Fact(recommendation='Laba bersih menunjukkan kerugian. DER menunjukkan tingkat hutang yang rendah. ROE menunjukkan keuntungan yang tinggi.'))


    @Rule(Fact(net_income_valued='loss'), Fact(roa_valued='high'), Fact(roe_valued='high'))
    def ipo_rule_3251(self):
        self.declare(Fact(recommendation='Laba bersih menunjukkan kerugian. ROA menunjukkan efisiensi tinggi. ROE menunjukkan keuntungan yang tinggi.'))


    @Rule(Fact(per_valued='low'), Fact(der_valued='low'), Fact(roa_valued='high'))
    def ipo_rule_3252(self):
        self.declare(Fact(recommendation='PER berada di tingkat yang rendah. DER menunjukkan tingkat hutang yang rendah. ROA menunjukkan efisiensi tinggi.'))


    @Rule(Fact(per_valued='low'), Fact(der_valued='low'), Fact(roe_valued='high'))
    def ipo_rule_3253(self):
        self.declare(Fact(recommendation='PER berada di tingkat yang rendah. DER menunjukkan tingkat hutang yang rendah. ROE menunjukkan keuntungan yang tinggi.'))


    @Rule(Fact(per_valued='low'), Fact(roa_valued='high'), Fact(roe_valued='high'))
    def ipo_rule_3254(self):
        self.declare(Fact(recommendation='PER berada di tingkat yang rendah. ROA menunjukkan efisiensi tinggi. ROE menunjukkan keuntungan yang tinggi.'))


    @Rule(Fact(der_valued='low'), Fact(roa_valued='high'), Fact(roe_valued='high'))
    def ipo_rule_3255(self):
        self.declare(Fact(recommendation='DER menunjukkan tingkat hutang yang rendah. ROA menunjukkan efisiensi tinggi. ROE menunjukkan keuntungan yang tinggi.'))


    @Rule(Fact(underwriter_valued='bad'), Fact(warrant_valued='good'), Fact(net_income_valued='loss'))
    def ipo_rule_3256(self):
        self.declare(Fact(recommendation='Underwriter berkualitas buruk. Warrant menunjukkan kondisi baik. Laba bersih menunjukkan kerugian.'))


    @Rule(Fact(underwriter_valued='bad'), Fact(warrant_valued='good'), Fact(per_valued='low'))
    def ipo_rule_3257(self):
        self.declare(Fact(recommendation='Underwriter berkualitas buruk. Warrant menunjukkan kondisi baik. PER berada di tingkat yang rendah.'))


    @Rule(Fact(underwriter_valued='bad'), Fact(warrant_valued='good'), Fact(der_valued='low'))
    def ipo_rule_3258(self):
        self.declare(Fact(recommendation='Underwriter berkualitas buruk. Warrant menunjukkan kondisi baik. DER menunjukkan tingkat hutang yang rendah.'))


    @Rule(Fact(underwriter_valued='bad'), Fact(warrant_valued='good'), Fact(roa_valued='high'))
    def ipo_rule_3259(self):
        self.declare(Fact(recommendation='Underwriter berkualitas buruk. Warrant menunjukkan kondisi baik. ROA menunjukkan efisiensi tinggi.'))


    @Rule(Fact(underwriter_valued='bad'), Fact(warrant_valued='good'), Fact(roe_valued='low'))
    def ipo_rule_3260(self):
        self.declare(Fact(recommendation='Underwriter berkualitas buruk. Warrant menunjukkan kondisi baik. ROE menunjukkan keuntungan yang rendah.'))


    @Rule(Fact(underwriter_valued='bad'), Fact(net_income_valued='loss'), Fact(per_valued='low'))
    def ipo_rule_3261(self):
        self.declare(Fact(recommendation='Underwriter berkualitas buruk. Laba bersih menunjukkan kerugian. PER berada di tingkat yang rendah.'))


    @Rule(Fact(underwriter_valued='bad'), Fact(net_income_valued='loss'), Fact(der_valued='low'))
    def ipo_rule_3262(self):
        self.declare(Fact(recommendation='Underwriter berkualitas buruk. Laba bersih menunjukkan kerugian. DER menunjukkan tingkat hutang yang rendah.'))


    @Rule(Fact(underwriter_valued='bad'), Fact(net_income_valued='loss'), Fact(roa_valued='high'))
    def ipo_rule_3263(self):
        self.declare(Fact(recommendation='Underwriter berkualitas buruk. Laba bersih menunjukkan kerugian. ROA menunjukkan efisiensi tinggi.'))


    @Rule(Fact(underwriter_valued='bad'), Fact(net_income_valued='loss'), Fact(roe_valued='low'))
    def ipo_rule_3264(self):
        self.declare(Fact(recommendation='Underwriter berkualitas buruk. Laba bersih menunjukkan kerugian. ROE menunjukkan keuntungan yang rendah.'))


    @Rule(Fact(underwriter_valued='bad'), Fact(per_valued='low'), Fact(der_valued='low'))
    def ipo_rule_3265(self):
        self.declare(Fact(recommendation='Underwriter berkualitas buruk. PER berada di tingkat yang rendah. DER menunjukkan tingkat hutang yang rendah.'))


    @Rule(Fact(underwriter_valued='bad'), Fact(per_valued='low'), Fact(roa_valued='high'))
    def ipo_rule_3266(self):
        self.declare(Fact(recommendation='Underwriter berkualitas buruk. PER berada di tingkat yang rendah. ROA menunjukkan efisiensi tinggi.'))


    @Rule(Fact(underwriter_valued='bad'), Fact(per_valued='low'), Fact(roe_valued='low'))
    def ipo_rule_3267(self):
        self.declare(Fact(recommendation='Underwriter berkualitas buruk. PER berada di tingkat yang rendah. ROE menunjukkan keuntungan yang rendah.'))


    @Rule(Fact(underwriter_valued='bad'), Fact(der_valued='low'), Fact(roa_valued='high'))
    def ipo_rule_3268(self):
        self.declare(Fact(recommendation='Underwriter berkualitas buruk. DER menunjukkan tingkat hutang yang rendah. ROA menunjukkan efisiensi tinggi.'))


    @Rule(Fact(underwriter_valued='bad'), Fact(der_valued='low'), Fact(roe_valued='low'))
    def ipo_rule_3269(self):
        self.declare(Fact(recommendation='Underwriter berkualitas buruk. DER menunjukkan tingkat hutang yang rendah. ROE menunjukkan keuntungan yang rendah.'))


    @Rule(Fact(underwriter_valued='bad'), Fact(roa_valued='high'), Fact(roe_valued='low'))
    def ipo_rule_3270(self):
        self.declare(Fact(recommendation='Underwriter berkualitas buruk. ROA menunjukkan efisiensi tinggi. ROE menunjukkan keuntungan yang rendah.'))


    @Rule(Fact(warrant_valued='good'), Fact(net_income_valued='loss'), Fact(per_valued='low'))
    def ipo_rule_3271(self):
        self.declare(Fact(recommendation='Warrant menunjukkan kondisi baik. Laba bersih menunjukkan kerugian. PER berada di tingkat yang rendah.'))


    @Rule(Fact(warrant_valued='good'), Fact(net_income_valued='loss'), Fact(der_valued='low'))
    def ipo_rule_3272(self):
        self.declare(Fact(recommendation='Warrant menunjukkan kondisi baik. Laba bersih menunjukkan kerugian. DER menunjukkan tingkat hutang yang rendah.'))


    @Rule(Fact(warrant_valued='good'), Fact(net_income_valued='loss'), Fact(roa_valued='high'))
    def ipo_rule_3273(self):
        self.declare(Fact(recommendation='Warrant menunjukkan kondisi baik. Laba bersih menunjukkan kerugian. ROA menunjukkan efisiensi tinggi.'))


    @Rule(Fact(warrant_valued='good'), Fact(net_income_valued='loss'), Fact(roe_valued='low'))
    def ipo_rule_3274(self):
        self.declare(Fact(recommendation='Warrant menunjukkan kondisi baik. Laba bersih menunjukkan kerugian. ROE menunjukkan keuntungan yang rendah.'))


    @Rule(Fact(warrant_valued='good'), Fact(per_valued='low'), Fact(der_valued='low'))
    def ipo_rule_3275(self):
        self.declare(Fact(recommendation='Warrant menunjukkan kondisi baik. PER berada di tingkat yang rendah. DER menunjukkan tingkat hutang yang rendah.'))


    @Rule(Fact(warrant_valued='good'), Fact(per_valued='low'), Fact(roa_valued='high'))
    def ipo_rule_3276(self):
        self.declare(Fact(recommendation='Warrant menunjukkan kondisi baik. PER berada di tingkat yang rendah. ROA menunjukkan efisiensi tinggi.'))


    @Rule(Fact(warrant_valued='good'), Fact(per_valued='low'), Fact(roe_valued='low'))
    def ipo_rule_3277(self):
        self.declare(Fact(recommendation='Warrant menunjukkan kondisi baik. PER berada di tingkat yang rendah. ROE menunjukkan keuntungan yang rendah.'))


    @Rule(Fact(warrant_valued='good'), Fact(der_valued='low'), Fact(roa_valued='high'))
    def ipo_rule_3278(self):
        self.declare(Fact(recommendation='Warrant menunjukkan kondisi baik. DER menunjukkan tingkat hutang yang rendah. ROA menunjukkan efisiensi tinggi.'))


    @Rule(Fact(warrant_valued='good'), Fact(der_valued='low'), Fact(roe_valued='low'))
    def ipo_rule_3279(self):
        self.declare(Fact(recommendation='Warrant menunjukkan kondisi baik. DER menunjukkan tingkat hutang yang rendah. ROE menunjukkan keuntungan yang rendah.'))


    @Rule(Fact(warrant_valued='good'), Fact(roa_valued='high'), Fact(roe_valued='low'))
    def ipo_rule_3280(self):
        self.declare(Fact(recommendation='Warrant menunjukkan kondisi baik. ROA menunjukkan efisiensi tinggi. ROE menunjukkan keuntungan yang rendah.'))


    @Rule(Fact(net_income_valued='loss'), Fact(per_valued='low'), Fact(der_valued='low'))
    def ipo_rule_3281(self):
        self.declare(Fact(recommendation='Laba bersih menunjukkan kerugian. PER berada di tingkat yang rendah. DER menunjukkan tingkat hutang yang rendah.'))


    @Rule(Fact(net_income_valued='loss'), Fact(per_valued='low'), Fact(roa_valued='high'))
    def ipo_rule_3282(self):
        self.declare(Fact(recommendation='Laba bersih menunjukkan kerugian. PER berada di tingkat yang rendah. ROA menunjukkan efisiensi tinggi.'))


    @Rule(Fact(net_income_valued='loss'), Fact(per_valued='low'), Fact(roe_valued='low'))
    def ipo_rule_3283(self):
        self.declare(Fact(recommendation='Laba bersih menunjukkan kerugian. PER berada di tingkat yang rendah. ROE menunjukkan keuntungan yang rendah.'))


    @Rule(Fact(net_income_valued='loss'), Fact(der_valued='low'), Fact(roa_valued='high'))
    def ipo_rule_3284(self):
        self.declare(Fact(recommendation='Laba bersih menunjukkan kerugian. DER menunjukkan tingkat hutang yang rendah. ROA menunjukkan efisiensi tinggi.'))


    @Rule(Fact(net_income_valued='loss'), Fact(der_valued='low'), Fact(roe_valued='low'))
    def ipo_rule_3285(self):
        self.declare(Fact(recommendation='Laba bersih menunjukkan kerugian. DER menunjukkan tingkat hutang yang rendah. ROE menunjukkan keuntungan yang rendah.'))


    @Rule(Fact(net_income_valued='loss'), Fact(roa_valued='high'), Fact(roe_valued='low'))
    def ipo_rule_3286(self):
        self.declare(Fact(recommendation='Laba bersih menunjukkan kerugian. ROA menunjukkan efisiensi tinggi. ROE menunjukkan keuntungan yang rendah.'))


    @Rule(Fact(per_valued='low'), Fact(der_valued='low'), Fact(roa_valued='high'))
    def ipo_rule_3287(self):
        self.declare(Fact(recommendation='PER berada di tingkat yang rendah. DER menunjukkan tingkat hutang yang rendah. ROA menunjukkan efisiensi tinggi.'))


    @Rule(Fact(per_valued='low'), Fact(der_valued='low'), Fact(roe_valued='low'))
    def ipo_rule_3288(self):
        self.declare(Fact(recommendation='PER berada di tingkat yang rendah. DER menunjukkan tingkat hutang yang rendah. ROE menunjukkan keuntungan yang rendah.'))


    @Rule(Fact(per_valued='low'), Fact(roa_valued='high'), Fact(roe_valued='low'))
    def ipo_rule_3289(self):
        self.declare(Fact(recommendation='PER berada di tingkat yang rendah. ROA menunjukkan efisiensi tinggi. ROE menunjukkan keuntungan yang rendah.'))


    @Rule(Fact(der_valued='low'), Fact(roa_valued='high'), Fact(roe_valued='low'))
    def ipo_rule_3290(self):
        self.declare(Fact(recommendation='DER menunjukkan tingkat hutang yang rendah. ROA menunjukkan efisiensi tinggi. ROE menunjukkan keuntungan yang rendah.'))


    @Rule(Fact(underwriter_valued='bad'), Fact(warrant_valued='good'), Fact(net_income_valued='loss'))
    def ipo_rule_3291(self):
        self.declare(Fact(recommendation='Underwriter berkualitas buruk. Warrant menunjukkan kondisi baik. Laba bersih menunjukkan kerugian.'))


    @Rule(Fact(underwriter_valued='bad'), Fact(warrant_valued='good'), Fact(per_valued='low'))
    def ipo_rule_3292(self):
        self.declare(Fact(recommendation='Underwriter berkualitas buruk. Warrant menunjukkan kondisi baik. PER berada di tingkat yang rendah.'))


    @Rule(Fact(underwriter_valued='bad'), Fact(warrant_valued='good'), Fact(der_valued='low'))
    def ipo_rule_3293(self):
        self.declare(Fact(recommendation='Underwriter berkualitas buruk. Warrant menunjukkan kondisi baik. DER menunjukkan tingkat hutang yang rendah.'))


    @Rule(Fact(underwriter_valued='bad'), Fact(warrant_valued='good'), Fact(roa_valued='low'))
    def ipo_rule_3294(self):
        self.declare(Fact(recommendation='Underwriter berkualitas buruk. Warrant menunjukkan kondisi baik. ROA menunjukkan efisiensi rendah.'))


    @Rule(Fact(underwriter_valued='bad'), Fact(warrant_valued='good'), Fact(roe_valued='high'))
    def ipo_rule_3295(self):
        self.declare(Fact(recommendation='Underwriter berkualitas buruk. Warrant menunjukkan kondisi baik. ROE menunjukkan keuntungan yang tinggi.'))


    @Rule(Fact(underwriter_valued='bad'), Fact(net_income_valued='loss'), Fact(per_valued='low'))
    def ipo_rule_3296(self):
        self.declare(Fact(recommendation='Underwriter berkualitas buruk. Laba bersih menunjukkan kerugian. PER berada di tingkat yang rendah.'))


    @Rule(Fact(underwriter_valued='bad'), Fact(net_income_valued='loss'), Fact(der_valued='low'))
    def ipo_rule_3297(self):
        self.declare(Fact(recommendation='Underwriter berkualitas buruk. Laba bersih menunjukkan kerugian. DER menunjukkan tingkat hutang yang rendah.'))


    @Rule(Fact(underwriter_valued='bad'), Fact(net_income_valued='loss'), Fact(roa_valued='low'))
    def ipo_rule_3298(self):
        self.declare(Fact(recommendation='Underwriter berkualitas buruk. Laba bersih menunjukkan kerugian. ROA menunjukkan efisiensi rendah.'))


    @Rule(Fact(underwriter_valued='bad'), Fact(net_income_valued='loss'), Fact(roe_valued='high'))
    def ipo_rule_3299(self):
        self.declare(Fact(recommendation='Underwriter berkualitas buruk. Laba bersih menunjukkan kerugian. ROE menunjukkan keuntungan yang tinggi.'))


    @Rule(Fact(underwriter_valued='bad'), Fact(per_valued='low'), Fact(der_valued='low'))
    def ipo_rule_3300(self):
        self.declare(Fact(recommendation='Underwriter berkualitas buruk. PER berada di tingkat yang rendah. DER menunjukkan tingkat hutang yang rendah.'))


    @Rule(Fact(underwriter_valued='bad'), Fact(per_valued='low'), Fact(roa_valued='low'))
    def ipo_rule_3301(self):
        self.declare(Fact(recommendation='Underwriter berkualitas buruk. PER berada di tingkat yang rendah. ROA menunjukkan efisiensi rendah.'))


    @Rule(Fact(underwriter_valued='bad'), Fact(per_valued='low'), Fact(roe_valued='high'))
    def ipo_rule_3302(self):
        self.declare(Fact(recommendation='Underwriter berkualitas buruk. PER berada di tingkat yang rendah. ROE menunjukkan keuntungan yang tinggi.'))


    @Rule(Fact(underwriter_valued='bad'), Fact(der_valued='low'), Fact(roa_valued='low'))
    def ipo_rule_3303(self):
        self.declare(Fact(recommendation='Underwriter berkualitas buruk. DER menunjukkan tingkat hutang yang rendah. ROA menunjukkan efisiensi rendah.'))


    @Rule(Fact(underwriter_valued='bad'), Fact(der_valued='low'), Fact(roe_valued='high'))
    def ipo_rule_3304(self):
        self.declare(Fact(recommendation='Underwriter berkualitas buruk. DER menunjukkan tingkat hutang yang rendah. ROE menunjukkan keuntungan yang tinggi.'))


    @Rule(Fact(underwriter_valued='bad'), Fact(roa_valued='low'), Fact(roe_valued='high'))
    def ipo_rule_3305(self):
        self.declare(Fact(recommendation='Underwriter berkualitas buruk. ROA menunjukkan efisiensi rendah. ROE menunjukkan keuntungan yang tinggi.'))


    @Rule(Fact(warrant_valued='good'), Fact(net_income_valued='loss'), Fact(per_valued='low'))
    def ipo_rule_3306(self):
        self.declare(Fact(recommendation='Warrant menunjukkan kondisi baik. Laba bersih menunjukkan kerugian. PER berada di tingkat yang rendah.'))


    @Rule(Fact(warrant_valued='good'), Fact(net_income_valued='loss'), Fact(der_valued='low'))
    def ipo_rule_3307(self):
        self.declare(Fact(recommendation='Warrant menunjukkan kondisi baik. Laba bersih menunjukkan kerugian. DER menunjukkan tingkat hutang yang rendah.'))


    @Rule(Fact(warrant_valued='good'), Fact(net_income_valued='loss'), Fact(roa_valued='low'))
    def ipo_rule_3308(self):
        self.declare(Fact(recommendation='Warrant menunjukkan kondisi baik. Laba bersih menunjukkan kerugian. ROA menunjukkan efisiensi rendah.'))


    @Rule(Fact(warrant_valued='good'), Fact(net_income_valued='loss'), Fact(roe_valued='high'))
    def ipo_rule_3309(self):
        self.declare(Fact(recommendation='Warrant menunjukkan kondisi baik. Laba bersih menunjukkan kerugian. ROE menunjukkan keuntungan yang tinggi.'))


    @Rule(Fact(warrant_valued='good'), Fact(per_valued='low'), Fact(der_valued='low'))
    def ipo_rule_3310(self):
        self.declare(Fact(recommendation='Warrant menunjukkan kondisi baik. PER berada di tingkat yang rendah. DER menunjukkan tingkat hutang yang rendah.'))


    @Rule(Fact(warrant_valued='good'), Fact(per_valued='low'), Fact(roa_valued='low'))
    def ipo_rule_3311(self):
        self.declare(Fact(recommendation='Warrant menunjukkan kondisi baik. PER berada di tingkat yang rendah. ROA menunjukkan efisiensi rendah.'))


    @Rule(Fact(warrant_valued='good'), Fact(per_valued='low'), Fact(roe_valued='high'))
    def ipo_rule_3312(self):
        self.declare(Fact(recommendation='Warrant menunjukkan kondisi baik. PER berada di tingkat yang rendah. ROE menunjukkan keuntungan yang tinggi.'))


    @Rule(Fact(warrant_valued='good'), Fact(der_valued='low'), Fact(roa_valued='low'))
    def ipo_rule_3313(self):
        self.declare(Fact(recommendation='Warrant menunjukkan kondisi baik. DER menunjukkan tingkat hutang yang rendah. ROA menunjukkan efisiensi rendah.'))


    @Rule(Fact(warrant_valued='good'), Fact(der_valued='low'), Fact(roe_valued='high'))
    def ipo_rule_3314(self):
        self.declare(Fact(recommendation='Warrant menunjukkan kondisi baik. DER menunjukkan tingkat hutang yang rendah. ROE menunjukkan keuntungan yang tinggi.'))


    @Rule(Fact(warrant_valued='good'), Fact(roa_valued='low'), Fact(roe_valued='high'))
    def ipo_rule_3315(self):
        self.declare(Fact(recommendation='Warrant menunjukkan kondisi baik. ROA menunjukkan efisiensi rendah. ROE menunjukkan keuntungan yang tinggi.'))


    @Rule(Fact(net_income_valued='loss'), Fact(per_valued='low'), Fact(der_valued='low'))
    def ipo_rule_3316(self):
        self.declare(Fact(recommendation='Laba bersih menunjukkan kerugian. PER berada di tingkat yang rendah. DER menunjukkan tingkat hutang yang rendah.'))


    @Rule(Fact(net_income_valued='loss'), Fact(per_valued='low'), Fact(roa_valued='low'))
    def ipo_rule_3317(self):
        self.declare(Fact(recommendation='Laba bersih menunjukkan kerugian. PER berada di tingkat yang rendah. ROA menunjukkan efisiensi rendah.'))


    @Rule(Fact(net_income_valued='loss'), Fact(per_valued='low'), Fact(roe_valued='high'))
    def ipo_rule_3318(self):
        self.declare(Fact(recommendation='Laba bersih menunjukkan kerugian. PER berada di tingkat yang rendah. ROE menunjukkan keuntungan yang tinggi.'))


    @Rule(Fact(net_income_valued='loss'), Fact(der_valued='low'), Fact(roa_valued='low'))
    def ipo_rule_3319(self):
        self.declare(Fact(recommendation='Laba bersih menunjukkan kerugian. DER menunjukkan tingkat hutang yang rendah. ROA menunjukkan efisiensi rendah.'))


    @Rule(Fact(net_income_valued='loss'), Fact(der_valued='low'), Fact(roe_valued='high'))
    def ipo_rule_3320(self):
        self.declare(Fact(recommendation='Laba bersih menunjukkan kerugian. DER menunjukkan tingkat hutang yang rendah. ROE menunjukkan keuntungan yang tinggi.'))


    @Rule(Fact(net_income_valued='loss'), Fact(roa_valued='low'), Fact(roe_valued='high'))
    def ipo_rule_3321(self):
        self.declare(Fact(recommendation='Laba bersih menunjukkan kerugian. ROA menunjukkan efisiensi rendah. ROE menunjukkan keuntungan yang tinggi.'))


    @Rule(Fact(per_valued='low'), Fact(der_valued='low'), Fact(roa_valued='low'))
    def ipo_rule_3322(self):
        self.declare(Fact(recommendation='PER berada di tingkat yang rendah. DER menunjukkan tingkat hutang yang rendah. ROA menunjukkan efisiensi rendah.'))


    @Rule(Fact(per_valued='low'), Fact(der_valued='low'), Fact(roe_valued='high'))
    def ipo_rule_3323(self):
        self.declare(Fact(recommendation='PER berada di tingkat yang rendah. DER menunjukkan tingkat hutang yang rendah. ROE menunjukkan keuntungan yang tinggi.'))


    @Rule(Fact(per_valued='low'), Fact(roa_valued='low'), Fact(roe_valued='high'))
    def ipo_rule_3324(self):
        self.declare(Fact(recommendation='PER berada di tingkat yang rendah. ROA menunjukkan efisiensi rendah. ROE menunjukkan keuntungan yang tinggi.'))


    @Rule(Fact(der_valued='low'), Fact(roa_valued='low'), Fact(roe_valued='high'))
    def ipo_rule_3325(self):
        self.declare(Fact(recommendation='DER menunjukkan tingkat hutang yang rendah. ROA menunjukkan efisiensi rendah. ROE menunjukkan keuntungan yang tinggi.'))


    @Rule(Fact(underwriter_valued='bad'), Fact(warrant_valued='good'), Fact(net_income_valued='loss'))
    def ipo_rule_3326(self):
        self.declare(Fact(recommendation='Underwriter berkualitas buruk. Warrant menunjukkan kondisi baik. Laba bersih menunjukkan kerugian.'))


    @Rule(Fact(underwriter_valued='bad'), Fact(warrant_valued='good'), Fact(per_valued='low'))
    def ipo_rule_3327(self):
        self.declare(Fact(recommendation='Underwriter berkualitas buruk. Warrant menunjukkan kondisi baik. PER berada di tingkat yang rendah.'))


    @Rule(Fact(underwriter_valued='bad'), Fact(warrant_valued='good'), Fact(der_valued='low'))
    def ipo_rule_3328(self):
        self.declare(Fact(recommendation='Underwriter berkualitas buruk. Warrant menunjukkan kondisi baik. DER menunjukkan tingkat hutang yang rendah.'))


    @Rule(Fact(underwriter_valued='bad'), Fact(warrant_valued='good'), Fact(roa_valued='low'))
    def ipo_rule_3329(self):
        self.declare(Fact(recommendation='Underwriter berkualitas buruk. Warrant menunjukkan kondisi baik. ROA menunjukkan efisiensi rendah.'))


    @Rule(Fact(underwriter_valued='bad'), Fact(warrant_valued='good'), Fact(roe_valued='low'))
    def ipo_rule_3330(self):
        self.declare(Fact(recommendation='Underwriter berkualitas buruk. Warrant menunjukkan kondisi baik. ROE menunjukkan keuntungan yang rendah.'))


    @Rule(Fact(underwriter_valued='bad'), Fact(net_income_valued='loss'), Fact(per_valued='low'))
    def ipo_rule_3331(self):
        self.declare(Fact(recommendation='Underwriter berkualitas buruk. Laba bersih menunjukkan kerugian. PER berada di tingkat yang rendah.'))


    @Rule(Fact(underwriter_valued='bad'), Fact(net_income_valued='loss'), Fact(der_valued='low'))
    def ipo_rule_3332(self):
        self.declare(Fact(recommendation='Underwriter berkualitas buruk. Laba bersih menunjukkan kerugian. DER menunjukkan tingkat hutang yang rendah.'))


    @Rule(Fact(underwriter_valued='bad'), Fact(net_income_valued='loss'), Fact(roa_valued='low'))
    def ipo_rule_3333(self):
        self.declare(Fact(recommendation='Underwriter berkualitas buruk. Laba bersih menunjukkan kerugian. ROA menunjukkan efisiensi rendah.'))


    @Rule(Fact(underwriter_valued='bad'), Fact(net_income_valued='loss'), Fact(roe_valued='low'))
    def ipo_rule_3334(self):
        self.declare(Fact(recommendation='Underwriter berkualitas buruk. Laba bersih menunjukkan kerugian. ROE menunjukkan keuntungan yang rendah.'))


    @Rule(Fact(underwriter_valued='bad'), Fact(per_valued='low'), Fact(der_valued='low'))
    def ipo_rule_3335(self):
        self.declare(Fact(recommendation='Underwriter berkualitas buruk. PER berada di tingkat yang rendah. DER menunjukkan tingkat hutang yang rendah.'))


    @Rule(Fact(underwriter_valued='bad'), Fact(per_valued='low'), Fact(roa_valued='low'))
    def ipo_rule_3336(self):
        self.declare(Fact(recommendation='Underwriter berkualitas buruk. PER berada di tingkat yang rendah. ROA menunjukkan efisiensi rendah.'))


    @Rule(Fact(underwriter_valued='bad'), Fact(per_valued='low'), Fact(roe_valued='low'))
    def ipo_rule_3337(self):
        self.declare(Fact(recommendation='Underwriter berkualitas buruk. PER berada di tingkat yang rendah. ROE menunjukkan keuntungan yang rendah.'))


    @Rule(Fact(underwriter_valued='bad'), Fact(der_valued='low'), Fact(roa_valued='low'))
    def ipo_rule_3338(self):
        self.declare(Fact(recommendation='Underwriter berkualitas buruk. DER menunjukkan tingkat hutang yang rendah. ROA menunjukkan efisiensi rendah.'))


    @Rule(Fact(underwriter_valued='bad'), Fact(der_valued='low'), Fact(roe_valued='low'))
    def ipo_rule_3339(self):
        self.declare(Fact(recommendation='Underwriter berkualitas buruk. DER menunjukkan tingkat hutang yang rendah. ROE menunjukkan keuntungan yang rendah.'))


    @Rule(Fact(underwriter_valued='bad'), Fact(roa_valued='low'), Fact(roe_valued='low'))
    def ipo_rule_3340(self):
        self.declare(Fact(recommendation='Underwriter berkualitas buruk. ROA menunjukkan efisiensi rendah. ROE menunjukkan keuntungan yang rendah.'))


    @Rule(Fact(warrant_valued='good'), Fact(net_income_valued='loss'), Fact(per_valued='low'))
    def ipo_rule_3341(self):
        self.declare(Fact(recommendation='Warrant menunjukkan kondisi baik. Laba bersih menunjukkan kerugian. PER berada di tingkat yang rendah.'))


    @Rule(Fact(warrant_valued='good'), Fact(net_income_valued='loss'), Fact(der_valued='low'))
    def ipo_rule_3342(self):
        self.declare(Fact(recommendation='Warrant menunjukkan kondisi baik. Laba bersih menunjukkan kerugian. DER menunjukkan tingkat hutang yang rendah.'))


    @Rule(Fact(warrant_valued='good'), Fact(net_income_valued='loss'), Fact(roa_valued='low'))
    def ipo_rule_3343(self):
        self.declare(Fact(recommendation='Warrant menunjukkan kondisi baik. Laba bersih menunjukkan kerugian. ROA menunjukkan efisiensi rendah.'))


    @Rule(Fact(warrant_valued='good'), Fact(net_income_valued='loss'), Fact(roe_valued='low'))
    def ipo_rule_3344(self):
        self.declare(Fact(recommendation='Warrant menunjukkan kondisi baik. Laba bersih menunjukkan kerugian. ROE menunjukkan keuntungan yang rendah.'))


    @Rule(Fact(warrant_valued='good'), Fact(per_valued='low'), Fact(der_valued='low'))
    def ipo_rule_3345(self):
        self.declare(Fact(recommendation='Warrant menunjukkan kondisi baik. PER berada di tingkat yang rendah. DER menunjukkan tingkat hutang yang rendah.'))


    @Rule(Fact(warrant_valued='good'), Fact(per_valued='low'), Fact(roa_valued='low'))
    def ipo_rule_3346(self):
        self.declare(Fact(recommendation='Warrant menunjukkan kondisi baik. PER berada di tingkat yang rendah. ROA menunjukkan efisiensi rendah.'))


    @Rule(Fact(warrant_valued='good'), Fact(per_valued='low'), Fact(roe_valued='low'))
    def ipo_rule_3347(self):
        self.declare(Fact(recommendation='Warrant menunjukkan kondisi baik. PER berada di tingkat yang rendah. ROE menunjukkan keuntungan yang rendah.'))


    @Rule(Fact(warrant_valued='good'), Fact(der_valued='low'), Fact(roa_valued='low'))
    def ipo_rule_3348(self):
        self.declare(Fact(recommendation='Warrant menunjukkan kondisi baik. DER menunjukkan tingkat hutang yang rendah. ROA menunjukkan efisiensi rendah.'))


    @Rule(Fact(warrant_valued='good'), Fact(der_valued='low'), Fact(roe_valued='low'))
    def ipo_rule_3349(self):
        self.declare(Fact(recommendation='Warrant menunjukkan kondisi baik. DER menunjukkan tingkat hutang yang rendah. ROE menunjukkan keuntungan yang rendah.'))


    @Rule(Fact(warrant_valued='good'), Fact(roa_valued='low'), Fact(roe_valued='low'))
    def ipo_rule_3350(self):
        self.declare(Fact(recommendation='Warrant menunjukkan kondisi baik. ROA menunjukkan efisiensi rendah. ROE menunjukkan keuntungan yang rendah.'))


    @Rule(Fact(net_income_valued='loss'), Fact(per_valued='low'), Fact(der_valued='low'))
    def ipo_rule_3351(self):
        self.declare(Fact(recommendation='Laba bersih menunjukkan kerugian. PER berada di tingkat yang rendah. DER menunjukkan tingkat hutang yang rendah.'))


    @Rule(Fact(net_income_valued='loss'), Fact(per_valued='low'), Fact(roa_valued='low'))
    def ipo_rule_3352(self):
        self.declare(Fact(recommendation='Laba bersih menunjukkan kerugian. PER berada di tingkat yang rendah. ROA menunjukkan efisiensi rendah.'))


    @Rule(Fact(net_income_valued='loss'), Fact(per_valued='low'), Fact(roe_valued='low'))
    def ipo_rule_3353(self):
        self.declare(Fact(recommendation='Laba bersih menunjukkan kerugian. PER berada di tingkat yang rendah. ROE menunjukkan keuntungan yang rendah.'))


    @Rule(Fact(net_income_valued='loss'), Fact(der_valued='low'), Fact(roa_valued='low'))
    def ipo_rule_3354(self):
        self.declare(Fact(recommendation='Laba bersih menunjukkan kerugian. DER menunjukkan tingkat hutang yang rendah. ROA menunjukkan efisiensi rendah.'))


    @Rule(Fact(net_income_valued='loss'), Fact(der_valued='low'), Fact(roe_valued='low'))
    def ipo_rule_3355(self):
        self.declare(Fact(recommendation='Laba bersih menunjukkan kerugian. DER menunjukkan tingkat hutang yang rendah. ROE menunjukkan keuntungan yang rendah.'))


    @Rule(Fact(net_income_valued='loss'), Fact(roa_valued='low'), Fact(roe_valued='low'))
    def ipo_rule_3356(self):
        self.declare(Fact(recommendation='Laba bersih menunjukkan kerugian. ROA menunjukkan efisiensi rendah. ROE menunjukkan keuntungan yang rendah.'))


    @Rule(Fact(per_valued='low'), Fact(der_valued='low'), Fact(roa_valued='low'))
    def ipo_rule_3357(self):
        self.declare(Fact(recommendation='PER berada di tingkat yang rendah. DER menunjukkan tingkat hutang yang rendah. ROA menunjukkan efisiensi rendah.'))


    @Rule(Fact(per_valued='low'), Fact(der_valued='low'), Fact(roe_valued='low'))
    def ipo_rule_3358(self):
        self.declare(Fact(recommendation='PER berada di tingkat yang rendah. DER menunjukkan tingkat hutang yang rendah. ROE menunjukkan keuntungan yang rendah.'))


    @Rule(Fact(per_valued='low'), Fact(roa_valued='low'), Fact(roe_valued='low'))
    def ipo_rule_3359(self):
        self.declare(Fact(recommendation='PER berada di tingkat yang rendah. ROA menunjukkan efisiensi rendah. ROE menunjukkan keuntungan yang rendah.'))


    @Rule(Fact(der_valued='low'), Fact(roa_valued='low'), Fact(roe_valued='low'))
    def ipo_rule_3360(self):
        self.declare(Fact(recommendation='DER menunjukkan tingkat hutang yang rendah. ROA menunjukkan efisiensi rendah. ROE menunjukkan keuntungan yang rendah.'))


    @Rule(Fact(underwriter_valued='bad'), Fact(warrant_valued='bad'), Fact(net_income_valued='profit'))
    def ipo_rule_3361(self):
        self.declare(Fact(recommendation='Underwriter berkualitas buruk. Warrant menunjukkan kondisi buruk. Laba bersih menunjukkan keuntungan.'))


    @Rule(Fact(underwriter_valued='bad'), Fact(warrant_valued='bad'), Fact(per_valued='high'))
    def ipo_rule_3362(self):
        self.declare(Fact(recommendation='Underwriter berkualitas buruk. Warrant menunjukkan kondisi buruk. PER berada di tingkat yang tinggi.'))


    @Rule(Fact(underwriter_valued='bad'), Fact(warrant_valued='bad'), Fact(der_valued='high'))
    def ipo_rule_3363(self):
        self.declare(Fact(recommendation='Underwriter berkualitas buruk. Warrant menunjukkan kondisi buruk. DER menunjukkan tingkat hutang yang tinggi.'))


    @Rule(Fact(underwriter_valued='bad'), Fact(warrant_valued='bad'), Fact(roa_valued='high'))
    def ipo_rule_3364(self):
        self.declare(Fact(recommendation='Underwriter berkualitas buruk. Warrant menunjukkan kondisi buruk. ROA menunjukkan efisiensi tinggi.'))


    @Rule(Fact(underwriter_valued='bad'), Fact(warrant_valued='bad'), Fact(roe_valued='high'))
    def ipo_rule_3365(self):
        self.declare(Fact(recommendation='Underwriter berkualitas buruk. Warrant menunjukkan kondisi buruk. ROE menunjukkan keuntungan yang tinggi.'))


    @Rule(Fact(underwriter_valued='bad'), Fact(net_income_valued='profit'), Fact(per_valued='high'))
    def ipo_rule_3366(self):
        self.declare(Fact(recommendation='Underwriter berkualitas buruk. Laba bersih menunjukkan keuntungan. PER berada di tingkat yang tinggi.'))


    @Rule(Fact(underwriter_valued='bad'), Fact(net_income_valued='profit'), Fact(der_valued='high'))
    def ipo_rule_3367(self):
        self.declare(Fact(recommendation='Underwriter berkualitas buruk. Laba bersih menunjukkan keuntungan. DER menunjukkan tingkat hutang yang tinggi.'))


    @Rule(Fact(underwriter_valued='bad'), Fact(net_income_valued='profit'), Fact(roa_valued='high'))
    def ipo_rule_3368(self):
        self.declare(Fact(recommendation='Underwriter berkualitas buruk. Laba bersih menunjukkan keuntungan. ROA menunjukkan efisiensi tinggi.'))


    @Rule(Fact(underwriter_valued='bad'), Fact(net_income_valued='profit'), Fact(roe_valued='high'))
    def ipo_rule_3369(self):
        self.declare(Fact(recommendation='Underwriter berkualitas buruk. Laba bersih menunjukkan keuntungan. ROE menunjukkan keuntungan yang tinggi.'))


    @Rule(Fact(underwriter_valued='bad'), Fact(per_valued='high'), Fact(der_valued='high'))
    def ipo_rule_3370(self):
        self.declare(Fact(recommendation='Underwriter berkualitas buruk. PER berada di tingkat yang tinggi. DER menunjukkan tingkat hutang yang tinggi.'))


    @Rule(Fact(underwriter_valued='bad'), Fact(per_valued='high'), Fact(roa_valued='high'))
    def ipo_rule_3371(self):
        self.declare(Fact(recommendation='Underwriter berkualitas buruk. PER berada di tingkat yang tinggi. ROA menunjukkan efisiensi tinggi.'))


    @Rule(Fact(underwriter_valued='bad'), Fact(per_valued='high'), Fact(roe_valued='high'))
    def ipo_rule_3372(self):
        self.declare(Fact(recommendation='Underwriter berkualitas buruk. PER berada di tingkat yang tinggi. ROE menunjukkan keuntungan yang tinggi.'))


    @Rule(Fact(underwriter_valued='bad'), Fact(der_valued='high'), Fact(roa_valued='high'))
    def ipo_rule_3373(self):
        self.declare(Fact(recommendation='Underwriter berkualitas buruk. DER menunjukkan tingkat hutang yang tinggi. ROA menunjukkan efisiensi tinggi.'))


    @Rule(Fact(underwriter_valued='bad'), Fact(der_valued='high'), Fact(roe_valued='high'))
    def ipo_rule_3374(self):
        self.declare(Fact(recommendation='Underwriter berkualitas buruk. DER menunjukkan tingkat hutang yang tinggi. ROE menunjukkan keuntungan yang tinggi.'))


    @Rule(Fact(underwriter_valued='bad'), Fact(roa_valued='high'), Fact(roe_valued='high'))
    def ipo_rule_3375(self):
        self.declare(Fact(recommendation='Underwriter berkualitas buruk. ROA menunjukkan efisiensi tinggi. ROE menunjukkan keuntungan yang tinggi.'))


    @Rule(Fact(warrant_valued='bad'), Fact(net_income_valued='profit'), Fact(per_valued='high'))
    def ipo_rule_3376(self):
        self.declare(Fact(recommendation='Warrant menunjukkan kondisi buruk. Laba bersih menunjukkan keuntungan. PER berada di tingkat yang tinggi.'))


    @Rule(Fact(warrant_valued='bad'), Fact(net_income_valued='profit'), Fact(der_valued='high'))
    def ipo_rule_3377(self):
        self.declare(Fact(recommendation='Warrant menunjukkan kondisi buruk. Laba bersih menunjukkan keuntungan. DER menunjukkan tingkat hutang yang tinggi.'))


    @Rule(Fact(warrant_valued='bad'), Fact(net_income_valued='profit'), Fact(roa_valued='high'))
    def ipo_rule_3378(self):
        self.declare(Fact(recommendation='Warrant menunjukkan kondisi buruk. Laba bersih menunjukkan keuntungan. ROA menunjukkan efisiensi tinggi.'))


    @Rule(Fact(warrant_valued='bad'), Fact(net_income_valued='profit'), Fact(roe_valued='high'))
    def ipo_rule_3379(self):
        self.declare(Fact(recommendation='Warrant menunjukkan kondisi buruk. Laba bersih menunjukkan keuntungan. ROE menunjukkan keuntungan yang tinggi.'))


    @Rule(Fact(warrant_valued='bad'), Fact(per_valued='high'), Fact(der_valued='high'))
    def ipo_rule_3380(self):
        self.declare(Fact(recommendation='Warrant menunjukkan kondisi buruk. PER berada di tingkat yang tinggi. DER menunjukkan tingkat hutang yang tinggi.'))


    @Rule(Fact(warrant_valued='bad'), Fact(per_valued='high'), Fact(roa_valued='high'))
    def ipo_rule_3381(self):
        self.declare(Fact(recommendation='Warrant menunjukkan kondisi buruk. PER berada di tingkat yang tinggi. ROA menunjukkan efisiensi tinggi.'))


    @Rule(Fact(warrant_valued='bad'), Fact(per_valued='high'), Fact(roe_valued='high'))
    def ipo_rule_3382(self):
        self.declare(Fact(recommendation='Warrant menunjukkan kondisi buruk. PER berada di tingkat yang tinggi. ROE menunjukkan keuntungan yang tinggi.'))


    @Rule(Fact(warrant_valued='bad'), Fact(der_valued='high'), Fact(roa_valued='high'))
    def ipo_rule_3383(self):
        self.declare(Fact(recommendation='Warrant menunjukkan kondisi buruk. DER menunjukkan tingkat hutang yang tinggi. ROA menunjukkan efisiensi tinggi.'))


    @Rule(Fact(warrant_valued='bad'), Fact(der_valued='high'), Fact(roe_valued='high'))
    def ipo_rule_3384(self):
        self.declare(Fact(recommendation='Warrant menunjukkan kondisi buruk. DER menunjukkan tingkat hutang yang tinggi. ROE menunjukkan keuntungan yang tinggi.'))


    @Rule(Fact(warrant_valued='bad'), Fact(roa_valued='high'), Fact(roe_valued='high'))
    def ipo_rule_3385(self):
        self.declare(Fact(recommendation='Warrant menunjukkan kondisi buruk. ROA menunjukkan efisiensi tinggi. ROE menunjukkan keuntungan yang tinggi.'))


    @Rule(Fact(net_income_valued='profit'), Fact(per_valued='high'), Fact(der_valued='high'))
    def ipo_rule_3386(self):
        self.declare(Fact(recommendation='Laba bersih menunjukkan keuntungan. PER berada di tingkat yang tinggi. DER menunjukkan tingkat hutang yang tinggi.'))


    @Rule(Fact(net_income_valued='profit'), Fact(per_valued='high'), Fact(roa_valued='high'))
    def ipo_rule_3387(self):
        self.declare(Fact(recommendation='Laba bersih menunjukkan keuntungan. PER berada di tingkat yang tinggi. ROA menunjukkan efisiensi tinggi.'))


    @Rule(Fact(net_income_valued='profit'), Fact(per_valued='high'), Fact(roe_valued='high'))
    def ipo_rule_3388(self):
        self.declare(Fact(recommendation='Laba bersih menunjukkan keuntungan. PER berada di tingkat yang tinggi. ROE menunjukkan keuntungan yang tinggi.'))


    @Rule(Fact(net_income_valued='profit'), Fact(der_valued='high'), Fact(roa_valued='high'))
    def ipo_rule_3389(self):
        self.declare(Fact(recommendation='Laba bersih menunjukkan keuntungan. DER menunjukkan tingkat hutang yang tinggi. ROA menunjukkan efisiensi tinggi.'))


    @Rule(Fact(net_income_valued='profit'), Fact(der_valued='high'), Fact(roe_valued='high'))
    def ipo_rule_3390(self):
        self.declare(Fact(recommendation='Laba bersih menunjukkan keuntungan. DER menunjukkan tingkat hutang yang tinggi. ROE menunjukkan keuntungan yang tinggi.'))


    @Rule(Fact(net_income_valued='profit'), Fact(roa_valued='high'), Fact(roe_valued='high'))
    def ipo_rule_3391(self):
        self.declare(Fact(recommendation='Laba bersih menunjukkan keuntungan. ROA menunjukkan efisiensi tinggi. ROE menunjukkan keuntungan yang tinggi.'))


    @Rule(Fact(per_valued='high'), Fact(der_valued='high'), Fact(roa_valued='high'))
    def ipo_rule_3392(self):
        self.declare(Fact(recommendation='PER berada di tingkat yang tinggi. DER menunjukkan tingkat hutang yang tinggi. ROA menunjukkan efisiensi tinggi.'))


    @Rule(Fact(per_valued='high'), Fact(der_valued='high'), Fact(roe_valued='high'))
    def ipo_rule_3393(self):
        self.declare(Fact(recommendation='PER berada di tingkat yang tinggi. DER menunjukkan tingkat hutang yang tinggi. ROE menunjukkan keuntungan yang tinggi.'))


    @Rule(Fact(per_valued='high'), Fact(roa_valued='high'), Fact(roe_valued='high'))
    def ipo_rule_3394(self):
        self.declare(Fact(recommendation='PER berada di tingkat yang tinggi. ROA menunjukkan efisiensi tinggi. ROE menunjukkan keuntungan yang tinggi.'))


    @Rule(Fact(der_valued='high'), Fact(roa_valued='high'), Fact(roe_valued='high'))
    def ipo_rule_3395(self):
        self.declare(Fact(recommendation='DER menunjukkan tingkat hutang yang tinggi. ROA menunjukkan efisiensi tinggi. ROE menunjukkan keuntungan yang tinggi.'))


    @Rule(Fact(underwriter_valued='bad'), Fact(warrant_valued='bad'), Fact(net_income_valued='profit'))
    def ipo_rule_3396(self):
        self.declare(Fact(recommendation='Underwriter berkualitas buruk. Warrant menunjukkan kondisi buruk. Laba bersih menunjukkan keuntungan.'))


    @Rule(Fact(underwriter_valued='bad'), Fact(warrant_valued='bad'), Fact(per_valued='high'))
    def ipo_rule_3397(self):
        self.declare(Fact(recommendation='Underwriter berkualitas buruk. Warrant menunjukkan kondisi buruk. PER berada di tingkat yang tinggi.'))


    @Rule(Fact(underwriter_valued='bad'), Fact(warrant_valued='bad'), Fact(der_valued='high'))
    def ipo_rule_3398(self):
        self.declare(Fact(recommendation='Underwriter berkualitas buruk. Warrant menunjukkan kondisi buruk. DER menunjukkan tingkat hutang yang tinggi.'))


    @Rule(Fact(underwriter_valued='bad'), Fact(warrant_valued='bad'), Fact(roa_valued='high'))
    def ipo_rule_3399(self):
        self.declare(Fact(recommendation='Underwriter berkualitas buruk. Warrant menunjukkan kondisi buruk. ROA menunjukkan efisiensi tinggi.'))


    @Rule(Fact(underwriter_valued='bad'), Fact(warrant_valued='bad'), Fact(roe_valued='low'))
    def ipo_rule_3400(self):
        self.declare(Fact(recommendation='Underwriter berkualitas buruk. Warrant menunjukkan kondisi buruk. ROE menunjukkan keuntungan yang rendah.'))


    @Rule(Fact(underwriter_valued='bad'), Fact(net_income_valued='profit'), Fact(per_valued='high'))
    def ipo_rule_3401(self):
        self.declare(Fact(recommendation='Underwriter berkualitas buruk. Laba bersih menunjukkan keuntungan. PER berada di tingkat yang tinggi.'))


    @Rule(Fact(underwriter_valued='bad'), Fact(net_income_valued='profit'), Fact(der_valued='high'))
    def ipo_rule_3402(self):
        self.declare(Fact(recommendation='Underwriter berkualitas buruk. Laba bersih menunjukkan keuntungan. DER menunjukkan tingkat hutang yang tinggi.'))


    @Rule(Fact(underwriter_valued='bad'), Fact(net_income_valued='profit'), Fact(roa_valued='high'))
    def ipo_rule_3403(self):
        self.declare(Fact(recommendation='Underwriter berkualitas buruk. Laba bersih menunjukkan keuntungan. ROA menunjukkan efisiensi tinggi.'))


    @Rule(Fact(underwriter_valued='bad'), Fact(net_income_valued='profit'), Fact(roe_valued='low'))
    def ipo_rule_3404(self):
        self.declare(Fact(recommendation='Underwriter berkualitas buruk. Laba bersih menunjukkan keuntungan. ROE menunjukkan keuntungan yang rendah.'))


    @Rule(Fact(underwriter_valued='bad'), Fact(per_valued='high'), Fact(der_valued='high'))
    def ipo_rule_3405(self):
        self.declare(Fact(recommendation='Underwriter berkualitas buruk. PER berada di tingkat yang tinggi. DER menunjukkan tingkat hutang yang tinggi.'))


    @Rule(Fact(underwriter_valued='bad'), Fact(per_valued='high'), Fact(roa_valued='high'))
    def ipo_rule_3406(self):
        self.declare(Fact(recommendation='Underwriter berkualitas buruk. PER berada di tingkat yang tinggi. ROA menunjukkan efisiensi tinggi.'))


    @Rule(Fact(underwriter_valued='bad'), Fact(per_valued='high'), Fact(roe_valued='low'))
    def ipo_rule_3407(self):
        self.declare(Fact(recommendation='Underwriter berkualitas buruk. PER berada di tingkat yang tinggi. ROE menunjukkan keuntungan yang rendah.'))


    @Rule(Fact(underwriter_valued='bad'), Fact(der_valued='high'), Fact(roa_valued='high'))
    def ipo_rule_3408(self):
        self.declare(Fact(recommendation='Underwriter berkualitas buruk. DER menunjukkan tingkat hutang yang tinggi. ROA menunjukkan efisiensi tinggi.'))


    @Rule(Fact(underwriter_valued='bad'), Fact(der_valued='high'), Fact(roe_valued='low'))
    def ipo_rule_3409(self):
        self.declare(Fact(recommendation='Underwriter berkualitas buruk. DER menunjukkan tingkat hutang yang tinggi. ROE menunjukkan keuntungan yang rendah.'))


    @Rule(Fact(underwriter_valued='bad'), Fact(roa_valued='high'), Fact(roe_valued='low'))
    def ipo_rule_3410(self):
        self.declare(Fact(recommendation='Underwriter berkualitas buruk. ROA menunjukkan efisiensi tinggi. ROE menunjukkan keuntungan yang rendah.'))


    @Rule(Fact(warrant_valued='bad'), Fact(net_income_valued='profit'), Fact(per_valued='high'))
    def ipo_rule_3411(self):
        self.declare(Fact(recommendation='Warrant menunjukkan kondisi buruk. Laba bersih menunjukkan keuntungan. PER berada di tingkat yang tinggi.'))


    @Rule(Fact(warrant_valued='bad'), Fact(net_income_valued='profit'), Fact(der_valued='high'))
    def ipo_rule_3412(self):
        self.declare(Fact(recommendation='Warrant menunjukkan kondisi buruk. Laba bersih menunjukkan keuntungan. DER menunjukkan tingkat hutang yang tinggi.'))


    @Rule(Fact(warrant_valued='bad'), Fact(net_income_valued='profit'), Fact(roa_valued='high'))
    def ipo_rule_3413(self):
        self.declare(Fact(recommendation='Warrant menunjukkan kondisi buruk. Laba bersih menunjukkan keuntungan. ROA menunjukkan efisiensi tinggi.'))


    @Rule(Fact(warrant_valued='bad'), Fact(net_income_valued='profit'), Fact(roe_valued='low'))
    def ipo_rule_3414(self):
        self.declare(Fact(recommendation='Warrant menunjukkan kondisi buruk. Laba bersih menunjukkan keuntungan. ROE menunjukkan keuntungan yang rendah.'))


    @Rule(Fact(warrant_valued='bad'), Fact(per_valued='high'), Fact(der_valued='high'))
    def ipo_rule_3415(self):
        self.declare(Fact(recommendation='Warrant menunjukkan kondisi buruk. PER berada di tingkat yang tinggi. DER menunjukkan tingkat hutang yang tinggi.'))


    @Rule(Fact(warrant_valued='bad'), Fact(per_valued='high'), Fact(roa_valued='high'))
    def ipo_rule_3416(self):
        self.declare(Fact(recommendation='Warrant menunjukkan kondisi buruk. PER berada di tingkat yang tinggi. ROA menunjukkan efisiensi tinggi.'))


    @Rule(Fact(warrant_valued='bad'), Fact(per_valued='high'), Fact(roe_valued='low'))
    def ipo_rule_3417(self):
        self.declare(Fact(recommendation='Warrant menunjukkan kondisi buruk. PER berada di tingkat yang tinggi. ROE menunjukkan keuntungan yang rendah.'))


    @Rule(Fact(warrant_valued='bad'), Fact(der_valued='high'), Fact(roa_valued='high'))
    def ipo_rule_3418(self):
        self.declare(Fact(recommendation='Warrant menunjukkan kondisi buruk. DER menunjukkan tingkat hutang yang tinggi. ROA menunjukkan efisiensi tinggi.'))


    @Rule(Fact(warrant_valued='bad'), Fact(der_valued='high'), Fact(roe_valued='low'))
    def ipo_rule_3419(self):
        self.declare(Fact(recommendation='Warrant menunjukkan kondisi buruk. DER menunjukkan tingkat hutang yang tinggi. ROE menunjukkan keuntungan yang rendah.'))


    @Rule(Fact(warrant_valued='bad'), Fact(roa_valued='high'), Fact(roe_valued='low'))
    def ipo_rule_3420(self):
        self.declare(Fact(recommendation='Warrant menunjukkan kondisi buruk. ROA menunjukkan efisiensi tinggi. ROE menunjukkan keuntungan yang rendah.'))


    @Rule(Fact(net_income_valued='profit'), Fact(per_valued='high'), Fact(der_valued='high'))
    def ipo_rule_3421(self):
        self.declare(Fact(recommendation='Laba bersih menunjukkan keuntungan. PER berada di tingkat yang tinggi. DER menunjukkan tingkat hutang yang tinggi.'))


    @Rule(Fact(net_income_valued='profit'), Fact(per_valued='high'), Fact(roa_valued='high'))
    def ipo_rule_3422(self):
        self.declare(Fact(recommendation='Laba bersih menunjukkan keuntungan. PER berada di tingkat yang tinggi. ROA menunjukkan efisiensi tinggi.'))


    @Rule(Fact(net_income_valued='profit'), Fact(per_valued='high'), Fact(roe_valued='low'))
    def ipo_rule_3423(self):
        self.declare(Fact(recommendation='Laba bersih menunjukkan keuntungan. PER berada di tingkat yang tinggi. ROE menunjukkan keuntungan yang rendah.'))


    @Rule(Fact(net_income_valued='profit'), Fact(der_valued='high'), Fact(roa_valued='high'))
    def ipo_rule_3424(self):
        self.declare(Fact(recommendation='Laba bersih menunjukkan keuntungan. DER menunjukkan tingkat hutang yang tinggi. ROA menunjukkan efisiensi tinggi.'))


    @Rule(Fact(net_income_valued='profit'), Fact(der_valued='high'), Fact(roe_valued='low'))
    def ipo_rule_3425(self):
        self.declare(Fact(recommendation='Laba bersih menunjukkan keuntungan. DER menunjukkan tingkat hutang yang tinggi. ROE menunjukkan keuntungan yang rendah.'))


    @Rule(Fact(net_income_valued='profit'), Fact(roa_valued='high'), Fact(roe_valued='low'))
    def ipo_rule_3426(self):
        self.declare(Fact(recommendation='Laba bersih menunjukkan keuntungan. ROA menunjukkan efisiensi tinggi. ROE menunjukkan keuntungan yang rendah.'))


    @Rule(Fact(per_valued='high'), Fact(der_valued='high'), Fact(roa_valued='high'))
    def ipo_rule_3427(self):
        self.declare(Fact(recommendation='PER berada di tingkat yang tinggi. DER menunjukkan tingkat hutang yang tinggi. ROA menunjukkan efisiensi tinggi.'))


    @Rule(Fact(per_valued='high'), Fact(der_valued='high'), Fact(roe_valued='low'))
    def ipo_rule_3428(self):
        self.declare(Fact(recommendation='PER berada di tingkat yang tinggi. DER menunjukkan tingkat hutang yang tinggi. ROE menunjukkan keuntungan yang rendah.'))


    @Rule(Fact(per_valued='high'), Fact(roa_valued='high'), Fact(roe_valued='low'))
    def ipo_rule_3429(self):
        self.declare(Fact(recommendation='PER berada di tingkat yang tinggi. ROA menunjukkan efisiensi tinggi. ROE menunjukkan keuntungan yang rendah.'))


    @Rule(Fact(der_valued='high'), Fact(roa_valued='high'), Fact(roe_valued='low'))
    def ipo_rule_3430(self):
        self.declare(Fact(recommendation='DER menunjukkan tingkat hutang yang tinggi. ROA menunjukkan efisiensi tinggi. ROE menunjukkan keuntungan yang rendah.'))


    @Rule(Fact(underwriter_valued='bad'), Fact(warrant_valued='bad'), Fact(net_income_valued='profit'))
    def ipo_rule_3431(self):
        self.declare(Fact(recommendation='Underwriter berkualitas buruk. Warrant menunjukkan kondisi buruk. Laba bersih menunjukkan keuntungan.'))


    @Rule(Fact(underwriter_valued='bad'), Fact(warrant_valued='bad'), Fact(per_valued='high'))
    def ipo_rule_3432(self):
        self.declare(Fact(recommendation='Underwriter berkualitas buruk. Warrant menunjukkan kondisi buruk. PER berada di tingkat yang tinggi.'))


    @Rule(Fact(underwriter_valued='bad'), Fact(warrant_valued='bad'), Fact(der_valued='high'))
    def ipo_rule_3433(self):
        self.declare(Fact(recommendation='Underwriter berkualitas buruk. Warrant menunjukkan kondisi buruk. DER menunjukkan tingkat hutang yang tinggi.'))


    @Rule(Fact(underwriter_valued='bad'), Fact(warrant_valued='bad'), Fact(roa_valued='low'))
    def ipo_rule_3434(self):
        self.declare(Fact(recommendation='Underwriter berkualitas buruk. Warrant menunjukkan kondisi buruk. ROA menunjukkan efisiensi rendah.'))


    @Rule(Fact(underwriter_valued='bad'), Fact(warrant_valued='bad'), Fact(roe_valued='high'))
    def ipo_rule_3435(self):
        self.declare(Fact(recommendation='Underwriter berkualitas buruk. Warrant menunjukkan kondisi buruk. ROE menunjukkan keuntungan yang tinggi.'))


    @Rule(Fact(underwriter_valued='bad'), Fact(net_income_valued='profit'), Fact(per_valued='high'))
    def ipo_rule_3436(self):
        self.declare(Fact(recommendation='Underwriter berkualitas buruk. Laba bersih menunjukkan keuntungan. PER berada di tingkat yang tinggi.'))


    @Rule(Fact(underwriter_valued='bad'), Fact(net_income_valued='profit'), Fact(der_valued='high'))
    def ipo_rule_3437(self):
        self.declare(Fact(recommendation='Underwriter berkualitas buruk. Laba bersih menunjukkan keuntungan. DER menunjukkan tingkat hutang yang tinggi.'))


    @Rule(Fact(underwriter_valued='bad'), Fact(net_income_valued='profit'), Fact(roa_valued='low'))
    def ipo_rule_3438(self):
        self.declare(Fact(recommendation='Underwriter berkualitas buruk. Laba bersih menunjukkan keuntungan. ROA menunjukkan efisiensi rendah.'))


    @Rule(Fact(underwriter_valued='bad'), Fact(net_income_valued='profit'), Fact(roe_valued='high'))
    def ipo_rule_3439(self):
        self.declare(Fact(recommendation='Underwriter berkualitas buruk. Laba bersih menunjukkan keuntungan. ROE menunjukkan keuntungan yang tinggi.'))


    @Rule(Fact(underwriter_valued='bad'), Fact(per_valued='high'), Fact(der_valued='high'))
    def ipo_rule_3440(self):
        self.declare(Fact(recommendation='Underwriter berkualitas buruk. PER berada di tingkat yang tinggi. DER menunjukkan tingkat hutang yang tinggi.'))


    @Rule(Fact(underwriter_valued='bad'), Fact(per_valued='high'), Fact(roa_valued='low'))
    def ipo_rule_3441(self):
        self.declare(Fact(recommendation='Underwriter berkualitas buruk. PER berada di tingkat yang tinggi. ROA menunjukkan efisiensi rendah.'))


    @Rule(Fact(underwriter_valued='bad'), Fact(per_valued='high'), Fact(roe_valued='high'))
    def ipo_rule_3442(self):
        self.declare(Fact(recommendation='Underwriter berkualitas buruk. PER berada di tingkat yang tinggi. ROE menunjukkan keuntungan yang tinggi.'))


    @Rule(Fact(underwriter_valued='bad'), Fact(der_valued='high'), Fact(roa_valued='low'))
    def ipo_rule_3443(self):
        self.declare(Fact(recommendation='Underwriter berkualitas buruk. DER menunjukkan tingkat hutang yang tinggi. ROA menunjukkan efisiensi rendah.'))


    @Rule(Fact(underwriter_valued='bad'), Fact(der_valued='high'), Fact(roe_valued='high'))
    def ipo_rule_3444(self):
        self.declare(Fact(recommendation='Underwriter berkualitas buruk. DER menunjukkan tingkat hutang yang tinggi. ROE menunjukkan keuntungan yang tinggi.'))


    @Rule(Fact(underwriter_valued='bad'), Fact(roa_valued='low'), Fact(roe_valued='high'))
    def ipo_rule_3445(self):
        self.declare(Fact(recommendation='Underwriter berkualitas buruk. ROA menunjukkan efisiensi rendah. ROE menunjukkan keuntungan yang tinggi.'))


    @Rule(Fact(warrant_valued='bad'), Fact(net_income_valued='profit'), Fact(per_valued='high'))
    def ipo_rule_3446(self):
        self.declare(Fact(recommendation='Warrant menunjukkan kondisi buruk. Laba bersih menunjukkan keuntungan. PER berada di tingkat yang tinggi.'))


    @Rule(Fact(warrant_valued='bad'), Fact(net_income_valued='profit'), Fact(der_valued='high'))
    def ipo_rule_3447(self):
        self.declare(Fact(recommendation='Warrant menunjukkan kondisi buruk. Laba bersih menunjukkan keuntungan. DER menunjukkan tingkat hutang yang tinggi.'))


    @Rule(Fact(warrant_valued='bad'), Fact(net_income_valued='profit'), Fact(roa_valued='low'))
    def ipo_rule_3448(self):
        self.declare(Fact(recommendation='Warrant menunjukkan kondisi buruk. Laba bersih menunjukkan keuntungan. ROA menunjukkan efisiensi rendah.'))


    @Rule(Fact(warrant_valued='bad'), Fact(net_income_valued='profit'), Fact(roe_valued='high'))
    def ipo_rule_3449(self):
        self.declare(Fact(recommendation='Warrant menunjukkan kondisi buruk. Laba bersih menunjukkan keuntungan. ROE menunjukkan keuntungan yang tinggi.'))


    @Rule(Fact(warrant_valued='bad'), Fact(per_valued='high'), Fact(der_valued='high'))
    def ipo_rule_3450(self):
        self.declare(Fact(recommendation='Warrant menunjukkan kondisi buruk. PER berada di tingkat yang tinggi. DER menunjukkan tingkat hutang yang tinggi.'))


    @Rule(Fact(warrant_valued='bad'), Fact(per_valued='high'), Fact(roa_valued='low'))
    def ipo_rule_3451(self):
        self.declare(Fact(recommendation='Warrant menunjukkan kondisi buruk. PER berada di tingkat yang tinggi. ROA menunjukkan efisiensi rendah.'))


    @Rule(Fact(warrant_valued='bad'), Fact(per_valued='high'), Fact(roe_valued='high'))
    def ipo_rule_3452(self):
        self.declare(Fact(recommendation='Warrant menunjukkan kondisi buruk. PER berada di tingkat yang tinggi. ROE menunjukkan keuntungan yang tinggi.'))


    @Rule(Fact(warrant_valued='bad'), Fact(der_valued='high'), Fact(roa_valued='low'))
    def ipo_rule_3453(self):
        self.declare(Fact(recommendation='Warrant menunjukkan kondisi buruk. DER menunjukkan tingkat hutang yang tinggi. ROA menunjukkan efisiensi rendah.'))


    @Rule(Fact(warrant_valued='bad'), Fact(der_valued='high'), Fact(roe_valued='high'))
    def ipo_rule_3454(self):
        self.declare(Fact(recommendation='Warrant menunjukkan kondisi buruk. DER menunjukkan tingkat hutang yang tinggi. ROE menunjukkan keuntungan yang tinggi.'))


    @Rule(Fact(warrant_valued='bad'), Fact(roa_valued='low'), Fact(roe_valued='high'))
    def ipo_rule_3455(self):
        self.declare(Fact(recommendation='Warrant menunjukkan kondisi buruk. ROA menunjukkan efisiensi rendah. ROE menunjukkan keuntungan yang tinggi.'))


    @Rule(Fact(net_income_valued='profit'), Fact(per_valued='high'), Fact(der_valued='high'))
    def ipo_rule_3456(self):
        self.declare(Fact(recommendation='Laba bersih menunjukkan keuntungan. PER berada di tingkat yang tinggi. DER menunjukkan tingkat hutang yang tinggi.'))


    @Rule(Fact(net_income_valued='profit'), Fact(per_valued='high'), Fact(roa_valued='low'))
    def ipo_rule_3457(self):
        self.declare(Fact(recommendation='Laba bersih menunjukkan keuntungan. PER berada di tingkat yang tinggi. ROA menunjukkan efisiensi rendah.'))


    @Rule(Fact(net_income_valued='profit'), Fact(per_valued='high'), Fact(roe_valued='high'))
    def ipo_rule_3458(self):
        self.declare(Fact(recommendation='Laba bersih menunjukkan keuntungan. PER berada di tingkat yang tinggi. ROE menunjukkan keuntungan yang tinggi.'))


    @Rule(Fact(net_income_valued='profit'), Fact(der_valued='high'), Fact(roa_valued='low'))
    def ipo_rule_3459(self):
        self.declare(Fact(recommendation='Laba bersih menunjukkan keuntungan. DER menunjukkan tingkat hutang yang tinggi. ROA menunjukkan efisiensi rendah.'))


    @Rule(Fact(net_income_valued='profit'), Fact(der_valued='high'), Fact(roe_valued='high'))
    def ipo_rule_3460(self):
        self.declare(Fact(recommendation='Laba bersih menunjukkan keuntungan. DER menunjukkan tingkat hutang yang tinggi. ROE menunjukkan keuntungan yang tinggi.'))


    @Rule(Fact(net_income_valued='profit'), Fact(roa_valued='low'), Fact(roe_valued='high'))
    def ipo_rule_3461(self):
        self.declare(Fact(recommendation='Laba bersih menunjukkan keuntungan. ROA menunjukkan efisiensi rendah. ROE menunjukkan keuntungan yang tinggi.'))


    @Rule(Fact(per_valued='high'), Fact(der_valued='high'), Fact(roa_valued='low'))
    def ipo_rule_3462(self):
        self.declare(Fact(recommendation='PER berada di tingkat yang tinggi. DER menunjukkan tingkat hutang yang tinggi. ROA menunjukkan efisiensi rendah.'))


    @Rule(Fact(per_valued='high'), Fact(der_valued='high'), Fact(roe_valued='high'))
    def ipo_rule_3463(self):
        self.declare(Fact(recommendation='PER berada di tingkat yang tinggi. DER menunjukkan tingkat hutang yang tinggi. ROE menunjukkan keuntungan yang tinggi.'))


    @Rule(Fact(per_valued='high'), Fact(roa_valued='low'), Fact(roe_valued='high'))
    def ipo_rule_3464(self):
        self.declare(Fact(recommendation='PER berada di tingkat yang tinggi. ROA menunjukkan efisiensi rendah. ROE menunjukkan keuntungan yang tinggi.'))


    @Rule(Fact(der_valued='high'), Fact(roa_valued='low'), Fact(roe_valued='high'))
    def ipo_rule_3465(self):
        self.declare(Fact(recommendation='DER menunjukkan tingkat hutang yang tinggi. ROA menunjukkan efisiensi rendah. ROE menunjukkan keuntungan yang tinggi.'))


    @Rule(Fact(underwriter_valued='bad'), Fact(warrant_valued='bad'), Fact(net_income_valued='profit'))
    def ipo_rule_3466(self):
        self.declare(Fact(recommendation='Underwriter berkualitas buruk. Warrant menunjukkan kondisi buruk. Laba bersih menunjukkan keuntungan.'))


    @Rule(Fact(underwriter_valued='bad'), Fact(warrant_valued='bad'), Fact(per_valued='high'))
    def ipo_rule_3467(self):
        self.declare(Fact(recommendation='Underwriter berkualitas buruk. Warrant menunjukkan kondisi buruk. PER berada di tingkat yang tinggi.'))


    @Rule(Fact(underwriter_valued='bad'), Fact(warrant_valued='bad'), Fact(der_valued='high'))
    def ipo_rule_3468(self):
        self.declare(Fact(recommendation='Underwriter berkualitas buruk. Warrant menunjukkan kondisi buruk. DER menunjukkan tingkat hutang yang tinggi.'))


    @Rule(Fact(underwriter_valued='bad'), Fact(warrant_valued='bad'), Fact(roa_valued='low'))
    def ipo_rule_3469(self):
        self.declare(Fact(recommendation='Underwriter berkualitas buruk. Warrant menunjukkan kondisi buruk. ROA menunjukkan efisiensi rendah.'))


    @Rule(Fact(underwriter_valued='bad'), Fact(warrant_valued='bad'), Fact(roe_valued='low'))
    def ipo_rule_3470(self):
        self.declare(Fact(recommendation='Underwriter berkualitas buruk. Warrant menunjukkan kondisi buruk. ROE menunjukkan keuntungan yang rendah.'))


    @Rule(Fact(underwriter_valued='bad'), Fact(net_income_valued='profit'), Fact(per_valued='high'))
    def ipo_rule_3471(self):
        self.declare(Fact(recommendation='Underwriter berkualitas buruk. Laba bersih menunjukkan keuntungan. PER berada di tingkat yang tinggi.'))


    @Rule(Fact(underwriter_valued='bad'), Fact(net_income_valued='profit'), Fact(der_valued='high'))
    def ipo_rule_3472(self):
        self.declare(Fact(recommendation='Underwriter berkualitas buruk. Laba bersih menunjukkan keuntungan. DER menunjukkan tingkat hutang yang tinggi.'))


    @Rule(Fact(underwriter_valued='bad'), Fact(net_income_valued='profit'), Fact(roa_valued='low'))
    def ipo_rule_3473(self):
        self.declare(Fact(recommendation='Underwriter berkualitas buruk. Laba bersih menunjukkan keuntungan. ROA menunjukkan efisiensi rendah.'))


    @Rule(Fact(underwriter_valued='bad'), Fact(net_income_valued='profit'), Fact(roe_valued='low'))
    def ipo_rule_3474(self):
        self.declare(Fact(recommendation='Underwriter berkualitas buruk. Laba bersih menunjukkan keuntungan. ROE menunjukkan keuntungan yang rendah.'))


    @Rule(Fact(underwriter_valued='bad'), Fact(per_valued='high'), Fact(der_valued='high'))
    def ipo_rule_3475(self):
        self.declare(Fact(recommendation='Underwriter berkualitas buruk. PER berada di tingkat yang tinggi. DER menunjukkan tingkat hutang yang tinggi.'))


    @Rule(Fact(underwriter_valued='bad'), Fact(per_valued='high'), Fact(roa_valued='low'))
    def ipo_rule_3476(self):
        self.declare(Fact(recommendation='Underwriter berkualitas buruk. PER berada di tingkat yang tinggi. ROA menunjukkan efisiensi rendah.'))


    @Rule(Fact(underwriter_valued='bad'), Fact(per_valued='high'), Fact(roe_valued='low'))
    def ipo_rule_3477(self):
        self.declare(Fact(recommendation='Underwriter berkualitas buruk. PER berada di tingkat yang tinggi. ROE menunjukkan keuntungan yang rendah.'))


    @Rule(Fact(underwriter_valued='bad'), Fact(der_valued='high'), Fact(roa_valued='low'))
    def ipo_rule_3478(self):
        self.declare(Fact(recommendation='Underwriter berkualitas buruk. DER menunjukkan tingkat hutang yang tinggi. ROA menunjukkan efisiensi rendah.'))


    @Rule(Fact(underwriter_valued='bad'), Fact(der_valued='high'), Fact(roe_valued='low'))
    def ipo_rule_3479(self):
        self.declare(Fact(recommendation='Underwriter berkualitas buruk. DER menunjukkan tingkat hutang yang tinggi. ROE menunjukkan keuntungan yang rendah.'))


    @Rule(Fact(underwriter_valued='bad'), Fact(roa_valued='low'), Fact(roe_valued='low'))
    def ipo_rule_3480(self):
        self.declare(Fact(recommendation='Underwriter berkualitas buruk. ROA menunjukkan efisiensi rendah. ROE menunjukkan keuntungan yang rendah.'))


    @Rule(Fact(warrant_valued='bad'), Fact(net_income_valued='profit'), Fact(per_valued='high'))
    def ipo_rule_3481(self):
        self.declare(Fact(recommendation='Warrant menunjukkan kondisi buruk. Laba bersih menunjukkan keuntungan. PER berada di tingkat yang tinggi.'))


    @Rule(Fact(warrant_valued='bad'), Fact(net_income_valued='profit'), Fact(der_valued='high'))
    def ipo_rule_3482(self):
        self.declare(Fact(recommendation='Warrant menunjukkan kondisi buruk. Laba bersih menunjukkan keuntungan. DER menunjukkan tingkat hutang yang tinggi.'))


    @Rule(Fact(warrant_valued='bad'), Fact(net_income_valued='profit'), Fact(roa_valued='low'))
    def ipo_rule_3483(self):
        self.declare(Fact(recommendation='Warrant menunjukkan kondisi buruk. Laba bersih menunjukkan keuntungan. ROA menunjukkan efisiensi rendah.'))


    @Rule(Fact(warrant_valued='bad'), Fact(net_income_valued='profit'), Fact(roe_valued='low'))
    def ipo_rule_3484(self):
        self.declare(Fact(recommendation='Warrant menunjukkan kondisi buruk. Laba bersih menunjukkan keuntungan. ROE menunjukkan keuntungan yang rendah.'))


    @Rule(Fact(warrant_valued='bad'), Fact(per_valued='high'), Fact(der_valued='high'))
    def ipo_rule_3485(self):
        self.declare(Fact(recommendation='Warrant menunjukkan kondisi buruk. PER berada di tingkat yang tinggi. DER menunjukkan tingkat hutang yang tinggi.'))


    @Rule(Fact(warrant_valued='bad'), Fact(per_valued='high'), Fact(roa_valued='low'))
    def ipo_rule_3486(self):
        self.declare(Fact(recommendation='Warrant menunjukkan kondisi buruk. PER berada di tingkat yang tinggi. ROA menunjukkan efisiensi rendah.'))


    @Rule(Fact(warrant_valued='bad'), Fact(per_valued='high'), Fact(roe_valued='low'))
    def ipo_rule_3487(self):
        self.declare(Fact(recommendation='Warrant menunjukkan kondisi buruk. PER berada di tingkat yang tinggi. ROE menunjukkan keuntungan yang rendah.'))


    @Rule(Fact(warrant_valued='bad'), Fact(der_valued='high'), Fact(roa_valued='low'))
    def ipo_rule_3488(self):
        self.declare(Fact(recommendation='Warrant menunjukkan kondisi buruk. DER menunjukkan tingkat hutang yang tinggi. ROA menunjukkan efisiensi rendah.'))


    @Rule(Fact(warrant_valued='bad'), Fact(der_valued='high'), Fact(roe_valued='low'))
    def ipo_rule_3489(self):
        self.declare(Fact(recommendation='Warrant menunjukkan kondisi buruk. DER menunjukkan tingkat hutang yang tinggi. ROE menunjukkan keuntungan yang rendah.'))


    @Rule(Fact(warrant_valued='bad'), Fact(roa_valued='low'), Fact(roe_valued='low'))
    def ipo_rule_3490(self):
        self.declare(Fact(recommendation='Warrant menunjukkan kondisi buruk. ROA menunjukkan efisiensi rendah. ROE menunjukkan keuntungan yang rendah.'))


    @Rule(Fact(net_income_valued='profit'), Fact(per_valued='high'), Fact(der_valued='high'))
    def ipo_rule_3491(self):
        self.declare(Fact(recommendation='Laba bersih menunjukkan keuntungan. PER berada di tingkat yang tinggi. DER menunjukkan tingkat hutang yang tinggi.'))


    @Rule(Fact(net_income_valued='profit'), Fact(per_valued='high'), Fact(roa_valued='low'))
    def ipo_rule_3492(self):
        self.declare(Fact(recommendation='Laba bersih menunjukkan keuntungan. PER berada di tingkat yang tinggi. ROA menunjukkan efisiensi rendah.'))


    @Rule(Fact(net_income_valued='profit'), Fact(per_valued='high'), Fact(roe_valued='low'))
    def ipo_rule_3493(self):
        self.declare(Fact(recommendation='Laba bersih menunjukkan keuntungan. PER berada di tingkat yang tinggi. ROE menunjukkan keuntungan yang rendah.'))


    @Rule(Fact(net_income_valued='profit'), Fact(der_valued='high'), Fact(roa_valued='low'))
    def ipo_rule_3494(self):
        self.declare(Fact(recommendation='Laba bersih menunjukkan keuntungan. DER menunjukkan tingkat hutang yang tinggi. ROA menunjukkan efisiensi rendah.'))


    @Rule(Fact(net_income_valued='profit'), Fact(der_valued='high'), Fact(roe_valued='low'))
    def ipo_rule_3495(self):
        self.declare(Fact(recommendation='Laba bersih menunjukkan keuntungan. DER menunjukkan tingkat hutang yang tinggi. ROE menunjukkan keuntungan yang rendah.'))


    @Rule(Fact(net_income_valued='profit'), Fact(roa_valued='low'), Fact(roe_valued='low'))
    def ipo_rule_3496(self):
        self.declare(Fact(recommendation='Laba bersih menunjukkan keuntungan. ROA menunjukkan efisiensi rendah. ROE menunjukkan keuntungan yang rendah.'))


    @Rule(Fact(per_valued='high'), Fact(der_valued='high'), Fact(roa_valued='low'))
    def ipo_rule_3497(self):
        self.declare(Fact(recommendation='PER berada di tingkat yang tinggi. DER menunjukkan tingkat hutang yang tinggi. ROA menunjukkan efisiensi rendah.'))


    @Rule(Fact(per_valued='high'), Fact(der_valued='high'), Fact(roe_valued='low'))
    def ipo_rule_3498(self):
        self.declare(Fact(recommendation='PER berada di tingkat yang tinggi. DER menunjukkan tingkat hutang yang tinggi. ROE menunjukkan keuntungan yang rendah.'))


    @Rule(Fact(per_valued='high'), Fact(roa_valued='low'), Fact(roe_valued='low'))
    def ipo_rule_3499(self):
        self.declare(Fact(recommendation='PER berada di tingkat yang tinggi. ROA menunjukkan efisiensi rendah. ROE menunjukkan keuntungan yang rendah.'))


    @Rule(Fact(der_valued='high'), Fact(roa_valued='low'), Fact(roe_valued='low'))
    def ipo_rule_3500(self):
        self.declare(Fact(recommendation='DER menunjukkan tingkat hutang yang tinggi. ROA menunjukkan efisiensi rendah. ROE menunjukkan keuntungan yang rendah.'))


    @Rule(Fact(underwriter_valued='bad'), Fact(warrant_valued='bad'), Fact(net_income_valued='profit'))
    def ipo_rule_3501(self):
        self.declare(Fact(recommendation='Underwriter berkualitas buruk. Warrant menunjukkan kondisi buruk. Laba bersih menunjukkan keuntungan.'))


    @Rule(Fact(underwriter_valued='bad'), Fact(warrant_valued='bad'), Fact(per_valued='high'))
    def ipo_rule_3502(self):
        self.declare(Fact(recommendation='Underwriter berkualitas buruk. Warrant menunjukkan kondisi buruk. PER berada di tingkat yang tinggi.'))


    @Rule(Fact(underwriter_valued='bad'), Fact(warrant_valued='bad'), Fact(der_valued='low'))
    def ipo_rule_3503(self):
        self.declare(Fact(recommendation='Underwriter berkualitas buruk. Warrant menunjukkan kondisi buruk. DER menunjukkan tingkat hutang yang rendah.'))


    @Rule(Fact(underwriter_valued='bad'), Fact(warrant_valued='bad'), Fact(roa_valued='high'))
    def ipo_rule_3504(self):
        self.declare(Fact(recommendation='Underwriter berkualitas buruk. Warrant menunjukkan kondisi buruk. ROA menunjukkan efisiensi tinggi.'))


    @Rule(Fact(underwriter_valued='bad'), Fact(warrant_valued='bad'), Fact(roe_valued='high'))
    def ipo_rule_3505(self):
        self.declare(Fact(recommendation='Underwriter berkualitas buruk. Warrant menunjukkan kondisi buruk. ROE menunjukkan keuntungan yang tinggi.'))


    @Rule(Fact(underwriter_valued='bad'), Fact(net_income_valued='profit'), Fact(per_valued='high'))
    def ipo_rule_3506(self):
        self.declare(Fact(recommendation='Underwriter berkualitas buruk. Laba bersih menunjukkan keuntungan. PER berada di tingkat yang tinggi.'))


    @Rule(Fact(underwriter_valued='bad'), Fact(net_income_valued='profit'), Fact(der_valued='low'))
    def ipo_rule_3507(self):
        self.declare(Fact(recommendation='Underwriter berkualitas buruk. Laba bersih menunjukkan keuntungan. DER menunjukkan tingkat hutang yang rendah.'))


    @Rule(Fact(underwriter_valued='bad'), Fact(net_income_valued='profit'), Fact(roa_valued='high'))
    def ipo_rule_3508(self):
        self.declare(Fact(recommendation='Underwriter berkualitas buruk. Laba bersih menunjukkan keuntungan. ROA menunjukkan efisiensi tinggi.'))


    @Rule(Fact(underwriter_valued='bad'), Fact(net_income_valued='profit'), Fact(roe_valued='high'))
    def ipo_rule_3509(self):
        self.declare(Fact(recommendation='Underwriter berkualitas buruk. Laba bersih menunjukkan keuntungan. ROE menunjukkan keuntungan yang tinggi.'))


    @Rule(Fact(underwriter_valued='bad'), Fact(per_valued='high'), Fact(der_valued='low'))
    def ipo_rule_3510(self):
        self.declare(Fact(recommendation='Underwriter berkualitas buruk. PER berada di tingkat yang tinggi. DER menunjukkan tingkat hutang yang rendah.'))


    @Rule(Fact(underwriter_valued='bad'), Fact(per_valued='high'), Fact(roa_valued='high'))
    def ipo_rule_3511(self):
        self.declare(Fact(recommendation='Underwriter berkualitas buruk. PER berada di tingkat yang tinggi. ROA menunjukkan efisiensi tinggi.'))


    @Rule(Fact(underwriter_valued='bad'), Fact(per_valued='high'), Fact(roe_valued='high'))
    def ipo_rule_3512(self):
        self.declare(Fact(recommendation='Underwriter berkualitas buruk. PER berada di tingkat yang tinggi. ROE menunjukkan keuntungan yang tinggi.'))


    @Rule(Fact(underwriter_valued='bad'), Fact(der_valued='low'), Fact(roa_valued='high'))
    def ipo_rule_3513(self):
        self.declare(Fact(recommendation='Underwriter berkualitas buruk. DER menunjukkan tingkat hutang yang rendah. ROA menunjukkan efisiensi tinggi.'))


    @Rule(Fact(underwriter_valued='bad'), Fact(der_valued='low'), Fact(roe_valued='high'))
    def ipo_rule_3514(self):
        self.declare(Fact(recommendation='Underwriter berkualitas buruk. DER menunjukkan tingkat hutang yang rendah. ROE menunjukkan keuntungan yang tinggi.'))


    @Rule(Fact(underwriter_valued='bad'), Fact(roa_valued='high'), Fact(roe_valued='high'))
    def ipo_rule_3515(self):
        self.declare(Fact(recommendation='Underwriter berkualitas buruk. ROA menunjukkan efisiensi tinggi. ROE menunjukkan keuntungan yang tinggi.'))


    @Rule(Fact(warrant_valued='bad'), Fact(net_income_valued='profit'), Fact(per_valued='high'))
    def ipo_rule_3516(self):
        self.declare(Fact(recommendation='Warrant menunjukkan kondisi buruk. Laba bersih menunjukkan keuntungan. PER berada di tingkat yang tinggi.'))


    @Rule(Fact(warrant_valued='bad'), Fact(net_income_valued='profit'), Fact(der_valued='low'))
    def ipo_rule_3517(self):
        self.declare(Fact(recommendation='Warrant menunjukkan kondisi buruk. Laba bersih menunjukkan keuntungan. DER menunjukkan tingkat hutang yang rendah.'))


    @Rule(Fact(warrant_valued='bad'), Fact(net_income_valued='profit'), Fact(roa_valued='high'))
    def ipo_rule_3518(self):
        self.declare(Fact(recommendation='Warrant menunjukkan kondisi buruk. Laba bersih menunjukkan keuntungan. ROA menunjukkan efisiensi tinggi.'))


    @Rule(Fact(warrant_valued='bad'), Fact(net_income_valued='profit'), Fact(roe_valued='high'))
    def ipo_rule_3519(self):
        self.declare(Fact(recommendation='Warrant menunjukkan kondisi buruk. Laba bersih menunjukkan keuntungan. ROE menunjukkan keuntungan yang tinggi.'))


    @Rule(Fact(warrant_valued='bad'), Fact(per_valued='high'), Fact(der_valued='low'))
    def ipo_rule_3520(self):
        self.declare(Fact(recommendation='Warrant menunjukkan kondisi buruk. PER berada di tingkat yang tinggi. DER menunjukkan tingkat hutang yang rendah.'))


    @Rule(Fact(warrant_valued='bad'), Fact(per_valued='high'), Fact(roa_valued='high'))
    def ipo_rule_3521(self):
        self.declare(Fact(recommendation='Warrant menunjukkan kondisi buruk. PER berada di tingkat yang tinggi. ROA menunjukkan efisiensi tinggi.'))


    @Rule(Fact(warrant_valued='bad'), Fact(per_valued='high'), Fact(roe_valued='high'))
    def ipo_rule_3522(self):
        self.declare(Fact(recommendation='Warrant menunjukkan kondisi buruk. PER berada di tingkat yang tinggi. ROE menunjukkan keuntungan yang tinggi.'))


    @Rule(Fact(warrant_valued='bad'), Fact(der_valued='low'), Fact(roa_valued='high'))
    def ipo_rule_3523(self):
        self.declare(Fact(recommendation='Warrant menunjukkan kondisi buruk. DER menunjukkan tingkat hutang yang rendah. ROA menunjukkan efisiensi tinggi.'))


    @Rule(Fact(warrant_valued='bad'), Fact(der_valued='low'), Fact(roe_valued='high'))
    def ipo_rule_3524(self):
        self.declare(Fact(recommendation='Warrant menunjukkan kondisi buruk. DER menunjukkan tingkat hutang yang rendah. ROE menunjukkan keuntungan yang tinggi.'))


    @Rule(Fact(warrant_valued='bad'), Fact(roa_valued='high'), Fact(roe_valued='high'))
    def ipo_rule_3525(self):
        self.declare(Fact(recommendation='Warrant menunjukkan kondisi buruk. ROA menunjukkan efisiensi tinggi. ROE menunjukkan keuntungan yang tinggi.'))


    @Rule(Fact(net_income_valued='profit'), Fact(per_valued='high'), Fact(der_valued='low'))
    def ipo_rule_3526(self):
        self.declare(Fact(recommendation='Laba bersih menunjukkan keuntungan. PER berada di tingkat yang tinggi. DER menunjukkan tingkat hutang yang rendah.'))


    @Rule(Fact(net_income_valued='profit'), Fact(per_valued='high'), Fact(roa_valued='high'))
    def ipo_rule_3527(self):
        self.declare(Fact(recommendation='Laba bersih menunjukkan keuntungan. PER berada di tingkat yang tinggi. ROA menunjukkan efisiensi tinggi.'))


    @Rule(Fact(net_income_valued='profit'), Fact(per_valued='high'), Fact(roe_valued='high'))
    def ipo_rule_3528(self):
        self.declare(Fact(recommendation='Laba bersih menunjukkan keuntungan. PER berada di tingkat yang tinggi. ROE menunjukkan keuntungan yang tinggi.'))


    @Rule(Fact(net_income_valued='profit'), Fact(der_valued='low'), Fact(roa_valued='high'))
    def ipo_rule_3529(self):
        self.declare(Fact(recommendation='Laba bersih menunjukkan keuntungan. DER menunjukkan tingkat hutang yang rendah. ROA menunjukkan efisiensi tinggi.'))


    @Rule(Fact(net_income_valued='profit'), Fact(der_valued='low'), Fact(roe_valued='high'))
    def ipo_rule_3530(self):
        self.declare(Fact(recommendation='Laba bersih menunjukkan keuntungan. DER menunjukkan tingkat hutang yang rendah. ROE menunjukkan keuntungan yang tinggi.'))


    @Rule(Fact(net_income_valued='profit'), Fact(roa_valued='high'), Fact(roe_valued='high'))
    def ipo_rule_3531(self):
        self.declare(Fact(recommendation='Laba bersih menunjukkan keuntungan. ROA menunjukkan efisiensi tinggi. ROE menunjukkan keuntungan yang tinggi.'))


    @Rule(Fact(per_valued='high'), Fact(der_valued='low'), Fact(roa_valued='high'))
    def ipo_rule_3532(self):
        self.declare(Fact(recommendation='PER berada di tingkat yang tinggi. DER menunjukkan tingkat hutang yang rendah. ROA menunjukkan efisiensi tinggi.'))


    @Rule(Fact(per_valued='high'), Fact(der_valued='low'), Fact(roe_valued='high'))
    def ipo_rule_3533(self):
        self.declare(Fact(recommendation='PER berada di tingkat yang tinggi. DER menunjukkan tingkat hutang yang rendah. ROE menunjukkan keuntungan yang tinggi.'))


    @Rule(Fact(per_valued='high'), Fact(roa_valued='high'), Fact(roe_valued='high'))
    def ipo_rule_3534(self):
        self.declare(Fact(recommendation='PER berada di tingkat yang tinggi. ROA menunjukkan efisiensi tinggi. ROE menunjukkan keuntungan yang tinggi.'))


    @Rule(Fact(der_valued='low'), Fact(roa_valued='high'), Fact(roe_valued='high'))
    def ipo_rule_3535(self):
        self.declare(Fact(recommendation='DER menunjukkan tingkat hutang yang rendah. ROA menunjukkan efisiensi tinggi. ROE menunjukkan keuntungan yang tinggi.'))


    @Rule(Fact(underwriter_valued='bad'), Fact(warrant_valued='bad'), Fact(net_income_valued='profit'))
    def ipo_rule_3536(self):
        self.declare(Fact(recommendation='Underwriter berkualitas buruk. Warrant menunjukkan kondisi buruk. Laba bersih menunjukkan keuntungan.'))


    @Rule(Fact(underwriter_valued='bad'), Fact(warrant_valued='bad'), Fact(per_valued='high'))
    def ipo_rule_3537(self):
        self.declare(Fact(recommendation='Underwriter berkualitas buruk. Warrant menunjukkan kondisi buruk. PER berada di tingkat yang tinggi.'))


    @Rule(Fact(underwriter_valued='bad'), Fact(warrant_valued='bad'), Fact(der_valued='low'))
    def ipo_rule_3538(self):
        self.declare(Fact(recommendation='Underwriter berkualitas buruk. Warrant menunjukkan kondisi buruk. DER menunjukkan tingkat hutang yang rendah.'))


    @Rule(Fact(underwriter_valued='bad'), Fact(warrant_valued='bad'), Fact(roa_valued='high'))
    def ipo_rule_3539(self):
        self.declare(Fact(recommendation='Underwriter berkualitas buruk. Warrant menunjukkan kondisi buruk. ROA menunjukkan efisiensi tinggi.'))


    @Rule(Fact(underwriter_valued='bad'), Fact(warrant_valued='bad'), Fact(roe_valued='low'))
    def ipo_rule_3540(self):
        self.declare(Fact(recommendation='Underwriter berkualitas buruk. Warrant menunjukkan kondisi buruk. ROE menunjukkan keuntungan yang rendah.'))


    @Rule(Fact(underwriter_valued='bad'), Fact(net_income_valued='profit'), Fact(per_valued='high'))
    def ipo_rule_3541(self):
        self.declare(Fact(recommendation='Underwriter berkualitas buruk. Laba bersih menunjukkan keuntungan. PER berada di tingkat yang tinggi.'))


    @Rule(Fact(underwriter_valued='bad'), Fact(net_income_valued='profit'), Fact(der_valued='low'))
    def ipo_rule_3542(self):
        self.declare(Fact(recommendation='Underwriter berkualitas buruk. Laba bersih menunjukkan keuntungan. DER menunjukkan tingkat hutang yang rendah.'))


    @Rule(Fact(underwriter_valued='bad'), Fact(net_income_valued='profit'), Fact(roa_valued='high'))
    def ipo_rule_3543(self):
        self.declare(Fact(recommendation='Underwriter berkualitas buruk. Laba bersih menunjukkan keuntungan. ROA menunjukkan efisiensi tinggi.'))


    @Rule(Fact(underwriter_valued='bad'), Fact(net_income_valued='profit'), Fact(roe_valued='low'))
    def ipo_rule_3544(self):
        self.declare(Fact(recommendation='Underwriter berkualitas buruk. Laba bersih menunjukkan keuntungan. ROE menunjukkan keuntungan yang rendah.'))


    @Rule(Fact(underwriter_valued='bad'), Fact(per_valued='high'), Fact(der_valued='low'))
    def ipo_rule_3545(self):
        self.declare(Fact(recommendation='Underwriter berkualitas buruk. PER berada di tingkat yang tinggi. DER menunjukkan tingkat hutang yang rendah.'))


    @Rule(Fact(underwriter_valued='bad'), Fact(per_valued='high'), Fact(roa_valued='high'))
    def ipo_rule_3546(self):
        self.declare(Fact(recommendation='Underwriter berkualitas buruk. PER berada di tingkat yang tinggi. ROA menunjukkan efisiensi tinggi.'))


    @Rule(Fact(underwriter_valued='bad'), Fact(per_valued='high'), Fact(roe_valued='low'))
    def ipo_rule_3547(self):
        self.declare(Fact(recommendation='Underwriter berkualitas buruk. PER berada di tingkat yang tinggi. ROE menunjukkan keuntungan yang rendah.'))


    @Rule(Fact(underwriter_valued='bad'), Fact(der_valued='low'), Fact(roa_valued='high'))
    def ipo_rule_3548(self):
        self.declare(Fact(recommendation='Underwriter berkualitas buruk. DER menunjukkan tingkat hutang yang rendah. ROA menunjukkan efisiensi tinggi.'))


    @Rule(Fact(underwriter_valued='bad'), Fact(der_valued='low'), Fact(roe_valued='low'))
    def ipo_rule_3549(self):
        self.declare(Fact(recommendation='Underwriter berkualitas buruk. DER menunjukkan tingkat hutang yang rendah. ROE menunjukkan keuntungan yang rendah.'))


    @Rule(Fact(underwriter_valued='bad'), Fact(roa_valued='high'), Fact(roe_valued='low'))
    def ipo_rule_3550(self):
        self.declare(Fact(recommendation='Underwriter berkualitas buruk. ROA menunjukkan efisiensi tinggi. ROE menunjukkan keuntungan yang rendah.'))


    @Rule(Fact(warrant_valued='bad'), Fact(net_income_valued='profit'), Fact(per_valued='high'))
    def ipo_rule_3551(self):
        self.declare(Fact(recommendation='Warrant menunjukkan kondisi buruk. Laba bersih menunjukkan keuntungan. PER berada di tingkat yang tinggi.'))


    @Rule(Fact(warrant_valued='bad'), Fact(net_income_valued='profit'), Fact(der_valued='low'))
    def ipo_rule_3552(self):
        self.declare(Fact(recommendation='Warrant menunjukkan kondisi buruk. Laba bersih menunjukkan keuntungan. DER menunjukkan tingkat hutang yang rendah.'))


    @Rule(Fact(warrant_valued='bad'), Fact(net_income_valued='profit'), Fact(roa_valued='high'))
    def ipo_rule_3553(self):
        self.declare(Fact(recommendation='Warrant menunjukkan kondisi buruk. Laba bersih menunjukkan keuntungan. ROA menunjukkan efisiensi tinggi.'))


    @Rule(Fact(warrant_valued='bad'), Fact(net_income_valued='profit'), Fact(roe_valued='low'))
    def ipo_rule_3554(self):
        self.declare(Fact(recommendation='Warrant menunjukkan kondisi buruk. Laba bersih menunjukkan keuntungan. ROE menunjukkan keuntungan yang rendah.'))


    @Rule(Fact(warrant_valued='bad'), Fact(per_valued='high'), Fact(der_valued='low'))
    def ipo_rule_3555(self):
        self.declare(Fact(recommendation='Warrant menunjukkan kondisi buruk. PER berada di tingkat yang tinggi. DER menunjukkan tingkat hutang yang rendah.'))


    @Rule(Fact(warrant_valued='bad'), Fact(per_valued='high'), Fact(roa_valued='high'))
    def ipo_rule_3556(self):
        self.declare(Fact(recommendation='Warrant menunjukkan kondisi buruk. PER berada di tingkat yang tinggi. ROA menunjukkan efisiensi tinggi.'))


    @Rule(Fact(warrant_valued='bad'), Fact(per_valued='high'), Fact(roe_valued='low'))
    def ipo_rule_3557(self):
        self.declare(Fact(recommendation='Warrant menunjukkan kondisi buruk. PER berada di tingkat yang tinggi. ROE menunjukkan keuntungan yang rendah.'))


    @Rule(Fact(warrant_valued='bad'), Fact(der_valued='low'), Fact(roa_valued='high'))
    def ipo_rule_3558(self):
        self.declare(Fact(recommendation='Warrant menunjukkan kondisi buruk. DER menunjukkan tingkat hutang yang rendah. ROA menunjukkan efisiensi tinggi.'))


    @Rule(Fact(warrant_valued='bad'), Fact(der_valued='low'), Fact(roe_valued='low'))
    def ipo_rule_3559(self):
        self.declare(Fact(recommendation='Warrant menunjukkan kondisi buruk. DER menunjukkan tingkat hutang yang rendah. ROE menunjukkan keuntungan yang rendah.'))


    @Rule(Fact(warrant_valued='bad'), Fact(roa_valued='high'), Fact(roe_valued='low'))
    def ipo_rule_3560(self):
        self.declare(Fact(recommendation='Warrant menunjukkan kondisi buruk. ROA menunjukkan efisiensi tinggi. ROE menunjukkan keuntungan yang rendah.'))


    @Rule(Fact(net_income_valued='profit'), Fact(per_valued='high'), Fact(der_valued='low'))
    def ipo_rule_3561(self):
        self.declare(Fact(recommendation='Laba bersih menunjukkan keuntungan. PER berada di tingkat yang tinggi. DER menunjukkan tingkat hutang yang rendah.'))


    @Rule(Fact(net_income_valued='profit'), Fact(per_valued='high'), Fact(roa_valued='high'))
    def ipo_rule_3562(self):
        self.declare(Fact(recommendation='Laba bersih menunjukkan keuntungan. PER berada di tingkat yang tinggi. ROA menunjukkan efisiensi tinggi.'))


    @Rule(Fact(net_income_valued='profit'), Fact(per_valued='high'), Fact(roe_valued='low'))
    def ipo_rule_3563(self):
        self.declare(Fact(recommendation='Laba bersih menunjukkan keuntungan. PER berada di tingkat yang tinggi. ROE menunjukkan keuntungan yang rendah.'))


    @Rule(Fact(net_income_valued='profit'), Fact(der_valued='low'), Fact(roa_valued='high'))
    def ipo_rule_3564(self):
        self.declare(Fact(recommendation='Laba bersih menunjukkan keuntungan. DER menunjukkan tingkat hutang yang rendah. ROA menunjukkan efisiensi tinggi.'))


    @Rule(Fact(net_income_valued='profit'), Fact(der_valued='low'), Fact(roe_valued='low'))
    def ipo_rule_3565(self):
        self.declare(Fact(recommendation='Laba bersih menunjukkan keuntungan. DER menunjukkan tingkat hutang yang rendah. ROE menunjukkan keuntungan yang rendah.'))


    @Rule(Fact(net_income_valued='profit'), Fact(roa_valued='high'), Fact(roe_valued='low'))
    def ipo_rule_3566(self):
        self.declare(Fact(recommendation='Laba bersih menunjukkan keuntungan. ROA menunjukkan efisiensi tinggi. ROE menunjukkan keuntungan yang rendah.'))


    @Rule(Fact(per_valued='high'), Fact(der_valued='low'), Fact(roa_valued='high'))
    def ipo_rule_3567(self):
        self.declare(Fact(recommendation='PER berada di tingkat yang tinggi. DER menunjukkan tingkat hutang yang rendah. ROA menunjukkan efisiensi tinggi.'))


    @Rule(Fact(per_valued='high'), Fact(der_valued='low'), Fact(roe_valued='low'))
    def ipo_rule_3568(self):
        self.declare(Fact(recommendation='PER berada di tingkat yang tinggi. DER menunjukkan tingkat hutang yang rendah. ROE menunjukkan keuntungan yang rendah.'))


    @Rule(Fact(per_valued='high'), Fact(roa_valued='high'), Fact(roe_valued='low'))
    def ipo_rule_3569(self):
        self.declare(Fact(recommendation='PER berada di tingkat yang tinggi. ROA menunjukkan efisiensi tinggi. ROE menunjukkan keuntungan yang rendah.'))


    @Rule(Fact(der_valued='low'), Fact(roa_valued='high'), Fact(roe_valued='low'))
    def ipo_rule_3570(self):
        self.declare(Fact(recommendation='DER menunjukkan tingkat hutang yang rendah. ROA menunjukkan efisiensi tinggi. ROE menunjukkan keuntungan yang rendah.'))


    @Rule(Fact(underwriter_valued='bad'), Fact(warrant_valued='bad'), Fact(net_income_valued='profit'))
    def ipo_rule_3571(self):
        self.declare(Fact(recommendation='Underwriter berkualitas buruk. Warrant menunjukkan kondisi buruk. Laba bersih menunjukkan keuntungan.'))


    @Rule(Fact(underwriter_valued='bad'), Fact(warrant_valued='bad'), Fact(per_valued='high'))
    def ipo_rule_3572(self):
        self.declare(Fact(recommendation='Underwriter berkualitas buruk. Warrant menunjukkan kondisi buruk. PER berada di tingkat yang tinggi.'))


    @Rule(Fact(underwriter_valued='bad'), Fact(warrant_valued='bad'), Fact(der_valued='low'))
    def ipo_rule_3573(self):
        self.declare(Fact(recommendation='Underwriter berkualitas buruk. Warrant menunjukkan kondisi buruk. DER menunjukkan tingkat hutang yang rendah.'))


    @Rule(Fact(underwriter_valued='bad'), Fact(warrant_valued='bad'), Fact(roa_valued='low'))
    def ipo_rule_3574(self):
        self.declare(Fact(recommendation='Underwriter berkualitas buruk. Warrant menunjukkan kondisi buruk. ROA menunjukkan efisiensi rendah.'))


    @Rule(Fact(underwriter_valued='bad'), Fact(warrant_valued='bad'), Fact(roe_valued='high'))
    def ipo_rule_3575(self):
        self.declare(Fact(recommendation='Underwriter berkualitas buruk. Warrant menunjukkan kondisi buruk. ROE menunjukkan keuntungan yang tinggi.'))


    @Rule(Fact(underwriter_valued='bad'), Fact(net_income_valued='profit'), Fact(per_valued='high'))
    def ipo_rule_3576(self):
        self.declare(Fact(recommendation='Underwriter berkualitas buruk. Laba bersih menunjukkan keuntungan. PER berada di tingkat yang tinggi.'))


    @Rule(Fact(underwriter_valued='bad'), Fact(net_income_valued='profit'), Fact(der_valued='low'))
    def ipo_rule_3577(self):
        self.declare(Fact(recommendation='Underwriter berkualitas buruk. Laba bersih menunjukkan keuntungan. DER menunjukkan tingkat hutang yang rendah.'))


    @Rule(Fact(underwriter_valued='bad'), Fact(net_income_valued='profit'), Fact(roa_valued='low'))
    def ipo_rule_3578(self):
        self.declare(Fact(recommendation='Underwriter berkualitas buruk. Laba bersih menunjukkan keuntungan. ROA menunjukkan efisiensi rendah.'))


    @Rule(Fact(underwriter_valued='bad'), Fact(net_income_valued='profit'), Fact(roe_valued='high'))
    def ipo_rule_3579(self):
        self.declare(Fact(recommendation='Underwriter berkualitas buruk. Laba bersih menunjukkan keuntungan. ROE menunjukkan keuntungan yang tinggi.'))


    @Rule(Fact(underwriter_valued='bad'), Fact(per_valued='high'), Fact(der_valued='low'))
    def ipo_rule_3580(self):
        self.declare(Fact(recommendation='Underwriter berkualitas buruk. PER berada di tingkat yang tinggi. DER menunjukkan tingkat hutang yang rendah.'))


    @Rule(Fact(underwriter_valued='bad'), Fact(per_valued='high'), Fact(roa_valued='low'))
    def ipo_rule_3581(self):
        self.declare(Fact(recommendation='Underwriter berkualitas buruk. PER berada di tingkat yang tinggi. ROA menunjukkan efisiensi rendah.'))


    @Rule(Fact(underwriter_valued='bad'), Fact(per_valued='high'), Fact(roe_valued='high'))
    def ipo_rule_3582(self):
        self.declare(Fact(recommendation='Underwriter berkualitas buruk. PER berada di tingkat yang tinggi. ROE menunjukkan keuntungan yang tinggi.'))


    @Rule(Fact(underwriter_valued='bad'), Fact(der_valued='low'), Fact(roa_valued='low'))
    def ipo_rule_3583(self):
        self.declare(Fact(recommendation='Underwriter berkualitas buruk. DER menunjukkan tingkat hutang yang rendah. ROA menunjukkan efisiensi rendah.'))


    @Rule(Fact(underwriter_valued='bad'), Fact(der_valued='low'), Fact(roe_valued='high'))
    def ipo_rule_3584(self):
        self.declare(Fact(recommendation='Underwriter berkualitas buruk. DER menunjukkan tingkat hutang yang rendah. ROE menunjukkan keuntungan yang tinggi.'))


    @Rule(Fact(underwriter_valued='bad'), Fact(roa_valued='low'), Fact(roe_valued='high'))
    def ipo_rule_3585(self):
        self.declare(Fact(recommendation='Underwriter berkualitas buruk. ROA menunjukkan efisiensi rendah. ROE menunjukkan keuntungan yang tinggi.'))


    @Rule(Fact(warrant_valued='bad'), Fact(net_income_valued='profit'), Fact(per_valued='high'))
    def ipo_rule_3586(self):
        self.declare(Fact(recommendation='Warrant menunjukkan kondisi buruk. Laba bersih menunjukkan keuntungan. PER berada di tingkat yang tinggi.'))


    @Rule(Fact(warrant_valued='bad'), Fact(net_income_valued='profit'), Fact(der_valued='low'))
    def ipo_rule_3587(self):
        self.declare(Fact(recommendation='Warrant menunjukkan kondisi buruk. Laba bersih menunjukkan keuntungan. DER menunjukkan tingkat hutang yang rendah.'))


    @Rule(Fact(warrant_valued='bad'), Fact(net_income_valued='profit'), Fact(roa_valued='low'))
    def ipo_rule_3588(self):
        self.declare(Fact(recommendation='Warrant menunjukkan kondisi buruk. Laba bersih menunjukkan keuntungan. ROA menunjukkan efisiensi rendah.'))


    @Rule(Fact(warrant_valued='bad'), Fact(net_income_valued='profit'), Fact(roe_valued='high'))
    def ipo_rule_3589(self):
        self.declare(Fact(recommendation='Warrant menunjukkan kondisi buruk. Laba bersih menunjukkan keuntungan. ROE menunjukkan keuntungan yang tinggi.'))


    @Rule(Fact(warrant_valued='bad'), Fact(per_valued='high'), Fact(der_valued='low'))
    def ipo_rule_3590(self):
        self.declare(Fact(recommendation='Warrant menunjukkan kondisi buruk. PER berada di tingkat yang tinggi. DER menunjukkan tingkat hutang yang rendah.'))


    @Rule(Fact(warrant_valued='bad'), Fact(per_valued='high'), Fact(roa_valued='low'))
    def ipo_rule_3591(self):
        self.declare(Fact(recommendation='Warrant menunjukkan kondisi buruk. PER berada di tingkat yang tinggi. ROA menunjukkan efisiensi rendah.'))


    @Rule(Fact(warrant_valued='bad'), Fact(per_valued='high'), Fact(roe_valued='high'))
    def ipo_rule_3592(self):
        self.declare(Fact(recommendation='Warrant menunjukkan kondisi buruk. PER berada di tingkat yang tinggi. ROE menunjukkan keuntungan yang tinggi.'))


    @Rule(Fact(warrant_valued='bad'), Fact(der_valued='low'), Fact(roa_valued='low'))
    def ipo_rule_3593(self):
        self.declare(Fact(recommendation='Warrant menunjukkan kondisi buruk. DER menunjukkan tingkat hutang yang rendah. ROA menunjukkan efisiensi rendah.'))


    @Rule(Fact(warrant_valued='bad'), Fact(der_valued='low'), Fact(roe_valued='high'))
    def ipo_rule_3594(self):
        self.declare(Fact(recommendation='Warrant menunjukkan kondisi buruk. DER menunjukkan tingkat hutang yang rendah. ROE menunjukkan keuntungan yang tinggi.'))


    @Rule(Fact(warrant_valued='bad'), Fact(roa_valued='low'), Fact(roe_valued='high'))
    def ipo_rule_3595(self):
        self.declare(Fact(recommendation='Warrant menunjukkan kondisi buruk. ROA menunjukkan efisiensi rendah. ROE menunjukkan keuntungan yang tinggi.'))


    @Rule(Fact(net_income_valued='profit'), Fact(per_valued='high'), Fact(der_valued='low'))
    def ipo_rule_3596(self):
        self.declare(Fact(recommendation='Laba bersih menunjukkan keuntungan. PER berada di tingkat yang tinggi. DER menunjukkan tingkat hutang yang rendah.'))


    @Rule(Fact(net_income_valued='profit'), Fact(per_valued='high'), Fact(roa_valued='low'))
    def ipo_rule_3597(self):
        self.declare(Fact(recommendation='Laba bersih menunjukkan keuntungan. PER berada di tingkat yang tinggi. ROA menunjukkan efisiensi rendah.'))


    @Rule(Fact(net_income_valued='profit'), Fact(per_valued='high'), Fact(roe_valued='high'))
    def ipo_rule_3598(self):
        self.declare(Fact(recommendation='Laba bersih menunjukkan keuntungan. PER berada di tingkat yang tinggi. ROE menunjukkan keuntungan yang tinggi.'))


    @Rule(Fact(net_income_valued='profit'), Fact(der_valued='low'), Fact(roa_valued='low'))
    def ipo_rule_3599(self):
        self.declare(Fact(recommendation='Laba bersih menunjukkan keuntungan. DER menunjukkan tingkat hutang yang rendah. ROA menunjukkan efisiensi rendah.'))


    @Rule(Fact(net_income_valued='profit'), Fact(der_valued='low'), Fact(roe_valued='high'))
    def ipo_rule_3600(self):
        self.declare(Fact(recommendation='Laba bersih menunjukkan keuntungan. DER menunjukkan tingkat hutang yang rendah. ROE menunjukkan keuntungan yang tinggi.'))


    @Rule(Fact(net_income_valued='profit'), Fact(roa_valued='low'), Fact(roe_valued='high'))
    def ipo_rule_3601(self):
        self.declare(Fact(recommendation='Laba bersih menunjukkan keuntungan. ROA menunjukkan efisiensi rendah. ROE menunjukkan keuntungan yang tinggi.'))


    @Rule(Fact(per_valued='high'), Fact(der_valued='low'), Fact(roa_valued='low'))
    def ipo_rule_3602(self):
        self.declare(Fact(recommendation='PER berada di tingkat yang tinggi. DER menunjukkan tingkat hutang yang rendah. ROA menunjukkan efisiensi rendah.'))


    @Rule(Fact(per_valued='high'), Fact(der_valued='low'), Fact(roe_valued='high'))
    def ipo_rule_3603(self):
        self.declare(Fact(recommendation='PER berada di tingkat yang tinggi. DER menunjukkan tingkat hutang yang rendah. ROE menunjukkan keuntungan yang tinggi.'))


    @Rule(Fact(per_valued='high'), Fact(roa_valued='low'), Fact(roe_valued='high'))
    def ipo_rule_3604(self):
        self.declare(Fact(recommendation='PER berada di tingkat yang tinggi. ROA menunjukkan efisiensi rendah. ROE menunjukkan keuntungan yang tinggi.'))


    @Rule(Fact(der_valued='low'), Fact(roa_valued='low'), Fact(roe_valued='high'))
    def ipo_rule_3605(self):
        self.declare(Fact(recommendation='DER menunjukkan tingkat hutang yang rendah. ROA menunjukkan efisiensi rendah. ROE menunjukkan keuntungan yang tinggi.'))


    @Rule(Fact(underwriter_valued='bad'), Fact(warrant_valued='bad'), Fact(net_income_valued='profit'))
    def ipo_rule_3606(self):
        self.declare(Fact(recommendation='Underwriter berkualitas buruk. Warrant menunjukkan kondisi buruk. Laba bersih menunjukkan keuntungan.'))


    @Rule(Fact(underwriter_valued='bad'), Fact(warrant_valued='bad'), Fact(per_valued='high'))
    def ipo_rule_3607(self):
        self.declare(Fact(recommendation='Underwriter berkualitas buruk. Warrant menunjukkan kondisi buruk. PER berada di tingkat yang tinggi.'))


    @Rule(Fact(underwriter_valued='bad'), Fact(warrant_valued='bad'), Fact(der_valued='low'))
    def ipo_rule_3608(self):
        self.declare(Fact(recommendation='Underwriter berkualitas buruk. Warrant menunjukkan kondisi buruk. DER menunjukkan tingkat hutang yang rendah.'))


    @Rule(Fact(underwriter_valued='bad'), Fact(warrant_valued='bad'), Fact(roa_valued='low'))
    def ipo_rule_3609(self):
        self.declare(Fact(recommendation='Underwriter berkualitas buruk. Warrant menunjukkan kondisi buruk. ROA menunjukkan efisiensi rendah.'))


    @Rule(Fact(underwriter_valued='bad'), Fact(warrant_valued='bad'), Fact(roe_valued='low'))
    def ipo_rule_3610(self):
        self.declare(Fact(recommendation='Underwriter berkualitas buruk. Warrant menunjukkan kondisi buruk. ROE menunjukkan keuntungan yang rendah.'))


    @Rule(Fact(underwriter_valued='bad'), Fact(net_income_valued='profit'), Fact(per_valued='high'))
    def ipo_rule_3611(self):
        self.declare(Fact(recommendation='Underwriter berkualitas buruk. Laba bersih menunjukkan keuntungan. PER berada di tingkat yang tinggi.'))


    @Rule(Fact(underwriter_valued='bad'), Fact(net_income_valued='profit'), Fact(der_valued='low'))
    def ipo_rule_3612(self):
        self.declare(Fact(recommendation='Underwriter berkualitas buruk. Laba bersih menunjukkan keuntungan. DER menunjukkan tingkat hutang yang rendah.'))


    @Rule(Fact(underwriter_valued='bad'), Fact(net_income_valued='profit'), Fact(roa_valued='low'))
    def ipo_rule_3613(self):
        self.declare(Fact(recommendation='Underwriter berkualitas buruk. Laba bersih menunjukkan keuntungan. ROA menunjukkan efisiensi rendah.'))


    @Rule(Fact(underwriter_valued='bad'), Fact(net_income_valued='profit'), Fact(roe_valued='low'))
    def ipo_rule_3614(self):
        self.declare(Fact(recommendation='Underwriter berkualitas buruk. Laba bersih menunjukkan keuntungan. ROE menunjukkan keuntungan yang rendah.'))


    @Rule(Fact(underwriter_valued='bad'), Fact(per_valued='high'), Fact(der_valued='low'))
    def ipo_rule_3615(self):
        self.declare(Fact(recommendation='Underwriter berkualitas buruk. PER berada di tingkat yang tinggi. DER menunjukkan tingkat hutang yang rendah.'))


    @Rule(Fact(underwriter_valued='bad'), Fact(per_valued='high'), Fact(roa_valued='low'))
    def ipo_rule_3616(self):
        self.declare(Fact(recommendation='Underwriter berkualitas buruk. PER berada di tingkat yang tinggi. ROA menunjukkan efisiensi rendah.'))


    @Rule(Fact(underwriter_valued='bad'), Fact(per_valued='high'), Fact(roe_valued='low'))
    def ipo_rule_3617(self):
        self.declare(Fact(recommendation='Underwriter berkualitas buruk. PER berada di tingkat yang tinggi. ROE menunjukkan keuntungan yang rendah.'))


    @Rule(Fact(underwriter_valued='bad'), Fact(der_valued='low'), Fact(roa_valued='low'))
    def ipo_rule_3618(self):
        self.declare(Fact(recommendation='Underwriter berkualitas buruk. DER menunjukkan tingkat hutang yang rendah. ROA menunjukkan efisiensi rendah.'))


    @Rule(Fact(underwriter_valued='bad'), Fact(der_valued='low'), Fact(roe_valued='low'))
    def ipo_rule_3619(self):
        self.declare(Fact(recommendation='Underwriter berkualitas buruk. DER menunjukkan tingkat hutang yang rendah. ROE menunjukkan keuntungan yang rendah.'))


    @Rule(Fact(underwriter_valued='bad'), Fact(roa_valued='low'), Fact(roe_valued='low'))
    def ipo_rule_3620(self):
        self.declare(Fact(recommendation='Underwriter berkualitas buruk. ROA menunjukkan efisiensi rendah. ROE menunjukkan keuntungan yang rendah.'))


    @Rule(Fact(warrant_valued='bad'), Fact(net_income_valued='profit'), Fact(per_valued='high'))
    def ipo_rule_3621(self):
        self.declare(Fact(recommendation='Warrant menunjukkan kondisi buruk. Laba bersih menunjukkan keuntungan. PER berada di tingkat yang tinggi.'))


    @Rule(Fact(warrant_valued='bad'), Fact(net_income_valued='profit'), Fact(der_valued='low'))
    def ipo_rule_3622(self):
        self.declare(Fact(recommendation='Warrant menunjukkan kondisi buruk. Laba bersih menunjukkan keuntungan. DER menunjukkan tingkat hutang yang rendah.'))


    @Rule(Fact(warrant_valued='bad'), Fact(net_income_valued='profit'), Fact(roa_valued='low'))
    def ipo_rule_3623(self):
        self.declare(Fact(recommendation='Warrant menunjukkan kondisi buruk. Laba bersih menunjukkan keuntungan. ROA menunjukkan efisiensi rendah.'))


    @Rule(Fact(warrant_valued='bad'), Fact(net_income_valued='profit'), Fact(roe_valued='low'))
    def ipo_rule_3624(self):
        self.declare(Fact(recommendation='Warrant menunjukkan kondisi buruk. Laba bersih menunjukkan keuntungan. ROE menunjukkan keuntungan yang rendah.'))


    @Rule(Fact(warrant_valued='bad'), Fact(per_valued='high'), Fact(der_valued='low'))
    def ipo_rule_3625(self):
        self.declare(Fact(recommendation='Warrant menunjukkan kondisi buruk. PER berada di tingkat yang tinggi. DER menunjukkan tingkat hutang yang rendah.'))


    @Rule(Fact(warrant_valued='bad'), Fact(per_valued='high'), Fact(roa_valued='low'))
    def ipo_rule_3626(self):
        self.declare(Fact(recommendation='Warrant menunjukkan kondisi buruk. PER berada di tingkat yang tinggi. ROA menunjukkan efisiensi rendah.'))


    @Rule(Fact(warrant_valued='bad'), Fact(per_valued='high'), Fact(roe_valued='low'))
    def ipo_rule_3627(self):
        self.declare(Fact(recommendation='Warrant menunjukkan kondisi buruk. PER berada di tingkat yang tinggi. ROE menunjukkan keuntungan yang rendah.'))


    @Rule(Fact(warrant_valued='bad'), Fact(der_valued='low'), Fact(roa_valued='low'))
    def ipo_rule_3628(self):
        self.declare(Fact(recommendation='Warrant menunjukkan kondisi buruk. DER menunjukkan tingkat hutang yang rendah. ROA menunjukkan efisiensi rendah.'))


    @Rule(Fact(warrant_valued='bad'), Fact(der_valued='low'), Fact(roe_valued='low'))
    def ipo_rule_3629(self):
        self.declare(Fact(recommendation='Warrant menunjukkan kondisi buruk. DER menunjukkan tingkat hutang yang rendah. ROE menunjukkan keuntungan yang rendah.'))


    @Rule(Fact(warrant_valued='bad'), Fact(roa_valued='low'), Fact(roe_valued='low'))
    def ipo_rule_3630(self):
        self.declare(Fact(recommendation='Warrant menunjukkan kondisi buruk. ROA menunjukkan efisiensi rendah. ROE menunjukkan keuntungan yang rendah.'))


    @Rule(Fact(net_income_valued='profit'), Fact(per_valued='high'), Fact(der_valued='low'))
    def ipo_rule_3631(self):
        self.declare(Fact(recommendation='Laba bersih menunjukkan keuntungan. PER berada di tingkat yang tinggi. DER menunjukkan tingkat hutang yang rendah.'))


    @Rule(Fact(net_income_valued='profit'), Fact(per_valued='high'), Fact(roa_valued='low'))
    def ipo_rule_3632(self):
        self.declare(Fact(recommendation='Laba bersih menunjukkan keuntungan. PER berada di tingkat yang tinggi. ROA menunjukkan efisiensi rendah.'))


    @Rule(Fact(net_income_valued='profit'), Fact(per_valued='high'), Fact(roe_valued='low'))
    def ipo_rule_3633(self):
        self.declare(Fact(recommendation='Laba bersih menunjukkan keuntungan. PER berada di tingkat yang tinggi. ROE menunjukkan keuntungan yang rendah.'))


    @Rule(Fact(net_income_valued='profit'), Fact(der_valued='low'), Fact(roa_valued='low'))
    def ipo_rule_3634(self):
        self.declare(Fact(recommendation='Laba bersih menunjukkan keuntungan. DER menunjukkan tingkat hutang yang rendah. ROA menunjukkan efisiensi rendah.'))


    @Rule(Fact(net_income_valued='profit'), Fact(der_valued='low'), Fact(roe_valued='low'))
    def ipo_rule_3635(self):
        self.declare(Fact(recommendation='Laba bersih menunjukkan keuntungan. DER menunjukkan tingkat hutang yang rendah. ROE menunjukkan keuntungan yang rendah.'))


    @Rule(Fact(net_income_valued='profit'), Fact(roa_valued='low'), Fact(roe_valued='low'))
    def ipo_rule_3636(self):
        self.declare(Fact(recommendation='Laba bersih menunjukkan keuntungan. ROA menunjukkan efisiensi rendah. ROE menunjukkan keuntungan yang rendah.'))


    @Rule(Fact(per_valued='high'), Fact(der_valued='low'), Fact(roa_valued='low'))
    def ipo_rule_3637(self):
        self.declare(Fact(recommendation='PER berada di tingkat yang tinggi. DER menunjukkan tingkat hutang yang rendah. ROA menunjukkan efisiensi rendah.'))


    @Rule(Fact(per_valued='high'), Fact(der_valued='low'), Fact(roe_valued='low'))
    def ipo_rule_3638(self):
        self.declare(Fact(recommendation='PER berada di tingkat yang tinggi. DER menunjukkan tingkat hutang yang rendah. ROE menunjukkan keuntungan yang rendah.'))


    @Rule(Fact(per_valued='high'), Fact(roa_valued='low'), Fact(roe_valued='low'))
    def ipo_rule_3639(self):
        self.declare(Fact(recommendation='PER berada di tingkat yang tinggi. ROA menunjukkan efisiensi rendah. ROE menunjukkan keuntungan yang rendah.'))


    @Rule(Fact(der_valued='low'), Fact(roa_valued='low'), Fact(roe_valued='low'))
    def ipo_rule_3640(self):
        self.declare(Fact(recommendation='DER menunjukkan tingkat hutang yang rendah. ROA menunjukkan efisiensi rendah. ROE menunjukkan keuntungan yang rendah.'))


    @Rule(Fact(underwriter_valued='bad'), Fact(warrant_valued='bad'), Fact(net_income_valued='profit'))
    def ipo_rule_3641(self):
        self.declare(Fact(recommendation='Underwriter berkualitas buruk. Warrant menunjukkan kondisi buruk. Laba bersih menunjukkan keuntungan.'))


    @Rule(Fact(underwriter_valued='bad'), Fact(warrant_valued='bad'), Fact(per_valued='low'))
    def ipo_rule_3642(self):
        self.declare(Fact(recommendation='Underwriter berkualitas buruk. Warrant menunjukkan kondisi buruk. PER berada di tingkat yang rendah.'))


    @Rule(Fact(underwriter_valued='bad'), Fact(warrant_valued='bad'), Fact(der_valued='high'))
    def ipo_rule_3643(self):
        self.declare(Fact(recommendation='Underwriter berkualitas buruk. Warrant menunjukkan kondisi buruk. DER menunjukkan tingkat hutang yang tinggi.'))


    @Rule(Fact(underwriter_valued='bad'), Fact(warrant_valued='bad'), Fact(roa_valued='high'))
    def ipo_rule_3644(self):
        self.declare(Fact(recommendation='Underwriter berkualitas buruk. Warrant menunjukkan kondisi buruk. ROA menunjukkan efisiensi tinggi.'))


    @Rule(Fact(underwriter_valued='bad'), Fact(warrant_valued='bad'), Fact(roe_valued='high'))
    def ipo_rule_3645(self):
        self.declare(Fact(recommendation='Underwriter berkualitas buruk. Warrant menunjukkan kondisi buruk. ROE menunjukkan keuntungan yang tinggi.'))


    @Rule(Fact(underwriter_valued='bad'), Fact(net_income_valued='profit'), Fact(per_valued='low'))
    def ipo_rule_3646(self):
        self.declare(Fact(recommendation='Underwriter berkualitas buruk. Laba bersih menunjukkan keuntungan. PER berada di tingkat yang rendah.'))


    @Rule(Fact(underwriter_valued='bad'), Fact(net_income_valued='profit'), Fact(der_valued='high'))
    def ipo_rule_3647(self):
        self.declare(Fact(recommendation='Underwriter berkualitas buruk. Laba bersih menunjukkan keuntungan. DER menunjukkan tingkat hutang yang tinggi.'))


    @Rule(Fact(underwriter_valued='bad'), Fact(net_income_valued='profit'), Fact(roa_valued='high'))
    def ipo_rule_3648(self):
        self.declare(Fact(recommendation='Underwriter berkualitas buruk. Laba bersih menunjukkan keuntungan. ROA menunjukkan efisiensi tinggi.'))


    @Rule(Fact(underwriter_valued='bad'), Fact(net_income_valued='profit'), Fact(roe_valued='high'))
    def ipo_rule_3649(self):
        self.declare(Fact(recommendation='Underwriter berkualitas buruk. Laba bersih menunjukkan keuntungan. ROE menunjukkan keuntungan yang tinggi.'))


    @Rule(Fact(underwriter_valued='bad'), Fact(per_valued='low'), Fact(der_valued='high'))
    def ipo_rule_3650(self):
        self.declare(Fact(recommendation='Underwriter berkualitas buruk. PER berada di tingkat yang rendah. DER menunjukkan tingkat hutang yang tinggi.'))


    @Rule(Fact(underwriter_valued='bad'), Fact(per_valued='low'), Fact(roa_valued='high'))
    def ipo_rule_3651(self):
        self.declare(Fact(recommendation='Underwriter berkualitas buruk. PER berada di tingkat yang rendah. ROA menunjukkan efisiensi tinggi.'))


    @Rule(Fact(underwriter_valued='bad'), Fact(per_valued='low'), Fact(roe_valued='high'))
    def ipo_rule_3652(self):
        self.declare(Fact(recommendation='Underwriter berkualitas buruk. PER berada di tingkat yang rendah. ROE menunjukkan keuntungan yang tinggi.'))


    @Rule(Fact(underwriter_valued='bad'), Fact(der_valued='high'), Fact(roa_valued='high'))
    def ipo_rule_3653(self):
        self.declare(Fact(recommendation='Underwriter berkualitas buruk. DER menunjukkan tingkat hutang yang tinggi. ROA menunjukkan efisiensi tinggi.'))


    @Rule(Fact(underwriter_valued='bad'), Fact(der_valued='high'), Fact(roe_valued='high'))
    def ipo_rule_3654(self):
        self.declare(Fact(recommendation='Underwriter berkualitas buruk. DER menunjukkan tingkat hutang yang tinggi. ROE menunjukkan keuntungan yang tinggi.'))


    @Rule(Fact(underwriter_valued='bad'), Fact(roa_valued='high'), Fact(roe_valued='high'))
    def ipo_rule_3655(self):
        self.declare(Fact(recommendation='Underwriter berkualitas buruk. ROA menunjukkan efisiensi tinggi. ROE menunjukkan keuntungan yang tinggi.'))


    @Rule(Fact(warrant_valued='bad'), Fact(net_income_valued='profit'), Fact(per_valued='low'))
    def ipo_rule_3656(self):
        self.declare(Fact(recommendation='Warrant menunjukkan kondisi buruk. Laba bersih menunjukkan keuntungan. PER berada di tingkat yang rendah.'))


    @Rule(Fact(warrant_valued='bad'), Fact(net_income_valued='profit'), Fact(der_valued='high'))
    def ipo_rule_3657(self):
        self.declare(Fact(recommendation='Warrant menunjukkan kondisi buruk. Laba bersih menunjukkan keuntungan. DER menunjukkan tingkat hutang yang tinggi.'))


    @Rule(Fact(warrant_valued='bad'), Fact(net_income_valued='profit'), Fact(roa_valued='high'))
    def ipo_rule_3658(self):
        self.declare(Fact(recommendation='Warrant menunjukkan kondisi buruk. Laba bersih menunjukkan keuntungan. ROA menunjukkan efisiensi tinggi.'))


    @Rule(Fact(warrant_valued='bad'), Fact(net_income_valued='profit'), Fact(roe_valued='high'))
    def ipo_rule_3659(self):
        self.declare(Fact(recommendation='Warrant menunjukkan kondisi buruk. Laba bersih menunjukkan keuntungan. ROE menunjukkan keuntungan yang tinggi.'))


    @Rule(Fact(warrant_valued='bad'), Fact(per_valued='low'), Fact(der_valued='high'))
    def ipo_rule_3660(self):
        self.declare(Fact(recommendation='Warrant menunjukkan kondisi buruk. PER berada di tingkat yang rendah. DER menunjukkan tingkat hutang yang tinggi.'))


    @Rule(Fact(warrant_valued='bad'), Fact(per_valued='low'), Fact(roa_valued='high'))
    def ipo_rule_3661(self):
        self.declare(Fact(recommendation='Warrant menunjukkan kondisi buruk. PER berada di tingkat yang rendah. ROA menunjukkan efisiensi tinggi.'))


    @Rule(Fact(warrant_valued='bad'), Fact(per_valued='low'), Fact(roe_valued='high'))
    def ipo_rule_3662(self):
        self.declare(Fact(recommendation='Warrant menunjukkan kondisi buruk. PER berada di tingkat yang rendah. ROE menunjukkan keuntungan yang tinggi.'))


    @Rule(Fact(warrant_valued='bad'), Fact(der_valued='high'), Fact(roa_valued='high'))
    def ipo_rule_3663(self):
        self.declare(Fact(recommendation='Warrant menunjukkan kondisi buruk. DER menunjukkan tingkat hutang yang tinggi. ROA menunjukkan efisiensi tinggi.'))


    @Rule(Fact(warrant_valued='bad'), Fact(der_valued='high'), Fact(roe_valued='high'))
    def ipo_rule_3664(self):
        self.declare(Fact(recommendation='Warrant menunjukkan kondisi buruk. DER menunjukkan tingkat hutang yang tinggi. ROE menunjukkan keuntungan yang tinggi.'))


    @Rule(Fact(warrant_valued='bad'), Fact(roa_valued='high'), Fact(roe_valued='high'))
    def ipo_rule_3665(self):
        self.declare(Fact(recommendation='Warrant menunjukkan kondisi buruk. ROA menunjukkan efisiensi tinggi. ROE menunjukkan keuntungan yang tinggi.'))


    @Rule(Fact(net_income_valued='profit'), Fact(per_valued='low'), Fact(der_valued='high'))
    def ipo_rule_3666(self):
        self.declare(Fact(recommendation='Laba bersih menunjukkan keuntungan. PER berada di tingkat yang rendah. DER menunjukkan tingkat hutang yang tinggi.'))


    @Rule(Fact(net_income_valued='profit'), Fact(per_valued='low'), Fact(roa_valued='high'))
    def ipo_rule_3667(self):
        self.declare(Fact(recommendation='Laba bersih menunjukkan keuntungan. PER berada di tingkat yang rendah. ROA menunjukkan efisiensi tinggi.'))


    @Rule(Fact(net_income_valued='profit'), Fact(per_valued='low'), Fact(roe_valued='high'))
    def ipo_rule_3668(self):
        self.declare(Fact(recommendation='Laba bersih menunjukkan keuntungan. PER berada di tingkat yang rendah. ROE menunjukkan keuntungan yang tinggi.'))


    @Rule(Fact(net_income_valued='profit'), Fact(der_valued='high'), Fact(roa_valued='high'))
    def ipo_rule_3669(self):
        self.declare(Fact(recommendation='Laba bersih menunjukkan keuntungan. DER menunjukkan tingkat hutang yang tinggi. ROA menunjukkan efisiensi tinggi.'))


    @Rule(Fact(net_income_valued='profit'), Fact(der_valued='high'), Fact(roe_valued='high'))
    def ipo_rule_3670(self):
        self.declare(Fact(recommendation='Laba bersih menunjukkan keuntungan. DER menunjukkan tingkat hutang yang tinggi. ROE menunjukkan keuntungan yang tinggi.'))


    @Rule(Fact(net_income_valued='profit'), Fact(roa_valued='high'), Fact(roe_valued='high'))
    def ipo_rule_3671(self):
        self.declare(Fact(recommendation='Laba bersih menunjukkan keuntungan. ROA menunjukkan efisiensi tinggi. ROE menunjukkan keuntungan yang tinggi.'))


    @Rule(Fact(per_valued='low'), Fact(der_valued='high'), Fact(roa_valued='high'))
    def ipo_rule_3672(self):
        self.declare(Fact(recommendation='PER berada di tingkat yang rendah. DER menunjukkan tingkat hutang yang tinggi. ROA menunjukkan efisiensi tinggi.'))


    @Rule(Fact(per_valued='low'), Fact(der_valued='high'), Fact(roe_valued='high'))
    def ipo_rule_3673(self):
        self.declare(Fact(recommendation='PER berada di tingkat yang rendah. DER menunjukkan tingkat hutang yang tinggi. ROE menunjukkan keuntungan yang tinggi.'))


    @Rule(Fact(per_valued='low'), Fact(roa_valued='high'), Fact(roe_valued='high'))
    def ipo_rule_3674(self):
        self.declare(Fact(recommendation='PER berada di tingkat yang rendah. ROA menunjukkan efisiensi tinggi. ROE menunjukkan keuntungan yang tinggi.'))


    @Rule(Fact(der_valued='high'), Fact(roa_valued='high'), Fact(roe_valued='high'))
    def ipo_rule_3675(self):
        self.declare(Fact(recommendation='DER menunjukkan tingkat hutang yang tinggi. ROA menunjukkan efisiensi tinggi. ROE menunjukkan keuntungan yang tinggi.'))


    @Rule(Fact(underwriter_valued='bad'), Fact(warrant_valued='bad'), Fact(net_income_valued='profit'))
    def ipo_rule_3676(self):
        self.declare(Fact(recommendation='Underwriter berkualitas buruk. Warrant menunjukkan kondisi buruk. Laba bersih menunjukkan keuntungan.'))


    @Rule(Fact(underwriter_valued='bad'), Fact(warrant_valued='bad'), Fact(per_valued='low'))
    def ipo_rule_3677(self):
        self.declare(Fact(recommendation='Underwriter berkualitas buruk. Warrant menunjukkan kondisi buruk. PER berada di tingkat yang rendah.'))


    @Rule(Fact(underwriter_valued='bad'), Fact(warrant_valued='bad'), Fact(der_valued='high'))
    def ipo_rule_3678(self):
        self.declare(Fact(recommendation='Underwriter berkualitas buruk. Warrant menunjukkan kondisi buruk. DER menunjukkan tingkat hutang yang tinggi.'))


    @Rule(Fact(underwriter_valued='bad'), Fact(warrant_valued='bad'), Fact(roa_valued='high'))
    def ipo_rule_3679(self):
        self.declare(Fact(recommendation='Underwriter berkualitas buruk. Warrant menunjukkan kondisi buruk. ROA menunjukkan efisiensi tinggi.'))


    @Rule(Fact(underwriter_valued='bad'), Fact(warrant_valued='bad'), Fact(roe_valued='low'))
    def ipo_rule_3680(self):
        self.declare(Fact(recommendation='Underwriter berkualitas buruk. Warrant menunjukkan kondisi buruk. ROE menunjukkan keuntungan yang rendah.'))


    @Rule(Fact(underwriter_valued='bad'), Fact(net_income_valued='profit'), Fact(per_valued='low'))
    def ipo_rule_3681(self):
        self.declare(Fact(recommendation='Underwriter berkualitas buruk. Laba bersih menunjukkan keuntungan. PER berada di tingkat yang rendah.'))


    @Rule(Fact(underwriter_valued='bad'), Fact(net_income_valued='profit'), Fact(der_valued='high'))
    def ipo_rule_3682(self):
        self.declare(Fact(recommendation='Underwriter berkualitas buruk. Laba bersih menunjukkan keuntungan. DER menunjukkan tingkat hutang yang tinggi.'))


    @Rule(Fact(underwriter_valued='bad'), Fact(net_income_valued='profit'), Fact(roa_valued='high'))
    def ipo_rule_3683(self):
        self.declare(Fact(recommendation='Underwriter berkualitas buruk. Laba bersih menunjukkan keuntungan. ROA menunjukkan efisiensi tinggi.'))


    @Rule(Fact(underwriter_valued='bad'), Fact(net_income_valued='profit'), Fact(roe_valued='low'))
    def ipo_rule_3684(self):
        self.declare(Fact(recommendation='Underwriter berkualitas buruk. Laba bersih menunjukkan keuntungan. ROE menunjukkan keuntungan yang rendah.'))


    @Rule(Fact(underwriter_valued='bad'), Fact(per_valued='low'), Fact(der_valued='high'))
    def ipo_rule_3685(self):
        self.declare(Fact(recommendation='Underwriter berkualitas buruk. PER berada di tingkat yang rendah. DER menunjukkan tingkat hutang yang tinggi.'))


    @Rule(Fact(underwriter_valued='bad'), Fact(per_valued='low'), Fact(roa_valued='high'))
    def ipo_rule_3686(self):
        self.declare(Fact(recommendation='Underwriter berkualitas buruk. PER berada di tingkat yang rendah. ROA menunjukkan efisiensi tinggi.'))


    @Rule(Fact(underwriter_valued='bad'), Fact(per_valued='low'), Fact(roe_valued='low'))
    def ipo_rule_3687(self):
        self.declare(Fact(recommendation='Underwriter berkualitas buruk. PER berada di tingkat yang rendah. ROE menunjukkan keuntungan yang rendah.'))


    @Rule(Fact(underwriter_valued='bad'), Fact(der_valued='high'), Fact(roa_valued='high'))
    def ipo_rule_3688(self):
        self.declare(Fact(recommendation='Underwriter berkualitas buruk. DER menunjukkan tingkat hutang yang tinggi. ROA menunjukkan efisiensi tinggi.'))


    @Rule(Fact(underwriter_valued='bad'), Fact(der_valued='high'), Fact(roe_valued='low'))
    def ipo_rule_3689(self):
        self.declare(Fact(recommendation='Underwriter berkualitas buruk. DER menunjukkan tingkat hutang yang tinggi. ROE menunjukkan keuntungan yang rendah.'))


    @Rule(Fact(underwriter_valued='bad'), Fact(roa_valued='high'), Fact(roe_valued='low'))
    def ipo_rule_3690(self):
        self.declare(Fact(recommendation='Underwriter berkualitas buruk. ROA menunjukkan efisiensi tinggi. ROE menunjukkan keuntungan yang rendah.'))


    @Rule(Fact(warrant_valued='bad'), Fact(net_income_valued='profit'), Fact(per_valued='low'))
    def ipo_rule_3691(self):
        self.declare(Fact(recommendation='Warrant menunjukkan kondisi buruk. Laba bersih menunjukkan keuntungan. PER berada di tingkat yang rendah.'))


    @Rule(Fact(warrant_valued='bad'), Fact(net_income_valued='profit'), Fact(der_valued='high'))
    def ipo_rule_3692(self):
        self.declare(Fact(recommendation='Warrant menunjukkan kondisi buruk. Laba bersih menunjukkan keuntungan. DER menunjukkan tingkat hutang yang tinggi.'))


    @Rule(Fact(warrant_valued='bad'), Fact(net_income_valued='profit'), Fact(roa_valued='high'))
    def ipo_rule_3693(self):
        self.declare(Fact(recommendation='Warrant menunjukkan kondisi buruk. Laba bersih menunjukkan keuntungan. ROA menunjukkan efisiensi tinggi.'))


    @Rule(Fact(warrant_valued='bad'), Fact(net_income_valued='profit'), Fact(roe_valued='low'))
    def ipo_rule_3694(self):
        self.declare(Fact(recommendation='Warrant menunjukkan kondisi buruk. Laba bersih menunjukkan keuntungan. ROE menunjukkan keuntungan yang rendah.'))


    @Rule(Fact(warrant_valued='bad'), Fact(per_valued='low'), Fact(der_valued='high'))
    def ipo_rule_3695(self):
        self.declare(Fact(recommendation='Warrant menunjukkan kondisi buruk. PER berada di tingkat yang rendah. DER menunjukkan tingkat hutang yang tinggi.'))


    @Rule(Fact(warrant_valued='bad'), Fact(per_valued='low'), Fact(roa_valued='high'))
    def ipo_rule_3696(self):
        self.declare(Fact(recommendation='Warrant menunjukkan kondisi buruk. PER berada di tingkat yang rendah. ROA menunjukkan efisiensi tinggi.'))


    @Rule(Fact(warrant_valued='bad'), Fact(per_valued='low'), Fact(roe_valued='low'))
    def ipo_rule_3697(self):
        self.declare(Fact(recommendation='Warrant menunjukkan kondisi buruk. PER berada di tingkat yang rendah. ROE menunjukkan keuntungan yang rendah.'))


    @Rule(Fact(warrant_valued='bad'), Fact(der_valued='high'), Fact(roa_valued='high'))
    def ipo_rule_3698(self):
        self.declare(Fact(recommendation='Warrant menunjukkan kondisi buruk. DER menunjukkan tingkat hutang yang tinggi. ROA menunjukkan efisiensi tinggi.'))


    @Rule(Fact(warrant_valued='bad'), Fact(der_valued='high'), Fact(roe_valued='low'))
    def ipo_rule_3699(self):
        self.declare(Fact(recommendation='Warrant menunjukkan kondisi buruk. DER menunjukkan tingkat hutang yang tinggi. ROE menunjukkan keuntungan yang rendah.'))


    @Rule(Fact(warrant_valued='bad'), Fact(roa_valued='high'), Fact(roe_valued='low'))
    def ipo_rule_3700(self):
        self.declare(Fact(recommendation='Warrant menunjukkan kondisi buruk. ROA menunjukkan efisiensi tinggi. ROE menunjukkan keuntungan yang rendah.'))


    @Rule(Fact(net_income_valued='profit'), Fact(per_valued='low'), Fact(der_valued='high'))
    def ipo_rule_3701(self):
        self.declare(Fact(recommendation='Laba bersih menunjukkan keuntungan. PER berada di tingkat yang rendah. DER menunjukkan tingkat hutang yang tinggi.'))


    @Rule(Fact(net_income_valued='profit'), Fact(per_valued='low'), Fact(roa_valued='high'))
    def ipo_rule_3702(self):
        self.declare(Fact(recommendation='Laba bersih menunjukkan keuntungan. PER berada di tingkat yang rendah. ROA menunjukkan efisiensi tinggi.'))


    @Rule(Fact(net_income_valued='profit'), Fact(per_valued='low'), Fact(roe_valued='low'))
    def ipo_rule_3703(self):
        self.declare(Fact(recommendation='Laba bersih menunjukkan keuntungan. PER berada di tingkat yang rendah. ROE menunjukkan keuntungan yang rendah.'))


    @Rule(Fact(net_income_valued='profit'), Fact(der_valued='high'), Fact(roa_valued='high'))
    def ipo_rule_3704(self):
        self.declare(Fact(recommendation='Laba bersih menunjukkan keuntungan. DER menunjukkan tingkat hutang yang tinggi. ROA menunjukkan efisiensi tinggi.'))


    @Rule(Fact(net_income_valued='profit'), Fact(der_valued='high'), Fact(roe_valued='low'))
    def ipo_rule_3705(self):
        self.declare(Fact(recommendation='Laba bersih menunjukkan keuntungan. DER menunjukkan tingkat hutang yang tinggi. ROE menunjukkan keuntungan yang rendah.'))


    @Rule(Fact(net_income_valued='profit'), Fact(roa_valued='high'), Fact(roe_valued='low'))
    def ipo_rule_3706(self):
        self.declare(Fact(recommendation='Laba bersih menunjukkan keuntungan. ROA menunjukkan efisiensi tinggi. ROE menunjukkan keuntungan yang rendah.'))


    @Rule(Fact(per_valued='low'), Fact(der_valued='high'), Fact(roa_valued='high'))
    def ipo_rule_3707(self):
        self.declare(Fact(recommendation='PER berada di tingkat yang rendah. DER menunjukkan tingkat hutang yang tinggi. ROA menunjukkan efisiensi tinggi.'))


    @Rule(Fact(per_valued='low'), Fact(der_valued='high'), Fact(roe_valued='low'))
    def ipo_rule_3708(self):
        self.declare(Fact(recommendation='PER berada di tingkat yang rendah. DER menunjukkan tingkat hutang yang tinggi. ROE menunjukkan keuntungan yang rendah.'))


    @Rule(Fact(per_valued='low'), Fact(roa_valued='high'), Fact(roe_valued='low'))
    def ipo_rule_3709(self):
        self.declare(Fact(recommendation='PER berada di tingkat yang rendah. ROA menunjukkan efisiensi tinggi. ROE menunjukkan keuntungan yang rendah.'))


    @Rule(Fact(der_valued='high'), Fact(roa_valued='high'), Fact(roe_valued='low'))
    def ipo_rule_3710(self):
        self.declare(Fact(recommendation='DER menunjukkan tingkat hutang yang tinggi. ROA menunjukkan efisiensi tinggi. ROE menunjukkan keuntungan yang rendah.'))


    @Rule(Fact(underwriter_valued='bad'), Fact(warrant_valued='bad'), Fact(net_income_valued='profit'))
    def ipo_rule_3711(self):
        self.declare(Fact(recommendation='Underwriter berkualitas buruk. Warrant menunjukkan kondisi buruk. Laba bersih menunjukkan keuntungan.'))


    @Rule(Fact(underwriter_valued='bad'), Fact(warrant_valued='bad'), Fact(per_valued='low'))
    def ipo_rule_3712(self):
        self.declare(Fact(recommendation='Underwriter berkualitas buruk. Warrant menunjukkan kondisi buruk. PER berada di tingkat yang rendah.'))


    @Rule(Fact(underwriter_valued='bad'), Fact(warrant_valued='bad'), Fact(der_valued='high'))
    def ipo_rule_3713(self):
        self.declare(Fact(recommendation='Underwriter berkualitas buruk. Warrant menunjukkan kondisi buruk. DER menunjukkan tingkat hutang yang tinggi.'))


    @Rule(Fact(underwriter_valued='bad'), Fact(warrant_valued='bad'), Fact(roa_valued='low'))
    def ipo_rule_3714(self):
        self.declare(Fact(recommendation='Underwriter berkualitas buruk. Warrant menunjukkan kondisi buruk. ROA menunjukkan efisiensi rendah.'))


    @Rule(Fact(underwriter_valued='bad'), Fact(warrant_valued='bad'), Fact(roe_valued='high'))
    def ipo_rule_3715(self):
        self.declare(Fact(recommendation='Underwriter berkualitas buruk. Warrant menunjukkan kondisi buruk. ROE menunjukkan keuntungan yang tinggi.'))


    @Rule(Fact(underwriter_valued='bad'), Fact(net_income_valued='profit'), Fact(per_valued='low'))
    def ipo_rule_3716(self):
        self.declare(Fact(recommendation='Underwriter berkualitas buruk. Laba bersih menunjukkan keuntungan. PER berada di tingkat yang rendah.'))


    @Rule(Fact(underwriter_valued='bad'), Fact(net_income_valued='profit'), Fact(der_valued='high'))
    def ipo_rule_3717(self):
        self.declare(Fact(recommendation='Underwriter berkualitas buruk. Laba bersih menunjukkan keuntungan. DER menunjukkan tingkat hutang yang tinggi.'))


    @Rule(Fact(underwriter_valued='bad'), Fact(net_income_valued='profit'), Fact(roa_valued='low'))
    def ipo_rule_3718(self):
        self.declare(Fact(recommendation='Underwriter berkualitas buruk. Laba bersih menunjukkan keuntungan. ROA menunjukkan efisiensi rendah.'))


    @Rule(Fact(underwriter_valued='bad'), Fact(net_income_valued='profit'), Fact(roe_valued='high'))
    def ipo_rule_3719(self):
        self.declare(Fact(recommendation='Underwriter berkualitas buruk. Laba bersih menunjukkan keuntungan. ROE menunjukkan keuntungan yang tinggi.'))


    @Rule(Fact(underwriter_valued='bad'), Fact(per_valued='low'), Fact(der_valued='high'))
    def ipo_rule_3720(self):
        self.declare(Fact(recommendation='Underwriter berkualitas buruk. PER berada di tingkat yang rendah. DER menunjukkan tingkat hutang yang tinggi.'))


    @Rule(Fact(underwriter_valued='bad'), Fact(per_valued='low'), Fact(roa_valued='low'))
    def ipo_rule_3721(self):
        self.declare(Fact(recommendation='Underwriter berkualitas buruk. PER berada di tingkat yang rendah. ROA menunjukkan efisiensi rendah.'))


    @Rule(Fact(underwriter_valued='bad'), Fact(per_valued='low'), Fact(roe_valued='high'))
    def ipo_rule_3722(self):
        self.declare(Fact(recommendation='Underwriter berkualitas buruk. PER berada di tingkat yang rendah. ROE menunjukkan keuntungan yang tinggi.'))


    @Rule(Fact(underwriter_valued='bad'), Fact(der_valued='high'), Fact(roa_valued='low'))
    def ipo_rule_3723(self):
        self.declare(Fact(recommendation='Underwriter berkualitas buruk. DER menunjukkan tingkat hutang yang tinggi. ROA menunjukkan efisiensi rendah.'))


    @Rule(Fact(underwriter_valued='bad'), Fact(der_valued='high'), Fact(roe_valued='high'))
    def ipo_rule_3724(self):
        self.declare(Fact(recommendation='Underwriter berkualitas buruk. DER menunjukkan tingkat hutang yang tinggi. ROE menunjukkan keuntungan yang tinggi.'))


    @Rule(Fact(underwriter_valued='bad'), Fact(roa_valued='low'), Fact(roe_valued='high'))
    def ipo_rule_3725(self):
        self.declare(Fact(recommendation='Underwriter berkualitas buruk. ROA menunjukkan efisiensi rendah. ROE menunjukkan keuntungan yang tinggi.'))


    @Rule(Fact(warrant_valued='bad'), Fact(net_income_valued='profit'), Fact(per_valued='low'))
    def ipo_rule_3726(self):
        self.declare(Fact(recommendation='Warrant menunjukkan kondisi buruk. Laba bersih menunjukkan keuntungan. PER berada di tingkat yang rendah.'))


    @Rule(Fact(warrant_valued='bad'), Fact(net_income_valued='profit'), Fact(der_valued='high'))
    def ipo_rule_3727(self):
        self.declare(Fact(recommendation='Warrant menunjukkan kondisi buruk. Laba bersih menunjukkan keuntungan. DER menunjukkan tingkat hutang yang tinggi.'))


    @Rule(Fact(warrant_valued='bad'), Fact(net_income_valued='profit'), Fact(roa_valued='low'))
    def ipo_rule_3728(self):
        self.declare(Fact(recommendation='Warrant menunjukkan kondisi buruk. Laba bersih menunjukkan keuntungan. ROA menunjukkan efisiensi rendah.'))


    @Rule(Fact(warrant_valued='bad'), Fact(net_income_valued='profit'), Fact(roe_valued='high'))
    def ipo_rule_3729(self):
        self.declare(Fact(recommendation='Warrant menunjukkan kondisi buruk. Laba bersih menunjukkan keuntungan. ROE menunjukkan keuntungan yang tinggi.'))


    @Rule(Fact(warrant_valued='bad'), Fact(per_valued='low'), Fact(der_valued='high'))
    def ipo_rule_3730(self):
        self.declare(Fact(recommendation='Warrant menunjukkan kondisi buruk. PER berada di tingkat yang rendah. DER menunjukkan tingkat hutang yang tinggi.'))


    @Rule(Fact(warrant_valued='bad'), Fact(per_valued='low'), Fact(roa_valued='low'))
    def ipo_rule_3731(self):
        self.declare(Fact(recommendation='Warrant menunjukkan kondisi buruk. PER berada di tingkat yang rendah. ROA menunjukkan efisiensi rendah.'))


    @Rule(Fact(warrant_valued='bad'), Fact(per_valued='low'), Fact(roe_valued='high'))
    def ipo_rule_3732(self):
        self.declare(Fact(recommendation='Warrant menunjukkan kondisi buruk. PER berada di tingkat yang rendah. ROE menunjukkan keuntungan yang tinggi.'))


    @Rule(Fact(warrant_valued='bad'), Fact(der_valued='high'), Fact(roa_valued='low'))
    def ipo_rule_3733(self):
        self.declare(Fact(recommendation='Warrant menunjukkan kondisi buruk. DER menunjukkan tingkat hutang yang tinggi. ROA menunjukkan efisiensi rendah.'))


    @Rule(Fact(warrant_valued='bad'), Fact(der_valued='high'), Fact(roe_valued='high'))
    def ipo_rule_3734(self):
        self.declare(Fact(recommendation='Warrant menunjukkan kondisi buruk. DER menunjukkan tingkat hutang yang tinggi. ROE menunjukkan keuntungan yang tinggi.'))


    @Rule(Fact(warrant_valued='bad'), Fact(roa_valued='low'), Fact(roe_valued='high'))
    def ipo_rule_3735(self):
        self.declare(Fact(recommendation='Warrant menunjukkan kondisi buruk. ROA menunjukkan efisiensi rendah. ROE menunjukkan keuntungan yang tinggi.'))


    @Rule(Fact(net_income_valued='profit'), Fact(per_valued='low'), Fact(der_valued='high'))
    def ipo_rule_3736(self):
        self.declare(Fact(recommendation='Laba bersih menunjukkan keuntungan. PER berada di tingkat yang rendah. DER menunjukkan tingkat hutang yang tinggi.'))


    @Rule(Fact(net_income_valued='profit'), Fact(per_valued='low'), Fact(roa_valued='low'))
    def ipo_rule_3737(self):
        self.declare(Fact(recommendation='Laba bersih menunjukkan keuntungan. PER berada di tingkat yang rendah. ROA menunjukkan efisiensi rendah.'))


    @Rule(Fact(net_income_valued='profit'), Fact(per_valued='low'), Fact(roe_valued='high'))
    def ipo_rule_3738(self):
        self.declare(Fact(recommendation='Laba bersih menunjukkan keuntungan. PER berada di tingkat yang rendah. ROE menunjukkan keuntungan yang tinggi.'))


    @Rule(Fact(net_income_valued='profit'), Fact(der_valued='high'), Fact(roa_valued='low'))
    def ipo_rule_3739(self):
        self.declare(Fact(recommendation='Laba bersih menunjukkan keuntungan. DER menunjukkan tingkat hutang yang tinggi. ROA menunjukkan efisiensi rendah.'))


    @Rule(Fact(net_income_valued='profit'), Fact(der_valued='high'), Fact(roe_valued='high'))
    def ipo_rule_3740(self):
        self.declare(Fact(recommendation='Laba bersih menunjukkan keuntungan. DER menunjukkan tingkat hutang yang tinggi. ROE menunjukkan keuntungan yang tinggi.'))


    @Rule(Fact(net_income_valued='profit'), Fact(roa_valued='low'), Fact(roe_valued='high'))
    def ipo_rule_3741(self):
        self.declare(Fact(recommendation='Laba bersih menunjukkan keuntungan. ROA menunjukkan efisiensi rendah. ROE menunjukkan keuntungan yang tinggi.'))


    @Rule(Fact(per_valued='low'), Fact(der_valued='high'), Fact(roa_valued='low'))
    def ipo_rule_3742(self):
        self.declare(Fact(recommendation='PER berada di tingkat yang rendah. DER menunjukkan tingkat hutang yang tinggi. ROA menunjukkan efisiensi rendah.'))


    @Rule(Fact(per_valued='low'), Fact(der_valued='high'), Fact(roe_valued='high'))
    def ipo_rule_3743(self):
        self.declare(Fact(recommendation='PER berada di tingkat yang rendah. DER menunjukkan tingkat hutang yang tinggi. ROE menunjukkan keuntungan yang tinggi.'))


    @Rule(Fact(per_valued='low'), Fact(roa_valued='low'), Fact(roe_valued='high'))
    def ipo_rule_3744(self):
        self.declare(Fact(recommendation='PER berada di tingkat yang rendah. ROA menunjukkan efisiensi rendah. ROE menunjukkan keuntungan yang tinggi.'))


    @Rule(Fact(der_valued='high'), Fact(roa_valued='low'), Fact(roe_valued='high'))
    def ipo_rule_3745(self):
        self.declare(Fact(recommendation='DER menunjukkan tingkat hutang yang tinggi. ROA menunjukkan efisiensi rendah. ROE menunjukkan keuntungan yang tinggi.'))


    @Rule(Fact(underwriter_valued='bad'), Fact(warrant_valued='bad'), Fact(net_income_valued='profit'))
    def ipo_rule_3746(self):
        self.declare(Fact(recommendation='Underwriter berkualitas buruk. Warrant menunjukkan kondisi buruk. Laba bersih menunjukkan keuntungan.'))


    @Rule(Fact(underwriter_valued='bad'), Fact(warrant_valued='bad'), Fact(per_valued='low'))
    def ipo_rule_3747(self):
        self.declare(Fact(recommendation='Underwriter berkualitas buruk. Warrant menunjukkan kondisi buruk. PER berada di tingkat yang rendah.'))


    @Rule(Fact(underwriter_valued='bad'), Fact(warrant_valued='bad'), Fact(der_valued='high'))
    def ipo_rule_3748(self):
        self.declare(Fact(recommendation='Underwriter berkualitas buruk. Warrant menunjukkan kondisi buruk. DER menunjukkan tingkat hutang yang tinggi.'))


    @Rule(Fact(underwriter_valued='bad'), Fact(warrant_valued='bad'), Fact(roa_valued='low'))
    def ipo_rule_3749(self):
        self.declare(Fact(recommendation='Underwriter berkualitas buruk. Warrant menunjukkan kondisi buruk. ROA menunjukkan efisiensi rendah.'))


    @Rule(Fact(underwriter_valued='bad'), Fact(warrant_valued='bad'), Fact(roe_valued='low'))
    def ipo_rule_3750(self):
        self.declare(Fact(recommendation='Underwriter berkualitas buruk. Warrant menunjukkan kondisi buruk. ROE menunjukkan keuntungan yang rendah.'))


    @Rule(Fact(underwriter_valued='bad'), Fact(net_income_valued='profit'), Fact(per_valued='low'))
    def ipo_rule_3751(self):
        self.declare(Fact(recommendation='Underwriter berkualitas buruk. Laba bersih menunjukkan keuntungan. PER berada di tingkat yang rendah.'))


    @Rule(Fact(underwriter_valued='bad'), Fact(net_income_valued='profit'), Fact(der_valued='high'))
    def ipo_rule_3752(self):
        self.declare(Fact(recommendation='Underwriter berkualitas buruk. Laba bersih menunjukkan keuntungan. DER menunjukkan tingkat hutang yang tinggi.'))


    @Rule(Fact(underwriter_valued='bad'), Fact(net_income_valued='profit'), Fact(roa_valued='low'))
    def ipo_rule_3753(self):
        self.declare(Fact(recommendation='Underwriter berkualitas buruk. Laba bersih menunjukkan keuntungan. ROA menunjukkan efisiensi rendah.'))


    @Rule(Fact(underwriter_valued='bad'), Fact(net_income_valued='profit'), Fact(roe_valued='low'))
    def ipo_rule_3754(self):
        self.declare(Fact(recommendation='Underwriter berkualitas buruk. Laba bersih menunjukkan keuntungan. ROE menunjukkan keuntungan yang rendah.'))


    @Rule(Fact(underwriter_valued='bad'), Fact(per_valued='low'), Fact(der_valued='high'))
    def ipo_rule_3755(self):
        self.declare(Fact(recommendation='Underwriter berkualitas buruk. PER berada di tingkat yang rendah. DER menunjukkan tingkat hutang yang tinggi.'))


    @Rule(Fact(underwriter_valued='bad'), Fact(per_valued='low'), Fact(roa_valued='low'))
    def ipo_rule_3756(self):
        self.declare(Fact(recommendation='Underwriter berkualitas buruk. PER berada di tingkat yang rendah. ROA menunjukkan efisiensi rendah.'))


    @Rule(Fact(underwriter_valued='bad'), Fact(per_valued='low'), Fact(roe_valued='low'))
    def ipo_rule_3757(self):
        self.declare(Fact(recommendation='Underwriter berkualitas buruk. PER berada di tingkat yang rendah. ROE menunjukkan keuntungan yang rendah.'))


    @Rule(Fact(underwriter_valued='bad'), Fact(der_valued='high'), Fact(roa_valued='low'))
    def ipo_rule_3758(self):
        self.declare(Fact(recommendation='Underwriter berkualitas buruk. DER menunjukkan tingkat hutang yang tinggi. ROA menunjukkan efisiensi rendah.'))


    @Rule(Fact(underwriter_valued='bad'), Fact(der_valued='high'), Fact(roe_valued='low'))
    def ipo_rule_3759(self):
        self.declare(Fact(recommendation='Underwriter berkualitas buruk. DER menunjukkan tingkat hutang yang tinggi. ROE menunjukkan keuntungan yang rendah.'))


    @Rule(Fact(underwriter_valued='bad'), Fact(roa_valued='low'), Fact(roe_valued='low'))
    def ipo_rule_3760(self):
        self.declare(Fact(recommendation='Underwriter berkualitas buruk. ROA menunjukkan efisiensi rendah. ROE menunjukkan keuntungan yang rendah.'))


    @Rule(Fact(warrant_valued='bad'), Fact(net_income_valued='profit'), Fact(per_valued='low'))
    def ipo_rule_3761(self):
        self.declare(Fact(recommendation='Warrant menunjukkan kondisi buruk. Laba bersih menunjukkan keuntungan. PER berada di tingkat yang rendah.'))


    @Rule(Fact(warrant_valued='bad'), Fact(net_income_valued='profit'), Fact(der_valued='high'))
    def ipo_rule_3762(self):
        self.declare(Fact(recommendation='Warrant menunjukkan kondisi buruk. Laba bersih menunjukkan keuntungan. DER menunjukkan tingkat hutang yang tinggi.'))


    @Rule(Fact(warrant_valued='bad'), Fact(net_income_valued='profit'), Fact(roa_valued='low'))
    def ipo_rule_3763(self):
        self.declare(Fact(recommendation='Warrant menunjukkan kondisi buruk. Laba bersih menunjukkan keuntungan. ROA menunjukkan efisiensi rendah.'))


    @Rule(Fact(warrant_valued='bad'), Fact(net_income_valued='profit'), Fact(roe_valued='low'))
    def ipo_rule_3764(self):
        self.declare(Fact(recommendation='Warrant menunjukkan kondisi buruk. Laba bersih menunjukkan keuntungan. ROE menunjukkan keuntungan yang rendah.'))


    @Rule(Fact(warrant_valued='bad'), Fact(per_valued='low'), Fact(der_valued='high'))
    def ipo_rule_3765(self):
        self.declare(Fact(recommendation='Warrant menunjukkan kondisi buruk. PER berada di tingkat yang rendah. DER menunjukkan tingkat hutang yang tinggi.'))


    @Rule(Fact(warrant_valued='bad'), Fact(per_valued='low'), Fact(roa_valued='low'))
    def ipo_rule_3766(self):
        self.declare(Fact(recommendation='Warrant menunjukkan kondisi buruk. PER berada di tingkat yang rendah. ROA menunjukkan efisiensi rendah.'))


    @Rule(Fact(warrant_valued='bad'), Fact(per_valued='low'), Fact(roe_valued='low'))
    def ipo_rule_3767(self):
        self.declare(Fact(recommendation='Warrant menunjukkan kondisi buruk. PER berada di tingkat yang rendah. ROE menunjukkan keuntungan yang rendah.'))


    @Rule(Fact(warrant_valued='bad'), Fact(der_valued='high'), Fact(roa_valued='low'))
    def ipo_rule_3768(self):
        self.declare(Fact(recommendation='Warrant menunjukkan kondisi buruk. DER menunjukkan tingkat hutang yang tinggi. ROA menunjukkan efisiensi rendah.'))


    @Rule(Fact(warrant_valued='bad'), Fact(der_valued='high'), Fact(roe_valued='low'))
    def ipo_rule_3769(self):
        self.declare(Fact(recommendation='Warrant menunjukkan kondisi buruk. DER menunjukkan tingkat hutang yang tinggi. ROE menunjukkan keuntungan yang rendah.'))


    @Rule(Fact(warrant_valued='bad'), Fact(roa_valued='low'), Fact(roe_valued='low'))
    def ipo_rule_3770(self):
        self.declare(Fact(recommendation='Warrant menunjukkan kondisi buruk. ROA menunjukkan efisiensi rendah. ROE menunjukkan keuntungan yang rendah.'))


    @Rule(Fact(net_income_valued='profit'), Fact(per_valued='low'), Fact(der_valued='high'))
    def ipo_rule_3771(self):
        self.declare(Fact(recommendation='Laba bersih menunjukkan keuntungan. PER berada di tingkat yang rendah. DER menunjukkan tingkat hutang yang tinggi.'))


    @Rule(Fact(net_income_valued='profit'), Fact(per_valued='low'), Fact(roa_valued='low'))
    def ipo_rule_3772(self):
        self.declare(Fact(recommendation='Laba bersih menunjukkan keuntungan. PER berada di tingkat yang rendah. ROA menunjukkan efisiensi rendah.'))


    @Rule(Fact(net_income_valued='profit'), Fact(per_valued='low'), Fact(roe_valued='low'))
    def ipo_rule_3773(self):
        self.declare(Fact(recommendation='Laba bersih menunjukkan keuntungan. PER berada di tingkat yang rendah. ROE menunjukkan keuntungan yang rendah.'))


    @Rule(Fact(net_income_valued='profit'), Fact(der_valued='high'), Fact(roa_valued='low'))
    def ipo_rule_3774(self):
        self.declare(Fact(recommendation='Laba bersih menunjukkan keuntungan. DER menunjukkan tingkat hutang yang tinggi. ROA menunjukkan efisiensi rendah.'))


    @Rule(Fact(net_income_valued='profit'), Fact(der_valued='high'), Fact(roe_valued='low'))
    def ipo_rule_3775(self):
        self.declare(Fact(recommendation='Laba bersih menunjukkan keuntungan. DER menunjukkan tingkat hutang yang tinggi. ROE menunjukkan keuntungan yang rendah.'))


    @Rule(Fact(net_income_valued='profit'), Fact(roa_valued='low'), Fact(roe_valued='low'))
    def ipo_rule_3776(self):
        self.declare(Fact(recommendation='Laba bersih menunjukkan keuntungan. ROA menunjukkan efisiensi rendah. ROE menunjukkan keuntungan yang rendah.'))


    @Rule(Fact(per_valued='low'), Fact(der_valued='high'), Fact(roa_valued='low'))
    def ipo_rule_3777(self):
        self.declare(Fact(recommendation='PER berada di tingkat yang rendah. DER menunjukkan tingkat hutang yang tinggi. ROA menunjukkan efisiensi rendah.'))


    @Rule(Fact(per_valued='low'), Fact(der_valued='high'), Fact(roe_valued='low'))
    def ipo_rule_3778(self):
        self.declare(Fact(recommendation='PER berada di tingkat yang rendah. DER menunjukkan tingkat hutang yang tinggi. ROE menunjukkan keuntungan yang rendah.'))


    @Rule(Fact(per_valued='low'), Fact(roa_valued='low'), Fact(roe_valued='low'))
    def ipo_rule_3779(self):
        self.declare(Fact(recommendation='PER berada di tingkat yang rendah. ROA menunjukkan efisiensi rendah. ROE menunjukkan keuntungan yang rendah.'))


    @Rule(Fact(der_valued='high'), Fact(roa_valued='low'), Fact(roe_valued='low'))
    def ipo_rule_3780(self):
        self.declare(Fact(recommendation='DER menunjukkan tingkat hutang yang tinggi. ROA menunjukkan efisiensi rendah. ROE menunjukkan keuntungan yang rendah.'))


    @Rule(Fact(underwriter_valued='bad'), Fact(warrant_valued='bad'), Fact(net_income_valued='profit'))
    def ipo_rule_3781(self):
        self.declare(Fact(recommendation='Underwriter berkualitas buruk. Warrant menunjukkan kondisi buruk. Laba bersih menunjukkan keuntungan.'))


    @Rule(Fact(underwriter_valued='bad'), Fact(warrant_valued='bad'), Fact(per_valued='low'))
    def ipo_rule_3782(self):
        self.declare(Fact(recommendation='Underwriter berkualitas buruk. Warrant menunjukkan kondisi buruk. PER berada di tingkat yang rendah.'))


    @Rule(Fact(underwriter_valued='bad'), Fact(warrant_valued='bad'), Fact(der_valued='low'))
    def ipo_rule_3783(self):
        self.declare(Fact(recommendation='Underwriter berkualitas buruk. Warrant menunjukkan kondisi buruk. DER menunjukkan tingkat hutang yang rendah.'))


    @Rule(Fact(underwriter_valued='bad'), Fact(warrant_valued='bad'), Fact(roa_valued='high'))
    def ipo_rule_3784(self):
        self.declare(Fact(recommendation='Underwriter berkualitas buruk. Warrant menunjukkan kondisi buruk. ROA menunjukkan efisiensi tinggi.'))


    @Rule(Fact(underwriter_valued='bad'), Fact(warrant_valued='bad'), Fact(roe_valued='high'))
    def ipo_rule_3785(self):
        self.declare(Fact(recommendation='Underwriter berkualitas buruk. Warrant menunjukkan kondisi buruk. ROE menunjukkan keuntungan yang tinggi.'))


    @Rule(Fact(underwriter_valued='bad'), Fact(net_income_valued='profit'), Fact(per_valued='low'))
    def ipo_rule_3786(self):
        self.declare(Fact(recommendation='Underwriter berkualitas buruk. Laba bersih menunjukkan keuntungan. PER berada di tingkat yang rendah.'))


    @Rule(Fact(underwriter_valued='bad'), Fact(net_income_valued='profit'), Fact(der_valued='low'))
    def ipo_rule_3787(self):
        self.declare(Fact(recommendation='Underwriter berkualitas buruk. Laba bersih menunjukkan keuntungan. DER menunjukkan tingkat hutang yang rendah.'))


    @Rule(Fact(underwriter_valued='bad'), Fact(net_income_valued='profit'), Fact(roa_valued='high'))
    def ipo_rule_3788(self):
        self.declare(Fact(recommendation='Underwriter berkualitas buruk. Laba bersih menunjukkan keuntungan. ROA menunjukkan efisiensi tinggi.'))


    @Rule(Fact(underwriter_valued='bad'), Fact(net_income_valued='profit'), Fact(roe_valued='high'))
    def ipo_rule_3789(self):
        self.declare(Fact(recommendation='Underwriter berkualitas buruk. Laba bersih menunjukkan keuntungan. ROE menunjukkan keuntungan yang tinggi.'))


    @Rule(Fact(underwriter_valued='bad'), Fact(per_valued='low'), Fact(der_valued='low'))
    def ipo_rule_3790(self):
        self.declare(Fact(recommendation='Underwriter berkualitas buruk. PER berada di tingkat yang rendah. DER menunjukkan tingkat hutang yang rendah.'))


    @Rule(Fact(underwriter_valued='bad'), Fact(per_valued='low'), Fact(roa_valued='high'))
    def ipo_rule_3791(self):
        self.declare(Fact(recommendation='Underwriter berkualitas buruk. PER berada di tingkat yang rendah. ROA menunjukkan efisiensi tinggi.'))


    @Rule(Fact(underwriter_valued='bad'), Fact(per_valued='low'), Fact(roe_valued='high'))
    def ipo_rule_3792(self):
        self.declare(Fact(recommendation='Underwriter berkualitas buruk. PER berada di tingkat yang rendah. ROE menunjukkan keuntungan yang tinggi.'))


    @Rule(Fact(underwriter_valued='bad'), Fact(der_valued='low'), Fact(roa_valued='high'))
    def ipo_rule_3793(self):
        self.declare(Fact(recommendation='Underwriter berkualitas buruk. DER menunjukkan tingkat hutang yang rendah. ROA menunjukkan efisiensi tinggi.'))


    @Rule(Fact(underwriter_valued='bad'), Fact(der_valued='low'), Fact(roe_valued='high'))
    def ipo_rule_3794(self):
        self.declare(Fact(recommendation='Underwriter berkualitas buruk. DER menunjukkan tingkat hutang yang rendah. ROE menunjukkan keuntungan yang tinggi.'))


    @Rule(Fact(underwriter_valued='bad'), Fact(roa_valued='high'), Fact(roe_valued='high'))
    def ipo_rule_3795(self):
        self.declare(Fact(recommendation='Underwriter berkualitas buruk. ROA menunjukkan efisiensi tinggi. ROE menunjukkan keuntungan yang tinggi.'))


    @Rule(Fact(warrant_valued='bad'), Fact(net_income_valued='profit'), Fact(per_valued='low'))
    def ipo_rule_3796(self):
        self.declare(Fact(recommendation='Warrant menunjukkan kondisi buruk. Laba bersih menunjukkan keuntungan. PER berada di tingkat yang rendah.'))


    @Rule(Fact(warrant_valued='bad'), Fact(net_income_valued='profit'), Fact(der_valued='low'))
    def ipo_rule_3797(self):
        self.declare(Fact(recommendation='Warrant menunjukkan kondisi buruk. Laba bersih menunjukkan keuntungan. DER menunjukkan tingkat hutang yang rendah.'))


    @Rule(Fact(warrant_valued='bad'), Fact(net_income_valued='profit'), Fact(roa_valued='high'))
    def ipo_rule_3798(self):
        self.declare(Fact(recommendation='Warrant menunjukkan kondisi buruk. Laba bersih menunjukkan keuntungan. ROA menunjukkan efisiensi tinggi.'))


    @Rule(Fact(warrant_valued='bad'), Fact(net_income_valued='profit'), Fact(roe_valued='high'))
    def ipo_rule_3799(self):
        self.declare(Fact(recommendation='Warrant menunjukkan kondisi buruk. Laba bersih menunjukkan keuntungan. ROE menunjukkan keuntungan yang tinggi.'))


    @Rule(Fact(warrant_valued='bad'), Fact(per_valued='low'), Fact(der_valued='low'))
    def ipo_rule_3800(self):
        self.declare(Fact(recommendation='Warrant menunjukkan kondisi buruk. PER berada di tingkat yang rendah. DER menunjukkan tingkat hutang yang rendah.'))


    @Rule(Fact(warrant_valued='bad'), Fact(per_valued='low'), Fact(roa_valued='high'))
    def ipo_rule_3801(self):
        self.declare(Fact(recommendation='Warrant menunjukkan kondisi buruk. PER berada di tingkat yang rendah. ROA menunjukkan efisiensi tinggi.'))


    @Rule(Fact(warrant_valued='bad'), Fact(per_valued='low'), Fact(roe_valued='high'))
    def ipo_rule_3802(self):
        self.declare(Fact(recommendation='Warrant menunjukkan kondisi buruk. PER berada di tingkat yang rendah. ROE menunjukkan keuntungan yang tinggi.'))


    @Rule(Fact(warrant_valued='bad'), Fact(der_valued='low'), Fact(roa_valued='high'))
    def ipo_rule_3803(self):
        self.declare(Fact(recommendation='Warrant menunjukkan kondisi buruk. DER menunjukkan tingkat hutang yang rendah. ROA menunjukkan efisiensi tinggi.'))


    @Rule(Fact(warrant_valued='bad'), Fact(der_valued='low'), Fact(roe_valued='high'))
    def ipo_rule_3804(self):
        self.declare(Fact(recommendation='Warrant menunjukkan kondisi buruk. DER menunjukkan tingkat hutang yang rendah. ROE menunjukkan keuntungan yang tinggi.'))


    @Rule(Fact(warrant_valued='bad'), Fact(roa_valued='high'), Fact(roe_valued='high'))
    def ipo_rule_3805(self):
        self.declare(Fact(recommendation='Warrant menunjukkan kondisi buruk. ROA menunjukkan efisiensi tinggi. ROE menunjukkan keuntungan yang tinggi.'))


    @Rule(Fact(net_income_valued='profit'), Fact(per_valued='low'), Fact(der_valued='low'))
    def ipo_rule_3806(self):
        self.declare(Fact(recommendation='Laba bersih menunjukkan keuntungan. PER berada di tingkat yang rendah. DER menunjukkan tingkat hutang yang rendah.'))


    @Rule(Fact(net_income_valued='profit'), Fact(per_valued='low'), Fact(roa_valued='high'))
    def ipo_rule_3807(self):
        self.declare(Fact(recommendation='Laba bersih menunjukkan keuntungan. PER berada di tingkat yang rendah. ROA menunjukkan efisiensi tinggi.'))


    @Rule(Fact(net_income_valued='profit'), Fact(per_valued='low'), Fact(roe_valued='high'))
    def ipo_rule_3808(self):
        self.declare(Fact(recommendation='Laba bersih menunjukkan keuntungan. PER berada di tingkat yang rendah. ROE menunjukkan keuntungan yang tinggi.'))


    @Rule(Fact(net_income_valued='profit'), Fact(der_valued='low'), Fact(roa_valued='high'))
    def ipo_rule_3809(self):
        self.declare(Fact(recommendation='Laba bersih menunjukkan keuntungan. DER menunjukkan tingkat hutang yang rendah. ROA menunjukkan efisiensi tinggi.'))


    @Rule(Fact(net_income_valued='profit'), Fact(der_valued='low'), Fact(roe_valued='high'))
    def ipo_rule_3810(self):
        self.declare(Fact(recommendation='Laba bersih menunjukkan keuntungan. DER menunjukkan tingkat hutang yang rendah. ROE menunjukkan keuntungan yang tinggi.'))


    @Rule(Fact(net_income_valued='profit'), Fact(roa_valued='high'), Fact(roe_valued='high'))
    def ipo_rule_3811(self):
        self.declare(Fact(recommendation='Laba bersih menunjukkan keuntungan. ROA menunjukkan efisiensi tinggi. ROE menunjukkan keuntungan yang tinggi.'))


    @Rule(Fact(per_valued='low'), Fact(der_valued='low'), Fact(roa_valued='high'))
    def ipo_rule_3812(self):
        self.declare(Fact(recommendation='PER berada di tingkat yang rendah. DER menunjukkan tingkat hutang yang rendah. ROA menunjukkan efisiensi tinggi.'))


    @Rule(Fact(per_valued='low'), Fact(der_valued='low'), Fact(roe_valued='high'))
    def ipo_rule_3813(self):
        self.declare(Fact(recommendation='PER berada di tingkat yang rendah. DER menunjukkan tingkat hutang yang rendah. ROE menunjukkan keuntungan yang tinggi.'))


    @Rule(Fact(per_valued='low'), Fact(roa_valued='high'), Fact(roe_valued='high'))
    def ipo_rule_3814(self):
        self.declare(Fact(recommendation='PER berada di tingkat yang rendah. ROA menunjukkan efisiensi tinggi. ROE menunjukkan keuntungan yang tinggi.'))


    @Rule(Fact(der_valued='low'), Fact(roa_valued='high'), Fact(roe_valued='high'))
    def ipo_rule_3815(self):
        self.declare(Fact(recommendation='DER menunjukkan tingkat hutang yang rendah. ROA menunjukkan efisiensi tinggi. ROE menunjukkan keuntungan yang tinggi.'))


    @Rule(Fact(underwriter_valued='bad'), Fact(warrant_valued='bad'), Fact(net_income_valued='profit'))
    def ipo_rule_3816(self):
        self.declare(Fact(recommendation='Underwriter berkualitas buruk. Warrant menunjukkan kondisi buruk. Laba bersih menunjukkan keuntungan.'))


    @Rule(Fact(underwriter_valued='bad'), Fact(warrant_valued='bad'), Fact(per_valued='low'))
    def ipo_rule_3817(self):
        self.declare(Fact(recommendation='Underwriter berkualitas buruk. Warrant menunjukkan kondisi buruk. PER berada di tingkat yang rendah.'))


    @Rule(Fact(underwriter_valued='bad'), Fact(warrant_valued='bad'), Fact(der_valued='low'))
    def ipo_rule_3818(self):
        self.declare(Fact(recommendation='Underwriter berkualitas buruk. Warrant menunjukkan kondisi buruk. DER menunjukkan tingkat hutang yang rendah.'))


    @Rule(Fact(underwriter_valued='bad'), Fact(warrant_valued='bad'), Fact(roa_valued='high'))
    def ipo_rule_3819(self):
        self.declare(Fact(recommendation='Underwriter berkualitas buruk. Warrant menunjukkan kondisi buruk. ROA menunjukkan efisiensi tinggi.'))


    @Rule(Fact(underwriter_valued='bad'), Fact(warrant_valued='bad'), Fact(roe_valued='low'))
    def ipo_rule_3820(self):
        self.declare(Fact(recommendation='Underwriter berkualitas buruk. Warrant menunjukkan kondisi buruk. ROE menunjukkan keuntungan yang rendah.'))


    @Rule(Fact(underwriter_valued='bad'), Fact(net_income_valued='profit'), Fact(per_valued='low'))
    def ipo_rule_3821(self):
        self.declare(Fact(recommendation='Underwriter berkualitas buruk. Laba bersih menunjukkan keuntungan. PER berada di tingkat yang rendah.'))


    @Rule(Fact(underwriter_valued='bad'), Fact(net_income_valued='profit'), Fact(der_valued='low'))
    def ipo_rule_3822(self):
        self.declare(Fact(recommendation='Underwriter berkualitas buruk. Laba bersih menunjukkan keuntungan. DER menunjukkan tingkat hutang yang rendah.'))


    @Rule(Fact(underwriter_valued='bad'), Fact(net_income_valued='profit'), Fact(roa_valued='high'))
    def ipo_rule_3823(self):
        self.declare(Fact(recommendation='Underwriter berkualitas buruk. Laba bersih menunjukkan keuntungan. ROA menunjukkan efisiensi tinggi.'))


    @Rule(Fact(underwriter_valued='bad'), Fact(net_income_valued='profit'), Fact(roe_valued='low'))
    def ipo_rule_3824(self):
        self.declare(Fact(recommendation='Underwriter berkualitas buruk. Laba bersih menunjukkan keuntungan. ROE menunjukkan keuntungan yang rendah.'))


    @Rule(Fact(underwriter_valued='bad'), Fact(per_valued='low'), Fact(der_valued='low'))
    def ipo_rule_3825(self):
        self.declare(Fact(recommendation='Underwriter berkualitas buruk. PER berada di tingkat yang rendah. DER menunjukkan tingkat hutang yang rendah.'))


    @Rule(Fact(underwriter_valued='bad'), Fact(per_valued='low'), Fact(roa_valued='high'))
    def ipo_rule_3826(self):
        self.declare(Fact(recommendation='Underwriter berkualitas buruk. PER berada di tingkat yang rendah. ROA menunjukkan efisiensi tinggi.'))


    @Rule(Fact(underwriter_valued='bad'), Fact(per_valued='low'), Fact(roe_valued='low'))
    def ipo_rule_3827(self):
        self.declare(Fact(recommendation='Underwriter berkualitas buruk. PER berada di tingkat yang rendah. ROE menunjukkan keuntungan yang rendah.'))


    @Rule(Fact(underwriter_valued='bad'), Fact(der_valued='low'), Fact(roa_valued='high'))
    def ipo_rule_3828(self):
        self.declare(Fact(recommendation='Underwriter berkualitas buruk. DER menunjukkan tingkat hutang yang rendah. ROA menunjukkan efisiensi tinggi.'))


    @Rule(Fact(underwriter_valued='bad'), Fact(der_valued='low'), Fact(roe_valued='low'))
    def ipo_rule_3829(self):
        self.declare(Fact(recommendation='Underwriter berkualitas buruk. DER menunjukkan tingkat hutang yang rendah. ROE menunjukkan keuntungan yang rendah.'))


    @Rule(Fact(underwriter_valued='bad'), Fact(roa_valued='high'), Fact(roe_valued='low'))
    def ipo_rule_3830(self):
        self.declare(Fact(recommendation='Underwriter berkualitas buruk. ROA menunjukkan efisiensi tinggi. ROE menunjukkan keuntungan yang rendah.'))


    @Rule(Fact(warrant_valued='bad'), Fact(net_income_valued='profit'), Fact(per_valued='low'))
    def ipo_rule_3831(self):
        self.declare(Fact(recommendation='Warrant menunjukkan kondisi buruk. Laba bersih menunjukkan keuntungan. PER berada di tingkat yang rendah.'))


    @Rule(Fact(warrant_valued='bad'), Fact(net_income_valued='profit'), Fact(der_valued='low'))
    def ipo_rule_3832(self):
        self.declare(Fact(recommendation='Warrant menunjukkan kondisi buruk. Laba bersih menunjukkan keuntungan. DER menunjukkan tingkat hutang yang rendah.'))


    @Rule(Fact(warrant_valued='bad'), Fact(net_income_valued='profit'), Fact(roa_valued='high'))
    def ipo_rule_3833(self):
        self.declare(Fact(recommendation='Warrant menunjukkan kondisi buruk. Laba bersih menunjukkan keuntungan. ROA menunjukkan efisiensi tinggi.'))


    @Rule(Fact(warrant_valued='bad'), Fact(net_income_valued='profit'), Fact(roe_valued='low'))
    def ipo_rule_3834(self):
        self.declare(Fact(recommendation='Warrant menunjukkan kondisi buruk. Laba bersih menunjukkan keuntungan. ROE menunjukkan keuntungan yang rendah.'))


    @Rule(Fact(warrant_valued='bad'), Fact(per_valued='low'), Fact(der_valued='low'))
    def ipo_rule_3835(self):
        self.declare(Fact(recommendation='Warrant menunjukkan kondisi buruk. PER berada di tingkat yang rendah. DER menunjukkan tingkat hutang yang rendah.'))


    @Rule(Fact(warrant_valued='bad'), Fact(per_valued='low'), Fact(roa_valued='high'))
    def ipo_rule_3836(self):
        self.declare(Fact(recommendation='Warrant menunjukkan kondisi buruk. PER berada di tingkat yang rendah. ROA menunjukkan efisiensi tinggi.'))


    @Rule(Fact(warrant_valued='bad'), Fact(per_valued='low'), Fact(roe_valued='low'))
    def ipo_rule_3837(self):
        self.declare(Fact(recommendation='Warrant menunjukkan kondisi buruk. PER berada di tingkat yang rendah. ROE menunjukkan keuntungan yang rendah.'))


    @Rule(Fact(warrant_valued='bad'), Fact(der_valued='low'), Fact(roa_valued='high'))
    def ipo_rule_3838(self):
        self.declare(Fact(recommendation='Warrant menunjukkan kondisi buruk. DER menunjukkan tingkat hutang yang rendah. ROA menunjukkan efisiensi tinggi.'))


    @Rule(Fact(warrant_valued='bad'), Fact(der_valued='low'), Fact(roe_valued='low'))
    def ipo_rule_3839(self):
        self.declare(Fact(recommendation='Warrant menunjukkan kondisi buruk. DER menunjukkan tingkat hutang yang rendah. ROE menunjukkan keuntungan yang rendah.'))


    @Rule(Fact(warrant_valued='bad'), Fact(roa_valued='high'), Fact(roe_valued='low'))
    def ipo_rule_3840(self):
        self.declare(Fact(recommendation='Warrant menunjukkan kondisi buruk. ROA menunjukkan efisiensi tinggi. ROE menunjukkan keuntungan yang rendah.'))


    @Rule(Fact(net_income_valued='profit'), Fact(per_valued='low'), Fact(der_valued='low'))
    def ipo_rule_3841(self):
        self.declare(Fact(recommendation='Laba bersih menunjukkan keuntungan. PER berada di tingkat yang rendah. DER menunjukkan tingkat hutang yang rendah.'))


    @Rule(Fact(net_income_valued='profit'), Fact(per_valued='low'), Fact(roa_valued='high'))
    def ipo_rule_3842(self):
        self.declare(Fact(recommendation='Laba bersih menunjukkan keuntungan. PER berada di tingkat yang rendah. ROA menunjukkan efisiensi tinggi.'))


    @Rule(Fact(net_income_valued='profit'), Fact(per_valued='low'), Fact(roe_valued='low'))
    def ipo_rule_3843(self):
        self.declare(Fact(recommendation='Laba bersih menunjukkan keuntungan. PER berada di tingkat yang rendah. ROE menunjukkan keuntungan yang rendah.'))


    @Rule(Fact(net_income_valued='profit'), Fact(der_valued='low'), Fact(roa_valued='high'))
    def ipo_rule_3844(self):
        self.declare(Fact(recommendation='Laba bersih menunjukkan keuntungan. DER menunjukkan tingkat hutang yang rendah. ROA menunjukkan efisiensi tinggi.'))


    @Rule(Fact(net_income_valued='profit'), Fact(der_valued='low'), Fact(roe_valued='low'))
    def ipo_rule_3845(self):
        self.declare(Fact(recommendation='Laba bersih menunjukkan keuntungan. DER menunjukkan tingkat hutang yang rendah. ROE menunjukkan keuntungan yang rendah.'))


    @Rule(Fact(net_income_valued='profit'), Fact(roa_valued='high'), Fact(roe_valued='low'))
    def ipo_rule_3846(self):
        self.declare(Fact(recommendation='Laba bersih menunjukkan keuntungan. ROA menunjukkan efisiensi tinggi. ROE menunjukkan keuntungan yang rendah.'))


    @Rule(Fact(per_valued='low'), Fact(der_valued='low'), Fact(roa_valued='high'))
    def ipo_rule_3847(self):
        self.declare(Fact(recommendation='PER berada di tingkat yang rendah. DER menunjukkan tingkat hutang yang rendah. ROA menunjukkan efisiensi tinggi.'))


    @Rule(Fact(per_valued='low'), Fact(der_valued='low'), Fact(roe_valued='low'))
    def ipo_rule_3848(self):
        self.declare(Fact(recommendation='PER berada di tingkat yang rendah. DER menunjukkan tingkat hutang yang rendah. ROE menunjukkan keuntungan yang rendah.'))


    @Rule(Fact(per_valued='low'), Fact(roa_valued='high'), Fact(roe_valued='low'))
    def ipo_rule_3849(self):
        self.declare(Fact(recommendation='PER berada di tingkat yang rendah. ROA menunjukkan efisiensi tinggi. ROE menunjukkan keuntungan yang rendah.'))


    @Rule(Fact(der_valued='low'), Fact(roa_valued='high'), Fact(roe_valued='low'))
    def ipo_rule_3850(self):
        self.declare(Fact(recommendation='DER menunjukkan tingkat hutang yang rendah. ROA menunjukkan efisiensi tinggi. ROE menunjukkan keuntungan yang rendah.'))


    @Rule(Fact(underwriter_valued='bad'), Fact(warrant_valued='bad'), Fact(net_income_valued='profit'))
    def ipo_rule_3851(self):
        self.declare(Fact(recommendation='Underwriter berkualitas buruk. Warrant menunjukkan kondisi buruk. Laba bersih menunjukkan keuntungan.'))


    @Rule(Fact(underwriter_valued='bad'), Fact(warrant_valued='bad'), Fact(per_valued='low'))
    def ipo_rule_3852(self):
        self.declare(Fact(recommendation='Underwriter berkualitas buruk. Warrant menunjukkan kondisi buruk. PER berada di tingkat yang rendah.'))


    @Rule(Fact(underwriter_valued='bad'), Fact(warrant_valued='bad'), Fact(der_valued='low'))
    def ipo_rule_3853(self):
        self.declare(Fact(recommendation='Underwriter berkualitas buruk. Warrant menunjukkan kondisi buruk. DER menunjukkan tingkat hutang yang rendah.'))


    @Rule(Fact(underwriter_valued='bad'), Fact(warrant_valued='bad'), Fact(roa_valued='low'))
    def ipo_rule_3854(self):
        self.declare(Fact(recommendation='Underwriter berkualitas buruk. Warrant menunjukkan kondisi buruk. ROA menunjukkan efisiensi rendah.'))


    @Rule(Fact(underwriter_valued='bad'), Fact(warrant_valued='bad'), Fact(roe_valued='high'))
    def ipo_rule_3855(self):
        self.declare(Fact(recommendation='Underwriter berkualitas buruk. Warrant menunjukkan kondisi buruk. ROE menunjukkan keuntungan yang tinggi.'))


    @Rule(Fact(underwriter_valued='bad'), Fact(net_income_valued='profit'), Fact(per_valued='low'))
    def ipo_rule_3856(self):
        self.declare(Fact(recommendation='Underwriter berkualitas buruk. Laba bersih menunjukkan keuntungan. PER berada di tingkat yang rendah.'))


    @Rule(Fact(underwriter_valued='bad'), Fact(net_income_valued='profit'), Fact(der_valued='low'))
    def ipo_rule_3857(self):
        self.declare(Fact(recommendation='Underwriter berkualitas buruk. Laba bersih menunjukkan keuntungan. DER menunjukkan tingkat hutang yang rendah.'))


    @Rule(Fact(underwriter_valued='bad'), Fact(net_income_valued='profit'), Fact(roa_valued='low'))
    def ipo_rule_3858(self):
        self.declare(Fact(recommendation='Underwriter berkualitas buruk. Laba bersih menunjukkan keuntungan. ROA menunjukkan efisiensi rendah.'))


    @Rule(Fact(underwriter_valued='bad'), Fact(net_income_valued='profit'), Fact(roe_valued='high'))
    def ipo_rule_3859(self):
        self.declare(Fact(recommendation='Underwriter berkualitas buruk. Laba bersih menunjukkan keuntungan. ROE menunjukkan keuntungan yang tinggi.'))


    @Rule(Fact(underwriter_valued='bad'), Fact(per_valued='low'), Fact(der_valued='low'))
    def ipo_rule_3860(self):
        self.declare(Fact(recommendation='Underwriter berkualitas buruk. PER berada di tingkat yang rendah. DER menunjukkan tingkat hutang yang rendah.'))


    @Rule(Fact(underwriter_valued='bad'), Fact(per_valued='low'), Fact(roa_valued='low'))
    def ipo_rule_3861(self):
        self.declare(Fact(recommendation='Underwriter berkualitas buruk. PER berada di tingkat yang rendah. ROA menunjukkan efisiensi rendah.'))


    @Rule(Fact(underwriter_valued='bad'), Fact(per_valued='low'), Fact(roe_valued='high'))
    def ipo_rule_3862(self):
        self.declare(Fact(recommendation='Underwriter berkualitas buruk. PER berada di tingkat yang rendah. ROE menunjukkan keuntungan yang tinggi.'))


    @Rule(Fact(underwriter_valued='bad'), Fact(der_valued='low'), Fact(roa_valued='low'))
    def ipo_rule_3863(self):
        self.declare(Fact(recommendation='Underwriter berkualitas buruk. DER menunjukkan tingkat hutang yang rendah. ROA menunjukkan efisiensi rendah.'))


    @Rule(Fact(underwriter_valued='bad'), Fact(der_valued='low'), Fact(roe_valued='high'))
    def ipo_rule_3864(self):
        self.declare(Fact(recommendation='Underwriter berkualitas buruk. DER menunjukkan tingkat hutang yang rendah. ROE menunjukkan keuntungan yang tinggi.'))


    @Rule(Fact(underwriter_valued='bad'), Fact(roa_valued='low'), Fact(roe_valued='high'))
    def ipo_rule_3865(self):
        self.declare(Fact(recommendation='Underwriter berkualitas buruk. ROA menunjukkan efisiensi rendah. ROE menunjukkan keuntungan yang tinggi.'))


    @Rule(Fact(warrant_valued='bad'), Fact(net_income_valued='profit'), Fact(per_valued='low'))
    def ipo_rule_3866(self):
        self.declare(Fact(recommendation='Warrant menunjukkan kondisi buruk. Laba bersih menunjukkan keuntungan. PER berada di tingkat yang rendah.'))


    @Rule(Fact(warrant_valued='bad'), Fact(net_income_valued='profit'), Fact(der_valued='low'))
    def ipo_rule_3867(self):
        self.declare(Fact(recommendation='Warrant menunjukkan kondisi buruk. Laba bersih menunjukkan keuntungan. DER menunjukkan tingkat hutang yang rendah.'))


    @Rule(Fact(warrant_valued='bad'), Fact(net_income_valued='profit'), Fact(roa_valued='low'))
    def ipo_rule_3868(self):
        self.declare(Fact(recommendation='Warrant menunjukkan kondisi buruk. Laba bersih menunjukkan keuntungan. ROA menunjukkan efisiensi rendah.'))


    @Rule(Fact(warrant_valued='bad'), Fact(net_income_valued='profit'), Fact(roe_valued='high'))
    def ipo_rule_3869(self):
        self.declare(Fact(recommendation='Warrant menunjukkan kondisi buruk. Laba bersih menunjukkan keuntungan. ROE menunjukkan keuntungan yang tinggi.'))


    @Rule(Fact(warrant_valued='bad'), Fact(per_valued='low'), Fact(der_valued='low'))
    def ipo_rule_3870(self):
        self.declare(Fact(recommendation='Warrant menunjukkan kondisi buruk. PER berada di tingkat yang rendah. DER menunjukkan tingkat hutang yang rendah.'))


    @Rule(Fact(warrant_valued='bad'), Fact(per_valued='low'), Fact(roa_valued='low'))
    def ipo_rule_3871(self):
        self.declare(Fact(recommendation='Warrant menunjukkan kondisi buruk. PER berada di tingkat yang rendah. ROA menunjukkan efisiensi rendah.'))


    @Rule(Fact(warrant_valued='bad'), Fact(per_valued='low'), Fact(roe_valued='high'))
    def ipo_rule_3872(self):
        self.declare(Fact(recommendation='Warrant menunjukkan kondisi buruk. PER berada di tingkat yang rendah. ROE menunjukkan keuntungan yang tinggi.'))


    @Rule(Fact(warrant_valued='bad'), Fact(der_valued='low'), Fact(roa_valued='low'))
    def ipo_rule_3873(self):
        self.declare(Fact(recommendation='Warrant menunjukkan kondisi buruk. DER menunjukkan tingkat hutang yang rendah. ROA menunjukkan efisiensi rendah.'))


    @Rule(Fact(warrant_valued='bad'), Fact(der_valued='low'), Fact(roe_valued='high'))
    def ipo_rule_3874(self):
        self.declare(Fact(recommendation='Warrant menunjukkan kondisi buruk. DER menunjukkan tingkat hutang yang rendah. ROE menunjukkan keuntungan yang tinggi.'))


    @Rule(Fact(warrant_valued='bad'), Fact(roa_valued='low'), Fact(roe_valued='high'))
    def ipo_rule_3875(self):
        self.declare(Fact(recommendation='Warrant menunjukkan kondisi buruk. ROA menunjukkan efisiensi rendah. ROE menunjukkan keuntungan yang tinggi.'))


    @Rule(Fact(net_income_valued='profit'), Fact(per_valued='low'), Fact(der_valued='low'))
    def ipo_rule_3876(self):
        self.declare(Fact(recommendation='Laba bersih menunjukkan keuntungan. PER berada di tingkat yang rendah. DER menunjukkan tingkat hutang yang rendah.'))


    @Rule(Fact(net_income_valued='profit'), Fact(per_valued='low'), Fact(roa_valued='low'))
    def ipo_rule_3877(self):
        self.declare(Fact(recommendation='Laba bersih menunjukkan keuntungan. PER berada di tingkat yang rendah. ROA menunjukkan efisiensi rendah.'))


    @Rule(Fact(net_income_valued='profit'), Fact(per_valued='low'), Fact(roe_valued='high'))
    def ipo_rule_3878(self):
        self.declare(Fact(recommendation='Laba bersih menunjukkan keuntungan. PER berada di tingkat yang rendah. ROE menunjukkan keuntungan yang tinggi.'))


    @Rule(Fact(net_income_valued='profit'), Fact(der_valued='low'), Fact(roa_valued='low'))
    def ipo_rule_3879(self):
        self.declare(Fact(recommendation='Laba bersih menunjukkan keuntungan. DER menunjukkan tingkat hutang yang rendah. ROA menunjukkan efisiensi rendah.'))


    @Rule(Fact(net_income_valued='profit'), Fact(der_valued='low'), Fact(roe_valued='high'))
    def ipo_rule_3880(self):
        self.declare(Fact(recommendation='Laba bersih menunjukkan keuntungan. DER menunjukkan tingkat hutang yang rendah. ROE menunjukkan keuntungan yang tinggi.'))


    @Rule(Fact(net_income_valued='profit'), Fact(roa_valued='low'), Fact(roe_valued='high'))
    def ipo_rule_3881(self):
        self.declare(Fact(recommendation='Laba bersih menunjukkan keuntungan. ROA menunjukkan efisiensi rendah. ROE menunjukkan keuntungan yang tinggi.'))


    @Rule(Fact(per_valued='low'), Fact(der_valued='low'), Fact(roa_valued='low'))
    def ipo_rule_3882(self):
        self.declare(Fact(recommendation='PER berada di tingkat yang rendah. DER menunjukkan tingkat hutang yang rendah. ROA menunjukkan efisiensi rendah.'))


    @Rule(Fact(per_valued='low'), Fact(der_valued='low'), Fact(roe_valued='high'))
    def ipo_rule_3883(self):
        self.declare(Fact(recommendation='PER berada di tingkat yang rendah. DER menunjukkan tingkat hutang yang rendah. ROE menunjukkan keuntungan yang tinggi.'))


    @Rule(Fact(per_valued='low'), Fact(roa_valued='low'), Fact(roe_valued='high'))
    def ipo_rule_3884(self):
        self.declare(Fact(recommendation='PER berada di tingkat yang rendah. ROA menunjukkan efisiensi rendah. ROE menunjukkan keuntungan yang tinggi.'))


    @Rule(Fact(der_valued='low'), Fact(roa_valued='low'), Fact(roe_valued='high'))
    def ipo_rule_3885(self):
        self.declare(Fact(recommendation='DER menunjukkan tingkat hutang yang rendah. ROA menunjukkan efisiensi rendah. ROE menunjukkan keuntungan yang tinggi.'))


    @Rule(Fact(underwriter_valued='bad'), Fact(warrant_valued='bad'), Fact(net_income_valued='profit'))
    def ipo_rule_3886(self):
        self.declare(Fact(recommendation='Underwriter berkualitas buruk. Warrant menunjukkan kondisi buruk. Laba bersih menunjukkan keuntungan.'))


    @Rule(Fact(underwriter_valued='bad'), Fact(warrant_valued='bad'), Fact(per_valued='low'))
    def ipo_rule_3887(self):
        self.declare(Fact(recommendation='Underwriter berkualitas buruk. Warrant menunjukkan kondisi buruk. PER berada di tingkat yang rendah.'))


    @Rule(Fact(underwriter_valued='bad'), Fact(warrant_valued='bad'), Fact(der_valued='low'))
    def ipo_rule_3888(self):
        self.declare(Fact(recommendation='Underwriter berkualitas buruk. Warrant menunjukkan kondisi buruk. DER menunjukkan tingkat hutang yang rendah.'))


    @Rule(Fact(underwriter_valued='bad'), Fact(warrant_valued='bad'), Fact(roa_valued='low'))
    def ipo_rule_3889(self):
        self.declare(Fact(recommendation='Underwriter berkualitas buruk. Warrant menunjukkan kondisi buruk. ROA menunjukkan efisiensi rendah.'))


    @Rule(Fact(underwriter_valued='bad'), Fact(warrant_valued='bad'), Fact(roe_valued='low'))
    def ipo_rule_3890(self):
        self.declare(Fact(recommendation='Underwriter berkualitas buruk. Warrant menunjukkan kondisi buruk. ROE menunjukkan keuntungan yang rendah.'))


    @Rule(Fact(underwriter_valued='bad'), Fact(net_income_valued='profit'), Fact(per_valued='low'))
    def ipo_rule_3891(self):
        self.declare(Fact(recommendation='Underwriter berkualitas buruk. Laba bersih menunjukkan keuntungan. PER berada di tingkat yang rendah.'))


    @Rule(Fact(underwriter_valued='bad'), Fact(net_income_valued='profit'), Fact(der_valued='low'))
    def ipo_rule_3892(self):
        self.declare(Fact(recommendation='Underwriter berkualitas buruk. Laba bersih menunjukkan keuntungan. DER menunjukkan tingkat hutang yang rendah.'))


    @Rule(Fact(underwriter_valued='bad'), Fact(net_income_valued='profit'), Fact(roa_valued='low'))
    def ipo_rule_3893(self):
        self.declare(Fact(recommendation='Underwriter berkualitas buruk. Laba bersih menunjukkan keuntungan. ROA menunjukkan efisiensi rendah.'))


    @Rule(Fact(underwriter_valued='bad'), Fact(net_income_valued='profit'), Fact(roe_valued='low'))
    def ipo_rule_3894(self):
        self.declare(Fact(recommendation='Underwriter berkualitas buruk. Laba bersih menunjukkan keuntungan. ROE menunjukkan keuntungan yang rendah.'))


    @Rule(Fact(underwriter_valued='bad'), Fact(per_valued='low'), Fact(der_valued='low'))
    def ipo_rule_3895(self):
        self.declare(Fact(recommendation='Underwriter berkualitas buruk. PER berada di tingkat yang rendah. DER menunjukkan tingkat hutang yang rendah.'))


    @Rule(Fact(underwriter_valued='bad'), Fact(per_valued='low'), Fact(roa_valued='low'))
    def ipo_rule_3896(self):
        self.declare(Fact(recommendation='Underwriter berkualitas buruk. PER berada di tingkat yang rendah. ROA menunjukkan efisiensi rendah.'))


    @Rule(Fact(underwriter_valued='bad'), Fact(per_valued='low'), Fact(roe_valued='low'))
    def ipo_rule_3897(self):
        self.declare(Fact(recommendation='Underwriter berkualitas buruk. PER berada di tingkat yang rendah. ROE menunjukkan keuntungan yang rendah.'))


    @Rule(Fact(underwriter_valued='bad'), Fact(der_valued='low'), Fact(roa_valued='low'))
    def ipo_rule_3898(self):
        self.declare(Fact(recommendation='Underwriter berkualitas buruk. DER menunjukkan tingkat hutang yang rendah. ROA menunjukkan efisiensi rendah.'))


    @Rule(Fact(underwriter_valued='bad'), Fact(der_valued='low'), Fact(roe_valued='low'))
    def ipo_rule_3899(self):
        self.declare(Fact(recommendation='Underwriter berkualitas buruk. DER menunjukkan tingkat hutang yang rendah. ROE menunjukkan keuntungan yang rendah.'))


    @Rule(Fact(underwriter_valued='bad'), Fact(roa_valued='low'), Fact(roe_valued='low'))
    def ipo_rule_3900(self):
        self.declare(Fact(recommendation='Underwriter berkualitas buruk. ROA menunjukkan efisiensi rendah. ROE menunjukkan keuntungan yang rendah.'))


    @Rule(Fact(warrant_valued='bad'), Fact(net_income_valued='profit'), Fact(per_valued='low'))
    def ipo_rule_3901(self):
        self.declare(Fact(recommendation='Warrant menunjukkan kondisi buruk. Laba bersih menunjukkan keuntungan. PER berada di tingkat yang rendah.'))


    @Rule(Fact(warrant_valued='bad'), Fact(net_income_valued='profit'), Fact(der_valued='low'))
    def ipo_rule_3902(self):
        self.declare(Fact(recommendation='Warrant menunjukkan kondisi buruk. Laba bersih menunjukkan keuntungan. DER menunjukkan tingkat hutang yang rendah.'))


    @Rule(Fact(warrant_valued='bad'), Fact(net_income_valued='profit'), Fact(roa_valued='low'))
    def ipo_rule_3903(self):
        self.declare(Fact(recommendation='Warrant menunjukkan kondisi buruk. Laba bersih menunjukkan keuntungan. ROA menunjukkan efisiensi rendah.'))


    @Rule(Fact(warrant_valued='bad'), Fact(net_income_valued='profit'), Fact(roe_valued='low'))
    def ipo_rule_3904(self):
        self.declare(Fact(recommendation='Warrant menunjukkan kondisi buruk. Laba bersih menunjukkan keuntungan. ROE menunjukkan keuntungan yang rendah.'))


    @Rule(Fact(warrant_valued='bad'), Fact(per_valued='low'), Fact(der_valued='low'))
    def ipo_rule_3905(self):
        self.declare(Fact(recommendation='Warrant menunjukkan kondisi buruk. PER berada di tingkat yang rendah. DER menunjukkan tingkat hutang yang rendah.'))


    @Rule(Fact(warrant_valued='bad'), Fact(per_valued='low'), Fact(roa_valued='low'))
    def ipo_rule_3906(self):
        self.declare(Fact(recommendation='Warrant menunjukkan kondisi buruk. PER berada di tingkat yang rendah. ROA menunjukkan efisiensi rendah.'))


    @Rule(Fact(warrant_valued='bad'), Fact(per_valued='low'), Fact(roe_valued='low'))
    def ipo_rule_3907(self):
        self.declare(Fact(recommendation='Warrant menunjukkan kondisi buruk. PER berada di tingkat yang rendah. ROE menunjukkan keuntungan yang rendah.'))


    @Rule(Fact(warrant_valued='bad'), Fact(der_valued='low'), Fact(roa_valued='low'))
    def ipo_rule_3908(self):
        self.declare(Fact(recommendation='Warrant menunjukkan kondisi buruk. DER menunjukkan tingkat hutang yang rendah. ROA menunjukkan efisiensi rendah.'))


    @Rule(Fact(warrant_valued='bad'), Fact(der_valued='low'), Fact(roe_valued='low'))
    def ipo_rule_3909(self):
        self.declare(Fact(recommendation='Warrant menunjukkan kondisi buruk. DER menunjukkan tingkat hutang yang rendah. ROE menunjukkan keuntungan yang rendah.'))


    @Rule(Fact(warrant_valued='bad'), Fact(roa_valued='low'), Fact(roe_valued='low'))
    def ipo_rule_3910(self):
        self.declare(Fact(recommendation='Warrant menunjukkan kondisi buruk. ROA menunjukkan efisiensi rendah. ROE menunjukkan keuntungan yang rendah.'))


    @Rule(Fact(net_income_valued='profit'), Fact(per_valued='low'), Fact(der_valued='low'))
    def ipo_rule_3911(self):
        self.declare(Fact(recommendation='Laba bersih menunjukkan keuntungan. PER berada di tingkat yang rendah. DER menunjukkan tingkat hutang yang rendah.'))


    @Rule(Fact(net_income_valued='profit'), Fact(per_valued='low'), Fact(roa_valued='low'))
    def ipo_rule_3912(self):
        self.declare(Fact(recommendation='Laba bersih menunjukkan keuntungan. PER berada di tingkat yang rendah. ROA menunjukkan efisiensi rendah.'))


    @Rule(Fact(net_income_valued='profit'), Fact(per_valued='low'), Fact(roe_valued='low'))
    def ipo_rule_3913(self):
        self.declare(Fact(recommendation='Laba bersih menunjukkan keuntungan. PER berada di tingkat yang rendah. ROE menunjukkan keuntungan yang rendah.'))


    @Rule(Fact(net_income_valued='profit'), Fact(der_valued='low'), Fact(roa_valued='low'))
    def ipo_rule_3914(self):
        self.declare(Fact(recommendation='Laba bersih menunjukkan keuntungan. DER menunjukkan tingkat hutang yang rendah. ROA menunjukkan efisiensi rendah.'))


    @Rule(Fact(net_income_valued='profit'), Fact(der_valued='low'), Fact(roe_valued='low'))
    def ipo_rule_3915(self):
        self.declare(Fact(recommendation='Laba bersih menunjukkan keuntungan. DER menunjukkan tingkat hutang yang rendah. ROE menunjukkan keuntungan yang rendah.'))


    @Rule(Fact(net_income_valued='profit'), Fact(roa_valued='low'), Fact(roe_valued='low'))
    def ipo_rule_3916(self):
        self.declare(Fact(recommendation='Laba bersih menunjukkan keuntungan. ROA menunjukkan efisiensi rendah. ROE menunjukkan keuntungan yang rendah.'))


    @Rule(Fact(per_valued='low'), Fact(der_valued='low'), Fact(roa_valued='low'))
    def ipo_rule_3917(self):
        self.declare(Fact(recommendation='PER berada di tingkat yang rendah. DER menunjukkan tingkat hutang yang rendah. ROA menunjukkan efisiensi rendah.'))


    @Rule(Fact(per_valued='low'), Fact(der_valued='low'), Fact(roe_valued='low'))
    def ipo_rule_3918(self):
        self.declare(Fact(recommendation='PER berada di tingkat yang rendah. DER menunjukkan tingkat hutang yang rendah. ROE menunjukkan keuntungan yang rendah.'))


    @Rule(Fact(per_valued='low'), Fact(roa_valued='low'), Fact(roe_valued='low'))
    def ipo_rule_3919(self):
        self.declare(Fact(recommendation='PER berada di tingkat yang rendah. ROA menunjukkan efisiensi rendah. ROE menunjukkan keuntungan yang rendah.'))


    @Rule(Fact(der_valued='low'), Fact(roa_valued='low'), Fact(roe_valued='low'))
    def ipo_rule_3920(self):
        self.declare(Fact(recommendation='DER menunjukkan tingkat hutang yang rendah. ROA menunjukkan efisiensi rendah. ROE menunjukkan keuntungan yang rendah.'))


    @Rule(Fact(underwriter_valued='bad'), Fact(warrant_valued='bad'), Fact(net_income_valued='loss'))
    def ipo_rule_3921(self):
        self.declare(Fact(recommendation='Underwriter berkualitas buruk. Warrant menunjukkan kondisi buruk. Laba bersih menunjukkan kerugian.'))


    @Rule(Fact(underwriter_valued='bad'), Fact(warrant_valued='bad'), Fact(per_valued='high'))
    def ipo_rule_3922(self):
        self.declare(Fact(recommendation='Underwriter berkualitas buruk. Warrant menunjukkan kondisi buruk. PER berada di tingkat yang tinggi.'))


    @Rule(Fact(underwriter_valued='bad'), Fact(warrant_valued='bad'), Fact(der_valued='high'))
    def ipo_rule_3923(self):
        self.declare(Fact(recommendation='Underwriter berkualitas buruk. Warrant menunjukkan kondisi buruk. DER menunjukkan tingkat hutang yang tinggi.'))


    @Rule(Fact(underwriter_valued='bad'), Fact(warrant_valued='bad'), Fact(roa_valued='high'))
    def ipo_rule_3924(self):
        self.declare(Fact(recommendation='Underwriter berkualitas buruk. Warrant menunjukkan kondisi buruk. ROA menunjukkan efisiensi tinggi.'))


    @Rule(Fact(underwriter_valued='bad'), Fact(warrant_valued='bad'), Fact(roe_valued='high'))
    def ipo_rule_3925(self):
        self.declare(Fact(recommendation='Underwriter berkualitas buruk. Warrant menunjukkan kondisi buruk. ROE menunjukkan keuntungan yang tinggi.'))


    @Rule(Fact(underwriter_valued='bad'), Fact(net_income_valued='loss'), Fact(per_valued='high'))
    def ipo_rule_3926(self):
        self.declare(Fact(recommendation='Underwriter berkualitas buruk. Laba bersih menunjukkan kerugian. PER berada di tingkat yang tinggi.'))


    @Rule(Fact(underwriter_valued='bad'), Fact(net_income_valued='loss'), Fact(der_valued='high'))
    def ipo_rule_3927(self):
        self.declare(Fact(recommendation='Underwriter berkualitas buruk. Laba bersih menunjukkan kerugian. DER menunjukkan tingkat hutang yang tinggi.'))


    @Rule(Fact(underwriter_valued='bad'), Fact(net_income_valued='loss'), Fact(roa_valued='high'))
    def ipo_rule_3928(self):
        self.declare(Fact(recommendation='Underwriter berkualitas buruk. Laba bersih menunjukkan kerugian. ROA menunjukkan efisiensi tinggi.'))


    @Rule(Fact(underwriter_valued='bad'), Fact(net_income_valued='loss'), Fact(roe_valued='high'))
    def ipo_rule_3929(self):
        self.declare(Fact(recommendation='Underwriter berkualitas buruk. Laba bersih menunjukkan kerugian. ROE menunjukkan keuntungan yang tinggi.'))


    @Rule(Fact(underwriter_valued='bad'), Fact(per_valued='high'), Fact(der_valued='high'))
    def ipo_rule_3930(self):
        self.declare(Fact(recommendation='Underwriter berkualitas buruk. PER berada di tingkat yang tinggi. DER menunjukkan tingkat hutang yang tinggi.'))


    @Rule(Fact(underwriter_valued='bad'), Fact(per_valued='high'), Fact(roa_valued='high'))
    def ipo_rule_3931(self):
        self.declare(Fact(recommendation='Underwriter berkualitas buruk. PER berada di tingkat yang tinggi. ROA menunjukkan efisiensi tinggi.'))


    @Rule(Fact(underwriter_valued='bad'), Fact(per_valued='high'), Fact(roe_valued='high'))
    def ipo_rule_3932(self):
        self.declare(Fact(recommendation='Underwriter berkualitas buruk. PER berada di tingkat yang tinggi. ROE menunjukkan keuntungan yang tinggi.'))


    @Rule(Fact(underwriter_valued='bad'), Fact(der_valued='high'), Fact(roa_valued='high'))
    def ipo_rule_3933(self):
        self.declare(Fact(recommendation='Underwriter berkualitas buruk. DER menunjukkan tingkat hutang yang tinggi. ROA menunjukkan efisiensi tinggi.'))


    @Rule(Fact(underwriter_valued='bad'), Fact(der_valued='high'), Fact(roe_valued='high'))
    def ipo_rule_3934(self):
        self.declare(Fact(recommendation='Underwriter berkualitas buruk. DER menunjukkan tingkat hutang yang tinggi. ROE menunjukkan keuntungan yang tinggi.'))


    @Rule(Fact(underwriter_valued='bad'), Fact(roa_valued='high'), Fact(roe_valued='high'))
    def ipo_rule_3935(self):
        self.declare(Fact(recommendation='Underwriter berkualitas buruk. ROA menunjukkan efisiensi tinggi. ROE menunjukkan keuntungan yang tinggi.'))


    @Rule(Fact(warrant_valued='bad'), Fact(net_income_valued='loss'), Fact(per_valued='high'))
    def ipo_rule_3936(self):
        self.declare(Fact(recommendation='Warrant menunjukkan kondisi buruk. Laba bersih menunjukkan kerugian. PER berada di tingkat yang tinggi.'))


    @Rule(Fact(warrant_valued='bad'), Fact(net_income_valued='loss'), Fact(der_valued='high'))
    def ipo_rule_3937(self):
        self.declare(Fact(recommendation='Warrant menunjukkan kondisi buruk. Laba bersih menunjukkan kerugian. DER menunjukkan tingkat hutang yang tinggi.'))


    @Rule(Fact(warrant_valued='bad'), Fact(net_income_valued='loss'), Fact(roa_valued='high'))
    def ipo_rule_3938(self):
        self.declare(Fact(recommendation='Warrant menunjukkan kondisi buruk. Laba bersih menunjukkan kerugian. ROA menunjukkan efisiensi tinggi.'))


    @Rule(Fact(warrant_valued='bad'), Fact(net_income_valued='loss'), Fact(roe_valued='high'))
    def ipo_rule_3939(self):
        self.declare(Fact(recommendation='Warrant menunjukkan kondisi buruk. Laba bersih menunjukkan kerugian. ROE menunjukkan keuntungan yang tinggi.'))


    @Rule(Fact(warrant_valued='bad'), Fact(per_valued='high'), Fact(der_valued='high'))
    def ipo_rule_3940(self):
        self.declare(Fact(recommendation='Warrant menunjukkan kondisi buruk. PER berada di tingkat yang tinggi. DER menunjukkan tingkat hutang yang tinggi.'))


    @Rule(Fact(warrant_valued='bad'), Fact(per_valued='high'), Fact(roa_valued='high'))
    def ipo_rule_3941(self):
        self.declare(Fact(recommendation='Warrant menunjukkan kondisi buruk. PER berada di tingkat yang tinggi. ROA menunjukkan efisiensi tinggi.'))


    @Rule(Fact(warrant_valued='bad'), Fact(per_valued='high'), Fact(roe_valued='high'))
    def ipo_rule_3942(self):
        self.declare(Fact(recommendation='Warrant menunjukkan kondisi buruk. PER berada di tingkat yang tinggi. ROE menunjukkan keuntungan yang tinggi.'))


    @Rule(Fact(warrant_valued='bad'), Fact(der_valued='high'), Fact(roa_valued='high'))
    def ipo_rule_3943(self):
        self.declare(Fact(recommendation='Warrant menunjukkan kondisi buruk. DER menunjukkan tingkat hutang yang tinggi. ROA menunjukkan efisiensi tinggi.'))


    @Rule(Fact(warrant_valued='bad'), Fact(der_valued='high'), Fact(roe_valued='high'))
    def ipo_rule_3944(self):
        self.declare(Fact(recommendation='Warrant menunjukkan kondisi buruk. DER menunjukkan tingkat hutang yang tinggi. ROE menunjukkan keuntungan yang tinggi.'))


    @Rule(Fact(warrant_valued='bad'), Fact(roa_valued='high'), Fact(roe_valued='high'))
    def ipo_rule_3945(self):
        self.declare(Fact(recommendation='Warrant menunjukkan kondisi buruk. ROA menunjukkan efisiensi tinggi. ROE menunjukkan keuntungan yang tinggi.'))


    @Rule(Fact(net_income_valued='loss'), Fact(per_valued='high'), Fact(der_valued='high'))
    def ipo_rule_3946(self):
        self.declare(Fact(recommendation='Laba bersih menunjukkan kerugian. PER berada di tingkat yang tinggi. DER menunjukkan tingkat hutang yang tinggi.'))


    @Rule(Fact(net_income_valued='loss'), Fact(per_valued='high'), Fact(roa_valued='high'))
    def ipo_rule_3947(self):
        self.declare(Fact(recommendation='Laba bersih menunjukkan kerugian. PER berada di tingkat yang tinggi. ROA menunjukkan efisiensi tinggi.'))


    @Rule(Fact(net_income_valued='loss'), Fact(per_valued='high'), Fact(roe_valued='high'))
    def ipo_rule_3948(self):
        self.declare(Fact(recommendation='Laba bersih menunjukkan kerugian. PER berada di tingkat yang tinggi. ROE menunjukkan keuntungan yang tinggi.'))


    @Rule(Fact(net_income_valued='loss'), Fact(der_valued='high'), Fact(roa_valued='high'))
    def ipo_rule_3949(self):
        self.declare(Fact(recommendation='Laba bersih menunjukkan kerugian. DER menunjukkan tingkat hutang yang tinggi. ROA menunjukkan efisiensi tinggi.'))


    @Rule(Fact(net_income_valued='loss'), Fact(der_valued='high'), Fact(roe_valued='high'))
    def ipo_rule_3950(self):
        self.declare(Fact(recommendation='Laba bersih menunjukkan kerugian. DER menunjukkan tingkat hutang yang tinggi. ROE menunjukkan keuntungan yang tinggi.'))


    @Rule(Fact(net_income_valued='loss'), Fact(roa_valued='high'), Fact(roe_valued='high'))
    def ipo_rule_3951(self):
        self.declare(Fact(recommendation='Laba bersih menunjukkan kerugian. ROA menunjukkan efisiensi tinggi. ROE menunjukkan keuntungan yang tinggi.'))


    @Rule(Fact(per_valued='high'), Fact(der_valued='high'), Fact(roa_valued='high'))
    def ipo_rule_3952(self):
        self.declare(Fact(recommendation='PER berada di tingkat yang tinggi. DER menunjukkan tingkat hutang yang tinggi. ROA menunjukkan efisiensi tinggi.'))


    @Rule(Fact(per_valued='high'), Fact(der_valued='high'), Fact(roe_valued='high'))
    def ipo_rule_3953(self):
        self.declare(Fact(recommendation='PER berada di tingkat yang tinggi. DER menunjukkan tingkat hutang yang tinggi. ROE menunjukkan keuntungan yang tinggi.'))


    @Rule(Fact(per_valued='high'), Fact(roa_valued='high'), Fact(roe_valued='high'))
    def ipo_rule_3954(self):
        self.declare(Fact(recommendation='PER berada di tingkat yang tinggi. ROA menunjukkan efisiensi tinggi. ROE menunjukkan keuntungan yang tinggi.'))


    @Rule(Fact(der_valued='high'), Fact(roa_valued='high'), Fact(roe_valued='high'))
    def ipo_rule_3955(self):
        self.declare(Fact(recommendation='DER menunjukkan tingkat hutang yang tinggi. ROA menunjukkan efisiensi tinggi. ROE menunjukkan keuntungan yang tinggi.'))


    @Rule(Fact(underwriter_valued='bad'), Fact(warrant_valued='bad'), Fact(net_income_valued='loss'))
    def ipo_rule_3956(self):
        self.declare(Fact(recommendation='Underwriter berkualitas buruk. Warrant menunjukkan kondisi buruk. Laba bersih menunjukkan kerugian.'))


    @Rule(Fact(underwriter_valued='bad'), Fact(warrant_valued='bad'), Fact(per_valued='high'))
    def ipo_rule_3957(self):
        self.declare(Fact(recommendation='Underwriter berkualitas buruk. Warrant menunjukkan kondisi buruk. PER berada di tingkat yang tinggi.'))


    @Rule(Fact(underwriter_valued='bad'), Fact(warrant_valued='bad'), Fact(der_valued='high'))
    def ipo_rule_3958(self):
        self.declare(Fact(recommendation='Underwriter berkualitas buruk. Warrant menunjukkan kondisi buruk. DER menunjukkan tingkat hutang yang tinggi.'))


    @Rule(Fact(underwriter_valued='bad'), Fact(warrant_valued='bad'), Fact(roa_valued='high'))
    def ipo_rule_3959(self):
        self.declare(Fact(recommendation='Underwriter berkualitas buruk. Warrant menunjukkan kondisi buruk. ROA menunjukkan efisiensi tinggi.'))


    @Rule(Fact(underwriter_valued='bad'), Fact(warrant_valued='bad'), Fact(roe_valued='low'))
    def ipo_rule_3960(self):
        self.declare(Fact(recommendation='Underwriter berkualitas buruk. Warrant menunjukkan kondisi buruk. ROE menunjukkan keuntungan yang rendah.'))


    @Rule(Fact(underwriter_valued='bad'), Fact(net_income_valued='loss'), Fact(per_valued='high'))
    def ipo_rule_3961(self):
        self.declare(Fact(recommendation='Underwriter berkualitas buruk. Laba bersih menunjukkan kerugian. PER berada di tingkat yang tinggi.'))


    @Rule(Fact(underwriter_valued='bad'), Fact(net_income_valued='loss'), Fact(der_valued='high'))
    def ipo_rule_3962(self):
        self.declare(Fact(recommendation='Underwriter berkualitas buruk. Laba bersih menunjukkan kerugian. DER menunjukkan tingkat hutang yang tinggi.'))


    @Rule(Fact(underwriter_valued='bad'), Fact(net_income_valued='loss'), Fact(roa_valued='high'))
    def ipo_rule_3963(self):
        self.declare(Fact(recommendation='Underwriter berkualitas buruk. Laba bersih menunjukkan kerugian. ROA menunjukkan efisiensi tinggi.'))


    @Rule(Fact(underwriter_valued='bad'), Fact(net_income_valued='loss'), Fact(roe_valued='low'))
    def ipo_rule_3964(self):
        self.declare(Fact(recommendation='Underwriter berkualitas buruk. Laba bersih menunjukkan kerugian. ROE menunjukkan keuntungan yang rendah.'))


    @Rule(Fact(underwriter_valued='bad'), Fact(per_valued='high'), Fact(der_valued='high'))
    def ipo_rule_3965(self):
        self.declare(Fact(recommendation='Underwriter berkualitas buruk. PER berada di tingkat yang tinggi. DER menunjukkan tingkat hutang yang tinggi.'))


    @Rule(Fact(underwriter_valued='bad'), Fact(per_valued='high'), Fact(roa_valued='high'))
    def ipo_rule_3966(self):
        self.declare(Fact(recommendation='Underwriter berkualitas buruk. PER berada di tingkat yang tinggi. ROA menunjukkan efisiensi tinggi.'))


    @Rule(Fact(underwriter_valued='bad'), Fact(per_valued='high'), Fact(roe_valued='low'))
    def ipo_rule_3967(self):
        self.declare(Fact(recommendation='Underwriter berkualitas buruk. PER berada di tingkat yang tinggi. ROE menunjukkan keuntungan yang rendah.'))


    @Rule(Fact(underwriter_valued='bad'), Fact(der_valued='high'), Fact(roa_valued='high'))
    def ipo_rule_3968(self):
        self.declare(Fact(recommendation='Underwriter berkualitas buruk. DER menunjukkan tingkat hutang yang tinggi. ROA menunjukkan efisiensi tinggi.'))


    @Rule(Fact(underwriter_valued='bad'), Fact(der_valued='high'), Fact(roe_valued='low'))
    def ipo_rule_3969(self):
        self.declare(Fact(recommendation='Underwriter berkualitas buruk. DER menunjukkan tingkat hutang yang tinggi. ROE menunjukkan keuntungan yang rendah.'))


    @Rule(Fact(underwriter_valued='bad'), Fact(roa_valued='high'), Fact(roe_valued='low'))
    def ipo_rule_3970(self):
        self.declare(Fact(recommendation='Underwriter berkualitas buruk. ROA menunjukkan efisiensi tinggi. ROE menunjukkan keuntungan yang rendah.'))


    @Rule(Fact(warrant_valued='bad'), Fact(net_income_valued='loss'), Fact(per_valued='high'))
    def ipo_rule_3971(self):
        self.declare(Fact(recommendation='Warrant menunjukkan kondisi buruk. Laba bersih menunjukkan kerugian. PER berada di tingkat yang tinggi.'))


    @Rule(Fact(warrant_valued='bad'), Fact(net_income_valued='loss'), Fact(der_valued='high'))
    def ipo_rule_3972(self):
        self.declare(Fact(recommendation='Warrant menunjukkan kondisi buruk. Laba bersih menunjukkan kerugian. DER menunjukkan tingkat hutang yang tinggi.'))


    @Rule(Fact(warrant_valued='bad'), Fact(net_income_valued='loss'), Fact(roa_valued='high'))
    def ipo_rule_3973(self):
        self.declare(Fact(recommendation='Warrant menunjukkan kondisi buruk. Laba bersih menunjukkan kerugian. ROA menunjukkan efisiensi tinggi.'))


    @Rule(Fact(warrant_valued='bad'), Fact(net_income_valued='loss'), Fact(roe_valued='low'))
    def ipo_rule_3974(self):
        self.declare(Fact(recommendation='Warrant menunjukkan kondisi buruk. Laba bersih menunjukkan kerugian. ROE menunjukkan keuntungan yang rendah.'))


    @Rule(Fact(warrant_valued='bad'), Fact(per_valued='high'), Fact(der_valued='high'))
    def ipo_rule_3975(self):
        self.declare(Fact(recommendation='Warrant menunjukkan kondisi buruk. PER berada di tingkat yang tinggi. DER menunjukkan tingkat hutang yang tinggi.'))


    @Rule(Fact(warrant_valued='bad'), Fact(per_valued='high'), Fact(roa_valued='high'))
    def ipo_rule_3976(self):
        self.declare(Fact(recommendation='Warrant menunjukkan kondisi buruk. PER berada di tingkat yang tinggi. ROA menunjukkan efisiensi tinggi.'))


    @Rule(Fact(warrant_valued='bad'), Fact(per_valued='high'), Fact(roe_valued='low'))
    def ipo_rule_3977(self):
        self.declare(Fact(recommendation='Warrant menunjukkan kondisi buruk. PER berada di tingkat yang tinggi. ROE menunjukkan keuntungan yang rendah.'))


    @Rule(Fact(warrant_valued='bad'), Fact(der_valued='high'), Fact(roa_valued='high'))
    def ipo_rule_3978(self):
        self.declare(Fact(recommendation='Warrant menunjukkan kondisi buruk. DER menunjukkan tingkat hutang yang tinggi. ROA menunjukkan efisiensi tinggi.'))


    @Rule(Fact(warrant_valued='bad'), Fact(der_valued='high'), Fact(roe_valued='low'))
    def ipo_rule_3979(self):
        self.declare(Fact(recommendation='Warrant menunjukkan kondisi buruk. DER menunjukkan tingkat hutang yang tinggi. ROE menunjukkan keuntungan yang rendah.'))


    @Rule(Fact(warrant_valued='bad'), Fact(roa_valued='high'), Fact(roe_valued='low'))
    def ipo_rule_3980(self):
        self.declare(Fact(recommendation='Warrant menunjukkan kondisi buruk. ROA menunjukkan efisiensi tinggi. ROE menunjukkan keuntungan yang rendah.'))


    @Rule(Fact(net_income_valued='loss'), Fact(per_valued='high'), Fact(der_valued='high'))
    def ipo_rule_3981(self):
        self.declare(Fact(recommendation='Laba bersih menunjukkan kerugian. PER berada di tingkat yang tinggi. DER menunjukkan tingkat hutang yang tinggi.'))


    @Rule(Fact(net_income_valued='loss'), Fact(per_valued='high'), Fact(roa_valued='high'))
    def ipo_rule_3982(self):
        self.declare(Fact(recommendation='Laba bersih menunjukkan kerugian. PER berada di tingkat yang tinggi. ROA menunjukkan efisiensi tinggi.'))


    @Rule(Fact(net_income_valued='loss'), Fact(per_valued='high'), Fact(roe_valued='low'))
    def ipo_rule_3983(self):
        self.declare(Fact(recommendation='Laba bersih menunjukkan kerugian. PER berada di tingkat yang tinggi. ROE menunjukkan keuntungan yang rendah.'))


    @Rule(Fact(net_income_valued='loss'), Fact(der_valued='high'), Fact(roa_valued='high'))
    def ipo_rule_3984(self):
        self.declare(Fact(recommendation='Laba bersih menunjukkan kerugian. DER menunjukkan tingkat hutang yang tinggi. ROA menunjukkan efisiensi tinggi.'))


    @Rule(Fact(net_income_valued='loss'), Fact(der_valued='high'), Fact(roe_valued='low'))
    def ipo_rule_3985(self):
        self.declare(Fact(recommendation='Laba bersih menunjukkan kerugian. DER menunjukkan tingkat hutang yang tinggi. ROE menunjukkan keuntungan yang rendah.'))


    @Rule(Fact(net_income_valued='loss'), Fact(roa_valued='high'), Fact(roe_valued='low'))
    def ipo_rule_3986(self):
        self.declare(Fact(recommendation='Laba bersih menunjukkan kerugian. ROA menunjukkan efisiensi tinggi. ROE menunjukkan keuntungan yang rendah.'))


    @Rule(Fact(per_valued='high'), Fact(der_valued='high'), Fact(roa_valued='high'))
    def ipo_rule_3987(self):
        self.declare(Fact(recommendation='PER berada di tingkat yang tinggi. DER menunjukkan tingkat hutang yang tinggi. ROA menunjukkan efisiensi tinggi.'))


    @Rule(Fact(per_valued='high'), Fact(der_valued='high'), Fact(roe_valued='low'))
    def ipo_rule_3988(self):
        self.declare(Fact(recommendation='PER berada di tingkat yang tinggi. DER menunjukkan tingkat hutang yang tinggi. ROE menunjukkan keuntungan yang rendah.'))


    @Rule(Fact(per_valued='high'), Fact(roa_valued='high'), Fact(roe_valued='low'))
    def ipo_rule_3989(self):
        self.declare(Fact(recommendation='PER berada di tingkat yang tinggi. ROA menunjukkan efisiensi tinggi. ROE menunjukkan keuntungan yang rendah.'))


    @Rule(Fact(der_valued='high'), Fact(roa_valued='high'), Fact(roe_valued='low'))
    def ipo_rule_3990(self):
        self.declare(Fact(recommendation='DER menunjukkan tingkat hutang yang tinggi. ROA menunjukkan efisiensi tinggi. ROE menunjukkan keuntungan yang rendah.'))


    @Rule(Fact(underwriter_valued='bad'), Fact(warrant_valued='bad'), Fact(net_income_valued='loss'))
    def ipo_rule_3991(self):
        self.declare(Fact(recommendation='Underwriter berkualitas buruk. Warrant menunjukkan kondisi buruk. Laba bersih menunjukkan kerugian.'))


    @Rule(Fact(underwriter_valued='bad'), Fact(warrant_valued='bad'), Fact(per_valued='high'))
    def ipo_rule_3992(self):
        self.declare(Fact(recommendation='Underwriter berkualitas buruk. Warrant menunjukkan kondisi buruk. PER berada di tingkat yang tinggi.'))


    @Rule(Fact(underwriter_valued='bad'), Fact(warrant_valued='bad'), Fact(der_valued='high'))
    def ipo_rule_3993(self):
        self.declare(Fact(recommendation='Underwriter berkualitas buruk. Warrant menunjukkan kondisi buruk. DER menunjukkan tingkat hutang yang tinggi.'))


    @Rule(Fact(underwriter_valued='bad'), Fact(warrant_valued='bad'), Fact(roa_valued='low'))
    def ipo_rule_3994(self):
        self.declare(Fact(recommendation='Underwriter berkualitas buruk. Warrant menunjukkan kondisi buruk. ROA menunjukkan efisiensi rendah.'))


    @Rule(Fact(underwriter_valued='bad'), Fact(warrant_valued='bad'), Fact(roe_valued='high'))
    def ipo_rule_3995(self):
        self.declare(Fact(recommendation='Underwriter berkualitas buruk. Warrant menunjukkan kondisi buruk. ROE menunjukkan keuntungan yang tinggi.'))


    @Rule(Fact(underwriter_valued='bad'), Fact(net_income_valued='loss'), Fact(per_valued='high'))
    def ipo_rule_3996(self):
        self.declare(Fact(recommendation='Underwriter berkualitas buruk. Laba bersih menunjukkan kerugian. PER berada di tingkat yang tinggi.'))


    @Rule(Fact(underwriter_valued='bad'), Fact(net_income_valued='loss'), Fact(der_valued='high'))
    def ipo_rule_3997(self):
        self.declare(Fact(recommendation='Underwriter berkualitas buruk. Laba bersih menunjukkan kerugian. DER menunjukkan tingkat hutang yang tinggi.'))


    @Rule(Fact(underwriter_valued='bad'), Fact(net_income_valued='loss'), Fact(roa_valued='low'))
    def ipo_rule_3998(self):
        self.declare(Fact(recommendation='Underwriter berkualitas buruk. Laba bersih menunjukkan kerugian. ROA menunjukkan efisiensi rendah.'))


    @Rule(Fact(underwriter_valued='bad'), Fact(net_income_valued='loss'), Fact(roe_valued='high'))
    def ipo_rule_3999(self):
        self.declare(Fact(recommendation='Underwriter berkualitas buruk. Laba bersih menunjukkan kerugian. ROE menunjukkan keuntungan yang tinggi.'))


    @Rule(Fact(underwriter_valued='bad'), Fact(per_valued='high'), Fact(der_valued='high'))
    def ipo_rule_4000(self):
        self.declare(Fact(recommendation='Underwriter berkualitas buruk. PER berada di tingkat yang tinggi. DER menunjukkan tingkat hutang yang tinggi.'))


    @Rule(Fact(underwriter_valued='bad'), Fact(per_valued='high'), Fact(roa_valued='low'))
    def ipo_rule_4001(self):
        self.declare(Fact(recommendation='Underwriter berkualitas buruk. PER berada di tingkat yang tinggi. ROA menunjukkan efisiensi rendah.'))


    @Rule(Fact(underwriter_valued='bad'), Fact(per_valued='high'), Fact(roe_valued='high'))
    def ipo_rule_4002(self):
        self.declare(Fact(recommendation='Underwriter berkualitas buruk. PER berada di tingkat yang tinggi. ROE menunjukkan keuntungan yang tinggi.'))


    @Rule(Fact(underwriter_valued='bad'), Fact(der_valued='high'), Fact(roa_valued='low'))
    def ipo_rule_4003(self):
        self.declare(Fact(recommendation='Underwriter berkualitas buruk. DER menunjukkan tingkat hutang yang tinggi. ROA menunjukkan efisiensi rendah.'))


    @Rule(Fact(underwriter_valued='bad'), Fact(der_valued='high'), Fact(roe_valued='high'))
    def ipo_rule_4004(self):
        self.declare(Fact(recommendation='Underwriter berkualitas buruk. DER menunjukkan tingkat hutang yang tinggi. ROE menunjukkan keuntungan yang tinggi.'))


    @Rule(Fact(underwriter_valued='bad'), Fact(roa_valued='low'), Fact(roe_valued='high'))
    def ipo_rule_4005(self):
        self.declare(Fact(recommendation='Underwriter berkualitas buruk. ROA menunjukkan efisiensi rendah. ROE menunjukkan keuntungan yang tinggi.'))


    @Rule(Fact(warrant_valued='bad'), Fact(net_income_valued='loss'), Fact(per_valued='high'))
    def ipo_rule_4006(self):
        self.declare(Fact(recommendation='Warrant menunjukkan kondisi buruk. Laba bersih menunjukkan kerugian. PER berada di tingkat yang tinggi.'))


    @Rule(Fact(warrant_valued='bad'), Fact(net_income_valued='loss'), Fact(der_valued='high'))
    def ipo_rule_4007(self):
        self.declare(Fact(recommendation='Warrant menunjukkan kondisi buruk. Laba bersih menunjukkan kerugian. DER menunjukkan tingkat hutang yang tinggi.'))


    @Rule(Fact(warrant_valued='bad'), Fact(net_income_valued='loss'), Fact(roa_valued='low'))
    def ipo_rule_4008(self):
        self.declare(Fact(recommendation='Warrant menunjukkan kondisi buruk. Laba bersih menunjukkan kerugian. ROA menunjukkan efisiensi rendah.'))


    @Rule(Fact(warrant_valued='bad'), Fact(net_income_valued='loss'), Fact(roe_valued='high'))
    def ipo_rule_4009(self):
        self.declare(Fact(recommendation='Warrant menunjukkan kondisi buruk. Laba bersih menunjukkan kerugian. ROE menunjukkan keuntungan yang tinggi.'))


    @Rule(Fact(warrant_valued='bad'), Fact(per_valued='high'), Fact(der_valued='high'))
    def ipo_rule_4010(self):
        self.declare(Fact(recommendation='Warrant menunjukkan kondisi buruk. PER berada di tingkat yang tinggi. DER menunjukkan tingkat hutang yang tinggi.'))


    @Rule(Fact(warrant_valued='bad'), Fact(per_valued='high'), Fact(roa_valued='low'))
    def ipo_rule_4011(self):
        self.declare(Fact(recommendation='Warrant menunjukkan kondisi buruk. PER berada di tingkat yang tinggi. ROA menunjukkan efisiensi rendah.'))


    @Rule(Fact(warrant_valued='bad'), Fact(per_valued='high'), Fact(roe_valued='high'))
    def ipo_rule_4012(self):
        self.declare(Fact(recommendation='Warrant menunjukkan kondisi buruk. PER berada di tingkat yang tinggi. ROE menunjukkan keuntungan yang tinggi.'))


    @Rule(Fact(warrant_valued='bad'), Fact(der_valued='high'), Fact(roa_valued='low'))
    def ipo_rule_4013(self):
        self.declare(Fact(recommendation='Warrant menunjukkan kondisi buruk. DER menunjukkan tingkat hutang yang tinggi. ROA menunjukkan efisiensi rendah.'))


    @Rule(Fact(warrant_valued='bad'), Fact(der_valued='high'), Fact(roe_valued='high'))
    def ipo_rule_4014(self):
        self.declare(Fact(recommendation='Warrant menunjukkan kondisi buruk. DER menunjukkan tingkat hutang yang tinggi. ROE menunjukkan keuntungan yang tinggi.'))


    @Rule(Fact(warrant_valued='bad'), Fact(roa_valued='low'), Fact(roe_valued='high'))
    def ipo_rule_4015(self):
        self.declare(Fact(recommendation='Warrant menunjukkan kondisi buruk. ROA menunjukkan efisiensi rendah. ROE menunjukkan keuntungan yang tinggi.'))


    @Rule(Fact(net_income_valued='loss'), Fact(per_valued='high'), Fact(der_valued='high'))
    def ipo_rule_4016(self):
        self.declare(Fact(recommendation='Laba bersih menunjukkan kerugian. PER berada di tingkat yang tinggi. DER menunjukkan tingkat hutang yang tinggi.'))


    @Rule(Fact(net_income_valued='loss'), Fact(per_valued='high'), Fact(roa_valued='low'))
    def ipo_rule_4017(self):
        self.declare(Fact(recommendation='Laba bersih menunjukkan kerugian. PER berada di tingkat yang tinggi. ROA menunjukkan efisiensi rendah.'))


    @Rule(Fact(net_income_valued='loss'), Fact(per_valued='high'), Fact(roe_valued='high'))
    def ipo_rule_4018(self):
        self.declare(Fact(recommendation='Laba bersih menunjukkan kerugian. PER berada di tingkat yang tinggi. ROE menunjukkan keuntungan yang tinggi.'))


    @Rule(Fact(net_income_valued='loss'), Fact(der_valued='high'), Fact(roa_valued='low'))
    def ipo_rule_4019(self):
        self.declare(Fact(recommendation='Laba bersih menunjukkan kerugian. DER menunjukkan tingkat hutang yang tinggi. ROA menunjukkan efisiensi rendah.'))


    @Rule(Fact(net_income_valued='loss'), Fact(der_valued='high'), Fact(roe_valued='high'))
    def ipo_rule_4020(self):
        self.declare(Fact(recommendation='Laba bersih menunjukkan kerugian. DER menunjukkan tingkat hutang yang tinggi. ROE menunjukkan keuntungan yang tinggi.'))


    @Rule(Fact(net_income_valued='loss'), Fact(roa_valued='low'), Fact(roe_valued='high'))
    def ipo_rule_4021(self):
        self.declare(Fact(recommendation='Laba bersih menunjukkan kerugian. ROA menunjukkan efisiensi rendah. ROE menunjukkan keuntungan yang tinggi.'))


    @Rule(Fact(per_valued='high'), Fact(der_valued='high'), Fact(roa_valued='low'))
    def ipo_rule_4022(self):
        self.declare(Fact(recommendation='PER berada di tingkat yang tinggi. DER menunjukkan tingkat hutang yang tinggi. ROA menunjukkan efisiensi rendah.'))


    @Rule(Fact(per_valued='high'), Fact(der_valued='high'), Fact(roe_valued='high'))
    def ipo_rule_4023(self):
        self.declare(Fact(recommendation='PER berada di tingkat yang tinggi. DER menunjukkan tingkat hutang yang tinggi. ROE menunjukkan keuntungan yang tinggi.'))


    @Rule(Fact(per_valued='high'), Fact(roa_valued='low'), Fact(roe_valued='high'))
    def ipo_rule_4024(self):
        self.declare(Fact(recommendation='PER berada di tingkat yang tinggi. ROA menunjukkan efisiensi rendah. ROE menunjukkan keuntungan yang tinggi.'))


    @Rule(Fact(der_valued='high'), Fact(roa_valued='low'), Fact(roe_valued='high'))
    def ipo_rule_4025(self):
        self.declare(Fact(recommendation='DER menunjukkan tingkat hutang yang tinggi. ROA menunjukkan efisiensi rendah. ROE menunjukkan keuntungan yang tinggi.'))


    @Rule(Fact(underwriter_valued='bad'), Fact(warrant_valued='bad'), Fact(net_income_valued='loss'))
    def ipo_rule_4026(self):
        self.declare(Fact(recommendation='Underwriter berkualitas buruk. Warrant menunjukkan kondisi buruk. Laba bersih menunjukkan kerugian.'))


    @Rule(Fact(underwriter_valued='bad'), Fact(warrant_valued='bad'), Fact(per_valued='high'))
    def ipo_rule_4027(self):
        self.declare(Fact(recommendation='Underwriter berkualitas buruk. Warrant menunjukkan kondisi buruk. PER berada di tingkat yang tinggi.'))


    @Rule(Fact(underwriter_valued='bad'), Fact(warrant_valued='bad'), Fact(der_valued='high'))
    def ipo_rule_4028(self):
        self.declare(Fact(recommendation='Underwriter berkualitas buruk. Warrant menunjukkan kondisi buruk. DER menunjukkan tingkat hutang yang tinggi.'))


    @Rule(Fact(underwriter_valued='bad'), Fact(warrant_valued='bad'), Fact(roa_valued='low'))
    def ipo_rule_4029(self):
        self.declare(Fact(recommendation='Underwriter berkualitas buruk. Warrant menunjukkan kondisi buruk. ROA menunjukkan efisiensi rendah.'))


    @Rule(Fact(underwriter_valued='bad'), Fact(warrant_valued='bad'), Fact(roe_valued='low'))
    def ipo_rule_4030(self):
        self.declare(Fact(recommendation='Underwriter berkualitas buruk. Warrant menunjukkan kondisi buruk. ROE menunjukkan keuntungan yang rendah.'))


    @Rule(Fact(underwriter_valued='bad'), Fact(net_income_valued='loss'), Fact(per_valued='high'))
    def ipo_rule_4031(self):
        self.declare(Fact(recommendation='Underwriter berkualitas buruk. Laba bersih menunjukkan kerugian. PER berada di tingkat yang tinggi.'))


    @Rule(Fact(underwriter_valued='bad'), Fact(net_income_valued='loss'), Fact(der_valued='high'))
    def ipo_rule_4032(self):
        self.declare(Fact(recommendation='Underwriter berkualitas buruk. Laba bersih menunjukkan kerugian. DER menunjukkan tingkat hutang yang tinggi.'))


    @Rule(Fact(underwriter_valued='bad'), Fact(net_income_valued='loss'), Fact(roa_valued='low'))
    def ipo_rule_4033(self):
        self.declare(Fact(recommendation='Underwriter berkualitas buruk. Laba bersih menunjukkan kerugian. ROA menunjukkan efisiensi rendah.'))


    @Rule(Fact(underwriter_valued='bad'), Fact(net_income_valued='loss'), Fact(roe_valued='low'))
    def ipo_rule_4034(self):
        self.declare(Fact(recommendation='Underwriter berkualitas buruk. Laba bersih menunjukkan kerugian. ROE menunjukkan keuntungan yang rendah.'))


    @Rule(Fact(underwriter_valued='bad'), Fact(per_valued='high'), Fact(der_valued='high'))
    def ipo_rule_4035(self):
        self.declare(Fact(recommendation='Underwriter berkualitas buruk. PER berada di tingkat yang tinggi. DER menunjukkan tingkat hutang yang tinggi.'))


    @Rule(Fact(underwriter_valued='bad'), Fact(per_valued='high'), Fact(roa_valued='low'))
    def ipo_rule_4036(self):
        self.declare(Fact(recommendation='Underwriter berkualitas buruk. PER berada di tingkat yang tinggi. ROA menunjukkan efisiensi rendah.'))


    @Rule(Fact(underwriter_valued='bad'), Fact(per_valued='high'), Fact(roe_valued='low'))
    def ipo_rule_4037(self):
        self.declare(Fact(recommendation='Underwriter berkualitas buruk. PER berada di tingkat yang tinggi. ROE menunjukkan keuntungan yang rendah.'))


    @Rule(Fact(underwriter_valued='bad'), Fact(der_valued='high'), Fact(roa_valued='low'))
    def ipo_rule_4038(self):
        self.declare(Fact(recommendation='Underwriter berkualitas buruk. DER menunjukkan tingkat hutang yang tinggi. ROA menunjukkan efisiensi rendah.'))


    @Rule(Fact(underwriter_valued='bad'), Fact(der_valued='high'), Fact(roe_valued='low'))
    def ipo_rule_4039(self):
        self.declare(Fact(recommendation='Underwriter berkualitas buruk. DER menunjukkan tingkat hutang yang tinggi. ROE menunjukkan keuntungan yang rendah.'))


    @Rule(Fact(underwriter_valued='bad'), Fact(roa_valued='low'), Fact(roe_valued='low'))
    def ipo_rule_4040(self):
        self.declare(Fact(recommendation='Underwriter berkualitas buruk. ROA menunjukkan efisiensi rendah. ROE menunjukkan keuntungan yang rendah.'))


    @Rule(Fact(warrant_valued='bad'), Fact(net_income_valued='loss'), Fact(per_valued='high'))
    def ipo_rule_4041(self):
        self.declare(Fact(recommendation='Warrant menunjukkan kondisi buruk. Laba bersih menunjukkan kerugian. PER berada di tingkat yang tinggi.'))


    @Rule(Fact(warrant_valued='bad'), Fact(net_income_valued='loss'), Fact(der_valued='high'))
    def ipo_rule_4042(self):
        self.declare(Fact(recommendation='Warrant menunjukkan kondisi buruk. Laba bersih menunjukkan kerugian. DER menunjukkan tingkat hutang yang tinggi.'))


    @Rule(Fact(warrant_valued='bad'), Fact(net_income_valued='loss'), Fact(roa_valued='low'))
    def ipo_rule_4043(self):
        self.declare(Fact(recommendation='Warrant menunjukkan kondisi buruk. Laba bersih menunjukkan kerugian. ROA menunjukkan efisiensi rendah.'))


    @Rule(Fact(warrant_valued='bad'), Fact(net_income_valued='loss'), Fact(roe_valued='low'))
    def ipo_rule_4044(self):
        self.declare(Fact(recommendation='Warrant menunjukkan kondisi buruk. Laba bersih menunjukkan kerugian. ROE menunjukkan keuntungan yang rendah.'))


    @Rule(Fact(warrant_valued='bad'), Fact(per_valued='high'), Fact(der_valued='high'))
    def ipo_rule_4045(self):
        self.declare(Fact(recommendation='Warrant menunjukkan kondisi buruk. PER berada di tingkat yang tinggi. DER menunjukkan tingkat hutang yang tinggi.'))


    @Rule(Fact(warrant_valued='bad'), Fact(per_valued='high'), Fact(roa_valued='low'))
    def ipo_rule_4046(self):
        self.declare(Fact(recommendation='Warrant menunjukkan kondisi buruk. PER berada di tingkat yang tinggi. ROA menunjukkan efisiensi rendah.'))


    @Rule(Fact(warrant_valued='bad'), Fact(per_valued='high'), Fact(roe_valued='low'))
    def ipo_rule_4047(self):
        self.declare(Fact(recommendation='Warrant menunjukkan kondisi buruk. PER berada di tingkat yang tinggi. ROE menunjukkan keuntungan yang rendah.'))


    @Rule(Fact(warrant_valued='bad'), Fact(der_valued='high'), Fact(roa_valued='low'))
    def ipo_rule_4048(self):
        self.declare(Fact(recommendation='Warrant menunjukkan kondisi buruk. DER menunjukkan tingkat hutang yang tinggi. ROA menunjukkan efisiensi rendah.'))


    @Rule(Fact(warrant_valued='bad'), Fact(der_valued='high'), Fact(roe_valued='low'))
    def ipo_rule_4049(self):
        self.declare(Fact(recommendation='Warrant menunjukkan kondisi buruk. DER menunjukkan tingkat hutang yang tinggi. ROE menunjukkan keuntungan yang rendah.'))


    @Rule(Fact(warrant_valued='bad'), Fact(roa_valued='low'), Fact(roe_valued='low'))
    def ipo_rule_4050(self):
        self.declare(Fact(recommendation='Warrant menunjukkan kondisi buruk. ROA menunjukkan efisiensi rendah. ROE menunjukkan keuntungan yang rendah.'))


    @Rule(Fact(net_income_valued='loss'), Fact(per_valued='high'), Fact(der_valued='high'))
    def ipo_rule_4051(self):
        self.declare(Fact(recommendation='Laba bersih menunjukkan kerugian. PER berada di tingkat yang tinggi. DER menunjukkan tingkat hutang yang tinggi.'))


    @Rule(Fact(net_income_valued='loss'), Fact(per_valued='high'), Fact(roa_valued='low'))
    def ipo_rule_4052(self):
        self.declare(Fact(recommendation='Laba bersih menunjukkan kerugian. PER berada di tingkat yang tinggi. ROA menunjukkan efisiensi rendah.'))


    @Rule(Fact(net_income_valued='loss'), Fact(per_valued='high'), Fact(roe_valued='low'))
    def ipo_rule_4053(self):
        self.declare(Fact(recommendation='Laba bersih menunjukkan kerugian. PER berada di tingkat yang tinggi. ROE menunjukkan keuntungan yang rendah.'))


    @Rule(Fact(net_income_valued='loss'), Fact(der_valued='high'), Fact(roa_valued='low'))
    def ipo_rule_4054(self):
        self.declare(Fact(recommendation='Laba bersih menunjukkan kerugian. DER menunjukkan tingkat hutang yang tinggi. ROA menunjukkan efisiensi rendah.'))


    @Rule(Fact(net_income_valued='loss'), Fact(der_valued='high'), Fact(roe_valued='low'))
    def ipo_rule_4055(self):
        self.declare(Fact(recommendation='Laba bersih menunjukkan kerugian. DER menunjukkan tingkat hutang yang tinggi. ROE menunjukkan keuntungan yang rendah.'))


    @Rule(Fact(net_income_valued='loss'), Fact(roa_valued='low'), Fact(roe_valued='low'))
    def ipo_rule_4056(self):
        self.declare(Fact(recommendation='Laba bersih menunjukkan kerugian. ROA menunjukkan efisiensi rendah. ROE menunjukkan keuntungan yang rendah.'))


    @Rule(Fact(per_valued='high'), Fact(der_valued='high'), Fact(roa_valued='low'))
    def ipo_rule_4057(self):
        self.declare(Fact(recommendation='PER berada di tingkat yang tinggi. DER menunjukkan tingkat hutang yang tinggi. ROA menunjukkan efisiensi rendah.'))


    @Rule(Fact(per_valued='high'), Fact(der_valued='high'), Fact(roe_valued='low'))
    def ipo_rule_4058(self):
        self.declare(Fact(recommendation='PER berada di tingkat yang tinggi. DER menunjukkan tingkat hutang yang tinggi. ROE menunjukkan keuntungan yang rendah.'))


    @Rule(Fact(per_valued='high'), Fact(roa_valued='low'), Fact(roe_valued='low'))
    def ipo_rule_4059(self):
        self.declare(Fact(recommendation='PER berada di tingkat yang tinggi. ROA menunjukkan efisiensi rendah. ROE menunjukkan keuntungan yang rendah.'))


    @Rule(Fact(der_valued='high'), Fact(roa_valued='low'), Fact(roe_valued='low'))
    def ipo_rule_4060(self):
        self.declare(Fact(recommendation='DER menunjukkan tingkat hutang yang tinggi. ROA menunjukkan efisiensi rendah. ROE menunjukkan keuntungan yang rendah.'))


    @Rule(Fact(underwriter_valued='bad'), Fact(warrant_valued='bad'), Fact(net_income_valued='loss'))
    def ipo_rule_4061(self):
        self.declare(Fact(recommendation='Underwriter berkualitas buruk. Warrant menunjukkan kondisi buruk. Laba bersih menunjukkan kerugian.'))


    @Rule(Fact(underwriter_valued='bad'), Fact(warrant_valued='bad'), Fact(per_valued='high'))
    def ipo_rule_4062(self):
        self.declare(Fact(recommendation='Underwriter berkualitas buruk. Warrant menunjukkan kondisi buruk. PER berada di tingkat yang tinggi.'))


    @Rule(Fact(underwriter_valued='bad'), Fact(warrant_valued='bad'), Fact(der_valued='low'))
    def ipo_rule_4063(self):
        self.declare(Fact(recommendation='Underwriter berkualitas buruk. Warrant menunjukkan kondisi buruk. DER menunjukkan tingkat hutang yang rendah.'))


    @Rule(Fact(underwriter_valued='bad'), Fact(warrant_valued='bad'), Fact(roa_valued='high'))
    def ipo_rule_4064(self):
        self.declare(Fact(recommendation='Underwriter berkualitas buruk. Warrant menunjukkan kondisi buruk. ROA menunjukkan efisiensi tinggi.'))


    @Rule(Fact(underwriter_valued='bad'), Fact(warrant_valued='bad'), Fact(roe_valued='high'))
    def ipo_rule_4065(self):
        self.declare(Fact(recommendation='Underwriter berkualitas buruk. Warrant menunjukkan kondisi buruk. ROE menunjukkan keuntungan yang tinggi.'))


    @Rule(Fact(underwriter_valued='bad'), Fact(net_income_valued='loss'), Fact(per_valued='high'))
    def ipo_rule_4066(self):
        self.declare(Fact(recommendation='Underwriter berkualitas buruk. Laba bersih menunjukkan kerugian. PER berada di tingkat yang tinggi.'))


    @Rule(Fact(underwriter_valued='bad'), Fact(net_income_valued='loss'), Fact(der_valued='low'))
    def ipo_rule_4067(self):
        self.declare(Fact(recommendation='Underwriter berkualitas buruk. Laba bersih menunjukkan kerugian. DER menunjukkan tingkat hutang yang rendah.'))


    @Rule(Fact(underwriter_valued='bad'), Fact(net_income_valued='loss'), Fact(roa_valued='high'))
    def ipo_rule_4068(self):
        self.declare(Fact(recommendation='Underwriter berkualitas buruk. Laba bersih menunjukkan kerugian. ROA menunjukkan efisiensi tinggi.'))


    @Rule(Fact(underwriter_valued='bad'), Fact(net_income_valued='loss'), Fact(roe_valued='high'))
    def ipo_rule_4069(self):
        self.declare(Fact(recommendation='Underwriter berkualitas buruk. Laba bersih menunjukkan kerugian. ROE menunjukkan keuntungan yang tinggi.'))


    @Rule(Fact(underwriter_valued='bad'), Fact(per_valued='high'), Fact(der_valued='low'))
    def ipo_rule_4070(self):
        self.declare(Fact(recommendation='Underwriter berkualitas buruk. PER berada di tingkat yang tinggi. DER menunjukkan tingkat hutang yang rendah.'))


    @Rule(Fact(underwriter_valued='bad'), Fact(per_valued='high'), Fact(roa_valued='high'))
    def ipo_rule_4071(self):
        self.declare(Fact(recommendation='Underwriter berkualitas buruk. PER berada di tingkat yang tinggi. ROA menunjukkan efisiensi tinggi.'))


    @Rule(Fact(underwriter_valued='bad'), Fact(per_valued='high'), Fact(roe_valued='high'))
    def ipo_rule_4072(self):
        self.declare(Fact(recommendation='Underwriter berkualitas buruk. PER berada di tingkat yang tinggi. ROE menunjukkan keuntungan yang tinggi.'))


    @Rule(Fact(underwriter_valued='bad'), Fact(der_valued='low'), Fact(roa_valued='high'))
    def ipo_rule_4073(self):
        self.declare(Fact(recommendation='Underwriter berkualitas buruk. DER menunjukkan tingkat hutang yang rendah. ROA menunjukkan efisiensi tinggi.'))


    @Rule(Fact(underwriter_valued='bad'), Fact(der_valued='low'), Fact(roe_valued='high'))
    def ipo_rule_4074(self):
        self.declare(Fact(recommendation='Underwriter berkualitas buruk. DER menunjukkan tingkat hutang yang rendah. ROE menunjukkan keuntungan yang tinggi.'))


    @Rule(Fact(underwriter_valued='bad'), Fact(roa_valued='high'), Fact(roe_valued='high'))
    def ipo_rule_4075(self):
        self.declare(Fact(recommendation='Underwriter berkualitas buruk. ROA menunjukkan efisiensi tinggi. ROE menunjukkan keuntungan yang tinggi.'))


    @Rule(Fact(warrant_valued='bad'), Fact(net_income_valued='loss'), Fact(per_valued='high'))
    def ipo_rule_4076(self):
        self.declare(Fact(recommendation='Warrant menunjukkan kondisi buruk. Laba bersih menunjukkan kerugian. PER berada di tingkat yang tinggi.'))


    @Rule(Fact(warrant_valued='bad'), Fact(net_income_valued='loss'), Fact(der_valued='low'))
    def ipo_rule_4077(self):
        self.declare(Fact(recommendation='Warrant menunjukkan kondisi buruk. Laba bersih menunjukkan kerugian. DER menunjukkan tingkat hutang yang rendah.'))


    @Rule(Fact(warrant_valued='bad'), Fact(net_income_valued='loss'), Fact(roa_valued='high'))
    def ipo_rule_4078(self):
        self.declare(Fact(recommendation='Warrant menunjukkan kondisi buruk. Laba bersih menunjukkan kerugian. ROA menunjukkan efisiensi tinggi.'))


    @Rule(Fact(warrant_valued='bad'), Fact(net_income_valued='loss'), Fact(roe_valued='high'))
    def ipo_rule_4079(self):
        self.declare(Fact(recommendation='Warrant menunjukkan kondisi buruk. Laba bersih menunjukkan kerugian. ROE menunjukkan keuntungan yang tinggi.'))


    @Rule(Fact(warrant_valued='bad'), Fact(per_valued='high'), Fact(der_valued='low'))
    def ipo_rule_4080(self):
        self.declare(Fact(recommendation='Warrant menunjukkan kondisi buruk. PER berada di tingkat yang tinggi. DER menunjukkan tingkat hutang yang rendah.'))


    @Rule(Fact(warrant_valued='bad'), Fact(per_valued='high'), Fact(roa_valued='high'))
    def ipo_rule_4081(self):
        self.declare(Fact(recommendation='Warrant menunjukkan kondisi buruk. PER berada di tingkat yang tinggi. ROA menunjukkan efisiensi tinggi.'))


    @Rule(Fact(warrant_valued='bad'), Fact(per_valued='high'), Fact(roe_valued='high'))
    def ipo_rule_4082(self):
        self.declare(Fact(recommendation='Warrant menunjukkan kondisi buruk. PER berada di tingkat yang tinggi. ROE menunjukkan keuntungan yang tinggi.'))


    @Rule(Fact(warrant_valued='bad'), Fact(der_valued='low'), Fact(roa_valued='high'))
    def ipo_rule_4083(self):
        self.declare(Fact(recommendation='Warrant menunjukkan kondisi buruk. DER menunjukkan tingkat hutang yang rendah. ROA menunjukkan efisiensi tinggi.'))


    @Rule(Fact(warrant_valued='bad'), Fact(der_valued='low'), Fact(roe_valued='high'))
    def ipo_rule_4084(self):
        self.declare(Fact(recommendation='Warrant menunjukkan kondisi buruk. DER menunjukkan tingkat hutang yang rendah. ROE menunjukkan keuntungan yang tinggi.'))


    @Rule(Fact(warrant_valued='bad'), Fact(roa_valued='high'), Fact(roe_valued='high'))
    def ipo_rule_4085(self):
        self.declare(Fact(recommendation='Warrant menunjukkan kondisi buruk. ROA menunjukkan efisiensi tinggi. ROE menunjukkan keuntungan yang tinggi.'))


    @Rule(Fact(net_income_valued='loss'), Fact(per_valued='high'), Fact(der_valued='low'))
    def ipo_rule_4086(self):
        self.declare(Fact(recommendation='Laba bersih menunjukkan kerugian. PER berada di tingkat yang tinggi. DER menunjukkan tingkat hutang yang rendah.'))


    @Rule(Fact(net_income_valued='loss'), Fact(per_valued='high'), Fact(roa_valued='high'))
    def ipo_rule_4087(self):
        self.declare(Fact(recommendation='Laba bersih menunjukkan kerugian. PER berada di tingkat yang tinggi. ROA menunjukkan efisiensi tinggi.'))


    @Rule(Fact(net_income_valued='loss'), Fact(per_valued='high'), Fact(roe_valued='high'))
    def ipo_rule_4088(self):
        self.declare(Fact(recommendation='Laba bersih menunjukkan kerugian. PER berada di tingkat yang tinggi. ROE menunjukkan keuntungan yang tinggi.'))


    @Rule(Fact(net_income_valued='loss'), Fact(der_valued='low'), Fact(roa_valued='high'))
    def ipo_rule_4089(self):
        self.declare(Fact(recommendation='Laba bersih menunjukkan kerugian. DER menunjukkan tingkat hutang yang rendah. ROA menunjukkan efisiensi tinggi.'))


    @Rule(Fact(net_income_valued='loss'), Fact(der_valued='low'), Fact(roe_valued='high'))
    def ipo_rule_4090(self):
        self.declare(Fact(recommendation='Laba bersih menunjukkan kerugian. DER menunjukkan tingkat hutang yang rendah. ROE menunjukkan keuntungan yang tinggi.'))


    @Rule(Fact(net_income_valued='loss'), Fact(roa_valued='high'), Fact(roe_valued='high'))
    def ipo_rule_4091(self):
        self.declare(Fact(recommendation='Laba bersih menunjukkan kerugian. ROA menunjukkan efisiensi tinggi. ROE menunjukkan keuntungan yang tinggi.'))


    @Rule(Fact(per_valued='high'), Fact(der_valued='low'), Fact(roa_valued='high'))
    def ipo_rule_4092(self):
        self.declare(Fact(recommendation='PER berada di tingkat yang tinggi. DER menunjukkan tingkat hutang yang rendah. ROA menunjukkan efisiensi tinggi.'))


    @Rule(Fact(per_valued='high'), Fact(der_valued='low'), Fact(roe_valued='high'))
    def ipo_rule_4093(self):
        self.declare(Fact(recommendation='PER berada di tingkat yang tinggi. DER menunjukkan tingkat hutang yang rendah. ROE menunjukkan keuntungan yang tinggi.'))


    @Rule(Fact(per_valued='high'), Fact(roa_valued='high'), Fact(roe_valued='high'))
    def ipo_rule_4094(self):
        self.declare(Fact(recommendation='PER berada di tingkat yang tinggi. ROA menunjukkan efisiensi tinggi. ROE menunjukkan keuntungan yang tinggi.'))


    @Rule(Fact(der_valued='low'), Fact(roa_valued='high'), Fact(roe_valued='high'))
    def ipo_rule_4095(self):
        self.declare(Fact(recommendation='DER menunjukkan tingkat hutang yang rendah. ROA menunjukkan efisiensi tinggi. ROE menunjukkan keuntungan yang tinggi.'))


    @Rule(Fact(underwriter_valued='bad'), Fact(warrant_valued='bad'), Fact(net_income_valued='loss'))
    def ipo_rule_4096(self):
        self.declare(Fact(recommendation='Underwriter berkualitas buruk. Warrant menunjukkan kondisi buruk. Laba bersih menunjukkan kerugian.'))


    @Rule(Fact(underwriter_valued='bad'), Fact(warrant_valued='bad'), Fact(per_valued='high'))
    def ipo_rule_4097(self):
        self.declare(Fact(recommendation='Underwriter berkualitas buruk. Warrant menunjukkan kondisi buruk. PER berada di tingkat yang tinggi.'))


    @Rule(Fact(underwriter_valued='bad'), Fact(warrant_valued='bad'), Fact(der_valued='low'))
    def ipo_rule_4098(self):
        self.declare(Fact(recommendation='Underwriter berkualitas buruk. Warrant menunjukkan kondisi buruk. DER menunjukkan tingkat hutang yang rendah.'))


    @Rule(Fact(underwriter_valued='bad'), Fact(warrant_valued='bad'), Fact(roa_valued='high'))
    def ipo_rule_4099(self):
        self.declare(Fact(recommendation='Underwriter berkualitas buruk. Warrant menunjukkan kondisi buruk. ROA menunjukkan efisiensi tinggi.'))


    @Rule(Fact(underwriter_valued='bad'), Fact(warrant_valued='bad'), Fact(roe_valued='low'))
    def ipo_rule_4100(self):
        self.declare(Fact(recommendation='Underwriter berkualitas buruk. Warrant menunjukkan kondisi buruk. ROE menunjukkan keuntungan yang rendah.'))


    @Rule(Fact(underwriter_valued='bad'), Fact(net_income_valued='loss'), Fact(per_valued='high'))
    def ipo_rule_4101(self):
        self.declare(Fact(recommendation='Underwriter berkualitas buruk. Laba bersih menunjukkan kerugian. PER berada di tingkat yang tinggi.'))


    @Rule(Fact(underwriter_valued='bad'), Fact(net_income_valued='loss'), Fact(der_valued='low'))
    def ipo_rule_4102(self):
        self.declare(Fact(recommendation='Underwriter berkualitas buruk. Laba bersih menunjukkan kerugian. DER menunjukkan tingkat hutang yang rendah.'))


    @Rule(Fact(underwriter_valued='bad'), Fact(net_income_valued='loss'), Fact(roa_valued='high'))
    def ipo_rule_4103(self):
        self.declare(Fact(recommendation='Underwriter berkualitas buruk. Laba bersih menunjukkan kerugian. ROA menunjukkan efisiensi tinggi.'))


    @Rule(Fact(underwriter_valued='bad'), Fact(net_income_valued='loss'), Fact(roe_valued='low'))
    def ipo_rule_4104(self):
        self.declare(Fact(recommendation='Underwriter berkualitas buruk. Laba bersih menunjukkan kerugian. ROE menunjukkan keuntungan yang rendah.'))


    @Rule(Fact(underwriter_valued='bad'), Fact(per_valued='high'), Fact(der_valued='low'))
    def ipo_rule_4105(self):
        self.declare(Fact(recommendation='Underwriter berkualitas buruk. PER berada di tingkat yang tinggi. DER menunjukkan tingkat hutang yang rendah.'))


    @Rule(Fact(underwriter_valued='bad'), Fact(per_valued='high'), Fact(roa_valued='high'))
    def ipo_rule_4106(self):
        self.declare(Fact(recommendation='Underwriter berkualitas buruk. PER berada di tingkat yang tinggi. ROA menunjukkan efisiensi tinggi.'))


    @Rule(Fact(underwriter_valued='bad'), Fact(per_valued='high'), Fact(roe_valued='low'))
    def ipo_rule_4107(self):
        self.declare(Fact(recommendation='Underwriter berkualitas buruk. PER berada di tingkat yang tinggi. ROE menunjukkan keuntungan yang rendah.'))


    @Rule(Fact(underwriter_valued='bad'), Fact(der_valued='low'), Fact(roa_valued='high'))
    def ipo_rule_4108(self):
        self.declare(Fact(recommendation='Underwriter berkualitas buruk. DER menunjukkan tingkat hutang yang rendah. ROA menunjukkan efisiensi tinggi.'))


    @Rule(Fact(underwriter_valued='bad'), Fact(der_valued='low'), Fact(roe_valued='low'))
    def ipo_rule_4109(self):
        self.declare(Fact(recommendation='Underwriter berkualitas buruk. DER menunjukkan tingkat hutang yang rendah. ROE menunjukkan keuntungan yang rendah.'))


    @Rule(Fact(underwriter_valued='bad'), Fact(roa_valued='high'), Fact(roe_valued='low'))
    def ipo_rule_4110(self):
        self.declare(Fact(recommendation='Underwriter berkualitas buruk. ROA menunjukkan efisiensi tinggi. ROE menunjukkan keuntungan yang rendah.'))


    @Rule(Fact(warrant_valued='bad'), Fact(net_income_valued='loss'), Fact(per_valued='high'))
    def ipo_rule_4111(self):
        self.declare(Fact(recommendation='Warrant menunjukkan kondisi buruk. Laba bersih menunjukkan kerugian. PER berada di tingkat yang tinggi.'))


    @Rule(Fact(warrant_valued='bad'), Fact(net_income_valued='loss'), Fact(der_valued='low'))
    def ipo_rule_4112(self):
        self.declare(Fact(recommendation='Warrant menunjukkan kondisi buruk. Laba bersih menunjukkan kerugian. DER menunjukkan tingkat hutang yang rendah.'))


    @Rule(Fact(warrant_valued='bad'), Fact(net_income_valued='loss'), Fact(roa_valued='high'))
    def ipo_rule_4113(self):
        self.declare(Fact(recommendation='Warrant menunjukkan kondisi buruk. Laba bersih menunjukkan kerugian. ROA menunjukkan efisiensi tinggi.'))


    @Rule(Fact(warrant_valued='bad'), Fact(net_income_valued='loss'), Fact(roe_valued='low'))
    def ipo_rule_4114(self):
        self.declare(Fact(recommendation='Warrant menunjukkan kondisi buruk. Laba bersih menunjukkan kerugian. ROE menunjukkan keuntungan yang rendah.'))


    @Rule(Fact(warrant_valued='bad'), Fact(per_valued='high'), Fact(der_valued='low'))
    def ipo_rule_4115(self):
        self.declare(Fact(recommendation='Warrant menunjukkan kondisi buruk. PER berada di tingkat yang tinggi. DER menunjukkan tingkat hutang yang rendah.'))


    @Rule(Fact(warrant_valued='bad'), Fact(per_valued='high'), Fact(roa_valued='high'))
    def ipo_rule_4116(self):
        self.declare(Fact(recommendation='Warrant menunjukkan kondisi buruk. PER berada di tingkat yang tinggi. ROA menunjukkan efisiensi tinggi.'))


    @Rule(Fact(warrant_valued='bad'), Fact(per_valued='high'), Fact(roe_valued='low'))
    def ipo_rule_4117(self):
        self.declare(Fact(recommendation='Warrant menunjukkan kondisi buruk. PER berada di tingkat yang tinggi. ROE menunjukkan keuntungan yang rendah.'))


    @Rule(Fact(warrant_valued='bad'), Fact(der_valued='low'), Fact(roa_valued='high'))
    def ipo_rule_4118(self):
        self.declare(Fact(recommendation='Warrant menunjukkan kondisi buruk. DER menunjukkan tingkat hutang yang rendah. ROA menunjukkan efisiensi tinggi.'))


    @Rule(Fact(warrant_valued='bad'), Fact(der_valued='low'), Fact(roe_valued='low'))
    def ipo_rule_4119(self):
        self.declare(Fact(recommendation='Warrant menunjukkan kondisi buruk. DER menunjukkan tingkat hutang yang rendah. ROE menunjukkan keuntungan yang rendah.'))


    @Rule(Fact(warrant_valued='bad'), Fact(roa_valued='high'), Fact(roe_valued='low'))
    def ipo_rule_4120(self):
        self.declare(Fact(recommendation='Warrant menunjukkan kondisi buruk. ROA menunjukkan efisiensi tinggi. ROE menunjukkan keuntungan yang rendah.'))


    @Rule(Fact(net_income_valued='loss'), Fact(per_valued='high'), Fact(der_valued='low'))
    def ipo_rule_4121(self):
        self.declare(Fact(recommendation='Laba bersih menunjukkan kerugian. PER berada di tingkat yang tinggi. DER menunjukkan tingkat hutang yang rendah.'))


    @Rule(Fact(net_income_valued='loss'), Fact(per_valued='high'), Fact(roa_valued='high'))
    def ipo_rule_4122(self):
        self.declare(Fact(recommendation='Laba bersih menunjukkan kerugian. PER berada di tingkat yang tinggi. ROA menunjukkan efisiensi tinggi.'))


    @Rule(Fact(net_income_valued='loss'), Fact(per_valued='high'), Fact(roe_valued='low'))
    def ipo_rule_4123(self):
        self.declare(Fact(recommendation='Laba bersih menunjukkan kerugian. PER berada di tingkat yang tinggi. ROE menunjukkan keuntungan yang rendah.'))


    @Rule(Fact(net_income_valued='loss'), Fact(der_valued='low'), Fact(roa_valued='high'))
    def ipo_rule_4124(self):
        self.declare(Fact(recommendation='Laba bersih menunjukkan kerugian. DER menunjukkan tingkat hutang yang rendah. ROA menunjukkan efisiensi tinggi.'))


    @Rule(Fact(net_income_valued='loss'), Fact(der_valued='low'), Fact(roe_valued='low'))
    def ipo_rule_4125(self):
        self.declare(Fact(recommendation='Laba bersih menunjukkan kerugian. DER menunjukkan tingkat hutang yang rendah. ROE menunjukkan keuntungan yang rendah.'))


    @Rule(Fact(net_income_valued='loss'), Fact(roa_valued='high'), Fact(roe_valued='low'))
    def ipo_rule_4126(self):
        self.declare(Fact(recommendation='Laba bersih menunjukkan kerugian. ROA menunjukkan efisiensi tinggi. ROE menunjukkan keuntungan yang rendah.'))


    @Rule(Fact(per_valued='high'), Fact(der_valued='low'), Fact(roa_valued='high'))
    def ipo_rule_4127(self):
        self.declare(Fact(recommendation='PER berada di tingkat yang tinggi. DER menunjukkan tingkat hutang yang rendah. ROA menunjukkan efisiensi tinggi.'))


    @Rule(Fact(per_valued='high'), Fact(der_valued='low'), Fact(roe_valued='low'))
    def ipo_rule_4128(self):
        self.declare(Fact(recommendation='PER berada di tingkat yang tinggi. DER menunjukkan tingkat hutang yang rendah. ROE menunjukkan keuntungan yang rendah.'))


    @Rule(Fact(per_valued='high'), Fact(roa_valued='high'), Fact(roe_valued='low'))
    def ipo_rule_4129(self):
        self.declare(Fact(recommendation='PER berada di tingkat yang tinggi. ROA menunjukkan efisiensi tinggi. ROE menunjukkan keuntungan yang rendah.'))


    @Rule(Fact(der_valued='low'), Fact(roa_valued='high'), Fact(roe_valued='low'))
    def ipo_rule_4130(self):
        self.declare(Fact(recommendation='DER menunjukkan tingkat hutang yang rendah. ROA menunjukkan efisiensi tinggi. ROE menunjukkan keuntungan yang rendah.'))


    @Rule(Fact(underwriter_valued='bad'), Fact(warrant_valued='bad'), Fact(net_income_valued='loss'))
    def ipo_rule_4131(self):
        self.declare(Fact(recommendation='Underwriter berkualitas buruk. Warrant menunjukkan kondisi buruk. Laba bersih menunjukkan kerugian.'))


    @Rule(Fact(underwriter_valued='bad'), Fact(warrant_valued='bad'), Fact(per_valued='high'))
    def ipo_rule_4132(self):
        self.declare(Fact(recommendation='Underwriter berkualitas buruk. Warrant menunjukkan kondisi buruk. PER berada di tingkat yang tinggi.'))


    @Rule(Fact(underwriter_valued='bad'), Fact(warrant_valued='bad'), Fact(der_valued='low'))
    def ipo_rule_4133(self):
        self.declare(Fact(recommendation='Underwriter berkualitas buruk. Warrant menunjukkan kondisi buruk. DER menunjukkan tingkat hutang yang rendah.'))


    @Rule(Fact(underwriter_valued='bad'), Fact(warrant_valued='bad'), Fact(roa_valued='low'))
    def ipo_rule_4134(self):
        self.declare(Fact(recommendation='Underwriter berkualitas buruk. Warrant menunjukkan kondisi buruk. ROA menunjukkan efisiensi rendah.'))


    @Rule(Fact(underwriter_valued='bad'), Fact(warrant_valued='bad'), Fact(roe_valued='high'))
    def ipo_rule_4135(self):
        self.declare(Fact(recommendation='Underwriter berkualitas buruk. Warrant menunjukkan kondisi buruk. ROE menunjukkan keuntungan yang tinggi.'))


    @Rule(Fact(underwriter_valued='bad'), Fact(net_income_valued='loss'), Fact(per_valued='high'))
    def ipo_rule_4136(self):
        self.declare(Fact(recommendation='Underwriter berkualitas buruk. Laba bersih menunjukkan kerugian. PER berada di tingkat yang tinggi.'))


    @Rule(Fact(underwriter_valued='bad'), Fact(net_income_valued='loss'), Fact(der_valued='low'))
    def ipo_rule_4137(self):
        self.declare(Fact(recommendation='Underwriter berkualitas buruk. Laba bersih menunjukkan kerugian. DER menunjukkan tingkat hutang yang rendah.'))


    @Rule(Fact(underwriter_valued='bad'), Fact(net_income_valued='loss'), Fact(roa_valued='low'))
    def ipo_rule_4138(self):
        self.declare(Fact(recommendation='Underwriter berkualitas buruk. Laba bersih menunjukkan kerugian. ROA menunjukkan efisiensi rendah.'))


    @Rule(Fact(underwriter_valued='bad'), Fact(net_income_valued='loss'), Fact(roe_valued='high'))
    def ipo_rule_4139(self):
        self.declare(Fact(recommendation='Underwriter berkualitas buruk. Laba bersih menunjukkan kerugian. ROE menunjukkan keuntungan yang tinggi.'))


    @Rule(Fact(underwriter_valued='bad'), Fact(per_valued='high'), Fact(der_valued='low'))
    def ipo_rule_4140(self):
        self.declare(Fact(recommendation='Underwriter berkualitas buruk. PER berada di tingkat yang tinggi. DER menunjukkan tingkat hutang yang rendah.'))


    @Rule(Fact(underwriter_valued='bad'), Fact(per_valued='high'), Fact(roa_valued='low'))
    def ipo_rule_4141(self):
        self.declare(Fact(recommendation='Underwriter berkualitas buruk. PER berada di tingkat yang tinggi. ROA menunjukkan efisiensi rendah.'))


    @Rule(Fact(underwriter_valued='bad'), Fact(per_valued='high'), Fact(roe_valued='high'))
    def ipo_rule_4142(self):
        self.declare(Fact(recommendation='Underwriter berkualitas buruk. PER berada di tingkat yang tinggi. ROE menunjukkan keuntungan yang tinggi.'))


    @Rule(Fact(underwriter_valued='bad'), Fact(der_valued='low'), Fact(roa_valued='low'))
    def ipo_rule_4143(self):
        self.declare(Fact(recommendation='Underwriter berkualitas buruk. DER menunjukkan tingkat hutang yang rendah. ROA menunjukkan efisiensi rendah.'))


    @Rule(Fact(underwriter_valued='bad'), Fact(der_valued='low'), Fact(roe_valued='high'))
    def ipo_rule_4144(self):
        self.declare(Fact(recommendation='Underwriter berkualitas buruk. DER menunjukkan tingkat hutang yang rendah. ROE menunjukkan keuntungan yang tinggi.'))


    @Rule(Fact(underwriter_valued='bad'), Fact(roa_valued='low'), Fact(roe_valued='high'))
    def ipo_rule_4145(self):
        self.declare(Fact(recommendation='Underwriter berkualitas buruk. ROA menunjukkan efisiensi rendah. ROE menunjukkan keuntungan yang tinggi.'))


    @Rule(Fact(warrant_valued='bad'), Fact(net_income_valued='loss'), Fact(per_valued='high'))
    def ipo_rule_4146(self):
        self.declare(Fact(recommendation='Warrant menunjukkan kondisi buruk. Laba bersih menunjukkan kerugian. PER berada di tingkat yang tinggi.'))


    @Rule(Fact(warrant_valued='bad'), Fact(net_income_valued='loss'), Fact(der_valued='low'))
    def ipo_rule_4147(self):
        self.declare(Fact(recommendation='Warrant menunjukkan kondisi buruk. Laba bersih menunjukkan kerugian. DER menunjukkan tingkat hutang yang rendah.'))


    @Rule(Fact(warrant_valued='bad'), Fact(net_income_valued='loss'), Fact(roa_valued='low'))
    def ipo_rule_4148(self):
        self.declare(Fact(recommendation='Warrant menunjukkan kondisi buruk. Laba bersih menunjukkan kerugian. ROA menunjukkan efisiensi rendah.'))


    @Rule(Fact(warrant_valued='bad'), Fact(net_income_valued='loss'), Fact(roe_valued='high'))
    def ipo_rule_4149(self):
        self.declare(Fact(recommendation='Warrant menunjukkan kondisi buruk. Laba bersih menunjukkan kerugian. ROE menunjukkan keuntungan yang tinggi.'))


    @Rule(Fact(warrant_valued='bad'), Fact(per_valued='high'), Fact(der_valued='low'))
    def ipo_rule_4150(self):
        self.declare(Fact(recommendation='Warrant menunjukkan kondisi buruk. PER berada di tingkat yang tinggi. DER menunjukkan tingkat hutang yang rendah.'))


    @Rule(Fact(warrant_valued='bad'), Fact(per_valued='high'), Fact(roa_valued='low'))
    def ipo_rule_4151(self):
        self.declare(Fact(recommendation='Warrant menunjukkan kondisi buruk. PER berada di tingkat yang tinggi. ROA menunjukkan efisiensi rendah.'))


    @Rule(Fact(warrant_valued='bad'), Fact(per_valued='high'), Fact(roe_valued='high'))
    def ipo_rule_4152(self):
        self.declare(Fact(recommendation='Warrant menunjukkan kondisi buruk. PER berada di tingkat yang tinggi. ROE menunjukkan keuntungan yang tinggi.'))


    @Rule(Fact(warrant_valued='bad'), Fact(der_valued='low'), Fact(roa_valued='low'))
    def ipo_rule_4153(self):
        self.declare(Fact(recommendation='Warrant menunjukkan kondisi buruk. DER menunjukkan tingkat hutang yang rendah. ROA menunjukkan efisiensi rendah.'))


    @Rule(Fact(warrant_valued='bad'), Fact(der_valued='low'), Fact(roe_valued='high'))
    def ipo_rule_4154(self):
        self.declare(Fact(recommendation='Warrant menunjukkan kondisi buruk. DER menunjukkan tingkat hutang yang rendah. ROE menunjukkan keuntungan yang tinggi.'))


    @Rule(Fact(warrant_valued='bad'), Fact(roa_valued='low'), Fact(roe_valued='high'))
    def ipo_rule_4155(self):
        self.declare(Fact(recommendation='Warrant menunjukkan kondisi buruk. ROA menunjukkan efisiensi rendah. ROE menunjukkan keuntungan yang tinggi.'))


    @Rule(Fact(net_income_valued='loss'), Fact(per_valued='high'), Fact(der_valued='low'))
    def ipo_rule_4156(self):
        self.declare(Fact(recommendation='Laba bersih menunjukkan kerugian. PER berada di tingkat yang tinggi. DER menunjukkan tingkat hutang yang rendah.'))


    @Rule(Fact(net_income_valued='loss'), Fact(per_valued='high'), Fact(roa_valued='low'))
    def ipo_rule_4157(self):
        self.declare(Fact(recommendation='Laba bersih menunjukkan kerugian. PER berada di tingkat yang tinggi. ROA menunjukkan efisiensi rendah.'))


    @Rule(Fact(net_income_valued='loss'), Fact(per_valued='high'), Fact(roe_valued='high'))
    def ipo_rule_4158(self):
        self.declare(Fact(recommendation='Laba bersih menunjukkan kerugian. PER berada di tingkat yang tinggi. ROE menunjukkan keuntungan yang tinggi.'))


    @Rule(Fact(net_income_valued='loss'), Fact(der_valued='low'), Fact(roa_valued='low'))
    def ipo_rule_4159(self):
        self.declare(Fact(recommendation='Laba bersih menunjukkan kerugian. DER menunjukkan tingkat hutang yang rendah. ROA menunjukkan efisiensi rendah.'))


    @Rule(Fact(net_income_valued='loss'), Fact(der_valued='low'), Fact(roe_valued='high'))
    def ipo_rule_4160(self):
        self.declare(Fact(recommendation='Laba bersih menunjukkan kerugian. DER menunjukkan tingkat hutang yang rendah. ROE menunjukkan keuntungan yang tinggi.'))


    @Rule(Fact(net_income_valued='loss'), Fact(roa_valued='low'), Fact(roe_valued='high'))
    def ipo_rule_4161(self):
        self.declare(Fact(recommendation='Laba bersih menunjukkan kerugian. ROA menunjukkan efisiensi rendah. ROE menunjukkan keuntungan yang tinggi.'))


    @Rule(Fact(per_valued='high'), Fact(der_valued='low'), Fact(roa_valued='low'))
    def ipo_rule_4162(self):
        self.declare(Fact(recommendation='PER berada di tingkat yang tinggi. DER menunjukkan tingkat hutang yang rendah. ROA menunjukkan efisiensi rendah.'))


    @Rule(Fact(per_valued='high'), Fact(der_valued='low'), Fact(roe_valued='high'))
    def ipo_rule_4163(self):
        self.declare(Fact(recommendation='PER berada di tingkat yang tinggi. DER menunjukkan tingkat hutang yang rendah. ROE menunjukkan keuntungan yang tinggi.'))


    @Rule(Fact(per_valued='high'), Fact(roa_valued='low'), Fact(roe_valued='high'))
    def ipo_rule_4164(self):
        self.declare(Fact(recommendation='PER berada di tingkat yang tinggi. ROA menunjukkan efisiensi rendah. ROE menunjukkan keuntungan yang tinggi.'))


    @Rule(Fact(der_valued='low'), Fact(roa_valued='low'), Fact(roe_valued='high'))
    def ipo_rule_4165(self):
        self.declare(Fact(recommendation='DER menunjukkan tingkat hutang yang rendah. ROA menunjukkan efisiensi rendah. ROE menunjukkan keuntungan yang tinggi.'))


    @Rule(Fact(underwriter_valued='bad'), Fact(warrant_valued='bad'), Fact(net_income_valued='loss'))
    def ipo_rule_4166(self):
        self.declare(Fact(recommendation='Underwriter berkualitas buruk. Warrant menunjukkan kondisi buruk. Laba bersih menunjukkan kerugian.'))


    @Rule(Fact(underwriter_valued='bad'), Fact(warrant_valued='bad'), Fact(per_valued='high'))
    def ipo_rule_4167(self):
        self.declare(Fact(recommendation='Underwriter berkualitas buruk. Warrant menunjukkan kondisi buruk. PER berada di tingkat yang tinggi.'))


    @Rule(Fact(underwriter_valued='bad'), Fact(warrant_valued='bad'), Fact(der_valued='low'))
    def ipo_rule_4168(self):
        self.declare(Fact(recommendation='Underwriter berkualitas buruk. Warrant menunjukkan kondisi buruk. DER menunjukkan tingkat hutang yang rendah.'))


    @Rule(Fact(underwriter_valued='bad'), Fact(warrant_valued='bad'), Fact(roa_valued='low'))
    def ipo_rule_4169(self):
        self.declare(Fact(recommendation='Underwriter berkualitas buruk. Warrant menunjukkan kondisi buruk. ROA menunjukkan efisiensi rendah.'))


    @Rule(Fact(underwriter_valued='bad'), Fact(warrant_valued='bad'), Fact(roe_valued='low'))
    def ipo_rule_4170(self):
        self.declare(Fact(recommendation='Underwriter berkualitas buruk. Warrant menunjukkan kondisi buruk. ROE menunjukkan keuntungan yang rendah.'))


    @Rule(Fact(underwriter_valued='bad'), Fact(net_income_valued='loss'), Fact(per_valued='high'))
    def ipo_rule_4171(self):
        self.declare(Fact(recommendation='Underwriter berkualitas buruk. Laba bersih menunjukkan kerugian. PER berada di tingkat yang tinggi.'))


    @Rule(Fact(underwriter_valued='bad'), Fact(net_income_valued='loss'), Fact(der_valued='low'))
    def ipo_rule_4172(self):
        self.declare(Fact(recommendation='Underwriter berkualitas buruk. Laba bersih menunjukkan kerugian. DER menunjukkan tingkat hutang yang rendah.'))


    @Rule(Fact(underwriter_valued='bad'), Fact(net_income_valued='loss'), Fact(roa_valued='low'))
    def ipo_rule_4173(self):
        self.declare(Fact(recommendation='Underwriter berkualitas buruk. Laba bersih menunjukkan kerugian. ROA menunjukkan efisiensi rendah.'))


    @Rule(Fact(underwriter_valued='bad'), Fact(net_income_valued='loss'), Fact(roe_valued='low'))
    def ipo_rule_4174(self):
        self.declare(Fact(recommendation='Underwriter berkualitas buruk. Laba bersih menunjukkan kerugian. ROE menunjukkan keuntungan yang rendah.'))


    @Rule(Fact(underwriter_valued='bad'), Fact(per_valued='high'), Fact(der_valued='low'))
    def ipo_rule_4175(self):
        self.declare(Fact(recommendation='Underwriter berkualitas buruk. PER berada di tingkat yang tinggi. DER menunjukkan tingkat hutang yang rendah.'))


    @Rule(Fact(underwriter_valued='bad'), Fact(per_valued='high'), Fact(roa_valued='low'))
    def ipo_rule_4176(self):
        self.declare(Fact(recommendation='Underwriter berkualitas buruk. PER berada di tingkat yang tinggi. ROA menunjukkan efisiensi rendah.'))


    @Rule(Fact(underwriter_valued='bad'), Fact(per_valued='high'), Fact(roe_valued='low'))
    def ipo_rule_4177(self):
        self.declare(Fact(recommendation='Underwriter berkualitas buruk. PER berada di tingkat yang tinggi. ROE menunjukkan keuntungan yang rendah.'))


    @Rule(Fact(underwriter_valued='bad'), Fact(der_valued='low'), Fact(roa_valued='low'))
    def ipo_rule_4178(self):
        self.declare(Fact(recommendation='Underwriter berkualitas buruk. DER menunjukkan tingkat hutang yang rendah. ROA menunjukkan efisiensi rendah.'))


    @Rule(Fact(underwriter_valued='bad'), Fact(der_valued='low'), Fact(roe_valued='low'))
    def ipo_rule_4179(self):
        self.declare(Fact(recommendation='Underwriter berkualitas buruk. DER menunjukkan tingkat hutang yang rendah. ROE menunjukkan keuntungan yang rendah.'))


    @Rule(Fact(underwriter_valued='bad'), Fact(roa_valued='low'), Fact(roe_valued='low'))
    def ipo_rule_4180(self):
        self.declare(Fact(recommendation='Underwriter berkualitas buruk. ROA menunjukkan efisiensi rendah. ROE menunjukkan keuntungan yang rendah.'))


    @Rule(Fact(warrant_valued='bad'), Fact(net_income_valued='loss'), Fact(per_valued='high'))
    def ipo_rule_4181(self):
        self.declare(Fact(recommendation='Warrant menunjukkan kondisi buruk. Laba bersih menunjukkan kerugian. PER berada di tingkat yang tinggi.'))


    @Rule(Fact(warrant_valued='bad'), Fact(net_income_valued='loss'), Fact(der_valued='low'))
    def ipo_rule_4182(self):
        self.declare(Fact(recommendation='Warrant menunjukkan kondisi buruk. Laba bersih menunjukkan kerugian. DER menunjukkan tingkat hutang yang rendah.'))


    @Rule(Fact(warrant_valued='bad'), Fact(net_income_valued='loss'), Fact(roa_valued='low'))
    def ipo_rule_4183(self):
        self.declare(Fact(recommendation='Warrant menunjukkan kondisi buruk. Laba bersih menunjukkan kerugian. ROA menunjukkan efisiensi rendah.'))


    @Rule(Fact(warrant_valued='bad'), Fact(net_income_valued='loss'), Fact(roe_valued='low'))
    def ipo_rule_4184(self):
        self.declare(Fact(recommendation='Warrant menunjukkan kondisi buruk. Laba bersih menunjukkan kerugian. ROE menunjukkan keuntungan yang rendah.'))


    @Rule(Fact(warrant_valued='bad'), Fact(per_valued='high'), Fact(der_valued='low'))
    def ipo_rule_4185(self):
        self.declare(Fact(recommendation='Warrant menunjukkan kondisi buruk. PER berada di tingkat yang tinggi. DER menunjukkan tingkat hutang yang rendah.'))


    @Rule(Fact(warrant_valued='bad'), Fact(per_valued='high'), Fact(roa_valued='low'))
    def ipo_rule_4186(self):
        self.declare(Fact(recommendation='Warrant menunjukkan kondisi buruk. PER berada di tingkat yang tinggi. ROA menunjukkan efisiensi rendah.'))


    @Rule(Fact(warrant_valued='bad'), Fact(per_valued='high'), Fact(roe_valued='low'))
    def ipo_rule_4187(self):
        self.declare(Fact(recommendation='Warrant menunjukkan kondisi buruk. PER berada di tingkat yang tinggi. ROE menunjukkan keuntungan yang rendah.'))


    @Rule(Fact(warrant_valued='bad'), Fact(der_valued='low'), Fact(roa_valued='low'))
    def ipo_rule_4188(self):
        self.declare(Fact(recommendation='Warrant menunjukkan kondisi buruk. DER menunjukkan tingkat hutang yang rendah. ROA menunjukkan efisiensi rendah.'))


    @Rule(Fact(warrant_valued='bad'), Fact(der_valued='low'), Fact(roe_valued='low'))
    def ipo_rule_4189(self):
        self.declare(Fact(recommendation='Warrant menunjukkan kondisi buruk. DER menunjukkan tingkat hutang yang rendah. ROE menunjukkan keuntungan yang rendah.'))


    @Rule(Fact(warrant_valued='bad'), Fact(roa_valued='low'), Fact(roe_valued='low'))
    def ipo_rule_4190(self):
        self.declare(Fact(recommendation='Warrant menunjukkan kondisi buruk. ROA menunjukkan efisiensi rendah. ROE menunjukkan keuntungan yang rendah.'))


    @Rule(Fact(net_income_valued='loss'), Fact(per_valued='high'), Fact(der_valued='low'))
    def ipo_rule_4191(self):
        self.declare(Fact(recommendation='Laba bersih menunjukkan kerugian. PER berada di tingkat yang tinggi. DER menunjukkan tingkat hutang yang rendah.'))


    @Rule(Fact(net_income_valued='loss'), Fact(per_valued='high'), Fact(roa_valued='low'))
    def ipo_rule_4192(self):
        self.declare(Fact(recommendation='Laba bersih menunjukkan kerugian. PER berada di tingkat yang tinggi. ROA menunjukkan efisiensi rendah.'))


    @Rule(Fact(net_income_valued='loss'), Fact(per_valued='high'), Fact(roe_valued='low'))
    def ipo_rule_4193(self):
        self.declare(Fact(recommendation='Laba bersih menunjukkan kerugian. PER berada di tingkat yang tinggi. ROE menunjukkan keuntungan yang rendah.'))


    @Rule(Fact(net_income_valued='loss'), Fact(der_valued='low'), Fact(roa_valued='low'))
    def ipo_rule_4194(self):
        self.declare(Fact(recommendation='Laba bersih menunjukkan kerugian. DER menunjukkan tingkat hutang yang rendah. ROA menunjukkan efisiensi rendah.'))


    @Rule(Fact(net_income_valued='loss'), Fact(der_valued='low'), Fact(roe_valued='low'))
    def ipo_rule_4195(self):
        self.declare(Fact(recommendation='Laba bersih menunjukkan kerugian. DER menunjukkan tingkat hutang yang rendah. ROE menunjukkan keuntungan yang rendah.'))


    @Rule(Fact(net_income_valued='loss'), Fact(roa_valued='low'), Fact(roe_valued='low'))
    def ipo_rule_4196(self):
        self.declare(Fact(recommendation='Laba bersih menunjukkan kerugian. ROA menunjukkan efisiensi rendah. ROE menunjukkan keuntungan yang rendah.'))


    @Rule(Fact(per_valued='high'), Fact(der_valued='low'), Fact(roa_valued='low'))
    def ipo_rule_4197(self):
        self.declare(Fact(recommendation='PER berada di tingkat yang tinggi. DER menunjukkan tingkat hutang yang rendah. ROA menunjukkan efisiensi rendah.'))


    @Rule(Fact(per_valued='high'), Fact(der_valued='low'), Fact(roe_valued='low'))
    def ipo_rule_4198(self):
        self.declare(Fact(recommendation='PER berada di tingkat yang tinggi. DER menunjukkan tingkat hutang yang rendah. ROE menunjukkan keuntungan yang rendah.'))


    @Rule(Fact(per_valued='high'), Fact(roa_valued='low'), Fact(roe_valued='low'))
    def ipo_rule_4199(self):
        self.declare(Fact(recommendation='PER berada di tingkat yang tinggi. ROA menunjukkan efisiensi rendah. ROE menunjukkan keuntungan yang rendah.'))


    @Rule(Fact(der_valued='low'), Fact(roa_valued='low'), Fact(roe_valued='low'))
    def ipo_rule_4200(self):
        self.declare(Fact(recommendation='DER menunjukkan tingkat hutang yang rendah. ROA menunjukkan efisiensi rendah. ROE menunjukkan keuntungan yang rendah.'))


    @Rule(Fact(underwriter_valued='bad'), Fact(warrant_valued='bad'), Fact(net_income_valued='loss'))
    def ipo_rule_4201(self):
        self.declare(Fact(recommendation='Underwriter berkualitas buruk. Warrant menunjukkan kondisi buruk. Laba bersih menunjukkan kerugian.'))


    @Rule(Fact(underwriter_valued='bad'), Fact(warrant_valued='bad'), Fact(per_valued='low'))
    def ipo_rule_4202(self):
        self.declare(Fact(recommendation='Underwriter berkualitas buruk. Warrant menunjukkan kondisi buruk. PER berada di tingkat yang rendah.'))


    @Rule(Fact(underwriter_valued='bad'), Fact(warrant_valued='bad'), Fact(der_valued='high'))
    def ipo_rule_4203(self):
        self.declare(Fact(recommendation='Underwriter berkualitas buruk. Warrant menunjukkan kondisi buruk. DER menunjukkan tingkat hutang yang tinggi.'))


    @Rule(Fact(underwriter_valued='bad'), Fact(warrant_valued='bad'), Fact(roa_valued='high'))
    def ipo_rule_4204(self):
        self.declare(Fact(recommendation='Underwriter berkualitas buruk. Warrant menunjukkan kondisi buruk. ROA menunjukkan efisiensi tinggi.'))


    @Rule(Fact(underwriter_valued='bad'), Fact(warrant_valued='bad'), Fact(roe_valued='high'))
    def ipo_rule_4205(self):
        self.declare(Fact(recommendation='Underwriter berkualitas buruk. Warrant menunjukkan kondisi buruk. ROE menunjukkan keuntungan yang tinggi.'))


    @Rule(Fact(underwriter_valued='bad'), Fact(net_income_valued='loss'), Fact(per_valued='low'))
    def ipo_rule_4206(self):
        self.declare(Fact(recommendation='Underwriter berkualitas buruk. Laba bersih menunjukkan kerugian. PER berada di tingkat yang rendah.'))


    @Rule(Fact(underwriter_valued='bad'), Fact(net_income_valued='loss'), Fact(der_valued='high'))
    def ipo_rule_4207(self):
        self.declare(Fact(recommendation='Underwriter berkualitas buruk. Laba bersih menunjukkan kerugian. DER menunjukkan tingkat hutang yang tinggi.'))


    @Rule(Fact(underwriter_valued='bad'), Fact(net_income_valued='loss'), Fact(roa_valued='high'))
    def ipo_rule_4208(self):
        self.declare(Fact(recommendation='Underwriter berkualitas buruk. Laba bersih menunjukkan kerugian. ROA menunjukkan efisiensi tinggi.'))


    @Rule(Fact(underwriter_valued='bad'), Fact(net_income_valued='loss'), Fact(roe_valued='high'))
    def ipo_rule_4209(self):
        self.declare(Fact(recommendation='Underwriter berkualitas buruk. Laba bersih menunjukkan kerugian. ROE menunjukkan keuntungan yang tinggi.'))


    @Rule(Fact(underwriter_valued='bad'), Fact(per_valued='low'), Fact(der_valued='high'))
    def ipo_rule_4210(self):
        self.declare(Fact(recommendation='Underwriter berkualitas buruk. PER berada di tingkat yang rendah. DER menunjukkan tingkat hutang yang tinggi.'))


    @Rule(Fact(underwriter_valued='bad'), Fact(per_valued='low'), Fact(roa_valued='high'))
    def ipo_rule_4211(self):
        self.declare(Fact(recommendation='Underwriter berkualitas buruk. PER berada di tingkat yang rendah. ROA menunjukkan efisiensi tinggi.'))


    @Rule(Fact(underwriter_valued='bad'), Fact(per_valued='low'), Fact(roe_valued='high'))
    def ipo_rule_4212(self):
        self.declare(Fact(recommendation='Underwriter berkualitas buruk. PER berada di tingkat yang rendah. ROE menunjukkan keuntungan yang tinggi.'))


    @Rule(Fact(underwriter_valued='bad'), Fact(der_valued='high'), Fact(roa_valued='high'))
    def ipo_rule_4213(self):
        self.declare(Fact(recommendation='Underwriter berkualitas buruk. DER menunjukkan tingkat hutang yang tinggi. ROA menunjukkan efisiensi tinggi.'))


    @Rule(Fact(underwriter_valued='bad'), Fact(der_valued='high'), Fact(roe_valued='high'))
    def ipo_rule_4214(self):
        self.declare(Fact(recommendation='Underwriter berkualitas buruk. DER menunjukkan tingkat hutang yang tinggi. ROE menunjukkan keuntungan yang tinggi.'))


    @Rule(Fact(underwriter_valued='bad'), Fact(roa_valued='high'), Fact(roe_valued='high'))
    def ipo_rule_4215(self):
        self.declare(Fact(recommendation='Underwriter berkualitas buruk. ROA menunjukkan efisiensi tinggi. ROE menunjukkan keuntungan yang tinggi.'))


    @Rule(Fact(warrant_valued='bad'), Fact(net_income_valued='loss'), Fact(per_valued='low'))
    def ipo_rule_4216(self):
        self.declare(Fact(recommendation='Warrant menunjukkan kondisi buruk. Laba bersih menunjukkan kerugian. PER berada di tingkat yang rendah.'))


    @Rule(Fact(warrant_valued='bad'), Fact(net_income_valued='loss'), Fact(der_valued='high'))
    def ipo_rule_4217(self):
        self.declare(Fact(recommendation='Warrant menunjukkan kondisi buruk. Laba bersih menunjukkan kerugian. DER menunjukkan tingkat hutang yang tinggi.'))


    @Rule(Fact(warrant_valued='bad'), Fact(net_income_valued='loss'), Fact(roa_valued='high'))
    def ipo_rule_4218(self):
        self.declare(Fact(recommendation='Warrant menunjukkan kondisi buruk. Laba bersih menunjukkan kerugian. ROA menunjukkan efisiensi tinggi.'))


    @Rule(Fact(warrant_valued='bad'), Fact(net_income_valued='loss'), Fact(roe_valued='high'))
    def ipo_rule_4219(self):
        self.declare(Fact(recommendation='Warrant menunjukkan kondisi buruk. Laba bersih menunjukkan kerugian. ROE menunjukkan keuntungan yang tinggi.'))


    @Rule(Fact(warrant_valued='bad'), Fact(per_valued='low'), Fact(der_valued='high'))
    def ipo_rule_4220(self):
        self.declare(Fact(recommendation='Warrant menunjukkan kondisi buruk. PER berada di tingkat yang rendah. DER menunjukkan tingkat hutang yang tinggi.'))


    @Rule(Fact(warrant_valued='bad'), Fact(per_valued='low'), Fact(roa_valued='high'))
    def ipo_rule_4221(self):
        self.declare(Fact(recommendation='Warrant menunjukkan kondisi buruk. PER berada di tingkat yang rendah. ROA menunjukkan efisiensi tinggi.'))


    @Rule(Fact(warrant_valued='bad'), Fact(per_valued='low'), Fact(roe_valued='high'))
    def ipo_rule_4222(self):
        self.declare(Fact(recommendation='Warrant menunjukkan kondisi buruk. PER berada di tingkat yang rendah. ROE menunjukkan keuntungan yang tinggi.'))


    @Rule(Fact(warrant_valued='bad'), Fact(der_valued='high'), Fact(roa_valued='high'))
    def ipo_rule_4223(self):
        self.declare(Fact(recommendation='Warrant menunjukkan kondisi buruk. DER menunjukkan tingkat hutang yang tinggi. ROA menunjukkan efisiensi tinggi.'))


    @Rule(Fact(warrant_valued='bad'), Fact(der_valued='high'), Fact(roe_valued='high'))
    def ipo_rule_4224(self):
        self.declare(Fact(recommendation='Warrant menunjukkan kondisi buruk. DER menunjukkan tingkat hutang yang tinggi. ROE menunjukkan keuntungan yang tinggi.'))


    @Rule(Fact(warrant_valued='bad'), Fact(roa_valued='high'), Fact(roe_valued='high'))
    def ipo_rule_4225(self):
        self.declare(Fact(recommendation='Warrant menunjukkan kondisi buruk. ROA menunjukkan efisiensi tinggi. ROE menunjukkan keuntungan yang tinggi.'))


    @Rule(Fact(net_income_valued='loss'), Fact(per_valued='low'), Fact(der_valued='high'))
    def ipo_rule_4226(self):
        self.declare(Fact(recommendation='Laba bersih menunjukkan kerugian. PER berada di tingkat yang rendah. DER menunjukkan tingkat hutang yang tinggi.'))


    @Rule(Fact(net_income_valued='loss'), Fact(per_valued='low'), Fact(roa_valued='high'))
    def ipo_rule_4227(self):
        self.declare(Fact(recommendation='Laba bersih menunjukkan kerugian. PER berada di tingkat yang rendah. ROA menunjukkan efisiensi tinggi.'))


    @Rule(Fact(net_income_valued='loss'), Fact(per_valued='low'), Fact(roe_valued='high'))
    def ipo_rule_4228(self):
        self.declare(Fact(recommendation='Laba bersih menunjukkan kerugian. PER berada di tingkat yang rendah. ROE menunjukkan keuntungan yang tinggi.'))


    @Rule(Fact(net_income_valued='loss'), Fact(der_valued='high'), Fact(roa_valued='high'))
    def ipo_rule_4229(self):
        self.declare(Fact(recommendation='Laba bersih menunjukkan kerugian. DER menunjukkan tingkat hutang yang tinggi. ROA menunjukkan efisiensi tinggi.'))


    @Rule(Fact(net_income_valued='loss'), Fact(der_valued='high'), Fact(roe_valued='high'))
    def ipo_rule_4230(self):
        self.declare(Fact(recommendation='Laba bersih menunjukkan kerugian. DER menunjukkan tingkat hutang yang tinggi. ROE menunjukkan keuntungan yang tinggi.'))


    @Rule(Fact(net_income_valued='loss'), Fact(roa_valued='high'), Fact(roe_valued='high'))
    def ipo_rule_4231(self):
        self.declare(Fact(recommendation='Laba bersih menunjukkan kerugian. ROA menunjukkan efisiensi tinggi. ROE menunjukkan keuntungan yang tinggi.'))


    @Rule(Fact(per_valued='low'), Fact(der_valued='high'), Fact(roa_valued='high'))
    def ipo_rule_4232(self):
        self.declare(Fact(recommendation='PER berada di tingkat yang rendah. DER menunjukkan tingkat hutang yang tinggi. ROA menunjukkan efisiensi tinggi.'))


    @Rule(Fact(per_valued='low'), Fact(der_valued='high'), Fact(roe_valued='high'))
    def ipo_rule_4233(self):
        self.declare(Fact(recommendation='PER berada di tingkat yang rendah. DER menunjukkan tingkat hutang yang tinggi. ROE menunjukkan keuntungan yang tinggi.'))


    @Rule(Fact(per_valued='low'), Fact(roa_valued='high'), Fact(roe_valued='high'))
    def ipo_rule_4234(self):
        self.declare(Fact(recommendation='PER berada di tingkat yang rendah. ROA menunjukkan efisiensi tinggi. ROE menunjukkan keuntungan yang tinggi.'))


    @Rule(Fact(der_valued='high'), Fact(roa_valued='high'), Fact(roe_valued='high'))
    def ipo_rule_4235(self):
        self.declare(Fact(recommendation='DER menunjukkan tingkat hutang yang tinggi. ROA menunjukkan efisiensi tinggi. ROE menunjukkan keuntungan yang tinggi.'))


    @Rule(Fact(underwriter_valued='bad'), Fact(warrant_valued='bad'), Fact(net_income_valued='loss'))
    def ipo_rule_4236(self):
        self.declare(Fact(recommendation='Underwriter berkualitas buruk. Warrant menunjukkan kondisi buruk. Laba bersih menunjukkan kerugian.'))


    @Rule(Fact(underwriter_valued='bad'), Fact(warrant_valued='bad'), Fact(per_valued='low'))
    def ipo_rule_4237(self):
        self.declare(Fact(recommendation='Underwriter berkualitas buruk. Warrant menunjukkan kondisi buruk. PER berada di tingkat yang rendah.'))


    @Rule(Fact(underwriter_valued='bad'), Fact(warrant_valued='bad'), Fact(der_valued='high'))
    def ipo_rule_4238(self):
        self.declare(Fact(recommendation='Underwriter berkualitas buruk. Warrant menunjukkan kondisi buruk. DER menunjukkan tingkat hutang yang tinggi.'))


    @Rule(Fact(underwriter_valued='bad'), Fact(warrant_valued='bad'), Fact(roa_valued='high'))
    def ipo_rule_4239(self):
        self.declare(Fact(recommendation='Underwriter berkualitas buruk. Warrant menunjukkan kondisi buruk. ROA menunjukkan efisiensi tinggi.'))


    @Rule(Fact(underwriter_valued='bad'), Fact(warrant_valued='bad'), Fact(roe_valued='low'))
    def ipo_rule_4240(self):
        self.declare(Fact(recommendation='Underwriter berkualitas buruk. Warrant menunjukkan kondisi buruk. ROE menunjukkan keuntungan yang rendah.'))


    @Rule(Fact(underwriter_valued='bad'), Fact(net_income_valued='loss'), Fact(per_valued='low'))
    def ipo_rule_4241(self):
        self.declare(Fact(recommendation='Underwriter berkualitas buruk. Laba bersih menunjukkan kerugian. PER berada di tingkat yang rendah.'))


    @Rule(Fact(underwriter_valued='bad'), Fact(net_income_valued='loss'), Fact(der_valued='high'))
    def ipo_rule_4242(self):
        self.declare(Fact(recommendation='Underwriter berkualitas buruk. Laba bersih menunjukkan kerugian. DER menunjukkan tingkat hutang yang tinggi.'))


    @Rule(Fact(underwriter_valued='bad'), Fact(net_income_valued='loss'), Fact(roa_valued='high'))
    def ipo_rule_4243(self):
        self.declare(Fact(recommendation='Underwriter berkualitas buruk. Laba bersih menunjukkan kerugian. ROA menunjukkan efisiensi tinggi.'))


    @Rule(Fact(underwriter_valued='bad'), Fact(net_income_valued='loss'), Fact(roe_valued='low'))
    def ipo_rule_4244(self):
        self.declare(Fact(recommendation='Underwriter berkualitas buruk. Laba bersih menunjukkan kerugian. ROE menunjukkan keuntungan yang rendah.'))


    @Rule(Fact(underwriter_valued='bad'), Fact(per_valued='low'), Fact(der_valued='high'))
    def ipo_rule_4245(self):
        self.declare(Fact(recommendation='Underwriter berkualitas buruk. PER berada di tingkat yang rendah. DER menunjukkan tingkat hutang yang tinggi.'))


    @Rule(Fact(underwriter_valued='bad'), Fact(per_valued='low'), Fact(roa_valued='high'))
    def ipo_rule_4246(self):
        self.declare(Fact(recommendation='Underwriter berkualitas buruk. PER berada di tingkat yang rendah. ROA menunjukkan efisiensi tinggi.'))


    @Rule(Fact(underwriter_valued='bad'), Fact(per_valued='low'), Fact(roe_valued='low'))
    def ipo_rule_4247(self):
        self.declare(Fact(recommendation='Underwriter berkualitas buruk. PER berada di tingkat yang rendah. ROE menunjukkan keuntungan yang rendah.'))


    @Rule(Fact(underwriter_valued='bad'), Fact(der_valued='high'), Fact(roa_valued='high'))
    def ipo_rule_4248(self):
        self.declare(Fact(recommendation='Underwriter berkualitas buruk. DER menunjukkan tingkat hutang yang tinggi. ROA menunjukkan efisiensi tinggi.'))


    @Rule(Fact(underwriter_valued='bad'), Fact(der_valued='high'), Fact(roe_valued='low'))
    def ipo_rule_4249(self):
        self.declare(Fact(recommendation='Underwriter berkualitas buruk. DER menunjukkan tingkat hutang yang tinggi. ROE menunjukkan keuntungan yang rendah.'))


    @Rule(Fact(underwriter_valued='bad'), Fact(roa_valued='high'), Fact(roe_valued='low'))
    def ipo_rule_4250(self):
        self.declare(Fact(recommendation='Underwriter berkualitas buruk. ROA menunjukkan efisiensi tinggi. ROE menunjukkan keuntungan yang rendah.'))


    @Rule(Fact(warrant_valued='bad'), Fact(net_income_valued='loss'), Fact(per_valued='low'))
    def ipo_rule_4251(self):
        self.declare(Fact(recommendation='Warrant menunjukkan kondisi buruk. Laba bersih menunjukkan kerugian. PER berada di tingkat yang rendah.'))


    @Rule(Fact(warrant_valued='bad'), Fact(net_income_valued='loss'), Fact(der_valued='high'))
    def ipo_rule_4252(self):
        self.declare(Fact(recommendation='Warrant menunjukkan kondisi buruk. Laba bersih menunjukkan kerugian. DER menunjukkan tingkat hutang yang tinggi.'))


    @Rule(Fact(warrant_valued='bad'), Fact(net_income_valued='loss'), Fact(roa_valued='high'))
    def ipo_rule_4253(self):
        self.declare(Fact(recommendation='Warrant menunjukkan kondisi buruk. Laba bersih menunjukkan kerugian. ROA menunjukkan efisiensi tinggi.'))


    @Rule(Fact(warrant_valued='bad'), Fact(net_income_valued='loss'), Fact(roe_valued='low'))
    def ipo_rule_4254(self):
        self.declare(Fact(recommendation='Warrant menunjukkan kondisi buruk. Laba bersih menunjukkan kerugian. ROE menunjukkan keuntungan yang rendah.'))


    @Rule(Fact(warrant_valued='bad'), Fact(per_valued='low'), Fact(der_valued='high'))
    def ipo_rule_4255(self):
        self.declare(Fact(recommendation='Warrant menunjukkan kondisi buruk. PER berada di tingkat yang rendah. DER menunjukkan tingkat hutang yang tinggi.'))


    @Rule(Fact(warrant_valued='bad'), Fact(per_valued='low'), Fact(roa_valued='high'))
    def ipo_rule_4256(self):
        self.declare(Fact(recommendation='Warrant menunjukkan kondisi buruk. PER berada di tingkat yang rendah. ROA menunjukkan efisiensi tinggi.'))


    @Rule(Fact(warrant_valued='bad'), Fact(per_valued='low'), Fact(roe_valued='low'))
    def ipo_rule_4257(self):
        self.declare(Fact(recommendation='Warrant menunjukkan kondisi buruk. PER berada di tingkat yang rendah. ROE menunjukkan keuntungan yang rendah.'))


    @Rule(Fact(warrant_valued='bad'), Fact(der_valued='high'), Fact(roa_valued='high'))
    def ipo_rule_4258(self):
        self.declare(Fact(recommendation='Warrant menunjukkan kondisi buruk. DER menunjukkan tingkat hutang yang tinggi. ROA menunjukkan efisiensi tinggi.'))


    @Rule(Fact(warrant_valued='bad'), Fact(der_valued='high'), Fact(roe_valued='low'))
    def ipo_rule_4259(self):
        self.declare(Fact(recommendation='Warrant menunjukkan kondisi buruk. DER menunjukkan tingkat hutang yang tinggi. ROE menunjukkan keuntungan yang rendah.'))


    @Rule(Fact(warrant_valued='bad'), Fact(roa_valued='high'), Fact(roe_valued='low'))
    def ipo_rule_4260(self):
        self.declare(Fact(recommendation='Warrant menunjukkan kondisi buruk. ROA menunjukkan efisiensi tinggi. ROE menunjukkan keuntungan yang rendah.'))


    @Rule(Fact(net_income_valued='loss'), Fact(per_valued='low'), Fact(der_valued='high'))
    def ipo_rule_4261(self):
        self.declare(Fact(recommendation='Laba bersih menunjukkan kerugian. PER berada di tingkat yang rendah. DER menunjukkan tingkat hutang yang tinggi.'))


    @Rule(Fact(net_income_valued='loss'), Fact(per_valued='low'), Fact(roa_valued='high'))
    def ipo_rule_4262(self):
        self.declare(Fact(recommendation='Laba bersih menunjukkan kerugian. PER berada di tingkat yang rendah. ROA menunjukkan efisiensi tinggi.'))


    @Rule(Fact(net_income_valued='loss'), Fact(per_valued='low'), Fact(roe_valued='low'))
    def ipo_rule_4263(self):
        self.declare(Fact(recommendation='Laba bersih menunjukkan kerugian. PER berada di tingkat yang rendah. ROE menunjukkan keuntungan yang rendah.'))


    @Rule(Fact(net_income_valued='loss'), Fact(der_valued='high'), Fact(roa_valued='high'))
    def ipo_rule_4264(self):
        self.declare(Fact(recommendation='Laba bersih menunjukkan kerugian. DER menunjukkan tingkat hutang yang tinggi. ROA menunjukkan efisiensi tinggi.'))


    @Rule(Fact(net_income_valued='loss'), Fact(der_valued='high'), Fact(roe_valued='low'))
    def ipo_rule_4265(self):
        self.declare(Fact(recommendation='Laba bersih menunjukkan kerugian. DER menunjukkan tingkat hutang yang tinggi. ROE menunjukkan keuntungan yang rendah.'))


    @Rule(Fact(net_income_valued='loss'), Fact(roa_valued='high'), Fact(roe_valued='low'))
    def ipo_rule_4266(self):
        self.declare(Fact(recommendation='Laba bersih menunjukkan kerugian. ROA menunjukkan efisiensi tinggi. ROE menunjukkan keuntungan yang rendah.'))


    @Rule(Fact(per_valued='low'), Fact(der_valued='high'), Fact(roa_valued='high'))
    def ipo_rule_4267(self):
        self.declare(Fact(recommendation='PER berada di tingkat yang rendah. DER menunjukkan tingkat hutang yang tinggi. ROA menunjukkan efisiensi tinggi.'))


    @Rule(Fact(per_valued='low'), Fact(der_valued='high'), Fact(roe_valued='low'))
    def ipo_rule_4268(self):
        self.declare(Fact(recommendation='PER berada di tingkat yang rendah. DER menunjukkan tingkat hutang yang tinggi. ROE menunjukkan keuntungan yang rendah.'))


    @Rule(Fact(per_valued='low'), Fact(roa_valued='high'), Fact(roe_valued='low'))
    def ipo_rule_4269(self):
        self.declare(Fact(recommendation='PER berada di tingkat yang rendah. ROA menunjukkan efisiensi tinggi. ROE menunjukkan keuntungan yang rendah.'))


    @Rule(Fact(der_valued='high'), Fact(roa_valued='high'), Fact(roe_valued='low'))
    def ipo_rule_4270(self):
        self.declare(Fact(recommendation='DER menunjukkan tingkat hutang yang tinggi. ROA menunjukkan efisiensi tinggi. ROE menunjukkan keuntungan yang rendah.'))


    @Rule(Fact(underwriter_valued='bad'), Fact(warrant_valued='bad'), Fact(net_income_valued='loss'))
    def ipo_rule_4271(self):
        self.declare(Fact(recommendation='Underwriter berkualitas buruk. Warrant menunjukkan kondisi buruk. Laba bersih menunjukkan kerugian.'))


    @Rule(Fact(underwriter_valued='bad'), Fact(warrant_valued='bad'), Fact(per_valued='low'))
    def ipo_rule_4272(self):
        self.declare(Fact(recommendation='Underwriter berkualitas buruk. Warrant menunjukkan kondisi buruk. PER berada di tingkat yang rendah.'))


    @Rule(Fact(underwriter_valued='bad'), Fact(warrant_valued='bad'), Fact(der_valued='high'))
    def ipo_rule_4273(self):
        self.declare(Fact(recommendation='Underwriter berkualitas buruk. Warrant menunjukkan kondisi buruk. DER menunjukkan tingkat hutang yang tinggi.'))


    @Rule(Fact(underwriter_valued='bad'), Fact(warrant_valued='bad'), Fact(roa_valued='low'))
    def ipo_rule_4274(self):
        self.declare(Fact(recommendation='Underwriter berkualitas buruk. Warrant menunjukkan kondisi buruk. ROA menunjukkan efisiensi rendah.'))


    @Rule(Fact(underwriter_valued='bad'), Fact(warrant_valued='bad'), Fact(roe_valued='high'))
    def ipo_rule_4275(self):
        self.declare(Fact(recommendation='Underwriter berkualitas buruk. Warrant menunjukkan kondisi buruk. ROE menunjukkan keuntungan yang tinggi.'))


    @Rule(Fact(underwriter_valued='bad'), Fact(net_income_valued='loss'), Fact(per_valued='low'))
    def ipo_rule_4276(self):
        self.declare(Fact(recommendation='Underwriter berkualitas buruk. Laba bersih menunjukkan kerugian. PER berada di tingkat yang rendah.'))


    @Rule(Fact(underwriter_valued='bad'), Fact(net_income_valued='loss'), Fact(der_valued='high'))
    def ipo_rule_4277(self):
        self.declare(Fact(recommendation='Underwriter berkualitas buruk. Laba bersih menunjukkan kerugian. DER menunjukkan tingkat hutang yang tinggi.'))


    @Rule(Fact(underwriter_valued='bad'), Fact(net_income_valued='loss'), Fact(roa_valued='low'))
    def ipo_rule_4278(self):
        self.declare(Fact(recommendation='Underwriter berkualitas buruk. Laba bersih menunjukkan kerugian. ROA menunjukkan efisiensi rendah.'))


    @Rule(Fact(underwriter_valued='bad'), Fact(net_income_valued='loss'), Fact(roe_valued='high'))
    def ipo_rule_4279(self):
        self.declare(Fact(recommendation='Underwriter berkualitas buruk. Laba bersih menunjukkan kerugian. ROE menunjukkan keuntungan yang tinggi.'))


    @Rule(Fact(underwriter_valued='bad'), Fact(per_valued='low'), Fact(der_valued='high'))
    def ipo_rule_4280(self):
        self.declare(Fact(recommendation='Underwriter berkualitas buruk. PER berada di tingkat yang rendah. DER menunjukkan tingkat hutang yang tinggi.'))


    @Rule(Fact(underwriter_valued='bad'), Fact(per_valued='low'), Fact(roa_valued='low'))
    def ipo_rule_4281(self):
        self.declare(Fact(recommendation='Underwriter berkualitas buruk. PER berada di tingkat yang rendah. ROA menunjukkan efisiensi rendah.'))


    @Rule(Fact(underwriter_valued='bad'), Fact(per_valued='low'), Fact(roe_valued='high'))
    def ipo_rule_4282(self):
        self.declare(Fact(recommendation='Underwriter berkualitas buruk. PER berada di tingkat yang rendah. ROE menunjukkan keuntungan yang tinggi.'))


    @Rule(Fact(underwriter_valued='bad'), Fact(der_valued='high'), Fact(roa_valued='low'))
    def ipo_rule_4283(self):
        self.declare(Fact(recommendation='Underwriter berkualitas buruk. DER menunjukkan tingkat hutang yang tinggi. ROA menunjukkan efisiensi rendah.'))


    @Rule(Fact(underwriter_valued='bad'), Fact(der_valued='high'), Fact(roe_valued='high'))
    def ipo_rule_4284(self):
        self.declare(Fact(recommendation='Underwriter berkualitas buruk. DER menunjukkan tingkat hutang yang tinggi. ROE menunjukkan keuntungan yang tinggi.'))


    @Rule(Fact(underwriter_valued='bad'), Fact(roa_valued='low'), Fact(roe_valued='high'))
    def ipo_rule_4285(self):
        self.declare(Fact(recommendation='Underwriter berkualitas buruk. ROA menunjukkan efisiensi rendah. ROE menunjukkan keuntungan yang tinggi.'))


    @Rule(Fact(warrant_valued='bad'), Fact(net_income_valued='loss'), Fact(per_valued='low'))
    def ipo_rule_4286(self):
        self.declare(Fact(recommendation='Warrant menunjukkan kondisi buruk. Laba bersih menunjukkan kerugian. PER berada di tingkat yang rendah.'))


    @Rule(Fact(warrant_valued='bad'), Fact(net_income_valued='loss'), Fact(der_valued='high'))
    def ipo_rule_4287(self):
        self.declare(Fact(recommendation='Warrant menunjukkan kondisi buruk. Laba bersih menunjukkan kerugian. DER menunjukkan tingkat hutang yang tinggi.'))


    @Rule(Fact(warrant_valued='bad'), Fact(net_income_valued='loss'), Fact(roa_valued='low'))
    def ipo_rule_4288(self):
        self.declare(Fact(recommendation='Warrant menunjukkan kondisi buruk. Laba bersih menunjukkan kerugian. ROA menunjukkan efisiensi rendah.'))


    @Rule(Fact(warrant_valued='bad'), Fact(net_income_valued='loss'), Fact(roe_valued='high'))
    def ipo_rule_4289(self):
        self.declare(Fact(recommendation='Warrant menunjukkan kondisi buruk. Laba bersih menunjukkan kerugian. ROE menunjukkan keuntungan yang tinggi.'))


    @Rule(Fact(warrant_valued='bad'), Fact(per_valued='low'), Fact(der_valued='high'))
    def ipo_rule_4290(self):
        self.declare(Fact(recommendation='Warrant menunjukkan kondisi buruk. PER berada di tingkat yang rendah. DER menunjukkan tingkat hutang yang tinggi.'))


    @Rule(Fact(warrant_valued='bad'), Fact(per_valued='low'), Fact(roa_valued='low'))
    def ipo_rule_4291(self):
        self.declare(Fact(recommendation='Warrant menunjukkan kondisi buruk. PER berada di tingkat yang rendah. ROA menunjukkan efisiensi rendah.'))


    @Rule(Fact(warrant_valued='bad'), Fact(per_valued='low'), Fact(roe_valued='high'))
    def ipo_rule_4292(self):
        self.declare(Fact(recommendation='Warrant menunjukkan kondisi buruk. PER berada di tingkat yang rendah. ROE menunjukkan keuntungan yang tinggi.'))


    @Rule(Fact(warrant_valued='bad'), Fact(der_valued='high'), Fact(roa_valued='low'))
    def ipo_rule_4293(self):
        self.declare(Fact(recommendation='Warrant menunjukkan kondisi buruk. DER menunjukkan tingkat hutang yang tinggi. ROA menunjukkan efisiensi rendah.'))


    @Rule(Fact(warrant_valued='bad'), Fact(der_valued='high'), Fact(roe_valued='high'))
    def ipo_rule_4294(self):
        self.declare(Fact(recommendation='Warrant menunjukkan kondisi buruk. DER menunjukkan tingkat hutang yang tinggi. ROE menunjukkan keuntungan yang tinggi.'))


    @Rule(Fact(warrant_valued='bad'), Fact(roa_valued='low'), Fact(roe_valued='high'))
    def ipo_rule_4295(self):
        self.declare(Fact(recommendation='Warrant menunjukkan kondisi buruk. ROA menunjukkan efisiensi rendah. ROE menunjukkan keuntungan yang tinggi.'))


    @Rule(Fact(net_income_valued='loss'), Fact(per_valued='low'), Fact(der_valued='high'))
    def ipo_rule_4296(self):
        self.declare(Fact(recommendation='Laba bersih menunjukkan kerugian. PER berada di tingkat yang rendah. DER menunjukkan tingkat hutang yang tinggi.'))


    @Rule(Fact(net_income_valued='loss'), Fact(per_valued='low'), Fact(roa_valued='low'))
    def ipo_rule_4297(self):
        self.declare(Fact(recommendation='Laba bersih menunjukkan kerugian. PER berada di tingkat yang rendah. ROA menunjukkan efisiensi rendah.'))


    @Rule(Fact(net_income_valued='loss'), Fact(per_valued='low'), Fact(roe_valued='high'))
    def ipo_rule_4298(self):
        self.declare(Fact(recommendation='Laba bersih menunjukkan kerugian. PER berada di tingkat yang rendah. ROE menunjukkan keuntungan yang tinggi.'))


    @Rule(Fact(net_income_valued='loss'), Fact(der_valued='high'), Fact(roa_valued='low'))
    def ipo_rule_4299(self):
        self.declare(Fact(recommendation='Laba bersih menunjukkan kerugian. DER menunjukkan tingkat hutang yang tinggi. ROA menunjukkan efisiensi rendah.'))


    @Rule(Fact(net_income_valued='loss'), Fact(der_valued='high'), Fact(roe_valued='high'))
    def ipo_rule_4300(self):
        self.declare(Fact(recommendation='Laba bersih menunjukkan kerugian. DER menunjukkan tingkat hutang yang tinggi. ROE menunjukkan keuntungan yang tinggi.'))


    @Rule(Fact(net_income_valued='loss'), Fact(roa_valued='low'), Fact(roe_valued='high'))
    def ipo_rule_4301(self):
        self.declare(Fact(recommendation='Laba bersih menunjukkan kerugian. ROA menunjukkan efisiensi rendah. ROE menunjukkan keuntungan yang tinggi.'))


    @Rule(Fact(per_valued='low'), Fact(der_valued='high'), Fact(roa_valued='low'))
    def ipo_rule_4302(self):
        self.declare(Fact(recommendation='PER berada di tingkat yang rendah. DER menunjukkan tingkat hutang yang tinggi. ROA menunjukkan efisiensi rendah.'))


    @Rule(Fact(per_valued='low'), Fact(der_valued='high'), Fact(roe_valued='high'))
    def ipo_rule_4303(self):
        self.declare(Fact(recommendation='PER berada di tingkat yang rendah. DER menunjukkan tingkat hutang yang tinggi. ROE menunjukkan keuntungan yang tinggi.'))


    @Rule(Fact(per_valued='low'), Fact(roa_valued='low'), Fact(roe_valued='high'))
    def ipo_rule_4304(self):
        self.declare(Fact(recommendation='PER berada di tingkat yang rendah. ROA menunjukkan efisiensi rendah. ROE menunjukkan keuntungan yang tinggi.'))


    @Rule(Fact(der_valued='high'), Fact(roa_valued='low'), Fact(roe_valued='high'))
    def ipo_rule_4305(self):
        self.declare(Fact(recommendation='DER menunjukkan tingkat hutang yang tinggi. ROA menunjukkan efisiensi rendah. ROE menunjukkan keuntungan yang tinggi.'))


    @Rule(Fact(underwriter_valued='bad'), Fact(warrant_valued='bad'), Fact(net_income_valued='loss'))
    def ipo_rule_4306(self):
        self.declare(Fact(recommendation='Underwriter berkualitas buruk. Warrant menunjukkan kondisi buruk. Laba bersih menunjukkan kerugian.'))


    @Rule(Fact(underwriter_valued='bad'), Fact(warrant_valued='bad'), Fact(per_valued='low'))
    def ipo_rule_4307(self):
        self.declare(Fact(recommendation='Underwriter berkualitas buruk. Warrant menunjukkan kondisi buruk. PER berada di tingkat yang rendah.'))


    @Rule(Fact(underwriter_valued='bad'), Fact(warrant_valued='bad'), Fact(der_valued='high'))
    def ipo_rule_4308(self):
        self.declare(Fact(recommendation='Underwriter berkualitas buruk. Warrant menunjukkan kondisi buruk. DER menunjukkan tingkat hutang yang tinggi.'))


    @Rule(Fact(underwriter_valued='bad'), Fact(warrant_valued='bad'), Fact(roa_valued='low'))
    def ipo_rule_4309(self):
        self.declare(Fact(recommendation='Underwriter berkualitas buruk. Warrant menunjukkan kondisi buruk. ROA menunjukkan efisiensi rendah.'))


    @Rule(Fact(underwriter_valued='bad'), Fact(warrant_valued='bad'), Fact(roe_valued='low'))
    def ipo_rule_4310(self):
        self.declare(Fact(recommendation='Underwriter berkualitas buruk. Warrant menunjukkan kondisi buruk. ROE menunjukkan keuntungan yang rendah.'))


    @Rule(Fact(underwriter_valued='bad'), Fact(net_income_valued='loss'), Fact(per_valued='low'))
    def ipo_rule_4311(self):
        self.declare(Fact(recommendation='Underwriter berkualitas buruk. Laba bersih menunjukkan kerugian. PER berada di tingkat yang rendah.'))


    @Rule(Fact(underwriter_valued='bad'), Fact(net_income_valued='loss'), Fact(der_valued='high'))
    def ipo_rule_4312(self):
        self.declare(Fact(recommendation='Underwriter berkualitas buruk. Laba bersih menunjukkan kerugian. DER menunjukkan tingkat hutang yang tinggi.'))


    @Rule(Fact(underwriter_valued='bad'), Fact(net_income_valued='loss'), Fact(roa_valued='low'))
    def ipo_rule_4313(self):
        self.declare(Fact(recommendation='Underwriter berkualitas buruk. Laba bersih menunjukkan kerugian. ROA menunjukkan efisiensi rendah.'))


    @Rule(Fact(underwriter_valued='bad'), Fact(net_income_valued='loss'), Fact(roe_valued='low'))
    def ipo_rule_4314(self):
        self.declare(Fact(recommendation='Underwriter berkualitas buruk. Laba bersih menunjukkan kerugian. ROE menunjukkan keuntungan yang rendah.'))


    @Rule(Fact(underwriter_valued='bad'), Fact(per_valued='low'), Fact(der_valued='high'))
    def ipo_rule_4315(self):
        self.declare(Fact(recommendation='Underwriter berkualitas buruk. PER berada di tingkat yang rendah. DER menunjukkan tingkat hutang yang tinggi.'))


    @Rule(Fact(underwriter_valued='bad'), Fact(per_valued='low'), Fact(roa_valued='low'))
    def ipo_rule_4316(self):
        self.declare(Fact(recommendation='Underwriter berkualitas buruk. PER berada di tingkat yang rendah. ROA menunjukkan efisiensi rendah.'))


    @Rule(Fact(underwriter_valued='bad'), Fact(per_valued='low'), Fact(roe_valued='low'))
    def ipo_rule_4317(self):
        self.declare(Fact(recommendation='Underwriter berkualitas buruk. PER berada di tingkat yang rendah. ROE menunjukkan keuntungan yang rendah.'))


    @Rule(Fact(underwriter_valued='bad'), Fact(der_valued='high'), Fact(roa_valued='low'))
    def ipo_rule_4318(self):
        self.declare(Fact(recommendation='Underwriter berkualitas buruk. DER menunjukkan tingkat hutang yang tinggi. ROA menunjukkan efisiensi rendah.'))


    @Rule(Fact(underwriter_valued='bad'), Fact(der_valued='high'), Fact(roe_valued='low'))
    def ipo_rule_4319(self):
        self.declare(Fact(recommendation='Underwriter berkualitas buruk. DER menunjukkan tingkat hutang yang tinggi. ROE menunjukkan keuntungan yang rendah.'))


    @Rule(Fact(underwriter_valued='bad'), Fact(roa_valued='low'), Fact(roe_valued='low'))
    def ipo_rule_4320(self):
        self.declare(Fact(recommendation='Underwriter berkualitas buruk. ROA menunjukkan efisiensi rendah. ROE menunjukkan keuntungan yang rendah.'))


    @Rule(Fact(warrant_valued='bad'), Fact(net_income_valued='loss'), Fact(per_valued='low'))
    def ipo_rule_4321(self):
        self.declare(Fact(recommendation='Warrant menunjukkan kondisi buruk. Laba bersih menunjukkan kerugian. PER berada di tingkat yang rendah.'))


    @Rule(Fact(warrant_valued='bad'), Fact(net_income_valued='loss'), Fact(der_valued='high'))
    def ipo_rule_4322(self):
        self.declare(Fact(recommendation='Warrant menunjukkan kondisi buruk. Laba bersih menunjukkan kerugian. DER menunjukkan tingkat hutang yang tinggi.'))


    @Rule(Fact(warrant_valued='bad'), Fact(net_income_valued='loss'), Fact(roa_valued='low'))
    def ipo_rule_4323(self):
        self.declare(Fact(recommendation='Warrant menunjukkan kondisi buruk. Laba bersih menunjukkan kerugian. ROA menunjukkan efisiensi rendah.'))


    @Rule(Fact(warrant_valued='bad'), Fact(net_income_valued='loss'), Fact(roe_valued='low'))
    def ipo_rule_4324(self):
        self.declare(Fact(recommendation='Warrant menunjukkan kondisi buruk. Laba bersih menunjukkan kerugian. ROE menunjukkan keuntungan yang rendah.'))


    @Rule(Fact(warrant_valued='bad'), Fact(per_valued='low'), Fact(der_valued='high'))
    def ipo_rule_4325(self):
        self.declare(Fact(recommendation='Warrant menunjukkan kondisi buruk. PER berada di tingkat yang rendah. DER menunjukkan tingkat hutang yang tinggi.'))


    @Rule(Fact(warrant_valued='bad'), Fact(per_valued='low'), Fact(roa_valued='low'))
    def ipo_rule_4326(self):
        self.declare(Fact(recommendation='Warrant menunjukkan kondisi buruk. PER berada di tingkat yang rendah. ROA menunjukkan efisiensi rendah.'))


    @Rule(Fact(warrant_valued='bad'), Fact(per_valued='low'), Fact(roe_valued='low'))
    def ipo_rule_4327(self):
        self.declare(Fact(recommendation='Warrant menunjukkan kondisi buruk. PER berada di tingkat yang rendah. ROE menunjukkan keuntungan yang rendah.'))


    @Rule(Fact(warrant_valued='bad'), Fact(der_valued='high'), Fact(roa_valued='low'))
    def ipo_rule_4328(self):
        self.declare(Fact(recommendation='Warrant menunjukkan kondisi buruk. DER menunjukkan tingkat hutang yang tinggi. ROA menunjukkan efisiensi rendah.'))


    @Rule(Fact(warrant_valued='bad'), Fact(der_valued='high'), Fact(roe_valued='low'))
    def ipo_rule_4329(self):
        self.declare(Fact(recommendation='Warrant menunjukkan kondisi buruk. DER menunjukkan tingkat hutang yang tinggi. ROE menunjukkan keuntungan yang rendah.'))


    @Rule(Fact(warrant_valued='bad'), Fact(roa_valued='low'), Fact(roe_valued='low'))
    def ipo_rule_4330(self):
        self.declare(Fact(recommendation='Warrant menunjukkan kondisi buruk. ROA menunjukkan efisiensi rendah. ROE menunjukkan keuntungan yang rendah.'))


    @Rule(Fact(net_income_valued='loss'), Fact(per_valued='low'), Fact(der_valued='high'))
    def ipo_rule_4331(self):
        self.declare(Fact(recommendation='Laba bersih menunjukkan kerugian. PER berada di tingkat yang rendah. DER menunjukkan tingkat hutang yang tinggi.'))


    @Rule(Fact(net_income_valued='loss'), Fact(per_valued='low'), Fact(roa_valued='low'))
    def ipo_rule_4332(self):
        self.declare(Fact(recommendation='Laba bersih menunjukkan kerugian. PER berada di tingkat yang rendah. ROA menunjukkan efisiensi rendah.'))


    @Rule(Fact(net_income_valued='loss'), Fact(per_valued='low'), Fact(roe_valued='low'))
    def ipo_rule_4333(self):
        self.declare(Fact(recommendation='Laba bersih menunjukkan kerugian. PER berada di tingkat yang rendah. ROE menunjukkan keuntungan yang rendah.'))


    @Rule(Fact(net_income_valued='loss'), Fact(der_valued='high'), Fact(roa_valued='low'))
    def ipo_rule_4334(self):
        self.declare(Fact(recommendation='Laba bersih menunjukkan kerugian. DER menunjukkan tingkat hutang yang tinggi. ROA menunjukkan efisiensi rendah.'))


    @Rule(Fact(net_income_valued='loss'), Fact(der_valued='high'), Fact(roe_valued='low'))
    def ipo_rule_4335(self):
        self.declare(Fact(recommendation='Laba bersih menunjukkan kerugian. DER menunjukkan tingkat hutang yang tinggi. ROE menunjukkan keuntungan yang rendah.'))


    @Rule(Fact(net_income_valued='loss'), Fact(roa_valued='low'), Fact(roe_valued='low'))
    def ipo_rule_4336(self):
        self.declare(Fact(recommendation='Laba bersih menunjukkan kerugian. ROA menunjukkan efisiensi rendah. ROE menunjukkan keuntungan yang rendah.'))


    @Rule(Fact(per_valued='low'), Fact(der_valued='high'), Fact(roa_valued='low'))
    def ipo_rule_4337(self):
        self.declare(Fact(recommendation='PER berada di tingkat yang rendah. DER menunjukkan tingkat hutang yang tinggi. ROA menunjukkan efisiensi rendah.'))


    @Rule(Fact(per_valued='low'), Fact(der_valued='high'), Fact(roe_valued='low'))
    def ipo_rule_4338(self):
        self.declare(Fact(recommendation='PER berada di tingkat yang rendah. DER menunjukkan tingkat hutang yang tinggi. ROE menunjukkan keuntungan yang rendah.'))


    @Rule(Fact(per_valued='low'), Fact(roa_valued='low'), Fact(roe_valued='low'))
    def ipo_rule_4339(self):
        self.declare(Fact(recommendation='PER berada di tingkat yang rendah. ROA menunjukkan efisiensi rendah. ROE menunjukkan keuntungan yang rendah.'))


    @Rule(Fact(der_valued='high'), Fact(roa_valued='low'), Fact(roe_valued='low'))
    def ipo_rule_4340(self):
        self.declare(Fact(recommendation='DER menunjukkan tingkat hutang yang tinggi. ROA menunjukkan efisiensi rendah. ROE menunjukkan keuntungan yang rendah.'))


    @Rule(Fact(underwriter_valued='bad'), Fact(warrant_valued='bad'), Fact(net_income_valued='loss'))
    def ipo_rule_4341(self):
        self.declare(Fact(recommendation='Underwriter berkualitas buruk. Warrant menunjukkan kondisi buruk. Laba bersih menunjukkan kerugian.'))


    @Rule(Fact(underwriter_valued='bad'), Fact(warrant_valued='bad'), Fact(per_valued='low'))
    def ipo_rule_4342(self):
        self.declare(Fact(recommendation='Underwriter berkualitas buruk. Warrant menunjukkan kondisi buruk. PER berada di tingkat yang rendah.'))


    @Rule(Fact(underwriter_valued='bad'), Fact(warrant_valued='bad'), Fact(der_valued='low'))
    def ipo_rule_4343(self):
        self.declare(Fact(recommendation='Underwriter berkualitas buruk. Warrant menunjukkan kondisi buruk. DER menunjukkan tingkat hutang yang rendah.'))


    @Rule(Fact(underwriter_valued='bad'), Fact(warrant_valued='bad'), Fact(roa_valued='high'))
    def ipo_rule_4344(self):
        self.declare(Fact(recommendation='Underwriter berkualitas buruk. Warrant menunjukkan kondisi buruk. ROA menunjukkan efisiensi tinggi.'))


    @Rule(Fact(underwriter_valued='bad'), Fact(warrant_valued='bad'), Fact(roe_valued='high'))
    def ipo_rule_4345(self):
        self.declare(Fact(recommendation='Underwriter berkualitas buruk. Warrant menunjukkan kondisi buruk. ROE menunjukkan keuntungan yang tinggi.'))


    @Rule(Fact(underwriter_valued='bad'), Fact(net_income_valued='loss'), Fact(per_valued='low'))
    def ipo_rule_4346(self):
        self.declare(Fact(recommendation='Underwriter berkualitas buruk. Laba bersih menunjukkan kerugian. PER berada di tingkat yang rendah.'))


    @Rule(Fact(underwriter_valued='bad'), Fact(net_income_valued='loss'), Fact(der_valued='low'))
    def ipo_rule_4347(self):
        self.declare(Fact(recommendation='Underwriter berkualitas buruk. Laba bersih menunjukkan kerugian. DER menunjukkan tingkat hutang yang rendah.'))


    @Rule(Fact(underwriter_valued='bad'), Fact(net_income_valued='loss'), Fact(roa_valued='high'))
    def ipo_rule_4348(self):
        self.declare(Fact(recommendation='Underwriter berkualitas buruk. Laba bersih menunjukkan kerugian. ROA menunjukkan efisiensi tinggi.'))


    @Rule(Fact(underwriter_valued='bad'), Fact(net_income_valued='loss'), Fact(roe_valued='high'))
    def ipo_rule_4349(self):
        self.declare(Fact(recommendation='Underwriter berkualitas buruk. Laba bersih menunjukkan kerugian. ROE menunjukkan keuntungan yang tinggi.'))


    @Rule(Fact(underwriter_valued='bad'), Fact(per_valued='low'), Fact(der_valued='low'))
    def ipo_rule_4350(self):
        self.declare(Fact(recommendation='Underwriter berkualitas buruk. PER berada di tingkat yang rendah. DER menunjukkan tingkat hutang yang rendah.'))


    @Rule(Fact(underwriter_valued='bad'), Fact(per_valued='low'), Fact(roa_valued='high'))
    def ipo_rule_4351(self):
        self.declare(Fact(recommendation='Underwriter berkualitas buruk. PER berada di tingkat yang rendah. ROA menunjukkan efisiensi tinggi.'))


    @Rule(Fact(underwriter_valued='bad'), Fact(per_valued='low'), Fact(roe_valued='high'))
    def ipo_rule_4352(self):
        self.declare(Fact(recommendation='Underwriter berkualitas buruk. PER berada di tingkat yang rendah. ROE menunjukkan keuntungan yang tinggi.'))


    @Rule(Fact(underwriter_valued='bad'), Fact(der_valued='low'), Fact(roa_valued='high'))
    def ipo_rule_4353(self):
        self.declare(Fact(recommendation='Underwriter berkualitas buruk. DER menunjukkan tingkat hutang yang rendah. ROA menunjukkan efisiensi tinggi.'))


    @Rule(Fact(underwriter_valued='bad'), Fact(der_valued='low'), Fact(roe_valued='high'))
    def ipo_rule_4354(self):
        self.declare(Fact(recommendation='Underwriter berkualitas buruk. DER menunjukkan tingkat hutang yang rendah. ROE menunjukkan keuntungan yang tinggi.'))


    @Rule(Fact(underwriter_valued='bad'), Fact(roa_valued='high'), Fact(roe_valued='high'))
    def ipo_rule_4355(self):
        self.declare(Fact(recommendation='Underwriter berkualitas buruk. ROA menunjukkan efisiensi tinggi. ROE menunjukkan keuntungan yang tinggi.'))


    @Rule(Fact(warrant_valued='bad'), Fact(net_income_valued='loss'), Fact(per_valued='low'))
    def ipo_rule_4356(self):
        self.declare(Fact(recommendation='Warrant menunjukkan kondisi buruk. Laba bersih menunjukkan kerugian. PER berada di tingkat yang rendah.'))


    @Rule(Fact(warrant_valued='bad'), Fact(net_income_valued='loss'), Fact(der_valued='low'))
    def ipo_rule_4357(self):
        self.declare(Fact(recommendation='Warrant menunjukkan kondisi buruk. Laba bersih menunjukkan kerugian. DER menunjukkan tingkat hutang yang rendah.'))


    @Rule(Fact(warrant_valued='bad'), Fact(net_income_valued='loss'), Fact(roa_valued='high'))
    def ipo_rule_4358(self):
        self.declare(Fact(recommendation='Warrant menunjukkan kondisi buruk. Laba bersih menunjukkan kerugian. ROA menunjukkan efisiensi tinggi.'))


    @Rule(Fact(warrant_valued='bad'), Fact(net_income_valued='loss'), Fact(roe_valued='high'))
    def ipo_rule_4359(self):
        self.declare(Fact(recommendation='Warrant menunjukkan kondisi buruk. Laba bersih menunjukkan kerugian. ROE menunjukkan keuntungan yang tinggi.'))


    @Rule(Fact(warrant_valued='bad'), Fact(per_valued='low'), Fact(der_valued='low'))
    def ipo_rule_4360(self):
        self.declare(Fact(recommendation='Warrant menunjukkan kondisi buruk. PER berada di tingkat yang rendah. DER menunjukkan tingkat hutang yang rendah.'))


    @Rule(Fact(warrant_valued='bad'), Fact(per_valued='low'), Fact(roa_valued='high'))
    def ipo_rule_4361(self):
        self.declare(Fact(recommendation='Warrant menunjukkan kondisi buruk. PER berada di tingkat yang rendah. ROA menunjukkan efisiensi tinggi.'))


    @Rule(Fact(warrant_valued='bad'), Fact(per_valued='low'), Fact(roe_valued='high'))
    def ipo_rule_4362(self):
        self.declare(Fact(recommendation='Warrant menunjukkan kondisi buruk. PER berada di tingkat yang rendah. ROE menunjukkan keuntungan yang tinggi.'))


    @Rule(Fact(warrant_valued='bad'), Fact(der_valued='low'), Fact(roa_valued='high'))
    def ipo_rule_4363(self):
        self.declare(Fact(recommendation='Warrant menunjukkan kondisi buruk. DER menunjukkan tingkat hutang yang rendah. ROA menunjukkan efisiensi tinggi.'))


    @Rule(Fact(warrant_valued='bad'), Fact(der_valued='low'), Fact(roe_valued='high'))
    def ipo_rule_4364(self):
        self.declare(Fact(recommendation='Warrant menunjukkan kondisi buruk. DER menunjukkan tingkat hutang yang rendah. ROE menunjukkan keuntungan yang tinggi.'))


    @Rule(Fact(warrant_valued='bad'), Fact(roa_valued='high'), Fact(roe_valued='high'))
    def ipo_rule_4365(self):
        self.declare(Fact(recommendation='Warrant menunjukkan kondisi buruk. ROA menunjukkan efisiensi tinggi. ROE menunjukkan keuntungan yang tinggi.'))


    @Rule(Fact(net_income_valued='loss'), Fact(per_valued='low'), Fact(der_valued='low'))
    def ipo_rule_4366(self):
        self.declare(Fact(recommendation='Laba bersih menunjukkan kerugian. PER berada di tingkat yang rendah. DER menunjukkan tingkat hutang yang rendah.'))


    @Rule(Fact(net_income_valued='loss'), Fact(per_valued='low'), Fact(roa_valued='high'))
    def ipo_rule_4367(self):
        self.declare(Fact(recommendation='Laba bersih menunjukkan kerugian. PER berada di tingkat yang rendah. ROA menunjukkan efisiensi tinggi.'))


    @Rule(Fact(net_income_valued='loss'), Fact(per_valued='low'), Fact(roe_valued='high'))
    def ipo_rule_4368(self):
        self.declare(Fact(recommendation='Laba bersih menunjukkan kerugian. PER berada di tingkat yang rendah. ROE menunjukkan keuntungan yang tinggi.'))


    @Rule(Fact(net_income_valued='loss'), Fact(der_valued='low'), Fact(roa_valued='high'))
    def ipo_rule_4369(self):
        self.declare(Fact(recommendation='Laba bersih menunjukkan kerugian. DER menunjukkan tingkat hutang yang rendah. ROA menunjukkan efisiensi tinggi.'))


    @Rule(Fact(net_income_valued='loss'), Fact(der_valued='low'), Fact(roe_valued='high'))
    def ipo_rule_4370(self):
        self.declare(Fact(recommendation='Laba bersih menunjukkan kerugian. DER menunjukkan tingkat hutang yang rendah. ROE menunjukkan keuntungan yang tinggi.'))


    @Rule(Fact(net_income_valued='loss'), Fact(roa_valued='high'), Fact(roe_valued='high'))
    def ipo_rule_4371(self):
        self.declare(Fact(recommendation='Laba bersih menunjukkan kerugian. ROA menunjukkan efisiensi tinggi. ROE menunjukkan keuntungan yang tinggi.'))


    @Rule(Fact(per_valued='low'), Fact(der_valued='low'), Fact(roa_valued='high'))
    def ipo_rule_4372(self):
        self.declare(Fact(recommendation='PER berada di tingkat yang rendah. DER menunjukkan tingkat hutang yang rendah. ROA menunjukkan efisiensi tinggi.'))


    @Rule(Fact(per_valued='low'), Fact(der_valued='low'), Fact(roe_valued='high'))
    def ipo_rule_4373(self):
        self.declare(Fact(recommendation='PER berada di tingkat yang rendah. DER menunjukkan tingkat hutang yang rendah. ROE menunjukkan keuntungan yang tinggi.'))


    @Rule(Fact(per_valued='low'), Fact(roa_valued='high'), Fact(roe_valued='high'))
    def ipo_rule_4374(self):
        self.declare(Fact(recommendation='PER berada di tingkat yang rendah. ROA menunjukkan efisiensi tinggi. ROE menunjukkan keuntungan yang tinggi.'))


    @Rule(Fact(der_valued='low'), Fact(roa_valued='high'), Fact(roe_valued='high'))
    def ipo_rule_4375(self):
        self.declare(Fact(recommendation='DER menunjukkan tingkat hutang yang rendah. ROA menunjukkan efisiensi tinggi. ROE menunjukkan keuntungan yang tinggi.'))


    @Rule(Fact(underwriter_valued='bad'), Fact(warrant_valued='bad'), Fact(net_income_valued='loss'))
    def ipo_rule_4376(self):
        self.declare(Fact(recommendation='Underwriter berkualitas buruk. Warrant menunjukkan kondisi buruk. Laba bersih menunjukkan kerugian.'))


    @Rule(Fact(underwriter_valued='bad'), Fact(warrant_valued='bad'), Fact(per_valued='low'))
    def ipo_rule_4377(self):
        self.declare(Fact(recommendation='Underwriter berkualitas buruk. Warrant menunjukkan kondisi buruk. PER berada di tingkat yang rendah.'))


    @Rule(Fact(underwriter_valued='bad'), Fact(warrant_valued='bad'), Fact(der_valued='low'))
    def ipo_rule_4378(self):
        self.declare(Fact(recommendation='Underwriter berkualitas buruk. Warrant menunjukkan kondisi buruk. DER menunjukkan tingkat hutang yang rendah.'))


    @Rule(Fact(underwriter_valued='bad'), Fact(warrant_valued='bad'), Fact(roa_valued='high'))
    def ipo_rule_4379(self):
        self.declare(Fact(recommendation='Underwriter berkualitas buruk. Warrant menunjukkan kondisi buruk. ROA menunjukkan efisiensi tinggi.'))


    @Rule(Fact(underwriter_valued='bad'), Fact(warrant_valued='bad'), Fact(roe_valued='low'))
    def ipo_rule_4380(self):
        self.declare(Fact(recommendation='Underwriter berkualitas buruk. Warrant menunjukkan kondisi buruk. ROE menunjukkan keuntungan yang rendah.'))


    @Rule(Fact(underwriter_valued='bad'), Fact(net_income_valued='loss'), Fact(per_valued='low'))
    def ipo_rule_4381(self):
        self.declare(Fact(recommendation='Underwriter berkualitas buruk. Laba bersih menunjukkan kerugian. PER berada di tingkat yang rendah.'))


    @Rule(Fact(underwriter_valued='bad'), Fact(net_income_valued='loss'), Fact(der_valued='low'))
    def ipo_rule_4382(self):
        self.declare(Fact(recommendation='Underwriter berkualitas buruk. Laba bersih menunjukkan kerugian. DER menunjukkan tingkat hutang yang rendah.'))


    @Rule(Fact(underwriter_valued='bad'), Fact(net_income_valued='loss'), Fact(roa_valued='high'))
    def ipo_rule_4383(self):
        self.declare(Fact(recommendation='Underwriter berkualitas buruk. Laba bersih menunjukkan kerugian. ROA menunjukkan efisiensi tinggi.'))


    @Rule(Fact(underwriter_valued='bad'), Fact(net_income_valued='loss'), Fact(roe_valued='low'))
    def ipo_rule_4384(self):
        self.declare(Fact(recommendation='Underwriter berkualitas buruk. Laba bersih menunjukkan kerugian. ROE menunjukkan keuntungan yang rendah.'))


    @Rule(Fact(underwriter_valued='bad'), Fact(per_valued='low'), Fact(der_valued='low'))
    def ipo_rule_4385(self):
        self.declare(Fact(recommendation='Underwriter berkualitas buruk. PER berada di tingkat yang rendah. DER menunjukkan tingkat hutang yang rendah.'))


    @Rule(Fact(underwriter_valued='bad'), Fact(per_valued='low'), Fact(roa_valued='high'))
    def ipo_rule_4386(self):
        self.declare(Fact(recommendation='Underwriter berkualitas buruk. PER berada di tingkat yang rendah. ROA menunjukkan efisiensi tinggi.'))


    @Rule(Fact(underwriter_valued='bad'), Fact(per_valued='low'), Fact(roe_valued='low'))
    def ipo_rule_4387(self):
        self.declare(Fact(recommendation='Underwriter berkualitas buruk. PER berada di tingkat yang rendah. ROE menunjukkan keuntungan yang rendah.'))


    @Rule(Fact(underwriter_valued='bad'), Fact(der_valued='low'), Fact(roa_valued='high'))
    def ipo_rule_4388(self):
        self.declare(Fact(recommendation='Underwriter berkualitas buruk. DER menunjukkan tingkat hutang yang rendah. ROA menunjukkan efisiensi tinggi.'))


    @Rule(Fact(underwriter_valued='bad'), Fact(der_valued='low'), Fact(roe_valued='low'))
    def ipo_rule_4389(self):
        self.declare(Fact(recommendation='Underwriter berkualitas buruk. DER menunjukkan tingkat hutang yang rendah. ROE menunjukkan keuntungan yang rendah.'))


    @Rule(Fact(underwriter_valued='bad'), Fact(roa_valued='high'), Fact(roe_valued='low'))
    def ipo_rule_4390(self):
        self.declare(Fact(recommendation='Underwriter berkualitas buruk. ROA menunjukkan efisiensi tinggi. ROE menunjukkan keuntungan yang rendah.'))


    @Rule(Fact(warrant_valued='bad'), Fact(net_income_valued='loss'), Fact(per_valued='low'))
    def ipo_rule_4391(self):
        self.declare(Fact(recommendation='Warrant menunjukkan kondisi buruk. Laba bersih menunjukkan kerugian. PER berada di tingkat yang rendah.'))


    @Rule(Fact(warrant_valued='bad'), Fact(net_income_valued='loss'), Fact(der_valued='low'))
    def ipo_rule_4392(self):
        self.declare(Fact(recommendation='Warrant menunjukkan kondisi buruk. Laba bersih menunjukkan kerugian. DER menunjukkan tingkat hutang yang rendah.'))


    @Rule(Fact(warrant_valued='bad'), Fact(net_income_valued='loss'), Fact(roa_valued='high'))
    def ipo_rule_4393(self):
        self.declare(Fact(recommendation='Warrant menunjukkan kondisi buruk. Laba bersih menunjukkan kerugian. ROA menunjukkan efisiensi tinggi.'))


    @Rule(Fact(warrant_valued='bad'), Fact(net_income_valued='loss'), Fact(roe_valued='low'))
    def ipo_rule_4394(self):
        self.declare(Fact(recommendation='Warrant menunjukkan kondisi buruk. Laba bersih menunjukkan kerugian. ROE menunjukkan keuntungan yang rendah.'))


    @Rule(Fact(warrant_valued='bad'), Fact(per_valued='low'), Fact(der_valued='low'))
    def ipo_rule_4395(self):
        self.declare(Fact(recommendation='Warrant menunjukkan kondisi buruk. PER berada di tingkat yang rendah. DER menunjukkan tingkat hutang yang rendah.'))


    @Rule(Fact(warrant_valued='bad'), Fact(per_valued='low'), Fact(roa_valued='high'))
    def ipo_rule_4396(self):
        self.declare(Fact(recommendation='Warrant menunjukkan kondisi buruk. PER berada di tingkat yang rendah. ROA menunjukkan efisiensi tinggi.'))


    @Rule(Fact(warrant_valued='bad'), Fact(per_valued='low'), Fact(roe_valued='low'))
    def ipo_rule_4397(self):
        self.declare(Fact(recommendation='Warrant menunjukkan kondisi buruk. PER berada di tingkat yang rendah. ROE menunjukkan keuntungan yang rendah.'))


    @Rule(Fact(warrant_valued='bad'), Fact(der_valued='low'), Fact(roa_valued='high'))
    def ipo_rule_4398(self):
        self.declare(Fact(recommendation='Warrant menunjukkan kondisi buruk. DER menunjukkan tingkat hutang yang rendah. ROA menunjukkan efisiensi tinggi.'))


    @Rule(Fact(warrant_valued='bad'), Fact(der_valued='low'), Fact(roe_valued='low'))
    def ipo_rule_4399(self):
        self.declare(Fact(recommendation='Warrant menunjukkan kondisi buruk. DER menunjukkan tingkat hutang yang rendah. ROE menunjukkan keuntungan yang rendah.'))


    @Rule(Fact(warrant_valued='bad'), Fact(roa_valued='high'), Fact(roe_valued='low'))
    def ipo_rule_4400(self):
        self.declare(Fact(recommendation='Warrant menunjukkan kondisi buruk. ROA menunjukkan efisiensi tinggi. ROE menunjukkan keuntungan yang rendah.'))


    @Rule(Fact(net_income_valued='loss'), Fact(per_valued='low'), Fact(der_valued='low'))
    def ipo_rule_4401(self):
        self.declare(Fact(recommendation='Laba bersih menunjukkan kerugian. PER berada di tingkat yang rendah. DER menunjukkan tingkat hutang yang rendah.'))


    @Rule(Fact(net_income_valued='loss'), Fact(per_valued='low'), Fact(roa_valued='high'))
    def ipo_rule_4402(self):
        self.declare(Fact(recommendation='Laba bersih menunjukkan kerugian. PER berada di tingkat yang rendah. ROA menunjukkan efisiensi tinggi.'))


    @Rule(Fact(net_income_valued='loss'), Fact(per_valued='low'), Fact(roe_valued='low'))
    def ipo_rule_4403(self):
        self.declare(Fact(recommendation='Laba bersih menunjukkan kerugian. PER berada di tingkat yang rendah. ROE menunjukkan keuntungan yang rendah.'))


    @Rule(Fact(net_income_valued='loss'), Fact(der_valued='low'), Fact(roa_valued='high'))
    def ipo_rule_4404(self):
        self.declare(Fact(recommendation='Laba bersih menunjukkan kerugian. DER menunjukkan tingkat hutang yang rendah. ROA menunjukkan efisiensi tinggi.'))


    @Rule(Fact(net_income_valued='loss'), Fact(der_valued='low'), Fact(roe_valued='low'))
    def ipo_rule_4405(self):
        self.declare(Fact(recommendation='Laba bersih menunjukkan kerugian. DER menunjukkan tingkat hutang yang rendah. ROE menunjukkan keuntungan yang rendah.'))


    @Rule(Fact(net_income_valued='loss'), Fact(roa_valued='high'), Fact(roe_valued='low'))
    def ipo_rule_4406(self):
        self.declare(Fact(recommendation='Laba bersih menunjukkan kerugian. ROA menunjukkan efisiensi tinggi. ROE menunjukkan keuntungan yang rendah.'))


    @Rule(Fact(per_valued='low'), Fact(der_valued='low'), Fact(roa_valued='high'))
    def ipo_rule_4407(self):
        self.declare(Fact(recommendation='PER berada di tingkat yang rendah. DER menunjukkan tingkat hutang yang rendah. ROA menunjukkan efisiensi tinggi.'))


    @Rule(Fact(per_valued='low'), Fact(der_valued='low'), Fact(roe_valued='low'))
    def ipo_rule_4408(self):
        self.declare(Fact(recommendation='PER berada di tingkat yang rendah. DER menunjukkan tingkat hutang yang rendah. ROE menunjukkan keuntungan yang rendah.'))


    @Rule(Fact(per_valued='low'), Fact(roa_valued='high'), Fact(roe_valued='low'))
    def ipo_rule_4409(self):
        self.declare(Fact(recommendation='PER berada di tingkat yang rendah. ROA menunjukkan efisiensi tinggi. ROE menunjukkan keuntungan yang rendah.'))


    @Rule(Fact(der_valued='low'), Fact(roa_valued='high'), Fact(roe_valued='low'))
    def ipo_rule_4410(self):
        self.declare(Fact(recommendation='DER menunjukkan tingkat hutang yang rendah. ROA menunjukkan efisiensi tinggi. ROE menunjukkan keuntungan yang rendah.'))


    @Rule(Fact(underwriter_valued='bad'), Fact(warrant_valued='bad'), Fact(net_income_valued='loss'))
    def ipo_rule_4411(self):
        self.declare(Fact(recommendation='Underwriter berkualitas buruk. Warrant menunjukkan kondisi buruk. Laba bersih menunjukkan kerugian.'))


    @Rule(Fact(underwriter_valued='bad'), Fact(warrant_valued='bad'), Fact(per_valued='low'))
    def ipo_rule_4412(self):
        self.declare(Fact(recommendation='Underwriter berkualitas buruk. Warrant menunjukkan kondisi buruk. PER berada di tingkat yang rendah.'))


    @Rule(Fact(underwriter_valued='bad'), Fact(warrant_valued='bad'), Fact(der_valued='low'))
    def ipo_rule_4413(self):
        self.declare(Fact(recommendation='Underwriter berkualitas buruk. Warrant menunjukkan kondisi buruk. DER menunjukkan tingkat hutang yang rendah.'))


    @Rule(Fact(underwriter_valued='bad'), Fact(warrant_valued='bad'), Fact(roa_valued='low'))
    def ipo_rule_4414(self):
        self.declare(Fact(recommendation='Underwriter berkualitas buruk. Warrant menunjukkan kondisi buruk. ROA menunjukkan efisiensi rendah.'))


    @Rule(Fact(underwriter_valued='bad'), Fact(warrant_valued='bad'), Fact(roe_valued='high'))
    def ipo_rule_4415(self):
        self.declare(Fact(recommendation='Underwriter berkualitas buruk. Warrant menunjukkan kondisi buruk. ROE menunjukkan keuntungan yang tinggi.'))


    @Rule(Fact(underwriter_valued='bad'), Fact(net_income_valued='loss'), Fact(per_valued='low'))
    def ipo_rule_4416(self):
        self.declare(Fact(recommendation='Underwriter berkualitas buruk. Laba bersih menunjukkan kerugian. PER berada di tingkat yang rendah.'))


    @Rule(Fact(underwriter_valued='bad'), Fact(net_income_valued='loss'), Fact(der_valued='low'))
    def ipo_rule_4417(self):
        self.declare(Fact(recommendation='Underwriter berkualitas buruk. Laba bersih menunjukkan kerugian. DER menunjukkan tingkat hutang yang rendah.'))


    @Rule(Fact(underwriter_valued='bad'), Fact(net_income_valued='loss'), Fact(roa_valued='low'))
    def ipo_rule_4418(self):
        self.declare(Fact(recommendation='Underwriter berkualitas buruk. Laba bersih menunjukkan kerugian. ROA menunjukkan efisiensi rendah.'))


    @Rule(Fact(underwriter_valued='bad'), Fact(net_income_valued='loss'), Fact(roe_valued='high'))
    def ipo_rule_4419(self):
        self.declare(Fact(recommendation='Underwriter berkualitas buruk. Laba bersih menunjukkan kerugian. ROE menunjukkan keuntungan yang tinggi.'))


    @Rule(Fact(underwriter_valued='bad'), Fact(per_valued='low'), Fact(der_valued='low'))
    def ipo_rule_4420(self):
        self.declare(Fact(recommendation='Underwriter berkualitas buruk. PER berada di tingkat yang rendah. DER menunjukkan tingkat hutang yang rendah.'))


    @Rule(Fact(underwriter_valued='bad'), Fact(per_valued='low'), Fact(roa_valued='low'))
    def ipo_rule_4421(self):
        self.declare(Fact(recommendation='Underwriter berkualitas buruk. PER berada di tingkat yang rendah. ROA menunjukkan efisiensi rendah.'))


    @Rule(Fact(underwriter_valued='bad'), Fact(per_valued='low'), Fact(roe_valued='high'))
    def ipo_rule_4422(self):
        self.declare(Fact(recommendation='Underwriter berkualitas buruk. PER berada di tingkat yang rendah. ROE menunjukkan keuntungan yang tinggi.'))


    @Rule(Fact(underwriter_valued='bad'), Fact(der_valued='low'), Fact(roa_valued='low'))
    def ipo_rule_4423(self):
        self.declare(Fact(recommendation='Underwriter berkualitas buruk. DER menunjukkan tingkat hutang yang rendah. ROA menunjukkan efisiensi rendah.'))


    @Rule(Fact(underwriter_valued='bad'), Fact(der_valued='low'), Fact(roe_valued='high'))
    def ipo_rule_4424(self):
        self.declare(Fact(recommendation='Underwriter berkualitas buruk. DER menunjukkan tingkat hutang yang rendah. ROE menunjukkan keuntungan yang tinggi.'))


    @Rule(Fact(underwriter_valued='bad'), Fact(roa_valued='low'), Fact(roe_valued='high'))
    def ipo_rule_4425(self):
        self.declare(Fact(recommendation='Underwriter berkualitas buruk. ROA menunjukkan efisiensi rendah. ROE menunjukkan keuntungan yang tinggi.'))


    @Rule(Fact(warrant_valued='bad'), Fact(net_income_valued='loss'), Fact(per_valued='low'))
    def ipo_rule_4426(self):
        self.declare(Fact(recommendation='Warrant menunjukkan kondisi buruk. Laba bersih menunjukkan kerugian. PER berada di tingkat yang rendah.'))


    @Rule(Fact(warrant_valued='bad'), Fact(net_income_valued='loss'), Fact(der_valued='low'))
    def ipo_rule_4427(self):
        self.declare(Fact(recommendation='Warrant menunjukkan kondisi buruk. Laba bersih menunjukkan kerugian. DER menunjukkan tingkat hutang yang rendah.'))


    @Rule(Fact(warrant_valued='bad'), Fact(net_income_valued='loss'), Fact(roa_valued='low'))
    def ipo_rule_4428(self):
        self.declare(Fact(recommendation='Warrant menunjukkan kondisi buruk. Laba bersih menunjukkan kerugian. ROA menunjukkan efisiensi rendah.'))


    @Rule(Fact(warrant_valued='bad'), Fact(net_income_valued='loss'), Fact(roe_valued='high'))
    def ipo_rule_4429(self):
        self.declare(Fact(recommendation='Warrant menunjukkan kondisi buruk. Laba bersih menunjukkan kerugian. ROE menunjukkan keuntungan yang tinggi.'))


    @Rule(Fact(warrant_valued='bad'), Fact(per_valued='low'), Fact(der_valued='low'))
    def ipo_rule_4430(self):
        self.declare(Fact(recommendation='Warrant menunjukkan kondisi buruk. PER berada di tingkat yang rendah. DER menunjukkan tingkat hutang yang rendah.'))


    @Rule(Fact(warrant_valued='bad'), Fact(per_valued='low'), Fact(roa_valued='low'))
    def ipo_rule_4431(self):
        self.declare(Fact(recommendation='Warrant menunjukkan kondisi buruk. PER berada di tingkat yang rendah. ROA menunjukkan efisiensi rendah.'))


    @Rule(Fact(warrant_valued='bad'), Fact(per_valued='low'), Fact(roe_valued='high'))
    def ipo_rule_4432(self):
        self.declare(Fact(recommendation='Warrant menunjukkan kondisi buruk. PER berada di tingkat yang rendah. ROE menunjukkan keuntungan yang tinggi.'))


    @Rule(Fact(warrant_valued='bad'), Fact(der_valued='low'), Fact(roa_valued='low'))
    def ipo_rule_4433(self):
        self.declare(Fact(recommendation='Warrant menunjukkan kondisi buruk. DER menunjukkan tingkat hutang yang rendah. ROA menunjukkan efisiensi rendah.'))


    @Rule(Fact(warrant_valued='bad'), Fact(der_valued='low'), Fact(roe_valued='high'))
    def ipo_rule_4434(self):
        self.declare(Fact(recommendation='Warrant menunjukkan kondisi buruk. DER menunjukkan tingkat hutang yang rendah. ROE menunjukkan keuntungan yang tinggi.'))


    @Rule(Fact(warrant_valued='bad'), Fact(roa_valued='low'), Fact(roe_valued='high'))
    def ipo_rule_4435(self):
        self.declare(Fact(recommendation='Warrant menunjukkan kondisi buruk. ROA menunjukkan efisiensi rendah. ROE menunjukkan keuntungan yang tinggi.'))


    @Rule(Fact(net_income_valued='loss'), Fact(per_valued='low'), Fact(der_valued='low'))
    def ipo_rule_4436(self):
        self.declare(Fact(recommendation='Laba bersih menunjukkan kerugian. PER berada di tingkat yang rendah. DER menunjukkan tingkat hutang yang rendah.'))


    @Rule(Fact(net_income_valued='loss'), Fact(per_valued='low'), Fact(roa_valued='low'))
    def ipo_rule_4437(self):
        self.declare(Fact(recommendation='Laba bersih menunjukkan kerugian. PER berada di tingkat yang rendah. ROA menunjukkan efisiensi rendah.'))


    @Rule(Fact(net_income_valued='loss'), Fact(per_valued='low'), Fact(roe_valued='high'))
    def ipo_rule_4438(self):
        self.declare(Fact(recommendation='Laba bersih menunjukkan kerugian. PER berada di tingkat yang rendah. ROE menunjukkan keuntungan yang tinggi.'))


    @Rule(Fact(net_income_valued='loss'), Fact(der_valued='low'), Fact(roa_valued='low'))
    def ipo_rule_4439(self):
        self.declare(Fact(recommendation='Laba bersih menunjukkan kerugian. DER menunjukkan tingkat hutang yang rendah. ROA menunjukkan efisiensi rendah.'))


    @Rule(Fact(net_income_valued='loss'), Fact(der_valued='low'), Fact(roe_valued='high'))
    def ipo_rule_4440(self):
        self.declare(Fact(recommendation='Laba bersih menunjukkan kerugian. DER menunjukkan tingkat hutang yang rendah. ROE menunjukkan keuntungan yang tinggi.'))


    @Rule(Fact(net_income_valued='loss'), Fact(roa_valued='low'), Fact(roe_valued='high'))
    def ipo_rule_4441(self):
        self.declare(Fact(recommendation='Laba bersih menunjukkan kerugian. ROA menunjukkan efisiensi rendah. ROE menunjukkan keuntungan yang tinggi.'))


    @Rule(Fact(per_valued='low'), Fact(der_valued='low'), Fact(roa_valued='low'))
    def ipo_rule_4442(self):
        self.declare(Fact(recommendation='PER berada di tingkat yang rendah. DER menunjukkan tingkat hutang yang rendah. ROA menunjukkan efisiensi rendah.'))


    @Rule(Fact(per_valued='low'), Fact(der_valued='low'), Fact(roe_valued='high'))
    def ipo_rule_4443(self):
        self.declare(Fact(recommendation='PER berada di tingkat yang rendah. DER menunjukkan tingkat hutang yang rendah. ROE menunjukkan keuntungan yang tinggi.'))


    @Rule(Fact(per_valued='low'), Fact(roa_valued='low'), Fact(roe_valued='high'))
    def ipo_rule_4444(self):
        self.declare(Fact(recommendation='PER berada di tingkat yang rendah. ROA menunjukkan efisiensi rendah. ROE menunjukkan keuntungan yang tinggi.'))


    @Rule(Fact(der_valued='low'), Fact(roa_valued='low'), Fact(roe_valued='high'))
    def ipo_rule_4445(self):
        self.declare(Fact(recommendation='DER menunjukkan tingkat hutang yang rendah. ROA menunjukkan efisiensi rendah. ROE menunjukkan keuntungan yang tinggi.'))


    @Rule(Fact(underwriter_valued='bad'), Fact(warrant_valued='bad'), Fact(net_income_valued='loss'))
    def ipo_rule_4446(self):
        self.declare(Fact(recommendation='Underwriter berkualitas buruk. Warrant menunjukkan kondisi buruk. Laba bersih menunjukkan kerugian.'))


    @Rule(Fact(underwriter_valued='bad'), Fact(warrant_valued='bad'), Fact(per_valued='low'))
    def ipo_rule_4447(self):
        self.declare(Fact(recommendation='Underwriter berkualitas buruk. Warrant menunjukkan kondisi buruk. PER berada di tingkat yang rendah.'))


    @Rule(Fact(underwriter_valued='bad'), Fact(warrant_valued='bad'), Fact(der_valued='low'))
    def ipo_rule_4448(self):
        self.declare(Fact(recommendation='Underwriter berkualitas buruk. Warrant menunjukkan kondisi buruk. DER menunjukkan tingkat hutang yang rendah.'))


    @Rule(Fact(underwriter_valued='bad'), Fact(warrant_valued='bad'), Fact(roa_valued='low'))
    def ipo_rule_4449(self):
        self.declare(Fact(recommendation='Underwriter berkualitas buruk. Warrant menunjukkan kondisi buruk. ROA menunjukkan efisiensi rendah.'))


    @Rule(Fact(underwriter_valued='bad'), Fact(warrant_valued='bad'), Fact(roe_valued='low'))
    def ipo_rule_4450(self):
        self.declare(Fact(recommendation='Underwriter berkualitas buruk. Warrant menunjukkan kondisi buruk. ROE menunjukkan keuntungan yang rendah.'))


    @Rule(Fact(underwriter_valued='bad'), Fact(net_income_valued='loss'), Fact(per_valued='low'))
    def ipo_rule_4451(self):
        self.declare(Fact(recommendation='Underwriter berkualitas buruk. Laba bersih menunjukkan kerugian. PER berada di tingkat yang rendah.'))


    @Rule(Fact(underwriter_valued='bad'), Fact(net_income_valued='loss'), Fact(der_valued='low'))
    def ipo_rule_4452(self):
        self.declare(Fact(recommendation='Underwriter berkualitas buruk. Laba bersih menunjukkan kerugian. DER menunjukkan tingkat hutang yang rendah.'))


    @Rule(Fact(underwriter_valued='bad'), Fact(net_income_valued='loss'), Fact(roa_valued='low'))
    def ipo_rule_4453(self):
        self.declare(Fact(recommendation='Underwriter berkualitas buruk. Laba bersih menunjukkan kerugian. ROA menunjukkan efisiensi rendah.'))


    @Rule(Fact(underwriter_valued='bad'), Fact(net_income_valued='loss'), Fact(roe_valued='low'))
    def ipo_rule_4454(self):
        self.declare(Fact(recommendation='Underwriter berkualitas buruk. Laba bersih menunjukkan kerugian. ROE menunjukkan keuntungan yang rendah.'))


    @Rule(Fact(underwriter_valued='bad'), Fact(per_valued='low'), Fact(der_valued='low'))
    def ipo_rule_4455(self):
        self.declare(Fact(recommendation='Underwriter berkualitas buruk. PER berada di tingkat yang rendah. DER menunjukkan tingkat hutang yang rendah.'))


    @Rule(Fact(underwriter_valued='bad'), Fact(per_valued='low'), Fact(roa_valued='low'))
    def ipo_rule_4456(self):
        self.declare(Fact(recommendation='Underwriter berkualitas buruk. PER berada di tingkat yang rendah. ROA menunjukkan efisiensi rendah.'))


    @Rule(Fact(underwriter_valued='bad'), Fact(per_valued='low'), Fact(roe_valued='low'))
    def ipo_rule_4457(self):
        self.declare(Fact(recommendation='Underwriter berkualitas buruk. PER berada di tingkat yang rendah. ROE menunjukkan keuntungan yang rendah.'))


    @Rule(Fact(underwriter_valued='bad'), Fact(der_valued='low'), Fact(roa_valued='low'))
    def ipo_rule_4458(self):
        self.declare(Fact(recommendation='Underwriter berkualitas buruk. DER menunjukkan tingkat hutang yang rendah. ROA menunjukkan efisiensi rendah.'))


    @Rule(Fact(underwriter_valued='bad'), Fact(der_valued='low'), Fact(roe_valued='low'))
    def ipo_rule_4459(self):
        self.declare(Fact(recommendation='Underwriter berkualitas buruk. DER menunjukkan tingkat hutang yang rendah. ROE menunjukkan keuntungan yang rendah.'))


    @Rule(Fact(underwriter_valued='bad'), Fact(roa_valued='low'), Fact(roe_valued='low'))
    def ipo_rule_4460(self):
        self.declare(Fact(recommendation='Underwriter berkualitas buruk. ROA menunjukkan efisiensi rendah. ROE menunjukkan keuntungan yang rendah.'))


    @Rule(Fact(warrant_valued='bad'), Fact(net_income_valued='loss'), Fact(per_valued='low'))
    def ipo_rule_4461(self):
        self.declare(Fact(recommendation='Warrant menunjukkan kondisi buruk. Laba bersih menunjukkan kerugian. PER berada di tingkat yang rendah.'))


    @Rule(Fact(warrant_valued='bad'), Fact(net_income_valued='loss'), Fact(der_valued='low'))
    def ipo_rule_4462(self):
        self.declare(Fact(recommendation='Warrant menunjukkan kondisi buruk. Laba bersih menunjukkan kerugian. DER menunjukkan tingkat hutang yang rendah.'))


    @Rule(Fact(warrant_valued='bad'), Fact(net_income_valued='loss'), Fact(roa_valued='low'))
    def ipo_rule_4463(self):
        self.declare(Fact(recommendation='Warrant menunjukkan kondisi buruk. Laba bersih menunjukkan kerugian. ROA menunjukkan efisiensi rendah.'))


    @Rule(Fact(warrant_valued='bad'), Fact(net_income_valued='loss'), Fact(roe_valued='low'))
    def ipo_rule_4464(self):
        self.declare(Fact(recommendation='Warrant menunjukkan kondisi buruk. Laba bersih menunjukkan kerugian. ROE menunjukkan keuntungan yang rendah.'))


    @Rule(Fact(warrant_valued='bad'), Fact(per_valued='low'), Fact(der_valued='low'))
    def ipo_rule_4465(self):
        self.declare(Fact(recommendation='Warrant menunjukkan kondisi buruk. PER berada di tingkat yang rendah. DER menunjukkan tingkat hutang yang rendah.'))


    @Rule(Fact(warrant_valued='bad'), Fact(per_valued='low'), Fact(roa_valued='low'))
    def ipo_rule_4466(self):
        self.declare(Fact(recommendation='Warrant menunjukkan kondisi buruk. PER berada di tingkat yang rendah. ROA menunjukkan efisiensi rendah.'))


    @Rule(Fact(warrant_valued='bad'), Fact(per_valued='low'), Fact(roe_valued='low'))
    def ipo_rule_4467(self):
        self.declare(Fact(recommendation='Warrant menunjukkan kondisi buruk. PER berada di tingkat yang rendah. ROE menunjukkan keuntungan yang rendah.'))


    @Rule(Fact(warrant_valued='bad'), Fact(der_valued='low'), Fact(roa_valued='low'))
    def ipo_rule_4468(self):
        self.declare(Fact(recommendation='Warrant menunjukkan kondisi buruk. DER menunjukkan tingkat hutang yang rendah. ROA menunjukkan efisiensi rendah.'))


    @Rule(Fact(warrant_valued='bad'), Fact(der_valued='low'), Fact(roe_valued='low'))
    def ipo_rule_4469(self):
        self.declare(Fact(recommendation='Warrant menunjukkan kondisi buruk. DER menunjukkan tingkat hutang yang rendah. ROE menunjukkan keuntungan yang rendah.'))


    @Rule(Fact(warrant_valued='bad'), Fact(roa_valued='low'), Fact(roe_valued='low'))
    def ipo_rule_4470(self):
        self.declare(Fact(recommendation='Warrant menunjukkan kondisi buruk. ROA menunjukkan efisiensi rendah. ROE menunjukkan keuntungan yang rendah.'))


    @Rule(Fact(net_income_valued='loss'), Fact(per_valued='low'), Fact(der_valued='low'))
    def ipo_rule_4471(self):
        self.declare(Fact(recommendation='Laba bersih menunjukkan kerugian. PER berada di tingkat yang rendah. DER menunjukkan tingkat hutang yang rendah.'))


    @Rule(Fact(net_income_valued='loss'), Fact(per_valued='low'), Fact(roa_valued='low'))
    def ipo_rule_4472(self):
        self.declare(Fact(recommendation='Laba bersih menunjukkan kerugian. PER berada di tingkat yang rendah. ROA menunjukkan efisiensi rendah.'))


    @Rule(Fact(net_income_valued='loss'), Fact(per_valued='low'), Fact(roe_valued='low'))
    def ipo_rule_4473(self):
        self.declare(Fact(recommendation='Laba bersih menunjukkan kerugian. PER berada di tingkat yang rendah. ROE menunjukkan keuntungan yang rendah.'))


    @Rule(Fact(net_income_valued='loss'), Fact(der_valued='low'), Fact(roa_valued='low'))
    def ipo_rule_4474(self):
        self.declare(Fact(recommendation='Laba bersih menunjukkan kerugian. DER menunjukkan tingkat hutang yang rendah. ROA menunjukkan efisiensi rendah.'))


    @Rule(Fact(net_income_valued='loss'), Fact(der_valued='low'), Fact(roe_valued='low'))
    def ipo_rule_4475(self):
        self.declare(Fact(recommendation='Laba bersih menunjukkan kerugian. DER menunjukkan tingkat hutang yang rendah. ROE menunjukkan keuntungan yang rendah.'))


    @Rule(Fact(net_income_valued='loss'), Fact(roa_valued='low'), Fact(roe_valued='low'))
    def ipo_rule_4476(self):
        self.declare(Fact(recommendation='Laba bersih menunjukkan kerugian. ROA menunjukkan efisiensi rendah. ROE menunjukkan keuntungan yang rendah.'))


    @Rule(Fact(per_valued='low'), Fact(der_valued='low'), Fact(roa_valued='low'))
    def ipo_rule_4477(self):
        self.declare(Fact(recommendation='PER berada di tingkat yang rendah. DER menunjukkan tingkat hutang yang rendah. ROA menunjukkan efisiensi rendah.'))


    @Rule(Fact(per_valued='low'), Fact(der_valued='low'), Fact(roe_valued='low'))
    def ipo_rule_4478(self):
        self.declare(Fact(recommendation='PER berada di tingkat yang rendah. DER menunjukkan tingkat hutang yang rendah. ROE menunjukkan keuntungan yang rendah.'))


    @Rule(Fact(per_valued='low'), Fact(roa_valued='low'), Fact(roe_valued='low'))
    def ipo_rule_4479(self):
        self.declare(Fact(recommendation='PER berada di tingkat yang rendah. ROA menunjukkan efisiensi rendah. ROE menunjukkan keuntungan yang rendah.'))


    @Rule(Fact(der_valued='low'), Fact(roa_valued='low'), Fact(roe_valued='low'))
    def ipo_rule_4480(self):
        self.declare(Fact(recommendation='DER menunjukkan tingkat hutang yang rendah. ROA menunjukkan efisiensi rendah. ROE menunjukkan keuntungan yang rendah.'))


@app.route('/fundamental_analyze')
def fundamental_analyze():
    return render_template('fundamental_analyze.html')

@app.route('/technical')
def technical_analysis():
    return render_template('technical.html')

@app.route('/ipo')
def ipo_analysis():
    return render_template('ipo.html')

@app.route('/recommend', methods=['POST'])
def recommend():
    # Ambil nilai dari form
    pbv = request.form.get('pbv')
    per = request.form.get('per')
    roe = request.form.get('roe')
    net_income = request.form.get('net_income')
    der = request.form.get('der')
    roa = request.form.get('roa')

    try:
        pbv = float(pbv) if pbv else None
        per = float(per) if per else None
        roe = float(roe) if roe else None
        net_income = float(net_income) if net_income else None
        der = float(der) if der else None
        roa = float(roa) if roa else None
    except ValueError:
        return jsonify({'recommendation': 'Invalid input values'}), 400

    inputs = [pbv, per, roe, net_income, der, roa]
    non_empty_inputs = [val for val in inputs if val is not None]

    if pbv is not None and len(non_empty_inputs) == 1:
        recommendation = 'Beli karena nilai PBV dibawah 1x.' if pbv < 1 else 'PBV tinggi, pertimbangkan untuk tidak membeli.'
    
    elif der is not None and len(non_empty_inputs) == 1:
        recommendation = 'DER rendah, perusahaan memiliki utang yang sehat.' if der < 1 else 'DER tinggi, perusahaan mungkin berisiko tinggi.'
    elif roa is not None and len(non_empty_inputs) == 1:
        recommendation = 'ROA tinggi, menunjukkan efisiensi manajemen aset.' if roa > 5 else 'ROA rendah, perusahaan mungkin tidak efisien.'
    elif roe is not None and len(non_empty_inputs) == 1:
        recommendation = 'ROE tinggi, perusahaan menguntungkan.' if roe > 15 else 'ROE rendah, pertimbangkan risiko.'
    else:
        # Inisialisasi mesin aturan
        engine = StockRecommendationEngine()
        engine.reset()

        pb_valued = 'low' if pbv is not None and pbv < 1 else 'high' if pbv is not None else None
        per_valued = 'low' if per is not None and per < 15 else 'high' if per is not None else None
        roe_valued = 'high' if roe is not None and roe > 15 else 'low' if roe is not None else None
        net_income_valued = 'profit' if net_income is not None and net_income > 0 else 'loss' if net_income is not None else None
        der_valued = 'low' if der is not None and der < 1 else 'high' if der is not None else None
        roa_valued = 'high' if roa is not None and roa > 5 else 'low' if roa is not None else None

        # Deklarasikan fakta
        if pb_valued is not None:
            engine.declare(Fact(pb_valued=pb_valued))
        if per_valued is not None:
            engine.declare(Fact(per_valued=per_valued))
        if roe_valued is not None:
            engine.declare(Fact(roe_valued=roe_valued))
        if net_income_valued is not None:
            engine.declare(Fact(net_income_valued=net_income_valued))
        if der_valued is not None:
            engine.declare(Fact(der_valued=der_valued))
        if roa_valued is not None:
            engine.declare(Fact(roa_valued=roa_valued))

        print(f'Declared Facts: {engine.facts}')  # Debugging untuk melihat fakta yang dideklarasikan
        engine.run()

        recommendation = 'No recommendation'
        for fact in engine.facts.values():
            if 'recommendation' in fact:
                recommendation = fact['recommendation']
                break

    # Simpan hasil ke database
    new_recommendation = StockRecommendation(
        pbv=pbv,
        per=per,
        roe=roe,
        net_income=net_income,
        der=der,
        roa=roa,
        recommendation=recommendation
    )
    db.session.add(new_recommendation)
    db.session.commit()

    return jsonify({'recommendation': recommendation})



@app.route('/submit_technical', methods=['POST'])
def submit_technical():
    moving_average = request.form.get('moving_average')
    rsi = request.form.get('rsi')
    resistance = request.form.get('resistance') 
    support = request.form.get('support')         
    supply_demand = request.form.get('supply_demand')
    net_foreign_inflow = request.form.get('net_foreign_inflow')

    # Inisialisasi mesin aturan untuk analisis teknikal
    technical_engine = StockRecommendationEngine()
    technical_engine.reset()

    # Fungsi untuk aman konversi ke float
    def safe_float(value):
        try:
            return float(value)
        except (ValueError, TypeError):
            return None  # Mengembalikan None jika gagal

    # Konversi input menjadi kategori dengan validasi
    moving_average_value = safe_float(moving_average)
    rsi_value = safe_float(rsi)
    supply_demand_value = safe_float(supply_demand)
    net_foreign_inflow_value = safe_float(net_foreign_inflow)

    moving_average_valued = 'low' if moving_average_value is not None and moving_average_value < 50 else 'high'
    rsi_valued = 'low' if rsi_value is not None and rsi_value < 30 else 'high'
    supply_demand_valued = 'low' if supply_demand_value is not None and supply_demand_value < 1 else 'high'
    net_foreign_inflow_valued = 'low' if net_foreign_inflow_value is not None and net_foreign_inflow_value < 0 else 'high'

    # Evaluasi resistance dan support
    resistance_valued = 'break' if resistance in ['yes', 'Yes', 'YES'] else 'unbreak'
    
    # Hanya evaluasi support jika diisi
    if support:
        support_valued = 'break' if support in ['yes', 'Yes', 'YES'] else 'unbreak'
    else:
        support_valued = None  # Atau Anda bisa menggunakan strategi lain sesuai kebutuhan

    # Deklarasikan fakta untuk mesin aturan
    if moving_average_value is not None:
        technical_engine.declare(Fact(moving_average_valued=moving_average_valued))
    if rsi_value is not None:
        technical_engine.declare(Fact(rsi_valued=rsi_valued))
    if supply_demand_value is not None:
        technical_engine.declare(Fact(supply_demand_valued=supply_demand_valued))
    if resistance:
        technical_engine.declare(Fact(resistance=resistance_valued))
    if support_valued is not None:
        technical_engine.declare(Fact(support=support_valued))  # Hanya jika valid
    if net_foreign_inflow_value is not None:
        technical_engine.declare(Fact(net_foreign_inflow_valued=net_foreign_inflow_valued))  # Tambahkan deklarasi di sini

    technical_engine.run()  # Jalankan mesin aturan setelah semua fakta dideklarasikan

    # Ambil hasil dari mesin aturan
    recommendation = 'No recommendation'
    for fact in technical_engine.facts.values():
        if 'recommendation' in fact:
            recommendation = fact['recommendation']
            break

    # Simpan hasil ke database
    new_analysis = TechnicalAnalysis(
        moving_average=moving_average_value,  
        rsi=rsi_value,                        
        resistance=resistance_valued,       
        support=support_valued,              
        supply_demand=supply_demand_value,    
        net_foreign_inflow=net_foreign_inflow_value, 
        recommendation=recommendation
    )

    try:
        # Menambahkan ke sesi database
        db.session.add(new_analysis)
        db.session.commit()
    except Exception as e:
        db.session.rollback()  # Rollback jika terjadi kesalahan
        return jsonify({'message': 'Error saving analysis', 'error': str(e)}), 500

    return jsonify({
        'message': 'Technical analysis submitted successfully!',
        'recommendation': recommendation,
        'analysis': {
            'moving_average': moving_average_value,
            'rsi': rsi_value,
            'resistance': resistance_valued,
            'support': support_valued,
            'supply_demand': supply_demand_value,
            'net_foreign_inflow': net_foreign_inflow_value
        }
    })


@app.route('/submit_ipo', methods=['POST'])
def submit_ipo():
    underwriter = request.form.get('underwriter')
    net_income = request.form.get('net_income')
    per = request.form.get('per')
    der = request.form.get('der')
    roa = request.form.get('roa')
    roe = request.form.get('roe')
    warrant = request.form.get('warrant')

    # Inisialisasi mesin aturan untuk analisis IPO
    ipo_engine = StockRecommendationEngine()
    ipo_engine.reset()

    # Konversi input menjadi kategori hanya jika ada nilainya
    if underwriter:
        underwriter_valued = 'good' if underwriter.lower() in ['close ara', 'Close tidak ara, namun profit'] else 'bad'
        ipo_engine.declare(Fact(underwriter_valued=underwriter_valued))

    if net_income:
        net_income_valued = 'profit' if float(net_income) > 0 else 'loss'
        ipo_engine.declare(Fact(net_income_valued=net_income_valued))

    if per:
        per_valued = 'low' if float(per) < 15 else 'high'
        ipo_engine.declare(Fact(per_valued=per_valued))

    if der:
        der_valued = 'low' if float(der) < 1 else 'high'
        ipo_engine.declare(Fact(der_valued=der_valued))

    if roa:
        roa_valued = 'low' if float(roa) < 2 else 'high'
        ipo_engine.declare(Fact(roa=roa_valued))

    if roe:
        roe_valued = 'low' if float(roe) < 5 else 'high'
        ipo_engine.declare(Fact(roe=roe_valued))

    if warrant:
        warrant_valued = 'good' if warrant.lower() == 'yes' else 'bad'
        ipo_engine.declare(Fact(warrant_valued=warrant_valued))

    ipo_engine.run()

    # Ambil hasil dari mesin aturan
    recommendation = 'No recommendation'
    for fact in ipo_engine.facts.values():
        if 'recommendation' in fact:
            recommendation = fact['recommendation']
            break

    # Simpan hasil ke database dengan pengisian nilai hanya jika ada input
    new_analysis = IPOAnalysis(
        underwriter=underwriter,
        net_income=float(net_income) if net_income else None,
        per=float(per) if per else None,
        der=float(der) if der else None,
        roa=float(roa) if roa else None,
        roe=float(roe) if roe else None,
        warrant=warrant,
        recommendation=recommendation
    )
    
    db.session.add(new_analysis)
    db.session.commit()

    return jsonify({'message': 'IPO analysis submitted successfully!', 'recommendation': recommendation})



# Rute untuk menampilkan riwayat rekomendasi fundamental
@app.route('/history', methods=['GET'])
def history():
    recommendations = StockRecommendation.query.all()  # Mengambil semua entri dari tabel

    # Mencari rekomendasi dengan ROE tertinggi
    highest_roe = StockRecommendation.query.order_by(StockRecommendation.roe.desc()).first()
    
    # Mencari rekomendasi dengan PBV terendah
    lowest_pbv = StockRecommendation.query.order_by(StockRecommendation.pbv.asc()).first()
    
    # Mencari rekomendasi dengan jumlah likes terbanyak
    most_liked = StockRecommendation.query.order_by(StockRecommendation.likes.desc()).first()

    return render_template('history.html', 
                           recommendations=recommendations,
                           highest_roe=highest_roe,
                           lowest_pbv=lowest_pbv,
                           most_liked=most_liked)

# Rute untuk menampilkan riwayat analisis teknikal
@app.route('/history_technical', methods=['GET'])
def history_technical():
    analyses = TechnicalAnalysis.query.all()  # Mengambil semua entri dari tabel technical_analysis
    return render_template('history_technical.html', analyses=analyses)

# Rute untuk menampilkan riwayat analisis IPO
@app.route('/history_ipo', methods=['GET'])
def history_ipo():
    analyses = IPOAnalysis.query.all()  # Mengambil semua entri dari tabel ipo_analysis
    return render_template('history_ipo.html', analyses=analyses)

# Rute untuk menghapus data rekomendasi fundamental
@app.route('/delete/<int:id>', methods=['POST'])
def delete(id):
    recommendation = StockRecommendation.query.get_or_404(id)
    db.session.delete(recommendation)
    db.session.commit()
    return redirect('/history')

# Rute untuk menghapus data analisis teknikal
@app.route('/delete_technical/<int:id>', methods=['POST'])
def delete_technical(id):
    analysis = TechnicalAnalysis.query.get_or_404(id)
    db.session.delete(analysis)
    db.session.commit()
    return redirect('/history_technical')  # Redirect ke halaman riwayat teknikal

# Rute untuk menghapus data analisis IPO
@app.route('/delete_ipo/<int:id>', methods=['POST'])
def delete_ipo(id):
    analysis = IPOAnalysis.query.get_or_404(id)
    db.session.delete(analysis)
    db.session.commit()
    return redirect('/history_ipo')  # Redirect ke halaman riwayat IPO

if __name__ == '__main__':
    with app.app_context():
        db.create_all()  # Membuat tabel jika belum ada
    app.run(debug=True)
